op0_op1: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op0_op1.writes = 
    [   MemoryDep('buf0', c0, {c0: 2048}, None),
        MemoryDep('buf1', c0, {c0: 1048576}, None)]
op0_op1.unmet_dependencies = []
op0_op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg82_1', c1, {c0: 2048, c1: 512}, None)]
op0_op1.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op0_op1.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (2048, 512)
op0.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op0_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        mul = ops.mul(load_1, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf0', get_index_2, reduction)
        return store_reduction
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)
op0_op1.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 1048576}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 2048}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg82_1', c1, {c0: 2048, c1: 512}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf1.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (1048576, 1)
op1.sizes = ([2048, 512], [])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op1_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg82_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf0', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf1', get_index_4, mul_1, None)
        return store
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op0_op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp11 = tl.load(in_ptr2 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp13 = tmp0 + tmp12
            tmp14 = tmp0 < 0
            tmp15 = tl.where(tmp14, tmp13, tmp0)
            tl.device_assert((0 <= tmp15) & (tmp15 < 250112), "index out of bounds: 0 <= tmp15 < 250112")
            tmp17 = tl.load(in_ptr1 + (r1 + (512*tmp15)), rmask, eviction_policy='evict_last', other=0.0)
            tmp18 = 512.0
            tmp19 = tmp9 / tmp18
            tmp20 = 1e-06
            tmp21 = tmp19 + tmp20
            tmp22 = libdevice.rsqrt(tmp21)
            tmp23 = tmp17 * tmp22
            tmp24 = tmp11 * tmp23
            tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, rmask)


op2: ExternKernelSchedulerNode(ExternKernelOut)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op2.met_dependencies = [StarDep(name='arg77_1', mode=None)]
op2.outputs = [
    buf2: ExternKernelOut
    buf2.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.node.kernel = extern_kernels.mm


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op3.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 786432}, None)]
op4.unmet_dependencies = [   MemoryDep('buf2', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (786432, 1)
op4.sizes = ([16, 6, 128, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op4_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 786432}, None)]
op5.unmet_dependencies = [MemoryDep('buf3', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (786432, 1)
op5.sizes = ([16, 384, 128], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op5_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store
op5 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.bmm


op7_op8_op9_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op7_op8_op9_op11.writes = 
    [   MemoryDep('buf11', c0, {c0: 1572864}, None),
        MemoryDep('buf7', c0, {c0: 1572864}, None),
        MemoryDep('buf8', c0, {c0: 12288}, None),
        MemoryDep('buf9', c0, {c0: 12288}, None)]
op7_op8_op9_op11.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 1572864}, None)]
op7_op8_op9_op11.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op7_op8_op9_op11.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op7_op8_op9_op11.snodes[0] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 1572864}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 1572864}, None)]
op7.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.group.device = cuda:0
op7.group.iteration = (1572864, 1)
op7.sizes = ([16, 6, 128, 128], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op7_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf7', get_index_7, add_3, None)
        return store
op7 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op7_op8_op9_op11.snodes[1] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 12288}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1572864}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op8.group.device = cuda:0
op8.group.iteration = (12288, 128)
op8.sizes = ([12288], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op8_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf8', get_index_1, reduction)
        return store_reduction
op8 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op7_op8_op9_op11.snodes[2] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 12288}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 1572864}, None),
        MemoryDep('buf8', c0, {c0: 12288}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (12288, 128)
op9.sizes = ([12288], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf9_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op9_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_2, reduction)
        return store_reduction
op9 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op7_op8_op9_op11.snodes[3] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 1572864}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 1572864}, None),
        MemoryDep('buf8', c0, {c0: 12288}, None),
        MemoryDep('buf9', c0, {c0: 12288}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (1572864, 1)
op11.sizes = ([12288, 128], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf9_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf11_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op11_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf9', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf11', get_index_3, truediv, None)
        return store
op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op7_op8_op9_op11 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op10: ExternKernelSchedulerNode(ExternKernelOut)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf1', mode=None)]
op10.met_dependencies = [StarDep(name='arg79_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelOut
    buf10.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op10.node.kernel = extern_kernels.mm


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 786432}, None)]
op12.unmet_dependencies = [   MemoryDep('buf10', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (786432, 1)
op12.sizes = ([16, 6, 128, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op12_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf12', get_index_1, load, None)
        return store
op12 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf12', mode=None)]
op13.met_dependencies = []
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.bmm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 786432}, None)]
op14.unmet_dependencies = [   MemoryDep('buf13', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (786432, 1)
op14.sizes = ([16, 128, 6, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op14_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op15: ExternKernelSchedulerNode(ExternKernelOut)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelOut
    buf15.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf15.users = [
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op15.node.kernel = extern_kernels.mm


op16_op19_op17_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op16_op19_op17_op20.writes = 
    [   MemoryDep('buf16', c0, {c0: 2048}, None),
        MemoryDep('buf17', c0, {c0: 1048576}, None),
        MemoryDep('buf19', c0, {c0: 2048}, None),
        MemoryDep('buf20', c0, {c0: 1048576}, None)]
op16_op19_op17_op20.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 1048576}, None)]
op16_op19_op17_op20.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 2048, c1: 512}, None)]
op16_op19_op17_op20.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op16_op19_op17_op20.snodes[0] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 2048}, None)]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 1048576}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (2048, 512)
op16.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op16_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf16', get_index_3, reduction)
        return store_reduction
op16 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op16_op19_op17_op20.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 2048}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (2048, 512)
op19.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op19_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        mul = ops.mul(load_1, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp9 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp1 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp7 = tmp6 * tmp6
            tmp8 = tl.broadcast_to(tmp7, [XBLOCK, RBLOCK])
            tmp10 = _tmp9 + tmp8
            _tmp9 = tl.where(rmask, tmp10, _tmp9)
        tmp9 = tl.sum(_tmp9, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)
op16_op19_op17_op20.snodes[2] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 1048576}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf16', c0, {c0: 2048}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 2048, c1: 512}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1048576, 1)
op17.sizes = ([2048, 512], [])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf17_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op17_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg87_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf15', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf16', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf17', get_index_5, mul_1, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = 512.0
        tmp12 = tmp10 / tmp11
        tmp13 = 1e-06
        tmp14 = tmp12 + tmp13
        tmp15 = libdevice.rsqrt(tmp14)
        tmp16 = tmp9 * tmp15
        tmp17 = tmp0 * tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op16_op19_op17_op20.snodes[3] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1048576}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 2048}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 2048, c1: 512}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf20.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (1048576, 1)
op20.sizes = ([2048, 512], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf20_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op20_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf19', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf20', get_index_4, mul_1, None)
        return store
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op16_op19_op17_op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr2, out_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp15 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp2 = tmp0 + tmp1
            tmp3 = tmp0 < 0
            tmp4 = tl.where(tmp3, tmp2, tmp0)
            tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
            tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), rmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tmp6 + tmp7
            tmp9 = tmp8 * tmp8
            tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
            tmp12 = _tmp11 + tmp10
            _tmp11 = tl.where(rmask, tmp12, _tmp11)
            tmp13 = tmp6 * tmp6
            tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
            tmp16 = _tmp15 + tmp14
            _tmp15 = tl.where(rmask, tmp16, _tmp15)
        tmp11 = tl.sum(_tmp11, 1)[:, None]
        tmp15 = tl.sum(_tmp15, 1)[:, None]
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp17 = tl.load(in_ptr3 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp24 = tl.load(in_ptr2 + (r1 + (512*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp33 = tl.load(in_ptr4 + (r1), rmask, eviction_policy='evict_last', other=0.0)
            tmp18 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp19 = tmp0 + tmp18
            tmp20 = tmp0 < 0
            tmp21 = tl.where(tmp20, tmp19, tmp0)
            tl.device_assert((0 <= tmp21) & (tmp21 < 250112), "index out of bounds: 0 <= tmp21 < 250112")
            tmp23 = tl.load(in_ptr1 + (r1 + (512*tmp21)), rmask, eviction_policy='evict_last', other=0.0)
            tmp25 = tmp23 + tmp24
            tmp26 = 512.0
            tmp27 = tmp11 / tmp26
            tmp28 = 1e-06
            tmp29 = tmp27 + tmp28
            tmp30 = libdevice.rsqrt(tmp29)
            tmp31 = tmp25 * tmp30
            tmp32 = tmp17 * tmp31
            tmp34 = tmp15 / tmp26
            tmp35 = tmp34 + tmp28
            tmp36 = libdevice.rsqrt(tmp35)
            tmp37 = tmp23 * tmp36
            tmp38 = tmp33 * tmp37
            tl.store(out_ptr2 + (r1 + (512*x0)), tmp32, rmask)
            tl.store(out_ptr3 + (r1 + (512*x0)), tmp38, rmask)


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg2_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op22.met_dependencies = [StarDep(name='arg3_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 786432}, None)]
op23.unmet_dependencies = [   MemoryDep('buf21', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (786432, 1)
op23.sizes = ([16, 6, 128, 64], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op23_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf23', get_index_1, load, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 786432}, None)]
op24.unmet_dependencies = [MemoryDep('buf22', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (786432, 1)
op24.sizes = ([16, 384, 128], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op24_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None), StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.bmm


op26_op27_op28_op30: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op28_op30.writes = 
    [   MemoryDep('buf26', c0, {c0: 1572864}, None),
        MemoryDep('buf27', c0, {c0: 12288}, None),
        MemoryDep('buf28', c0, {c0: 12288}, None),
        MemoryDep('buf30', c0, {c0: 1572864}, None)]
op26_op27_op28_op30.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 1572864}, None)]
op26_op27_op28_op30.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op26_op27_op28_op30.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op26_op27_op28_op30.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 1572864}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 1572864}, None)]
op26.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf26.users = [
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (1572864, 1)
op26.sizes = ([16, 6, 128, 128], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op26_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf26', get_index_6, add_4, None)
        return store
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op26_op27_op28_op30.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 12288}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 1572864}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf27.users = [
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (12288, 128)
op27.sizes = ([12288], [128])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op27_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, reduction)
        return store_reduction
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op26_op27_op28_op30.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 12288}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 1572864}, None),
        MemoryDep('buf27', c0, {c0: 12288}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf28.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (12288, 128)
op28.sizes = ([12288], [128])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf28_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op28_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_2, reduction)
        return store_reduction
op28 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op26_op27_op28_op30.snodes[3] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 1572864}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf26', c0, {c0: 1572864}, None),
        MemoryDep('buf27', c0, {c0: 12288}, None),
        MemoryDep('buf28', c0, {c0: 12288}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (1572864, 1)
op30.sizes = ([12288, 128], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf28_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf30_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op30_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf30', get_index_3, truediv, None)
        return store
op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op26_op27_op28_op30 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op29.met_dependencies = [StarDep(name='arg4_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf29.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op29.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 786432}, None)]
op31.unmet_dependencies = [   MemoryDep('buf29', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op31.met_dependencies = []
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (786432, 1)
op31.sizes = ([16, 6, 128, 64], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op31_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.node.kernel = extern_kernels.bmm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 786432}, None)]
op33.unmet_dependencies = [   MemoryDep('buf32', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (786432, 1)
op33.sizes = ([16, 128, 6, 64], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op33_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf33', get_index_1, load, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op34.node.kernel = extern_kernels.mm


op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op35_op36.writes = 
    [   MemoryDep('buf35', c0, {c0: 2048}, None),
        MemoryDep('buf36', c0, {c0: 1048576}, None)]
op35_op36.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1048576}, None)]
op35_op36.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg11_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None)]
op35_op36.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op35_op36.snodes[0] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2048}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1048576}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (2048, 512)
op35.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op35_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf35', get_index_3, reduction)
        return store_reduction
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tl.store(out_ptr0 + (x0), tmp12, None)
op35_op36.snodes[1] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1048576}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf35', c0, {c0: 2048}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg11_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (1048576, 1)
op36.sizes = ([2048, 512], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf36_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op36_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf34', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf35', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf36', get_index_5, mul_1, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = 512.0
        tmp12 = tmp10 / tmp11
        tmp13 = 1e-06
        tmp14 = tmp12 + tmp13
        tmp15 = libdevice.rsqrt(tmp14)
        tmp16 = tmp9 * tmp15
        tmp17 = tmp0 * tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)
op35_op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.mm


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op38.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 2097152}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 2097152}, None),
        MemoryDep('buf38', c0, {c0: 2097152}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (2097152, 1)
op39.sizes = ([2097152], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op39_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf37', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf37', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf38', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf39', get_index_4, mul_6, None)
        return store
op39 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.mm


op41_op42: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op41_op42.writes = 
    [   MemoryDep('buf41', c0, {c0: 2048}, None),
        MemoryDep('buf42', c0, {c0: 1048576}, None)]
op41_op42.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf40', c0, {c0: 1048576}, None)]
op41_op42.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg16_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None)]
op41_op42.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf42.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op41_op42.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 2048}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf40', c0, {c0: 1048576}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf41.users = [NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (2048, 512)
op41.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op41_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        add_1 = ops.add(add, load_3)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf41', get_index_4, reduction)
        return store_reduction
op41 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)
op41_op42.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1048576}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf40', c0, {c0: 1048576}, None),
        MemoryDep('buf41', c0, {c0: 2048}, None)]
op42.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg16_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf42.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
    ]
]
op42.group.device = cuda:0
op42.group.iteration = (1048576, 1)
op42.sizes = ([2048, 512], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf42_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op42_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf34', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf40', get_index_4)
        add_1 = ops.add(add, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf41', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf42', get_index_6, mul_1, None)
        return store
op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x2), None)
        tmp12 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = tmp9 + tmp10
        tmp13 = 512.0
        tmp14 = tmp12 / tmp13
        tmp15 = 1e-06
        tmp16 = tmp14 + tmp15
        tmp17 = libdevice.rsqrt(tmp16)
        tmp18 = tmp11 * tmp17
        tmp19 = tmp0 * tmp18
        tl.store(out_ptr0 + (x2), tmp19, None)
op41_op42 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp15 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tmp16 = 512.0
        tmp17 = tmp14 / tmp16
        tmp18 = 1e-06
        tmp19 = tmp17 + tmp18
        tmp20 = libdevice.rsqrt(tmp19)
        tmp21 = tmp10 * tmp20
        tmp22 = tmp15 * tmp21
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp22, None)


op43: ExternKernelSchedulerNode(ExternKernelOut)
op43.writes = [StarDep(name='buf43', mode=None)]
op43.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op43.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op43.outputs = [
    buf43: ExternKernelOut
    buf43.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.node.kernel = extern_kernels.mm


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op44.met_dependencies = [StarDep(name='arg13_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 786432}, None)]
op45.unmet_dependencies = [   MemoryDep('buf43', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (786432, 1)
op45.sizes = ([16, 6, 128, 64], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op45_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store
op45 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 786432}, None)]
op46.unmet_dependencies = [MemoryDep('buf44', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (786432, 1)
op46.sizes = ([16, 384, 128], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op46_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf46', get_index_1, load, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf45', mode=None), StarDep(name='buf46', mode=None)]
op47.met_dependencies = []
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.bmm


op48_op49_op50_op52: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op48_op49_op50_op52.writes = 
    [   MemoryDep('buf48', c0, {c0: 1572864}, None),
        MemoryDep('buf49', c0, {c0: 12288}, None),
        MemoryDep('buf50', c0, {c0: 12288}, None),
        MemoryDep('buf52', c0, {c0: 1572864}, None)]
op48_op49_op50_op52.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1572864}, None)]
op48_op49_op50_op52.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op48_op49_op50_op52.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op48_op49_op50_op52.snodes[0] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 1572864}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 1572864}, None)]
op48.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf48.users = [
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (1572864, 1)
op48.sizes = ([16, 6, 128, 128], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op48_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf48', get_index_6, add_4, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op48_op49_op50_op52.snodes[1] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 12288}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 1572864}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
    ]
]
op49.group.device = cuda:0
op49.group.iteration = (12288, 128)
op49.sizes = ([12288], [128])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op49_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, reduction)
        return store_reduction
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op48_op49_op50_op52.snodes[2] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 12288}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 1572864}, None),
        MemoryDep('buf49', c0, {c0: 12288}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf50.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (12288, 128)
op50.sizes = ([12288], [128])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op50_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf49', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf50', get_index_2, reduction)
        return store_reduction
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op48_op49_op50_op52.snodes[3] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1572864}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 1572864}, None),
        MemoryDep('buf49', c0, {c0: 12288}, None),
        MemoryDep('buf50', c0, {c0: 12288}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1572864, 1)
op52.sizes = ([12288, 128], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf52_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op52_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf49', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf50', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf52', get_index_3, truediv, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op48_op49_op50_op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf42', mode=None)]
op51.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 786432}, None)]
op53.unmet_dependencies = [   MemoryDep('buf51', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (786432, 1)
op53.sizes = ([16, 6, 128, 64], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op53_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf53', get_index_1, load, None)
        return store
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf52', mode=None), StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.bmm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 786432}, None)]
op55.unmet_dependencies = [   MemoryDep('buf54', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (786432, 1)
op55.sizes = ([16, 128, 6, 64], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op55_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, load, None)
        return store
op55 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57_op58_op59: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op57_op58_op59.writes = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf58', c0, {c0: 2048}, None),
        MemoryDep('buf59', c0, {c0: 1048576}, None)]
op57_op58_op59.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf40', c0, {c0: 1048576}, None),
        MemoryDep('buf56', c0, {c0: 1048576}, None)]
op57_op58_op59.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg20_1', c1, {c0: 2048, c1: 512}, None)]
op57_op58_op59.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op57_op58_op59.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 1048576}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 1048576}, None),
        MemoryDep('buf40', c0, {c0: 1048576}, None),
        MemoryDep('buf56', c0, {c0: 1048576}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (1048576, 1)
op57.sizes = ([2048, 512], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op57_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf40', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf56', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf57', get_index_5, add_2, None)
        return store
op57 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 512)
        x0 = xindex % 512
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x2), None)
        tmp9 = tl.load(in_ptr3 + (x2), None)
        tmp11 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.full([XBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (x0 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tl.store(in_out_ptr0 + (x2), tmp12, None)
op57_op58_op59.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2048}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 1048576}, None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (2048, 512)
op58.sizes = ([2048], [512])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op58_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_1, reduction)
        return store_reduction
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op57_op58_op59.snodes[2] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1048576}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf58', c0, {c0: 2048}, None)]
op59.met_dependencies = [MemoryDep('arg20_1', c1, {c0: 2048, c1: 512}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf59.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (1048576, 1)
op59.sizes = ([2048, 512], [])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op59_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg20_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf58', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf59', get_index_3, mul_1, None)
        return store
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op57_op58_op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp17 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [RBLOCK])
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp14, 0))
        tmp18 = 512.0
        tmp19 = tmp16 / tmp18
        tmp20 = 1e-06
        tmp21 = tmp19 + tmp20
        tmp22 = libdevice.rsqrt(tmp21)
        tmp23 = tmp12 * tmp22
        tmp24 = tmp17 * tmp23
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp12, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, None)


op60: ExternKernelSchedulerNode(ExternKernelOut)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op60.met_dependencies = [StarDep(name='arg17_1', mode=None)]
op60.outputs = [
    buf60: ExternKernelOut
    buf60.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op60.node.kernel = extern_kernels.mm


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None)]
op61.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 2097152}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (2097152, 1)
op62.sizes = ([2097152], [])
buf60_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op62_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf60', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf60', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf60', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf61', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf62', get_index_4, mul_6, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg19_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op63.node.kernel = extern_kernels.mm


op64_op65: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op64_op65.writes = 
    [   MemoryDep('buf64', c0, {c0: 2048}, None),
        MemoryDep('buf65', c0, {c0: 1048576}, None)]
op64_op65.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None)]
op64_op65.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 2048, c1: 512}, None)]
op64_op65.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf65.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op64_op65.snodes[0] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 2048}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (2048, 512)
op64.sizes = ([2048], [512])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op64_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_2, reduction)
        return store_reduction
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op64_op65.snodes[1] =
op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1048576}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf64', c0, {c0: 2048}, None)]
op65.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 2048, c1: 512}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf65.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (1048576, 1)
op65.sizes = ([2048, 512], [])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf65_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op65_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf63', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf64', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf65', get_index_4, mul_1, None)
        return store
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op64_op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op66: ExternKernelSchedulerNode(ExternKernelOut)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelOut
    buf66.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.mm


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op67.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 786432}, None)]
op68.unmet_dependencies = [   MemoryDep('buf66', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (786432, 1)
op68.sizes = ([16, 6, 128, 64], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op68_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf68', get_index_1, load, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 786432}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (786432, 1)
op69.sizes = ([16, 384, 128], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op69_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store
op69 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None), StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.bmm


op71_op72_op73_op75: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op71_op72_op73_op75.writes = 
    [   MemoryDep('buf71', c0, {c0: 1572864}, None),
        MemoryDep('buf72', c0, {c0: 12288}, None),
        MemoryDep('buf73', c0, {c0: 12288}, None),
        MemoryDep('buf75', c0, {c0: 1572864}, None)]
op71_op72_op73_op75.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1572864}, None)]
op71_op72_op73_op75.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op71_op72_op73_op75.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op71_op72_op73_op75.snodes[0] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1572864}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1572864}, None)]
op71.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (1572864, 1)
op71.sizes = ([16, 6, 128, 128], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op71_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf71', get_index_6, add_4, None)
        return store
op71 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op71_op72_op73_op75.snodes[1] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 12288}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 1572864}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf72.users = [
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (12288, 128)
op72.sizes = ([12288], [128])
buf71_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op72_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_1, reduction)
        return store_reduction
op72 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op71_op72_op73_op75.snodes[2] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 12288}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf71', c0, {c0: 1572864}, None),
        MemoryDep('buf72', c0, {c0: 12288}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (12288, 128)
op73.sizes = ([12288], [128])
buf71_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op73_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_2, reduction)
        return store_reduction
op73 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op71_op72_op73_op75.snodes[3] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 1572864}, None)]
op75.unmet_dependencies = 
    [   MemoryDep('buf71', c0, {c0: 1572864}, None),
        MemoryDep('buf72', c0, {c0: 12288}, None),
        MemoryDep('buf73', c0, {c0: 12288}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1572864, 1)
op75.sizes = ([12288, 128], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf73_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op75_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf73', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf75', get_index_3, truediv, None)
        return store
op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op71_op72_op73_op75 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op74.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 786432}, None)]
op76.unmet_dependencies = [   MemoryDep('buf74', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (786432, 1)
op76.sizes = ([16, 6, 128, 64], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op76_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf76', get_index_1, load, None)
        return store
op76 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf75', mode=None), StarDep(name='buf76', mode=None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = extern_kernels.bmm


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 786432}, None)]
op78.unmet_dependencies = [   MemoryDep('buf77', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (786432, 1)
op78.sizes = ([16, 128, 6, 64], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op78_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf78', get_index_1, load, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op79: ExternKernelSchedulerNode(ExternKernelOut)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelOut
    buf79.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op79.node.kernel = extern_kernels.mm


op80_op81: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op80_op81.writes = 
    [   MemoryDep('buf80', c0, {c0: 2048}, None),
        MemoryDep('buf81', c0, {c0: 1048576}, None)]
op80_op81.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None)]
op80_op81.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 2048, c1: 512}, None)]
op80_op81.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op80_op81.snodes[0] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 2048}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (2048, 512)
op80.sizes = ([2048], [512])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op80_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_3, reduction)
        return store_reduction
op80 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op80_op81.snodes[1] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1048576}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf80', c0, {c0: 2048}, None)]
op81.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 2048, c1: 512}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (1048576, 1)
op81.sizes = ([2048, 512], [])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf81_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op81_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg29_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf63', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf79', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf80', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf81', get_index_5, mul_1, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op80_op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op83.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 2097152}, None),
        MemoryDep('buf83', c0, {c0: 2097152}, None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2097152, 1)
op84.sizes = ([2097152], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op84_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf82', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf82', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf83', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_6, None)
        return store
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op85.node.kernel = extern_kernels.mm


op86_op87: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op86_op87.writes = 
    [   MemoryDep('buf86', c0, {c0: 2048}, None),
        MemoryDep('buf87', c0, {c0: 1048576}, None)]
op86_op87.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf85', c0, {c0: 1048576}, None)]
op86_op87.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 2048, c1: 512}, None)]
op86_op87.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op86_op87.snodes[0] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 2048}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf85', c0, {c0: 1048576}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (2048, 512)
op86.sizes = ([2048], [512])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op86_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf85', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf86', get_index_4, reduction)
        return store_reduction
op86 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op86_op87.snodes[1] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 1048576}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf85', c0, {c0: 1048576}, None),
        MemoryDep('buf86', c0, {c0: 2048}, None)]
op87.met_dependencies = [MemoryDep('arg34_1', c1, {c0: 2048, c1: 512}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf87.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op87.group.device = cuda:0
op87.group.iteration = (1048576, 1)
op87.sizes = ([2048, 512], [])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf87_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op87_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg34_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf63', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf79', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf85', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf86', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf87', get_index_6, mul_1, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op86_op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op89.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op89.node.kernel = extern_kernels.mm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 786432}, None)]
op90.unmet_dependencies = [   MemoryDep('buf88', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (786432, 1)
op90.sizes = ([16, 6, 128, 64], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op90_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 786432}, None)]
op91.unmet_dependencies = [MemoryDep('buf89', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (786432, 1)
op91.sizes = ([16, 384, 128], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op91_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.bmm


op93_op94_op95_op97: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op93_op94_op95_op97.writes = 
    [   MemoryDep('buf93', c0, {c0: 1572864}, None),
        MemoryDep('buf94', c0, {c0: 12288}, None),
        MemoryDep('buf95', c0, {c0: 12288}, None),
        MemoryDep('buf97', c0, {c0: 1572864}, None)]
op93_op94_op95_op97.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1572864}, None)]
op93_op94_op95_op97.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op93_op94_op95_op97.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op93_op94_op95_op97.snodes[0] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1572864}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 1572864}, None)]
op93.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (1572864, 1)
op93.sizes = ([16, 6, 128, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op93_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf93', get_index_6, add_4, None)
        return store
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op93_op94_op95_op97.snodes[1] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 12288}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 1572864}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
    ]
]
op94.group.device = cuda:0
op94.group.iteration = (12288, 128)
op94.sizes = ([12288], [128])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op94_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, reduction)
        return store_reduction
op94 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op93_op94_op95_op97.snodes[2] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 12288}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 1572864}, None),
        MemoryDep('buf94', c0, {c0: 12288}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf95.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (12288, 128)
op95.sizes = ([12288], [128])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op95_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_2, reduction)
        return store_reduction
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op93_op94_op95_op97.snodes[3] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1572864}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 1572864}, None),
        MemoryDep('buf94', c0, {c0: 12288}, None),
        MemoryDep('buf95', c0, {c0: 12288}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1572864, 1)
op97.sizes = ([12288, 128], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf95_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf97_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op97_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf95', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf97', get_index_3, truediv, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op93_op94_op95_op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op96.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 786432}, None)]
op98.unmet_dependencies = [   MemoryDep('buf96', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (786432, 1)
op98.sizes = ([16, 6, 128, 64], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op98_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf98', get_index_1, load, None)
        return store
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None), StarDep(name='buf98', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.bmm


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 786432}, None)]
op100.unmet_dependencies = [   MemoryDep('buf99', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (786432, 1)
op100.sizes = ([16, 128, 6, 64], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op100_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg33_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.mm


op102_op103_op104: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op102_op103_op104.writes = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf103', c0, {c0: 2048}, None),
        MemoryDep('buf104', c0, {c0: 1048576}, None)]
op102_op103_op104.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 1048576}, None),
        MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf85', c0, {c0: 1048576}, None)]
op102_op103_op104.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 2048, c1: 512}, None)]
op102_op103_op104.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op102_op103_op104.snodes[0] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 1048576}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 1048576}, None),
        MemoryDep('buf57', c0, {c0: 1048576}, None),
        MemoryDep('buf63', c0, {c0: 1048576}, None),
        MemoryDep('buf79', c0, {c0: 1048576}, None),
        MemoryDep('buf85', c0, {c0: 1048576}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (1048576, 1)
op102.sizes = ([1048576], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op102_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf63', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf79', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf85', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf101', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf102', get_index_5, add_3, None)
        return store
op102 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op102_op103_op104.snodes[1] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 2048}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 1048576}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (2048, 512)
op103.sizes = ([2048], [512])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op103_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, reduction)
        return store_reduction
op103 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op102_op103_op104.snodes[2] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 1048576}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf103', c0, {c0: 2048}, None)]
op104.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 2048, c1: 512}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (1048576, 1)
op104.sizes = ([2048, 512], [])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf104_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op104_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg38_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf103', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf104', get_index_3, mul_1, None)
        return store
op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op102_op103_op104 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op106.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 2097152}, None)]
op107.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 2097152}, None),
        MemoryDep('buf106', c0, {c0: 2097152}, None)]
op107.met_dependencies = []
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (2097152, 1)
op107.sizes = ([2097152], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op107_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf106', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf107', get_index_4, mul_6, None)
        return store
op107 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op108: ExternKernelSchedulerNode(ExternKernelOut)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf107', mode=None)]
op108.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op108.outputs = [
    buf108: ExternKernelOut
    buf108.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf108.users = [
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op108.node.kernel = extern_kernels.mm


op109_op110: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op109_op110.writes = 
    [   MemoryDep('buf109', c0, {c0: 2048}, None),
        MemoryDep('buf110', c0, {c0: 1048576}, None)]
op109_op110.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None)]
op109_op110.met_dependencies = [MemoryDep('arg43_1', c1, {c0: 2048, c1: 512}, None)]
op109_op110.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op109_op110.snodes[0] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 2048}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (2048, 512)
op109.sizes = ([2048], [512])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op109_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_2, reduction)
        return store_reduction
op109 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op109_op110.snodes[1] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1048576}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf109', c0, {c0: 2048}, None)]
op110.met_dependencies = [MemoryDep('arg43_1', c1, {c0: 2048, c1: 512}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf110.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op110.group.device = cuda:0
op110.group.iteration = (1048576, 1)
op110.sizes = ([2048, 512], [])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf110_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op110_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg43_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf109', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf110', get_index_4, mul_1, None)
        return store
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op109_op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op112.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 786432}, None)]
op113.unmet_dependencies = [   MemoryDep('buf111', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (786432, 1)
op113.sizes = ([16, 6, 128, 64], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op113_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 786432}, None)]
op114.unmet_dependencies = [MemoryDep('buf112', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (786432, 1)
op114.sizes = ([16, 384, 128], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op114_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf114', get_index_1, load, None)
        return store
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf113', mode=None), StarDep(name='buf114', mode=None)]
op115.met_dependencies = []
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.bmm


op116_op117_op118_op120: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op116_op117_op118_op120.writes = 
    [   MemoryDep('buf116', c0, {c0: 1572864}, None),
        MemoryDep('buf117', c0, {c0: 12288}, None),
        MemoryDep('buf118', c0, {c0: 12288}, None),
        MemoryDep('buf120', c0, {c0: 1572864}, None)]
op116_op117_op118_op120.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1572864}, None)]
op116_op117_op118_op120.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op116_op117_op118_op120.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op116_op117_op118_op120.snodes[0] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 1572864}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1572864}, None)]
op116.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf116.users = [
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (1572864, 1)
op116.sizes = ([16, 6, 128, 128], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op116_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf116', get_index_6, add_4, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op116_op117_op118_op120.snodes[1] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 12288}, None)]
op117.unmet_dependencies = [MemoryDep('buf116', c0, {c0: 1572864}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (12288, 128)
op117.sizes = ([12288], [128])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op117_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, reduction)
        return store_reduction
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op116_op117_op118_op120.snodes[2] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 12288}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 1572864}, None),
        MemoryDep('buf117', c0, {c0: 12288}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf118.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (12288, 128)
op118.sizes = ([12288], [128])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf118_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op118_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf117', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_2, reduction)
        return store_reduction
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op116_op117_op118_op120.snodes[3] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 1572864}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 1572864}, None),
        MemoryDep('buf117', c0, {c0: 12288}, None),
        MemoryDep('buf118', c0, {c0: 12288}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (1572864, 1)
op120.sizes = ([12288, 128], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf118_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf120_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op120_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf117', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf118', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf120', get_index_3, truediv, None)
        return store
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op116_op117_op118_op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op119.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 786432}, None)]
op121.unmet_dependencies = [   MemoryDep('buf119', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (786432, 1)
op121.sizes = ([16, 6, 128, 64], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op121_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf121', get_index_1, load, None)
        return store
op121 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf120', mode=None), StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = extern_kernels.bmm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 786432}, None)]
op123.unmet_dependencies = [   MemoryDep('buf122', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf123.users = [NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (786432, 1)
op123.sizes = ([16, 128, 6, 64], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op123_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf123', get_index_1, load, None)
        return store
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op124: ExternKernelSchedulerNode(ExternKernelOut)
op124.writes = [StarDep(name='buf124', mode=None)]
op124.unmet_dependencies = [StarDep(name='buf123', mode=None)]
op124.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op124.outputs = [
    buf124: ExternKernelOut
    buf124.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op124.node.kernel = extern_kernels.mm


op125_op126: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op125_op126.writes = 
    [   MemoryDep('buf125', c0, {c0: 2048}, None),
        MemoryDep('buf126', c0, {c0: 1048576}, None)]
op125_op126.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None)]
op125_op126.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 2048, c1: 512}, None)]
op125_op126.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op125_op126.snodes[0] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 2048}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (2048, 512)
op125.sizes = ([2048], [512])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op125_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_3, reduction)
        return store_reduction
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op125_op126.snodes[1] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1048576}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf125', c0, {c0: 2048}, None)]
op126.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 2048, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (1048576, 1)
op126.sizes = ([2048, 512], [])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op126_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg47_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf124', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf125', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf126', get_index_5, mul_1, None)
        return store
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op125_op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op128.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2097152}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 2097152}, None),
        MemoryDep('buf128', c0, {c0: 2097152}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (2097152, 1)
op129.sizes = ([2097152], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op129_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf127', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf128', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf129', get_index_4, mul_6, None)
        return store
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf129', mode=None)]
op130.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op130.node.kernel = extern_kernels.mm


op131_op132: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op131_op132.writes = 
    [   MemoryDep('buf131', c0, {c0: 2048}, None),
        MemoryDep('buf132', c0, {c0: 1048576}, None)]
op131_op132.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf130', c0, {c0: 1048576}, None)]
op131_op132.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 2048, c1: 512}, None)]
op131_op132.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op131_op132.snodes[0] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 2048}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf130', c0, {c0: 1048576}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (2048, 512)
op131.sizes = ([2048], [512])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op131_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf130', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_4, reduction)
        return store_reduction
op131 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op131_op132.snodes[1] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 1048576}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf130', c0, {c0: 1048576}, None),
        MemoryDep('buf131', c0, {c0: 2048}, None)]
op132.met_dependencies = [MemoryDep('arg52_1', c1, {c0: 2048, c1: 512}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (1048576, 1)
op132.sizes = ([2048, 512], [])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf132_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op132_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg52_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf108', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf124', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf130', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf131', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf132', get_index_6, mul_1, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op131_op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op134.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 786432}, None)]
op135.unmet_dependencies = [   MemoryDep('buf133', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (786432, 1)
op135.sizes = ([16, 6, 128, 64], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op135_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store
op135 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 786432}, None)]
op136.unmet_dependencies = [MemoryDep('buf134', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (786432, 1)
op136.sizes = ([16, 384, 128], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op136_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store
op136 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf135', mode=None), StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.bmm


op138_op139_op140_op142: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op140_op142.writes = 
    [   MemoryDep('buf138', c0, {c0: 1572864}, None),
        MemoryDep('buf139', c0, {c0: 12288}, None),
        MemoryDep('buf140', c0, {c0: 12288}, None),
        MemoryDep('buf142', c0, {c0: 1572864}, None)]
op138_op139_op140_op142.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 1572864}, None)]
op138_op139_op140_op142.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op138_op139_op140_op142.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op138_op139_op140_op142.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1572864}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 1572864}, None)]
op138.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (1572864, 1)
op138.sizes = ([16, 6, 128, 128], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op138_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf138', get_index_6, add_4, None)
        return store
op138 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op138_op139_op140_op142.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 12288}, None)]
op139.unmet_dependencies = [MemoryDep('buf138', c0, {c0: 1572864}, None)]
op139.met_dependencies = []
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (12288, 128)
op139.sizes = ([12288], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op139_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, reduction)
        return store_reduction
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op138_op139_op140_op142.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 12288}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 1572864}, None),
        MemoryDep('buf139', c0, {c0: 12288}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf140.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (12288, 128)
op140.sizes = ([12288], [128])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op140_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_2, reduction)
        return store_reduction
op140 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op138_op139_op140_op142.snodes[3] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 1572864}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 1572864}, None),
        MemoryDep('buf139', c0, {c0: 12288}, None),
        MemoryDep('buf140', c0, {c0: 12288}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (1572864, 1)
op142.sizes = ([12288, 128], [])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op142_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf138', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf139', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf140', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf142', get_index_3, truediv, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op138_op139_op140_op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op141.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 786432}, None)]
op143.unmet_dependencies = [   MemoryDep('buf141', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (786432, 1)
op143.sizes = ([16, 6, 128, 64], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op143_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf142', mode=None), StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.bmm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 786432}, None)]
op145.unmet_dependencies = [   MemoryDep('buf144', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op145.met_dependencies = []
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (786432, 1)
op145.sizes = ([16, 128, 6, 64], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op145_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf145', get_index_1, load, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147_op148_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op147_op148_op149.writes = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf148', c0, {c0: 2048}, None),
        MemoryDep('buf149', c0, {c0: 1048576}, None)]
op147_op148_op149.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf130', c0, {c0: 1048576}, None),
        MemoryDep('buf146', c0, {c0: 1048576}, None)]
op147_op148_op149.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 2048, c1: 512}, None)]
op147_op148_op149.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op147_op148_op149.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1048576}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1048576}, None),
        MemoryDep('buf108', c0, {c0: 1048576}, None),
        MemoryDep('buf124', c0, {c0: 1048576}, None),
        MemoryDep('buf130', c0, {c0: 1048576}, None),
        MemoryDep('buf146', c0, {c0: 1048576}, None)]
op147.met_dependencies = []
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (1048576, 1)
op147.sizes = ([1048576], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op147_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf124', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf130', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf146', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_3, None)
        return store
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op147_op148_op149.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 2048}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 1048576}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (2048, 512)
op148.sizes = ([2048], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op148_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, reduction)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op147_op148_op149.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1048576}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf148', c0, {c0: 2048}, None)]
op149.met_dependencies = [MemoryDep('arg56_1', c1, {c0: 2048, c1: 512}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf149.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (1048576, 1)
op149.sizes = ([2048, 512], [])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf149_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op149_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf148', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf149', get_index_3, mul_1, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op147_op148_op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op151.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=True, is_weak=False)]
]
op151.node.kernel = extern_kernels.mm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 2097152}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 2097152}, None),
        MemoryDep('buf151', c0, {c0: 2097152}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (2097152, 1)
op152.sizes = ([2097152], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op152_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf150', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf151', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf152', get_index_4, mul_6, None)
        return store
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.mm


op154_op155: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op154_op155.writes = 
    [   MemoryDep('buf154', c0, {c0: 2048}, None),
        MemoryDep('buf155', c0, {c0: 1048576}, None)]
op154_op155.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None)]
op154_op155.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 2048, c1: 512}, None)]
op154_op155.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op154_op155.snodes[0] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 2048}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (2048, 512)
op154.sizes = ([2048], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op154_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf153', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_2, reduction)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op154_op155.snodes[1] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1048576}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf154', c0, {c0: 2048}, None)]
op155.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 2048, c1: 512}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf155.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op155.group.device = cuda:0
op155.group.iteration = (1048576, 1)
op155.sizes = ([2048, 512], [])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf155_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op155_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg61_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf153', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf154', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf155', get_index_4, mul_1, None)
        return store
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op154_op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg57_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.mm


op157: ExternKernelSchedulerNode(ExternKernelOut)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op157.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelOut
    buf157.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf157.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op157.node.kernel = extern_kernels.mm


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 786432}, None)]
op158.unmet_dependencies = [   MemoryDep('buf156', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (786432, 1)
op158.sizes = ([16, 6, 128, 64], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op158_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf158', get_index_1, load, None)
        return store
op158 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 786432}, None)]
op159.unmet_dependencies = [MemoryDep('buf157', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (786432, 1)
op159.sizes = ([16, 384, 128], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op159_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.bmm


op161_op162_op163_op165: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op161_op162_op163_op165.writes = 
    [   MemoryDep('buf161', c0, {c0: 1572864}, None),
        MemoryDep('buf162', c0, {c0: 12288}, None),
        MemoryDep('buf163', c0, {c0: 12288}, None),
        MemoryDep('buf165', c0, {c0: 1572864}, None)]
op161_op162_op163_op165.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 1572864}, None)]
op161_op162_op163_op165.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op161_op162_op163_op165.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op161_op162_op163_op165.snodes[0] =
op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 1572864}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 1572864}, None)]
op161.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=True, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (1572864, 1)
op161.sizes = ([16, 6, 128, 128], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op161_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf161', get_index_6, add_4, None)
        return store
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op161_op162_op163_op165.snodes[1] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 12288}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', c0, {c0: 1572864}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (12288, 128)
op162.sizes = ([12288], [128])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op162_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, reduction)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op161_op162_op163_op165.snodes[2] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 12288}, None)]
op163.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 1572864}, None),
        MemoryDep('buf162', c0, {c0: 12288}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf163.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (12288, 128)
op163.sizes = ([12288], [128])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op163_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_2, reduction)
        return store_reduction
op163 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op161_op162_op163_op165.snodes[3] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1572864}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 1572864}, None),
        MemoryDep('buf162', c0, {c0: 12288}, None),
        MemoryDep('buf163', c0, {c0: 12288}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1572864, 1)
op165.sizes = ([12288, 128], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf163_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf165_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op165_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf163', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf165', get_index_3, truediv, None)
        return store
op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op161_op162_op163_op165 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op164.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.mm


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 786432}, None)]
op166.unmet_dependencies = [   MemoryDep('buf164', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op166.met_dependencies = []
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (786432, 1)
op166.sizes = ([16, 6, 128, 64], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op166_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf166', get_index_1, load, None)
        return store
op166 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf165', mode=None), StarDep(name='buf166', mode=None)]
op167.met_dependencies = []
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.bmm


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 786432}, None)]
op168.unmet_dependencies = [   MemoryDep('buf167', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (786432, 1)
op168.sizes = ([16, 128, 6, 64], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op168_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf168', get_index_1, load, None)
        return store
op168 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf169.users = [
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op169.node.kernel = extern_kernels.mm


op170_op171: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op170_op171.writes = 
    [   MemoryDep('buf170', c0, {c0: 2048}, None),
        MemoryDep('buf171', c0, {c0: 1048576}, None)]
op170_op171.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None)]
op170_op171.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 2048, c1: 512}, None)]
op170_op171.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op170_op171.snodes[0] =
op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 2048}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (2048, 512)
op170.sizes = ([2048], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op170_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf153', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf170', get_index_3, reduction)
        return store_reduction
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op170_op171.snodes[1] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1048576}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf170', c0, {c0: 2048}, None)]
op171.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 2048, c1: 512}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (1048576, 1)
op171.sizes = ([2048, 512], [])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf171_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op171_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf153', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf169', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf170', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf171', get_index_5, mul_1, None)
        return store
op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op170_op171 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op172: ExternKernelSchedulerNode(ExternKernelOut)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelOut
    buf172.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op172.node.kernel = extern_kernels.mm


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op173.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 2097152}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 2097152}, None),
        MemoryDep('buf173', c0, {c0: 2097152}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (2097152, 1)
op174.sizes = ([2097152], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op174_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf172', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf172', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf173', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf174', get_index_4, mul_6, None)
        return store
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.mm


op176_op177: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op176_op177.writes = 
    [   MemoryDep('buf176', c0, {c0: 2048}, None),
        MemoryDep('buf177', c0, {c0: 1048576}, None)]
op176_op177.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf175', c0, {c0: 1048576}, None)]
op176_op177.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 2048, c1: 512}, None)]
op176_op177.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op176_op177.snodes[0] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 2048}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf175', c0, {c0: 1048576}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (2048, 512)
op176.sizes = ([2048], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op176_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf153', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf175', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_4, reduction)
        return store_reduction
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op176_op177.snodes[1] =
op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 1048576}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf175', c0, {c0: 1048576}, None),
        MemoryDep('buf176', c0, {c0: 2048}, None)]
op177.met_dependencies = [MemoryDep('arg70_1', c1, {c0: 2048, c1: 512}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf177.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False),
    ]
]
op177.group.device = cuda:0
op177.group.iteration = (1048576, 1)
op177.sizes = ([2048, 512], [])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op177_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf153', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf169', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf175', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf176', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf177', get_index_6, mul_1, None)
        return store
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op176_op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf178.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.mm


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op179.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 786432}, None)]
op180.unmet_dependencies = [   MemoryDep('buf178', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (786432, 1)
op180.sizes = ([16, 6, 128, 64], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op180_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf180', get_index_1, load, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 786432}, None)]
op181.unmet_dependencies = [MemoryDep('buf179', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (786432, 1)
op181.sizes = ([16, 384, 128], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op181_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op182: ExternKernelSchedulerNode(ExternKernelOut)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelOut
    buf182.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.bmm


op183_op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op183_op184_op185_op187.writes = 
    [   MemoryDep('buf183', c0, {c0: 1572864}, None),
        MemoryDep('buf184', c0, {c0: 12288}, None),
        MemoryDep('buf185', c0, {c0: 12288}, None),
        MemoryDep('buf187', c0, {c0: 1572864}, None)]
op183_op184_op185_op187.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 1572864}, None)]
op183_op184_op185_op187.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op183_op184_op185_op187.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op183_op184_op185_op187.snodes[0] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 1572864}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 1572864}, None)]
op183.met_dependencies = [MemoryDep('arg6_1', c1 + 6*tmp27, {c0: 16, c1: 6}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (1572864, 1)
op183.sizes = ([16, 6, 128, 128], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op183_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -z2 + z3
    index2 = Abs(z2 - z3)
    index3 = 6*indirect0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(0, torch.int64)
        gt = ops.gt(index_expr, constant)
        to_dtype = ops.to_dtype(gt, torch.int64, src_dtype = torch.bool)
        constant_1 = ops.constant(16, torch.int64)
        mul = ops.mul(to_dtype, constant_1)
        constant_2 = ops.constant(0, torch.int64)
        add = ops.add(mul, constant_2)
        get_index_2 = self.get_index('index2')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_3 = ops.constant(8, torch.int64)
        lt = ops.lt(index_expr_1, constant_3)
        get_index_3 = self.get_index('index2')
        index_expr_2 = ops.index_expr(get_index_3, torch.float32)
        constant_4 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(index_expr_2, constant_4)
        log = ops.log(mul_1)
        constant_5 = ops.constant(0.36067376022224085, torch.float32)
        mul_2 = ops.mul(log, constant_5)
        constant_6 = ops.constant(8.0, torch.float32)
        mul_3 = ops.mul(mul_2, constant_6)
        to_dtype_1 = ops.to_dtype(mul_3, torch.int64, src_dtype = torch.float32)
        constant_7 = ops.constant(8, torch.int64)
        add_1 = ops.add(to_dtype_1, constant_7)
        constant_8 = ops.constant(15, torch.int64)
        minimum = ops.minimum(add_1, constant_8)
        get_index_4 = self.get_index('index2')
        index_expr_3 = ops.index_expr(get_index_4, torch.int64)
        where = ops.where(lt, index_expr_3, minimum)
        add_2 = ops.add(add, where)
        set_indirect0 = self.set_indirect0(add_2)
        get_index_5 = self.get_index('index3')
        load_1 = ops.load('arg6_1', get_index_5)
        constant_9 = ops.constant(-0.0, torch.float32)
        add_3 = ops.add(load_1, constant_9)
        add_4 = ops.add(load, add_3)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf183', get_index_6, add_4, None)
        return store
op183 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = x0 + ((-1)*x1)
        tmp2 = tl.full([1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(x0 + ((-1)*x1))
        tmp9 = tl.full([1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x2 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tl.store(in_out_ptr0 + (x4), tmp33, None)
op183_op184_op185_op187.snodes[1] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 12288}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 1572864}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf184.users = [
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (12288, 128)
op184.sizes = ([12288], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op184_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf184', get_index_1, reduction)
        return store_reduction
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op183_op184_op185_op187.snodes[2] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 12288}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 1572864}, None),
        MemoryDep('buf184', c0, {c0: 12288}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (12288, 128)
op185.sizes = ([12288], [128])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op185_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf184', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf185', get_index_2, reduction)
        return store_reduction
op185 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op183_op184_op185_op187.snodes[3] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1572864}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf183', c0, {c0: 1572864}, None),
        MemoryDep('buf184', c0, {c0: 12288}, None),
        MemoryDep('buf185', c0, {c0: 12288}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (1572864, 1)
op187.sizes = ([12288, 128], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op187_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf184', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf185', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf187', get_index_3, truediv, None)
        return store
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op183_op184_op185_op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = r3 + ((-1)*x0)
        tmp2 = tl.full([1, 1], 0, tl.int64)
        tmp3 = tmp1 > tmp2
        tmp4 = tmp3.to(tl.int64)
        tmp5 = tl.full([1, 1], 16, tl.int64)
        tmp6 = tmp4 * tmp5
        tmp7 = tmp6 + tmp2
        tmp8 = tl_math.abs(r3 + ((-1)*x0))
        tmp9 = tl.full([1, 1], 8, tl.int64)
        tmp10 = tmp8 < tmp9
        tmp11 = tmp8.to(tl.float32)
        tmp12 = 0.125
        tmp13 = tmp11 * tmp12
        tmp14 = tl_math.log(tmp13)
        tmp15 = 0.36067376022224085
        tmp16 = tmp14 * tmp15
        tmp17 = 8.0
        tmp18 = tmp16 * tmp17
        tmp19 = tmp18.to(tl.int64)
        tmp20 = tmp19 + tmp9
        tmp21 = tl.full([1, 1], 15, tl.int64)
        tmp22 = triton_helpers.minimum(tmp20, tmp21)
        tmp23 = tl.where(tmp10, tmp8, tmp22)
        tmp24 = tmp7 + tmp23
        tmp25 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp26 = tmp24 + tmp25
        tmp27 = tmp24 < 0
        tmp28 = tl.where(tmp27, tmp26, tmp24)
        tl.device_assert((0 <= tmp28) & (tmp28 < 32), "index out of bounds: 0 <= tmp28 < 32")
        tmp30 = tl.load(in_ptr0 + (x1 + (6*tmp28)), None, eviction_policy='evict_last')
        tmp31 = -0.0
        tmp32 = tmp30 + tmp31
        tmp33 = tmp0 + tmp32
        tmp34 = tl.broadcast_to(tmp33, [XBLOCK, RBLOCK])
        tmp36 = triton_helpers.max2(tmp34, 1)[:, None]
        tmp37 = tmp33 - tmp36
        tmp38 = tl_math.exp(tmp37)
        tmp39 = tl.broadcast_to(tmp38, [XBLOCK, RBLOCK])
        tmp41 = tl.sum(tmp39, 1)[:, None]
        tmp42 = tmp38 / tmp41
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp42, None)


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op186.met_dependencies = [StarDep(name='arg68_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 786432}, None)]
op188.unmet_dependencies = [   MemoryDep('buf186', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (786432, 1)
op188.sizes = ([16, 6, 128, 64], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op188_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf188', get_index_1, load, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf187', mode=None), StarDep(name='buf188', mode=None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.node.kernel = extern_kernels.bmm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 786432}, None)]
op190.unmet_dependencies = [   MemoryDep('buf189', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (786432, 1)
op190.sizes = ([16, 128, 6, 64], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op190_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf190', get_index_1, load, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.mm


op192_op193_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op192_op193_op194.writes = 
    [   MemoryDep('buf192', c0, {c0: 1048576}, None),
        MemoryDep('buf193', c0, {c0: 2048}, None),
        MemoryDep('buf194', c0, {c0: 1048576}, None)]
op192_op193_op194.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf175', c0, {c0: 1048576}, None),
        MemoryDep('buf191', c0, {c0: 1048576}, None)]
op192_op193_op194.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 2048, c1: 512}, None)]
op192_op193_op194.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
    ]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op192_op193_op194.snodes[0] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1048576}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 1048576}, None),
        MemoryDep('buf153', c0, {c0: 1048576}, None),
        MemoryDep('buf169', c0, {c0: 1048576}, None),
        MemoryDep('buf175', c0, {c0: 1048576}, None),
        MemoryDep('buf191', c0, {c0: 1048576}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
    ]
]
op192.group.device = cuda:0
op192.group.iteration = (1048576, 1)
op192.sizes = ([1048576], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op192_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf153', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf175', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf191', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf192', get_index_5, add_3, None)
        return store
op192 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op192_op193_op194.snodes[1] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 2048}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 1048576}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (2048, 512)
op193.sizes = ([2048], [512])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op193_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, reduction)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op192_op193_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1048576}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1048576}, None),
        MemoryDep('buf193', c0, {c0: 2048}, None)]
op194.met_dependencies = [MemoryDep('arg74_1', c1, {c0: 2048, c1: 512}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op194.group.device = cuda:0
op194.group.iteration = (1048576, 1)
op194.sizes = ([2048, 512], [])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf194_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op194_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg74_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf193', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf194', get_index_3, mul_1, None)
        return store
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op192_op193_op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op196.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf196.users = [NodeUser(node=SchedulerNode(name='op197'), can_inplace=True, is_weak=False)]
]
op196.node.kernel = extern_kernels.mm


op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 2097152}, None)]
op197.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 2097152}, None),
        MemoryDep('buf196', c0, {c0: 2097152}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf197.users = [NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (2097152, 1)
op197.sizes = ([2097152], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op197_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf195', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf196', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf197', get_index_4, mul_6, None)
        return store
op197 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf198.users = [
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
    ]
]
op198.node.kernel = extern_kernels.mm


op199_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op199_op200.writes = 
    [   MemoryDep('buf199', c0, {c0: 2048}, None),
        MemoryDep('buf200', c0, {c0: 1048576}, None)]
op199_op200.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1048576}, None),
        MemoryDep('buf198', c0, {c0: 1048576}, None)]
op199_op200.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 2048, c1: 512}, None)]
op199_op200.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op199_op200.snodes[0] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 2048}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1048576}, None),
        MemoryDep('buf198', c0, {c0: 1048576}, None)]
op199.met_dependencies = []
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (2048, 512)
op199.sizes = ([2048], [512])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op199_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf198', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf199', get_index_2, reduction)
        return store_reduction
op199 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op199_op200.snodes[1] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 1048576}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf192', c0, {c0: 1048576}, None),
        MemoryDep('buf198', c0, {c0: 1048576}, None),
        MemoryDep('buf199', c0, {c0: 2048}, None)]
op200.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 2048, c1: 512}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (1048576, 1)
op200.sizes = ([2048, 512], [])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf200_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op200_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg75_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf198', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf199', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf200', get_index_4, mul_1, None)
        return store
op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op199_op200 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf201.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op201.node.kernel = extern_kernels.mm


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 786432}, None)]
op202.unmet_dependencies = [   MemoryDep('buf18', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op202.met_dependencies = []
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (786432, 1)
op202.sizes = ([16, 6, 128, 64], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op202_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf202', get_index_1, load, None)
        return store
op202 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 786432}, None)]
op203.unmet_dependencies = [MemoryDep('buf201', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (786432, 1)
op203.sizes = ([16, 384, 128], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op203_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf203', get_index_1, load, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf202', mode=None), StarDep(name='buf203', mode=None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
    ]
]
op204.node.kernel = extern_kernels.bmm


op205_op206_op208: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op205_op206_op208.writes = 
    [   MemoryDep('buf205', c0, {c0: 12288}, None),
        MemoryDep('buf206', c0, {c0: 12288}, None),
        MemoryDep('buf208', c0, {c0: 1572864}, None)]
op205_op206_op208.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 1572864}, None)]
op205_op206_op208.met_dependencies = []
op205_op206_op208.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op205_op206_op208.snodes[0] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 12288}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 1572864}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (12288, 128)
op205.sizes = ([12288], [128])
buf204_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op205_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_1, reduction)
        return store_reduction
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op205_op206_op208.snodes[1] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 12288}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 1572864}, None),
        MemoryDep('buf205', c0, {c0: 12288}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (12288, 128)
op206.sizes = ([12288], [128])
buf204_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op206_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf206', get_index_2, reduction)
        return store_reduction
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op205_op206_op208.snodes[2] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 1572864}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 1572864}, None),
        MemoryDep('buf205', c0, {c0: 12288}, None),
        MemoryDep('buf206', c0, {c0: 12288}, None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (1572864, 1)
op208.sizes = ([12288, 128], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf208_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op208_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf206', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf208', get_index_3, truediv, None)
        return store
op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op205_op206_op208 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op207.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf207.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op207.node.kernel = extern_kernels.mm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 786432}, None)]
op209.unmet_dependencies = [   MemoryDep('buf207', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (786432, 1)
op209.sizes = ([16, 6, 128, 64], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op209_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf209', get_index_1, load, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf208', mode=None), StarDep(name='buf209', mode=None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.node.kernel = extern_kernels.bmm


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 786432}, None)]
op211.unmet_dependencies = [   MemoryDep('buf210', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (786432, 1)
op211.sizes = ([16, 128, 6, 64], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op211_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf211', get_index_1, load, None)
        return store
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op212.node.kernel = extern_kernels.mm


op213_op214: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op213_op214.writes = 
    [   MemoryDep('buf213', c0, {c0: 2048}, None),
        MemoryDep('buf214', c0, {c0: 1048576}, None)]
op213_op214.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf212', c0, {c0: 1048576}, None)]
op213_op214.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg91_1', c1, {c0: 2048, c1: 512}, None)]
op213_op214.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op213_op214.snodes[0] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 2048}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf212', c0, {c0: 1048576}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (2048, 512)
op213.sizes = ([2048], [512])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op213_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        add_1 = ops.add(add, load_3)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index0')
        store_reduction = ops.store_reduction('buf213', get_index_4, reduction)
        return store_reduction
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)
op213_op214.snodes[1] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1048576}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf212', c0, {c0: 1048576}, None),
        MemoryDep('buf213', c0, {c0: 2048}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg91_1', c1, {c0: 2048, c1: 512}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf214.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op214.group.device = cuda:0
op214.group.iteration = (1048576, 1)
op214.sizes = ([2048, 512], [])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op214_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = z0
    index2 = 512*indirect0 + z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg91_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg0_1', get_index_1)
        set_indirect0 = self.set_indirect0(load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1_1', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf15', get_index_3)
        add = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf212', get_index_4)
        add_1 = ops.add(add, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('buf213', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index3')
        store = ops.store('buf214', get_index_6, mul_1, None)
        return store
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x1 = (xindex // 512)
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr3 + (x2), None)
        tmp10 = tl.load(in_ptr4 + (x2), None)
        tmp12 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp2 = tl.full([XBLOCK], 250112, tl.int32)
        tmp3 = tmp1 + tmp2
        tmp4 = tmp1 < 0
        tmp5 = tl.where(tmp4, tmp3, tmp1)
        tl.device_assert((0 <= tmp5) & (tmp5 < 250112), "index out of bounds: 0 <= tmp5 < 250112")
        tmp7 = tl.load(in_ptr2 + (x0 + (512*tmp5)), None)
        tmp9 = tmp7 + tmp8
        tmp11 = tmp9 + tmp10
        tmp13 = 512.0
        tmp14 = tmp12 / tmp13
        tmp15 = 1e-06
        tmp16 = tmp14 + tmp15
        tmp17 = libdevice.rsqrt(tmp16)
        tmp18 = tmp11 * tmp17
        tmp19 = tmp0 * tmp18
        tl.store(out_ptr0 + (x2), tmp19, None)
op213_op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp15 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp11 = tmp10 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp14 = triton_helpers.promote_to_tensor(tl.sum(tmp12, 0))
        tmp16 = 512.0
        tmp17 = tmp14 / tmp16
        tmp18 = 1e-06
        tmp19 = tmp17 + tmp18
        tmp20 = libdevice.rsqrt(tmp19)
        tmp21 = tmp10 * tmp20
        tmp22 = tmp15 * tmp21
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp22, None)


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op216.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2097152}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf215', c0, {c0: 2097152}, None),
        MemoryDep('buf216', c0, {c0: 2097152}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (2097152, 1)
op217.sizes = ([2097152], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op217_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf215', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf215', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf217', get_index_4, mul_6, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219_op220_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op219_op220_op221.writes = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf220', c0, {c0: 2048}, None),
        MemoryDep('buf221', c0, {c0: 1048576}, None)]
op219_op220_op221.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf212', c0, {c0: 1048576}, None),
        MemoryDep('buf218', c0, {c0: 1048576}, None)]
op219_op220_op221.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None),
        MemoryDep('arg96_1', c1, {c0: 2048, c1: 512}, None)]
op219_op220_op221.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op219_op220_op221.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 1048576}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 1048576}, None),
        MemoryDep('buf212', c0, {c0: 1048576}, None),
        MemoryDep('buf218', c0, {c0: 1048576}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 2048}, None),
        MemoryDep('arg1_1', c1 + 512*tmp0, {c0: 2048, c1: 512}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (1048576, 1)
op219.sizes = ([2048, 512], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[250112, 512], stride=[512, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op219_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z0
    index1 = 512*indirect0 + z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf15', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf218', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf219', get_index_5, add_2, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 512)
        x0 = xindex % 512
        x2 = xindex
        tmp0 = tl.load(in_ptr0 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x2), None)
        tmp9 = tl.load(in_ptr3 + (x2), None)
        tmp11 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.full([XBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (x0 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tl.store(in_out_ptr0 + (x2), tmp12, None)
op219_op220_op221.snodes[1] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2048}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 1048576}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (2048, 512)
op220.sizes = ([2048], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op220_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_1, reduction)
        return store_reduction
op220 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op219_op220_op221.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1048576}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf220', c0, {c0: 2048}, None)]
op221.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 2048, c1: 512}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (1048576, 1)
op221.sizes = ([2048, 512], [])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf221_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op221_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf220', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf221', get_index_3, mul_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op219_op220_op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        x0 = xindex
        r1 = rindex
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp17 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp1 = tl.full([RBLOCK], 250112, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 250112), "index out of bounds: 0 <= tmp4 < 250112")
        tmp6 = tl.load(in_ptr1 + (r1 + (512*tmp4)), None)
        tmp8 = tmp6 + tmp7
        tmp10 = tmp8 + tmp9
        tmp12 = tmp10 + tmp11
        tmp13 = tmp12 * tmp12
        tmp14 = tl.broadcast_to(tmp13, [RBLOCK])
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp14, 0))
        tmp18 = 512.0
        tmp19 = tmp16 / tmp18
        tmp20 = 1e-06
        tmp21 = tmp19 + tmp20
        tmp22 = libdevice.rsqrt(tmp21)
        tmp23 = tmp12 * tmp22
        tmp24 = tmp17 * tmp23
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp12, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp24, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op223.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op223.node.kernel = extern_kernels.mm


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 786432}, None)]
op224.unmet_dependencies = [   MemoryDep('buf222', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (786432, 1)
op224.sizes = ([16, 6, 128, 64], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op224_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf224', get_index_1, load, None)
        return store
op224 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 786432}, None)]
op225.unmet_dependencies = [MemoryDep('buf223', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (786432, 1)
op225.sizes = ([16, 384, 128], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op225_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf225', get_index_1, load, None)
        return store
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
]
op226.node.kernel = extern_kernels.bmm


op227_op228_op229_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op227_op228_op229_op231.writes = 
    [   MemoryDep('buf227', c0, {c0: 1572864}, None),
        MemoryDep('buf228', c0, {c0: 12288}, None),
        MemoryDep('buf229', c0, {c0: 12288}, None),
        MemoryDep('buf231', c0, {c0: 1572864}, None)]
op227_op228_op229_op231.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864}, None)]
op227_op228_op229_op231.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op227_op228_op229_op231.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op227_op228_op229_op231.snodes[0] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 1572864}, None)]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1572864}, None)]
op227.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (1572864, 1)
op227.sizes = ([16, 6, 128, 128], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op227_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf227', get_index_7, add_3, None)
        return store
op227 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op227_op228_op229_op231.snodes[1] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 12288}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 1572864}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (12288, 128)
op228.sizes = ([12288], [128])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op228_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf228', get_index_1, reduction)
        return store_reduction
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op227_op228_op229_op231.snodes[2] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 12288}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 1572864}, None),
        MemoryDep('buf228', c0, {c0: 12288}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf229.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (12288, 128)
op229.sizes = ([12288], [128])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf229_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op229_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_2, reduction)
        return store_reduction
op229 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op227_op228_op229_op231.snodes[3] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1572864}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 1572864}, None),
        MemoryDep('buf228', c0, {c0: 12288}, None),
        MemoryDep('buf229', c0, {c0: 12288}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (1572864, 1)
op231.sizes = ([12288, 128], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf229_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf231_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op231_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf228', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf229', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf231', get_index_3, truediv, None)
        return store
op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op227_op228_op229_op231 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op230.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op230.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 786432}, None)]
op232.unmet_dependencies = [   MemoryDep('buf230', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (786432, 1)
op232.sizes = ([16, 6, 128, 64], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op232_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.bmm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 786432}, None)]
op234.unmet_dependencies = [   MemoryDep('buf233', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (786432, 1)
op234.sizes = ([16, 128, 6, 64], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op234_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op236_op237.writes = 
    [   MemoryDep('buf236', c0, {c0: 2048}, None),
        MemoryDep('buf237', c0, {c0: 1048576}, None)]
op236_op237.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None)]
op236_op237.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 2048, c1: 512}, None)]
op236_op237.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236_op237.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 2048}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (2048, 512)
op236.sizes = ([2048], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op236_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf236', get_index_2, reduction)
        return store_reduction
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op236_op237.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1048576}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf236', c0, {c0: 2048}, None)]
op237.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 2048, c1: 512}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1048576, 1)
op237.sizes = ([2048, 512], [])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op237_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg101_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf237', get_index_4, mul_1, None)
        return store
op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op236_op237 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op238: ExternKernelSchedulerNode(ExternKernelOut)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg97_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelOut
    buf238.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = extern_kernels.mm


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op239.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf239.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 786432}, None)]
op240.unmet_dependencies = [   MemoryDep('buf238', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (786432, 1)
op240.sizes = ([16, 6, 128, 64], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op240_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf240', get_index_1, load, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 786432}, None)]
op241.unmet_dependencies = [MemoryDep('buf239', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (786432, 1)
op241.sizes = ([16, 384, 128], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op241_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf241', get_index_1, load, None)
        return store
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf240', mode=None), StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
    ]
]
op242.node.kernel = extern_kernels.bmm


op243_op244_op246: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op243_op244_op246.writes = 
    [   MemoryDep('buf243', c0, {c0: 12288}, None),
        MemoryDep('buf244', c0, {c0: 12288}, None),
        MemoryDep('buf246', c0, {c0: 1572864}, None)]
op243_op244_op246.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1572864}, None)]
op243_op244_op246.met_dependencies = []
op243_op244_op246.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
    ]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op243_op244_op246.snodes[0] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 12288}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1572864}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (12288, 128)
op243.sizes = ([12288], [128])
buf242_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op243_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf243', get_index_1, reduction)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op243_op244_op246.snodes[1] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 12288}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1572864}, None),
        MemoryDep('buf243', c0, {c0: 12288}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (12288, 128)
op244.sizes = ([12288], [128])
buf242_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op244_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_2, reduction)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op243_op244_op246.snodes[2] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 1572864}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 1572864}, None),
        MemoryDep('buf243', c0, {c0: 12288}, None),
        MemoryDep('buf244', c0, {c0: 12288}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (1572864, 1)
op246.sizes = ([12288, 128], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf244_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf246_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op246_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf243', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf244', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf246', get_index_3, truediv, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op243_op244_op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op245.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op245.node.kernel = extern_kernels.mm


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 786432}, None)]
op247.unmet_dependencies = [   MemoryDep('buf245', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (786432, 1)
op247.sizes = ([16, 6, 128, 64], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op247_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf247', get_index_1, load, None)
        return store
op247 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf246', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf248.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.node.kernel = extern_kernels.bmm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 786432}, None)]
op249.unmet_dependencies = [   MemoryDep('buf248', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op249.met_dependencies = []
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (786432, 1)
op249.sizes = ([16, 128, 6, 64], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op249_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf249', get_index_1, load, None)
        return store
op249 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op250: ExternKernelSchedulerNode(ExternKernelOut)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelOut
    buf250.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf250.users = [
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op250.node.kernel = extern_kernels.mm


op251_op252: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op251_op252.writes = 
    [   MemoryDep('buf251', c0, {c0: 2048}, None),
        MemoryDep('buf252', c0, {c0: 1048576}, None)]
op251_op252.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None)]
op251_op252.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 2048, c1: 512}, None)]
op251_op252.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op251_op252.snodes[0] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 2048}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (2048, 512)
op251.sizes = ([2048], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op251_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf251', get_index_3, reduction)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op251_op252.snodes[1] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1048576}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf251', c0, {c0: 2048}, None)]
op252.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 2048, c1: 512}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (1048576, 1)
op252.sizes = ([2048, 512], [])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf252_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op252_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg105_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf250', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf252', get_index_5, mul_1, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op251_op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf253.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op253.node.kernel = extern_kernels.mm


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op254.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 2097152}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 2097152}, None),
        MemoryDep('buf254', c0, {c0: 2097152}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (2097152, 1)
op255.sizes = ([2097152], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op255_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf253', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf254', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf255', get_index_4, mul_6, None)
        return store
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.mm


op257_op258: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op257_op258.writes = 
    [   MemoryDep('buf257', c0, {c0: 2048}, None),
        MemoryDep('buf258', c0, {c0: 1048576}, None)]
op257_op258.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf256', c0, {c0: 1048576}, None)]
op257_op258.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 2048, c1: 512}, None)]
op257_op258.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op257_op258.snodes[0] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 2048}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf256', c0, {c0: 1048576}, None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (2048, 512)
op257.sizes = ([2048], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op257_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf257', get_index_4, reduction)
        return store_reduction
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op257_op258.snodes[1] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1048576}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf256', c0, {c0: 1048576}, None),
        MemoryDep('buf257', c0, {c0: 2048}, None)]
op258.met_dependencies = [MemoryDep('arg110_1', c1, {c0: 2048, c1: 512}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf258.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (1048576, 1)
op258.sizes = ([2048, 512], [])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf258_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op258_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf219', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf235', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf250', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf256', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf257', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf258', get_index_6, mul_1, None)
        return store
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op257_op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.node.kernel = extern_kernels.mm


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op260.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf260.users = [
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 786432}, None)]
op261.unmet_dependencies = [   MemoryDep('buf259', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf261.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (786432, 1)
op261.sizes = ([16, 6, 128, 64], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op261_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf261', get_index_1, load, None)
        return store
op261 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 786432}, None)]
op262.unmet_dependencies = [MemoryDep('buf260', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op262.met_dependencies = []
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (786432, 1)
op262.sizes = ([16, 384, 128], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op262_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf262', get_index_1, load, None)
        return store
op262 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf261', mode=None), StarDep(name='buf262', mode=None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.node.kernel = extern_kernels.bmm


op264_op265_op266_op268: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op264_op265_op266_op268.writes = 
    [   MemoryDep('buf264', c0, {c0: 1572864}, None),
        MemoryDep('buf265', c0, {c0: 12288}, None),
        MemoryDep('buf266', c0, {c0: 12288}, None),
        MemoryDep('buf268', c0, {c0: 1572864}, None)]
op264_op265_op266_op268.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 1572864}, None)]
op264_op265_op266_op268.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op264_op265_op266_op268.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False),
    ]
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf266.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op264_op265_op266_op268.snodes[0] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1572864}, None)]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 1572864}, None)]
op264.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf264.users = [
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (1572864, 1)
op264.sizes = ([16, 6, 128, 128], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op264_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf264', get_index_7, add_3, None)
        return store
op264 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op264_op265_op266_op268.snodes[1] =
op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 12288}, None)]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 1572864}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf265.users = [
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op265.group.device = cuda:0
op265.group.iteration = (12288, 128)
op265.sizes = ([12288], [128])
buf264_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op265_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf265', get_index_1, reduction)
        return store_reduction
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op264_op265_op266_op268.snodes[2] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 12288}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf264', c0, {c0: 1572864}, None),
        MemoryDep('buf265', c0, {c0: 12288}, None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf266.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (12288, 128)
op266.sizes = ([12288], [128])
buf264_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf266_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op266_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf265', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf266', get_index_2, reduction)
        return store_reduction
op266 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op264_op265_op266_op268.snodes[3] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 1572864}, None)]
op268.unmet_dependencies = 
    [   MemoryDep('buf264', c0, {c0: 1572864}, None),
        MemoryDep('buf265', c0, {c0: 12288}, None),
        MemoryDep('buf266', c0, {c0: 12288}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (1572864, 1)
op268.sizes = ([12288, 128], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf266_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf268_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op268_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf265', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf266', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf268', get_index_3, truediv, None)
        return store
op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op264_op265_op266_op268 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op267.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op267.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 786432}, None)]
op269.unmet_dependencies = [   MemoryDep('buf267', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (786432, 1)
op269.sizes = ([16, 6, 128, 64], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op269_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf269', get_index_1, load, None)
        return store
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf268', mode=None), StarDep(name='buf269', mode=None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.node.kernel = extern_kernels.bmm


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 786432}, None)]
op271.unmet_dependencies = [   MemoryDep('buf270', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (786432, 1)
op271.sizes = ([16, 128, 6, 64], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op271_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273_op274_op275: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op273_op274_op275.writes = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf274', c0, {c0: 2048}, None),
        MemoryDep('buf275', c0, {c0: 1048576}, None)]
op273_op274_op275.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf256', c0, {c0: 1048576}, None),
        MemoryDep('buf272', c0, {c0: 1048576}, None)]
op273_op274_op275.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 2048, c1: 512}, None)]
op273_op274_op275.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op273_op274_op275.snodes[0] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 1048576}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 1048576}, None),
        MemoryDep('buf235', c0, {c0: 1048576}, None),
        MemoryDep('buf250', c0, {c0: 1048576}, None),
        MemoryDep('buf256', c0, {c0: 1048576}, None),
        MemoryDep('buf272', c0, {c0: 1048576}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (1048576, 1)
op273.sizes = ([1048576], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op273_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf256', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf272', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf273', get_index_5, add_3, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op273_op274_op275.snodes[1] =
op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 2048}, None)]
op274.unmet_dependencies = [MemoryDep('buf273', c0, {c0: 1048576}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (2048, 512)
op274.sizes = ([2048], [512])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op274_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf274', get_index_1, reduction)
        return store_reduction
op274 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op273_op274_op275.snodes[2] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 1048576}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf274', c0, {c0: 2048}, None)]
op275.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 2048, c1: 512}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (1048576, 1)
op275.sizes = ([2048, 512], [])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf275_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op275_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg115_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf274', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf275', get_index_3, mul_1, None)
        return store
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op273_op274_op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op276: ExternKernelSchedulerNode(ExternKernelOut)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op276.outputs = [
    buf276: ExternKernelOut
    buf276.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.node.kernel = extern_kernels.mm


op277: ExternKernelSchedulerNode(ExternKernelOut)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op277.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelOut
    buf277.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op277.node.kernel = extern_kernels.mm


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 786432}, None)]
op278.unmet_dependencies = [   MemoryDep('buf276', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (786432, 1)
op278.sizes = ([16, 6, 128, 64], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op278_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf278', get_index_1, load, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 786432}, None)]
op279.unmet_dependencies = [MemoryDep('buf277', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (786432, 1)
op279.sizes = ([16, 384, 128], [])
buf277_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op279_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.bmm


op281_op282_op284: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op281_op282_op284.writes = 
    [   MemoryDep('buf281', c0, {c0: 12288}, None),
        MemoryDep('buf282', c0, {c0: 12288}, None),
        MemoryDep('buf284', c0, {c0: 1572864}, None)]
op281_op282_op284.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 1572864}, None)]
op281_op282_op284.met_dependencies = []
op281_op282_op284.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
    ]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op281_op282_op284.snodes[0] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 12288}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 1572864}, None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (12288, 128)
op281.sizes = ([12288], [128])
buf280_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op281_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf281', get_index_1, reduction)
        return store_reduction
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op281_op282_op284.snodes[1] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 12288}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf280', c0, {c0: 1572864}, None),
        MemoryDep('buf281', c0, {c0: 12288}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (12288, 128)
op282.sizes = ([12288], [128])
buf280_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf282_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op282_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf281', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf282', get_index_2, reduction)
        return store_reduction
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op281_op282_op284.snodes[2] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1572864}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf280', c0, {c0: 1572864}, None),
        MemoryDep('buf281', c0, {c0: 12288}, None),
        MemoryDep('buf282', c0, {c0: 12288}, None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1572864, 1)
op284.sizes = ([12288, 128], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf282_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf284_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op284_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf281', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf282', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf284', get_index_3, truediv, None)
        return store
op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op281_op282_op284 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op283.met_dependencies = [StarDep(name='arg113_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 786432}, None)]
op285.unmet_dependencies = [   MemoryDep('buf283', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (786432, 1)
op285.sizes = ([16, 6, 128, 64], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op285_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf285', get_index_1, load, None)
        return store
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf284', mode=None), StarDep(name='buf285', mode=None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.bmm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 786432}, None)]
op287.unmet_dependencies = [   MemoryDep('buf286', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (786432, 1)
op287.sizes = ([16, 128, 6, 64], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op287_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf287', get_index_1, load, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op288.node.kernel = extern_kernels.mm


op289_op290: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op289_op290.writes = 
    [   MemoryDep('buf289', c0, {c0: 2048}, None),
        MemoryDep('buf290', c0, {c0: 1048576}, None)]
op289_op290.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None)]
op289_op290.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 2048, c1: 512}, None)]
op289_op290.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf290.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
    ]
]
op289_op290.snodes[0] =
op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 2048}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (2048, 512)
op289.sizes = ([2048], [512])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op289_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf289', get_index_2, reduction)
        return store_reduction
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op289_op290.snodes[1] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 1048576}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf289', c0, {c0: 2048}, None)]
op290.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 2048, c1: 512}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf290.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False),
    ]
]
op290.group.device = cuda:0
op290.group.iteration = (1048576, 1)
op290.sizes = ([2048, 512], [])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf290_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op290_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg119_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf289', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf290', get_index_4, mul_1, None)
        return store
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op289_op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op291: ExternKernelSchedulerNode(ExternKernelOut)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelOut
    buf291.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.mm


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op292.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.mm


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 2097152}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 2097152}, None),
        MemoryDep('buf292', c0, {c0: 2097152}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (2097152, 1)
op293.sizes = ([2097152], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op293_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf291', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf291', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf292', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf293', get_index_4, mul_6, None)
        return store
op293 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op294.node.kernel = extern_kernels.mm


op295_op296: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op295_op296.writes = 
    [   MemoryDep('buf295', c0, {c0: 2048}, None),
        MemoryDep('buf296', c0, {c0: 1048576}, None)]
op295_op296.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None)]
op295_op296.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 2048, c1: 512}, None)]
op295_op296.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
    ]
]
op295_op296.snodes[0] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 2048}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (2048, 512)
op295.sizes = ([2048], [512])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op295_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf295', get_index_3, reduction)
        return store_reduction
op295 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op295_op296.snodes[1] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 1048576}, None)]
op296.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf295', c0, {c0: 2048}, None)]
op296.met_dependencies = [MemoryDep('arg124_1', c1, {c0: 2048, c1: 512}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False),
    ]
]
op296.group.device = cuda:0
op296.group.iteration = (1048576, 1)
op296.sizes = ([2048, 512], [])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf296_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op296_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf294', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf295', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf296', get_index_5, mul_1, None)
        return store
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op295_op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: ExternKernelSchedulerNode(ExternKernelOut)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op298.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelOut
    buf298.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op298.node.kernel = extern_kernels.mm


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 786432}, None)]
op299.unmet_dependencies = [   MemoryDep('buf297', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (786432, 1)
op299.sizes = ([16, 6, 128, 64], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op299_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf299', get_index_1, load, None)
        return store
op299 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 786432}, None)]
op300.unmet_dependencies = [MemoryDep('buf298', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (786432, 1)
op300.sizes = ([16, 384, 128], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op300_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf300', get_index_1, load, None)
        return store
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf299', mode=None), StarDep(name='buf300', mode=None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.bmm


op302_op303_op304_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op302_op303_op304_op306.writes = 
    [   MemoryDep('buf302', c0, {c0: 1572864}, None),
        MemoryDep('buf303', c0, {c0: 12288}, None),
        MemoryDep('buf304', c0, {c0: 12288}, None),
        MemoryDep('buf306', c0, {c0: 1572864}, None)]
op302_op303_op304_op306.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 1572864}, None)]
op302_op303_op304_op306.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op302_op303_op304_op306.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf304.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op302_op303_op304_op306.snodes[0] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1572864}, None)]
op302.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 1572864}, None)]
op302.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (1572864, 1)
op302.sizes = ([16, 6, 128, 128], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op302_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf302', get_index_7, add_3, None)
        return store
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op302_op303_op304_op306.snodes[1] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 12288}, None)]
op303.unmet_dependencies = [MemoryDep('buf302', c0, {c0: 1572864}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (12288, 128)
op303.sizes = ([12288], [128])
buf302_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op303_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf303', get_index_1, reduction)
        return store_reduction
op303 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op302_op303_op304_op306.snodes[2] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 12288}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 1572864}, None),
        MemoryDep('buf303', c0, {c0: 12288}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf304.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (12288, 128)
op304.sizes = ([12288], [128])
buf302_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf304_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op304_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf303', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf304', get_index_2, reduction)
        return store_reduction
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op302_op303_op304_op306.snodes[3] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1572864}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 1572864}, None),
        MemoryDep('buf303', c0, {c0: 12288}, None),
        MemoryDep('buf304', c0, {c0: 12288}, None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (1572864, 1)
op306.sizes = ([12288, 128], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf304_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf306_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op306_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf303', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf304', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf306', get_index_3, truediv, None)
        return store
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op302_op303_op304_op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op305.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf305.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op305.node.kernel = extern_kernels.mm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 786432}, None)]
op307.unmet_dependencies = [   MemoryDep('buf305', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf307.users = [NodeUser(node=ExternKernelSchedulerNode(name='op308'), can_inplace=False, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (786432, 1)
op307.sizes = ([16, 6, 128, 64], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op307_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf307', get_index_1, load, None)
        return store
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op308: ExternKernelSchedulerNode(ExternKernelOut)
op308.writes = [StarDep(name='buf308', mode=None)]
op308.unmet_dependencies = [StarDep(name='buf306', mode=None), StarDep(name='buf307', mode=None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ExternKernelOut
    buf308.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf308.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.node.kernel = extern_kernels.bmm


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 786432}, None)]
op309.unmet_dependencies = [   MemoryDep('buf308', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op309.met_dependencies = []
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (786432, 1)
op309.sizes = ([16, 128, 6, 64], [])
buf308_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op309_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf308', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf309', get_index_1, load, None)
        return store
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op310: ExternKernelSchedulerNode(ExternKernelOut)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf309', mode=None)]
op310.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op310.outputs = [
    buf310: ExternKernelOut
    buf310.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op310.node.kernel = extern_kernels.mm


op311_op312: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op311_op312.writes = 
    [   MemoryDep('buf311', c0, {c0: 2048}, None),
        MemoryDep('buf312', c0, {c0: 1048576}, None)]
op311_op312.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf310', c0, {c0: 1048576}, None)]
op311_op312.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 2048, c1: 512}, None)]
op311_op312.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311_op312.snodes[0] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 2048}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf310', c0, {c0: 1048576}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (2048, 512)
op311.sizes = ([2048], [512])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op311_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf310', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_4, reduction)
        return store_reduction
op311 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op311_op312.snodes[1] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 1048576}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf310', c0, {c0: 1048576}, None),
        MemoryDep('buf311', c0, {c0: 2048}, None)]
op312.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 2048, c1: 512}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (1048576, 1)
op312.sizes = ([2048, 512], [])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf312_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op312_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg129_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf273', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf294', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf310', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf311', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf312', get_index_6, mul_1, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op311_op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op313.node.kernel = extern_kernels.mm


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op314.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf314.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op314.node.kernel = extern_kernels.mm


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 786432}, None)]
op315.unmet_dependencies = [   MemoryDep('buf313', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op315.met_dependencies = []
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (786432, 1)
op315.sizes = ([16, 6, 128, 64], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op315_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf315', get_index_1, load, None)
        return store
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 786432}, None)]
op316.unmet_dependencies = [MemoryDep('buf314', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (786432, 1)
op316.sizes = ([16, 384, 128], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op316_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf316', get_index_1, load, None)
        return store
op316 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf315', mode=None), StarDep(name='buf316', mode=None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False),
    ]
]
op317.node.kernel = extern_kernels.bmm


op318_op319_op321: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op318_op319_op321.writes = 
    [   MemoryDep('buf318', c0, {c0: 12288}, None),
        MemoryDep('buf319', c0, {c0: 12288}, None),
        MemoryDep('buf321', c0, {c0: 1572864}, None)]
op318_op319_op321.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1572864}, None)]
op318_op319_op321.met_dependencies = []
op318_op319_op321.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op318_op319_op321.snodes[0] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 12288}, None)]
op318.unmet_dependencies = [MemoryDep('buf317', c0, {c0: 1572864}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf318.users = [
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
    ]
]
op318.group.device = cuda:0
op318.group.iteration = (12288, 128)
op318.sizes = ([12288], [128])
buf317_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op318_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf318', get_index_1, reduction)
        return store_reduction
op318 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op318_op319_op321.snodes[1] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 12288}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1572864}, None),
        MemoryDep('buf318', c0, {c0: 12288}, None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf319.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (12288, 128)
op319.sizes = ([12288], [128])
buf317_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf319_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op319_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf318', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf319', get_index_2, reduction)
        return store_reduction
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op318_op319_op321.snodes[2] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 1572864}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 1572864}, None),
        MemoryDep('buf318', c0, {c0: 12288}, None),
        MemoryDep('buf319', c0, {c0: 12288}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (1572864, 1)
op321.sizes = ([12288, 128], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf319_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf321_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op321_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf318', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf319', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf321', get_index_3, truediv, None)
        return store
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op318_op319_op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op320.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.mm


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 786432}, None)]
op322.unmet_dependencies = [   MemoryDep('buf320', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (786432, 1)
op322.sizes = ([16, 6, 128, 64], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op322_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf322', get_index_1, load, None)
        return store
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf321', mode=None), StarDep(name='buf322', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = extern_kernels.bmm


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 786432}, None)]
op324.unmet_dependencies = [   MemoryDep('buf323', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (786432, 1)
op324.sizes = ([16, 128, 6, 64], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op324_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf324', get_index_1, load, None)
        return store
op324 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False)]
]
op325.node.kernel = extern_kernels.mm


op326_op327_op328: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op326_op327_op328.writes = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf327', c0, {c0: 2048}, None),
        MemoryDep('buf328', c0, {c0: 1048576}, None)]
op326_op327_op328.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf310', c0, {c0: 1048576}, None),
        MemoryDep('buf325', c0, {c0: 1048576}, None)]
op326_op327_op328.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 2048, c1: 512}, None)]
op326_op327_op328.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op326_op327_op328.snodes[0] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 1048576}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf273', c0, {c0: 1048576}, None),
        MemoryDep('buf288', c0, {c0: 1048576}, None),
        MemoryDep('buf294', c0, {c0: 1048576}, None),
        MemoryDep('buf310', c0, {c0: 1048576}, None),
        MemoryDep('buf325', c0, {c0: 1048576}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf326.users = [
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op326.group.device = cuda:0
op326.group.iteration = (1048576, 1)
op326.sizes = ([1048576], [])
buf273_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op326_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf288', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf310', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf325', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf326', get_index_5, add_3, None)
        return store
op326 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op326_op327_op328.snodes[1] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 2048}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 1048576}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (2048, 512)
op327.sizes = ([2048], [512])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op327_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf327', get_index_1, reduction)
        return store_reduction
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op326_op327_op328.snodes[2] =
op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 1048576}, None)]
op328.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf327', c0, {c0: 2048}, None)]
op328.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 2048, c1: 512}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (1048576, 1)
op328.sizes = ([2048, 512], [])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf328_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op328_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg133_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf327', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf328', get_index_3, mul_1, None)
        return store
op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op326_op327_op328 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op329.node.kernel = extern_kernels.mm


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op330.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.mm


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 2097152}, None)]
op331.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf330', c0, {c0: 2097152}, None)]
op331.met_dependencies = []
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (2097152, 1)
op331.sizes = ([2097152], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op331_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf329', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf329', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf330', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf331', get_index_4, mul_6, None)
        return store
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf332.users = [
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op332.node.kernel = extern_kernels.mm


op333_op334: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op333_op334.writes = 
    [   MemoryDep('buf333', c0, {c0: 2048}, None),
        MemoryDep('buf334', c0, {c0: 1048576}, None)]
op333_op334.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None)]
op333_op334.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 2048, c1: 512}, None)]
op333_op334.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf334.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
]
op333_op334.snodes[0] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 2048}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None)]
op333.met_dependencies = []
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (2048, 512)
op333.sizes = ([2048], [512])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op333_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf333', get_index_2, reduction)
        return store_reduction
op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op333_op334.snodes[1] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 1048576}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf333', c0, {c0: 2048}, None)]
op334.met_dependencies = [MemoryDep('arg138_1', c1, {c0: 2048, c1: 512}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf334.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (1048576, 1)
op334.sizes = ([2048, 512], [])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf334_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op334_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg138_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf332', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf333', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf334', get_index_4, mul_1, None)
        return store
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op333_op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op335: ExternKernelSchedulerNode(ExternKernelOut)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelOut
    buf335.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf335.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op335.node.kernel = extern_kernels.mm


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op336.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 786432}, None)]
op337.unmet_dependencies = [   MemoryDep('buf335', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (786432, 1)
op337.sizes = ([16, 6, 128, 64], [])
buf335_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op337_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf335', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf337', get_index_1, load, None)
        return store
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 786432}, None)]
op338.unmet_dependencies = [MemoryDep('buf336', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (786432, 1)
op338.sizes = ([16, 384, 128], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op338_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf338', get_index_1, load, None)
        return store
op338 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None), StarDep(name='buf338', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf339.users = [NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False)]
]
op339.node.kernel = extern_kernels.bmm


op340_op341_op342_op344: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op340_op341_op342_op344.writes = 
    [   MemoryDep('buf340', c0, {c0: 1572864}, None),
        MemoryDep('buf341', c0, {c0: 12288}, None),
        MemoryDep('buf342', c0, {c0: 12288}, None),
        MemoryDep('buf344', c0, {c0: 1572864}, None)]
op340_op341_op342_op344.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 1572864}, None)]
op340_op341_op342_op344.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op340_op341_op342_op344.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
    ]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op340_op341_op342_op344.snodes[0] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1572864}, None)]
op340.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 1572864}, None)]
op340.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (1572864, 1)
op340.sizes = ([16, 6, 128, 128], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op340_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf340', get_index_7, add_3, None)
        return store
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op340_op341_op342_op344.snodes[1] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 12288}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 1572864}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False),
    ]
]
op341.group.device = cuda:0
op341.group.iteration = (12288, 128)
op341.sizes = ([12288], [128])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op341_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf341', get_index_1, reduction)
        return store_reduction
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op340_op341_op342_op344.snodes[2] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 12288}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1572864}, None),
        MemoryDep('buf341', c0, {c0: 12288}, None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (12288, 128)
op342.sizes = ([12288], [128])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf342_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op342_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf341', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf342', get_index_2, reduction)
        return store_reduction
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op340_op341_op342_op344.snodes[3] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1572864}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 1572864}, None),
        MemoryDep('buf341', c0, {c0: 12288}, None),
        MemoryDep('buf342', c0, {c0: 12288}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (1572864, 1)
op344.sizes = ([12288, 128], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf342_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf344_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op344_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf341', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf342', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf344', get_index_3, truediv, None)
        return store
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op340_op341_op342_op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op343.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf343.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op343.node.kernel = extern_kernels.mm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 786432}, None)]
op345.unmet_dependencies = [   MemoryDep('buf343', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (786432, 1)
op345.sizes = ([16, 6, 128, 64], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op345_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf345', get_index_1, load, None)
        return store
op345 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf344', mode=None), StarDep(name='buf345', mode=None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf346.users = [NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.node.kernel = extern_kernels.bmm


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 786432}, None)]
op347.unmet_dependencies = [   MemoryDep('buf346', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (786432, 1)
op347.sizes = ([16, 128, 6, 64], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op347_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf347', get_index_1, load, None)
        return store
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf347', mode=None)]
op348.met_dependencies = [StarDep(name='arg137_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op348.node.kernel = extern_kernels.mm


op349_op350: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op349_op350.writes = 
    [   MemoryDep('buf349', c0, {c0: 2048}, None),
        MemoryDep('buf350', c0, {c0: 1048576}, None)]
op349_op350.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None)]
op349_op350.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 2048, c1: 512}, None)]
op349_op350.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op349_op350.snodes[0] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 2048}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (2048, 512)
op349.sizes = ([2048], [512])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op349_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_3, reduction)
        return store_reduction
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op349_op350.snodes[1] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 1048576}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf349', c0, {c0: 2048}, None)]
op350.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 2048, c1: 512}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (1048576, 1)
op350.sizes = ([2048, 512], [])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf350_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op350_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg143_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf332', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf348', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf349', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf350', get_index_5, mul_1, None)
        return store
op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op349_op350 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op351: ExternKernelSchedulerNode(ExternKernelOut)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op351.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op351.outputs = [
    buf351: ExternKernelOut
    buf351.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.node.kernel = extern_kernels.mm


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op352.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 786432}, None)]
op353.unmet_dependencies = [   MemoryDep('buf351', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (786432, 1)
op353.sizes = ([16, 6, 128, 64], [])
buf351_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op353_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf351', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf353', get_index_1, load, None)
        return store
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 786432}, None)]
op354.unmet_dependencies = [MemoryDep('buf352', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (786432, 1)
op354.sizes = ([16, 384, 128], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op354_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf354', get_index_1, load, None)
        return store
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.bmm


op356_op357_op359: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op356_op357_op359.writes = 
    [   MemoryDep('buf356', c0, {c0: 12288}, None),
        MemoryDep('buf357', c0, {c0: 12288}, None),
        MemoryDep('buf359', c0, {c0: 1572864}, None)]
op356_op357_op359.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 1572864}, None)]
op356_op357_op359.met_dependencies = []
op356_op357_op359.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
    ]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op356_op357_op359.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 12288}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', c0, {c0: 1572864}, None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf356.users = [
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (12288, 128)
op356.sizes = ([12288], [128])
buf355_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op356_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf356', get_index_1, reduction)
        return store_reduction
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op356_op357_op359.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 12288}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 1572864}, None),
        MemoryDep('buf356', c0, {c0: 12288}, None)]
op357.met_dependencies = []
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (12288, 128)
op357.sizes = ([12288], [128])
buf355_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf357_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op357_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf357', get_index_2, reduction)
        return store_reduction
op357 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op356_op357_op359.snodes[2] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 1572864}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf355', c0, {c0: 1572864}, None),
        MemoryDep('buf356', c0, {c0: 12288}, None),
        MemoryDep('buf357', c0, {c0: 12288}, None)]
op359.met_dependencies = []
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (1572864, 1)
op359.sizes = ([12288, 128], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf357_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf359_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op359_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf356', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf357', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf359', get_index_3, truediv, None)
        return store
op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op356_op357_op359 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op358.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf358.users = [
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op358.node.kernel = extern_kernels.mm


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 786432}, None)]
op360.unmet_dependencies = [   MemoryDep('buf358', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (786432, 1)
op360.sizes = ([16, 6, 128, 64], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op360_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf360', get_index_1, load, None)
        return store
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None), StarDep(name='buf360', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = extern_kernels.bmm


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 786432}, None)]
op362.unmet_dependencies = [   MemoryDep('buf361', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (786432, 1)
op362.sizes = ([16, 128, 6, 64], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op362_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, load, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op363: ExternKernelSchedulerNode(ExternKernelOut)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelOut
    buf363.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False),
    ]
]
op363.node.kernel = extern_kernels.mm


op364_op365: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op364_op365.writes = 
    [   MemoryDep('buf364', c0, {c0: 2048}, None),
        MemoryDep('buf365', c0, {c0: 1048576}, None)]
op364_op365.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf363', c0, {c0: 1048576}, None)]
op364_op365.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 2048, c1: 512}, None)]
op364_op365.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf365.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op364_op365.snodes[0] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 2048}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf363', c0, {c0: 1048576}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf364.users = [NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (2048, 512)
op364.sizes = ([2048], [512])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op364_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf363', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_4, reduction)
        return store_reduction
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op364_op365.snodes[1] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 1048576}, None)]
op365.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf363', c0, {c0: 1048576}, None),
        MemoryDep('buf364', c0, {c0: 2048}, None)]
op365.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 2048, c1: 512}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf365.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
    ]
]
op365.group.device = cuda:0
op365.group.iteration = (1048576, 1)
op365.sizes = ([2048, 512], [])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf365_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op365_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf326', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf332', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf348', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf363', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf364', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf365', get_index_6, mul_1, None)
        return store
op365 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op364_op365 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op366: ExternKernelSchedulerNode(ExternKernelOut)
op366.writes = [StarDep(name='buf366', mode=None)]
op366.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op366.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op366.outputs = [
    buf366: ExternKernelOut
    buf366.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf366.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op366.node.kernel = extern_kernels.mm


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf365', mode=None)]
op367.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 2097152}, None)]
op368.unmet_dependencies = 
    [   MemoryDep('buf366', c0, {c0: 2097152}, None),
        MemoryDep('buf367', c0, {c0: 2097152}, None)]
op368.met_dependencies = []
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (2097152, 1)
op368.sizes = ([2097152], [])
buf366_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op368_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf366', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf366', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf366', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf367', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf368', get_index_4, mul_6, None)
        return store
op368 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op369.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370_op371_op372: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op370_op371_op372.writes = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf371', c0, {c0: 2048}, None),
        MemoryDep('buf372', c0, {c0: 1048576}, None)]
op370_op371_op372.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf363', c0, {c0: 1048576}, None),
        MemoryDep('buf369', c0, {c0: 1048576}, None)]
op370_op371_op372.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 2048, c1: 512}, None)]
op370_op371_op372.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
    ]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf372.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
    ]
]
op370_op371_op372.snodes[0] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 1048576}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf326', c0, {c0: 1048576}, None),
        MemoryDep('buf332', c0, {c0: 1048576}, None),
        MemoryDep('buf348', c0, {c0: 1048576}, None),
        MemoryDep('buf363', c0, {c0: 1048576}, None),
        MemoryDep('buf369', c0, {c0: 1048576}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (1048576, 1)
op370.sizes = ([1048576], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op370_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf332', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf348', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf363', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf369', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf370', get_index_5, add_3, None)
        return store
op370 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op370_op371_op372.snodes[1] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 2048}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 1048576}, None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (2048, 512)
op371.sizes = ([2048], [512])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op371_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf371', get_index_1, reduction)
        return store_reduction
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op370_op371_op372.snodes[2] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 1048576}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf371', c0, {c0: 2048}, None)]
op372.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 2048, c1: 512}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf372.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
    ]
]
op372.group.device = cuda:0
op372.group.iteration = (1048576, 1)
op372.sizes = ([2048, 512], [])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf372_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op372_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg152_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf371', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf372', get_index_3, mul_1, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op370_op371_op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op373.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf373.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op373.node.kernel = extern_kernels.mm


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op374.met_dependencies = [StarDep(name='arg149_1', mode=None)]
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op374.node.kernel = extern_kernels.mm


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 786432}, None)]
op375.unmet_dependencies = [   MemoryDep('buf373', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (786432, 1)
op375.sizes = ([16, 6, 128, 64], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op375_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf375', get_index_1, load, None)
        return store
op375 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 786432}, None)]
op376.unmet_dependencies = [MemoryDep('buf374', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (786432, 1)
op376.sizes = ([16, 384, 128], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op376_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf376', get_index_1, load, None)
        return store
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf375', mode=None), StarDep(name='buf376', mode=None)]
op377.met_dependencies = []
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=True, is_weak=False)]
]
op377.node.kernel = extern_kernels.bmm


op378_op379_op380_op382: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op378_op379_op380_op382.writes = 
    [   MemoryDep('buf378', c0, {c0: 1572864}, None),
        MemoryDep('buf379', c0, {c0: 12288}, None),
        MemoryDep('buf380', c0, {c0: 12288}, None),
        MemoryDep('buf382', c0, {c0: 1572864}, None)]
op378_op379_op380_op382.unmet_dependencies = [MemoryDep('buf377', c0, {c0: 1572864}, None)]
op378_op379_op380_op382.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op378_op379_op380_op382.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False),
    ]
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
    ]
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf380.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op378_op379_op380_op382.snodes[0] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 1572864}, None)]
op378.unmet_dependencies = [MemoryDep('buf377', c0, {c0: 1572864}, None)]
op378.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf378.users = [
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=True, is_weak=False),
    ]
]
op378.group.device = cuda:0
op378.group.iteration = (1572864, 1)
op378.sizes = ([16, 6, 128, 128], [])
buf377_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op378_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf378', get_index_7, add_3, None)
        return store
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op378_op379_op380_op382.snodes[1] =
op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 12288}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', c0, {c0: 1572864}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (12288, 128)
op379.sizes = ([12288], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op379_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf379', get_index_1, reduction)
        return store_reduction
op379 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op378_op379_op380_op382.snodes[2] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 12288}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 1572864}, None),
        MemoryDep('buf379', c0, {c0: 12288}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf380.users = [NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (12288, 128)
op380.sizes = ([12288], [128])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf380_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op380_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf380', get_index_2, reduction)
        return store_reduction
op380 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op378_op379_op380_op382.snodes[3] =
op382: SchedulerNode(ComputedBuffer)
op382.writes = [MemoryDep('buf382', c0, {c0: 1572864}, None)]
op382.unmet_dependencies = 
    [   MemoryDep('buf378', c0, {c0: 1572864}, None),
        MemoryDep('buf379', c0, {c0: 12288}, None),
        MemoryDep('buf380', c0, {c0: 12288}, None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ComputedBuffer
    buf382.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf382.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op382.group.device = cuda:0
op382.group.iteration = (1572864, 1)
op382.sizes = ([12288, 128], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf380_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf382_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op382_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf379', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf380', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf382', get_index_3, truediv, None)
        return store
op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op378_op379_op380_op382 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op381: ExternKernelSchedulerNode(ExternKernelOut)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op381.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op381.outputs = [
    buf381: ExternKernelOut
    buf381.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf381.users = [
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op381.node.kernel = extern_kernels.mm


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 786432}, None)]
op383.unmet_dependencies = [   MemoryDep('buf381', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op383.met_dependencies = []
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (786432, 1)
op383.sizes = ([16, 6, 128, 64], [])
buf381_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op383_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf381', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf383', get_index_1, load, None)
        return store
op383 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf382', mode=None), StarDep(name='buf383', mode=None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf384.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op384.node.kernel = extern_kernels.bmm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 786432}, None)]
op385.unmet_dependencies = [   MemoryDep('buf384', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (786432, 1)
op385.sizes = ([16, 128, 6, 64], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op385_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf385', get_index_1, load, None)
        return store
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf386.users = [
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
    ]
]
op386.node.kernel = extern_kernels.mm


op387_op388: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op387_op388.writes = 
    [   MemoryDep('buf387', c0, {c0: 2048}, None),
        MemoryDep('buf388', c0, {c0: 1048576}, None)]
op387_op388.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None)]
op387_op388.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 2048, c1: 512}, None)]
op387_op388.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op387_op388.snodes[0] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 2048}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf387.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (2048, 512)
op387.sizes = ([2048], [512])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op387_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf386', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf387', get_index_2, reduction)
        return store_reduction
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op387_op388.snodes[1] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1048576}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf387', c0, {c0: 2048}, None)]
op388.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 2048, c1: 512}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1048576, 1)
op388.sizes = ([2048, 512], [])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf388_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op388_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg157_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf386', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf387', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf388', get_index_4, mul_1, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op387_op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op389.node.kernel = extern_kernels.mm


op390: ExternKernelSchedulerNode(ExternKernelOut)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op390.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelOut
    buf390.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf390.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op390.node.kernel = extern_kernels.mm


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 786432}, None)]
op391.unmet_dependencies = [   MemoryDep('buf389', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op391.met_dependencies = []
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (786432, 1)
op391.sizes = ([16, 6, 128, 64], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op391_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf391', get_index_1, load, None)
        return store
op391 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 786432}, None)]
op392.unmet_dependencies = [MemoryDep('buf390', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (786432, 1)
op392.sizes = ([16, 384, 128], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op392_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf392', get_index_1, load, None)
        return store
op392 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op393: ExternKernelSchedulerNode(ExternKernelOut)
op393.writes = [StarDep(name='buf393', mode=None)]
op393.unmet_dependencies = [StarDep(name='buf391', mode=None), StarDep(name='buf392', mode=None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ExternKernelOut
    buf393.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf393.users = [
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False),
    ]
]
op393.node.kernel = extern_kernels.bmm


op394_op395_op397: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op394_op395_op397.writes = 
    [   MemoryDep('buf394', c0, {c0: 12288}, None),
        MemoryDep('buf395', c0, {c0: 12288}, None),
        MemoryDep('buf397', c0, {c0: 1572864}, None)]
op394_op395_op397.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1572864}, None)]
op394_op395_op397.met_dependencies = []
op394_op395_op397.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf395.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op394_op395_op397.snodes[0] =
op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 12288}, None)]
op394.unmet_dependencies = [MemoryDep('buf393', c0, {c0: 1572864}, None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op394.group.device = cuda:0
op394.group.iteration = (12288, 128)
op394.sizes = ([12288], [128])
buf393_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op394_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf394', get_index_1, reduction)
        return store_reduction
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op394_op395_op397.snodes[1] =
op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 12288}, None)]
op395.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 1572864}, None),
        MemoryDep('buf394', c0, {c0: 12288}, None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf395.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (12288, 128)
op395.sizes = ([12288], [128])
buf393_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf395_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op395_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf394', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf395', get_index_2, reduction)
        return store_reduction
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op394_op395_op397.snodes[2] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 1572864}, None)]
op397.unmet_dependencies = 
    [   MemoryDep('buf393', c0, {c0: 1572864}, None),
        MemoryDep('buf394', c0, {c0: 12288}, None),
        MemoryDep('buf395', c0, {c0: 12288}, None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (1572864, 1)
op397.sizes = ([12288, 128], [])
buf393_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf395_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op397_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf393', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf394', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf395', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf397', get_index_3, truediv, None)
        return store
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op394_op395_op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op396.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op396.node.kernel = extern_kernels.mm


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 786432}, None)]
op398.unmet_dependencies = [   MemoryDep('buf396', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (786432, 1)
op398.sizes = ([16, 6, 128, 64], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op398_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf398', get_index_1, load, None)
        return store
op398 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op399: ExternKernelSchedulerNode(ExternKernelOut)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf397', mode=None), StarDep(name='buf398', mode=None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ExternKernelOut
    buf399.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.node.kernel = extern_kernels.bmm


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 786432}, None)]
op400.unmet_dependencies = [   MemoryDep('buf399', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf400.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (786432, 1)
op400.sizes = ([16, 128, 6, 64], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op400_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf400', get_index_1, load, None)
        return store
op400 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf401.users = [
        NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
    ]
]
op401.node.kernel = extern_kernels.mm


op402_op403: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op402_op403.writes = 
    [   MemoryDep('buf402', c0, {c0: 2048}, None),
        MemoryDep('buf403', c0, {c0: 1048576}, None)]
op402_op403.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None)]
op402_op403.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 2048, c1: 512}, None)]
op402_op403.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
    ]
]
op402_op403.snodes[0] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 2048}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (2048, 512)
op402.sizes = ([2048], [512])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op402_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf386', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf401', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf402', get_index_3, reduction)
        return store_reduction
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op402_op403.snodes[1] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 1048576}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf402', c0, {c0: 2048}, None)]
op403.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 2048, c1: 512}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf403.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op405'), can_inplace=False, is_weak=False),
    ]
]
op403.group.device = cuda:0
op403.group.iteration = (1048576, 1)
op403.sizes = ([2048, 512], [])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf403_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op403_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf386', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf401', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf402', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf403', get_index_5, mul_1, None)
        return store
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op402_op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op404: ExternKernelSchedulerNode(ExternKernelOut)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelOut
    buf404.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf404.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op404.node.kernel = extern_kernels.mm


op405: ExternKernelSchedulerNode(ExternKernelOut)
op405.writes = [StarDep(name='buf405', mode=None)]
op405.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op405.met_dependencies = [StarDep(name='arg159_1', mode=None)]
op405.outputs = [
    buf405: ExternKernelOut
    buf405.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf405.users = [NodeUser(node=SchedulerNode(name='op406'), can_inplace=True, is_weak=False)]
]
op405.node.kernel = extern_kernels.mm


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 2097152}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf404', c0, {c0: 2097152}, None),
        MemoryDep('buf405', c0, {c0: 2097152}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (2097152, 1)
op406.sizes = ([2097152], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf406_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op406_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf404', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf404', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf405', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf406', get_index_4, mul_6, None)
        return store
op406 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op407: ExternKernelSchedulerNode(ExternKernelOut)
op407.writes = [StarDep(name='buf407', mode=None)]
op407.unmet_dependencies = [StarDep(name='buf406', mode=None)]
op407.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op407.outputs = [
    buf407: ExternKernelOut
    buf407.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf407.users = [
        NodeUser(node=SchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
    ]
]
op407.node.kernel = extern_kernels.mm


op408_op409: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op408_op409.writes = 
    [   MemoryDep('buf408', c0, {c0: 2048}, None),
        MemoryDep('buf409', c0, {c0: 1048576}, None)]
op408_op409.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf407', c0, {c0: 1048576}, None)]
op408_op409.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 2048, c1: 512}, None)]
op408_op409.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf409.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
    ]
]
op408_op409.snodes[0] =
op408: SchedulerNode(ComputedBuffer)
op408.writes = [MemoryDep('buf408', c0, {c0: 2048}, None)]
op408.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf407', c0, {c0: 1048576}, None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ComputedBuffer
    buf408.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.group.device = cuda:0
op408.group.iteration = (2048, 512)
op408.sizes = ([2048], [512])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op408_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf386', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf401', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf407', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf408', get_index_4, reduction)
        return store_reduction
op408 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op408_op409.snodes[1] =
op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 1048576}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf407', c0, {c0: 1048576}, None),
        MemoryDep('buf408', c0, {c0: 2048}, None)]
op409.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 2048, c1: 512}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf409.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op418'), can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (1048576, 1)
op409.sizes = ([2048, 512], [])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf409_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op409_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg166_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf370', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf386', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf401', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf407', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf408', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf409', get_index_6, mul_1, None)
        return store
op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op408_op409 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op410.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf410.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op410.node.kernel = extern_kernels.mm


op411: ExternKernelSchedulerNode(ExternKernelOut)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op411.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op411.outputs = [
    buf411: ExternKernelOut
    buf411.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op411.node.kernel = extern_kernels.mm


op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 786432}, None)]
op412.unmet_dependencies = [   MemoryDep('buf410', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf412.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (786432, 1)
op412.sizes = ([16, 6, 128, 64], [])
buf410_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op412_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf410', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf412', get_index_1, load, None)
        return store
op412 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 786432}, None)]
op413.unmet_dependencies = [MemoryDep('buf411', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (786432, 1)
op413.sizes = ([16, 384, 128], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op413_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf413', get_index_1, load, None)
        return store
op413 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op414: ExternKernelSchedulerNode(ExternKernelOut)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf412', mode=None), StarDep(name='buf413', mode=None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ExternKernelOut
    buf414.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf414.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False)]
]
op414.node.kernel = extern_kernels.bmm


op415_op416_op417_op419: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op415_op416_op417_op419.writes = 
    [   MemoryDep('buf415', c0, {c0: 1572864}, None),
        MemoryDep('buf416', c0, {c0: 12288}, None),
        MemoryDep('buf417', c0, {c0: 12288}, None),
        MemoryDep('buf419', c0, {c0: 1572864}, None)]
op415_op416_op417_op419.unmet_dependencies = [MemoryDep('buf414', c0, {c0: 1572864}, None)]
op415_op416_op417_op419.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op415_op416_op417_op419.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf415.users = [
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False),
    ]
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
    ]
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf417.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op415_op416_op417_op419.snodes[0] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 1572864}, None)]
op415.unmet_dependencies = [MemoryDep('buf414', c0, {c0: 1572864}, None)]
op415.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf415.users = [
        NodeUser(node=SchedulerNode(name='op416'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=True, is_weak=False),
    ]
]
op415.group.device = cuda:0
op415.group.iteration = (1572864, 1)
op415.sizes = ([16, 6, 128, 128], [])
buf414_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op415_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf414', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf415', get_index_7, add_3, None)
        return store
op415 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op415_op416_op417_op419.snodes[1] =
op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 12288}, None)]
op416.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 1572864}, None)]
op416.met_dependencies = []
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False),
    ]
]
op416.group.device = cuda:0
op416.group.iteration = (12288, 128)
op416.sizes = ([12288], [128])
buf415_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op416_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf416', get_index_1, reduction)
        return store_reduction
op416 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op415_op416_op417_op419.snodes[2] =
op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 12288}, None)]
op417.unmet_dependencies = 
    [   MemoryDep('buf415', c0, {c0: 1572864}, None),
        MemoryDep('buf416', c0, {c0: 12288}, None)]
op417.met_dependencies = []
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf417.users = [NodeUser(node=SchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (12288, 128)
op417.sizes = ([12288], [128])
buf415_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf417_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op417_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf416', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf417', get_index_2, reduction)
        return store_reduction
op417 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op415_op416_op417_op419.snodes[3] =
op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', c0, {c0: 1572864}, None)]
op419.unmet_dependencies = 
    [   MemoryDep('buf415', c0, {c0: 1572864}, None),
        MemoryDep('buf416', c0, {c0: 12288}, None),
        MemoryDep('buf417', c0, {c0: 12288}, None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (1572864, 1)
op419.sizes = ([12288, 128], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf417_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf419_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op419_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf416', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf417', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf419', get_index_3, truediv, None)
        return store
op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op415_op416_op417_op419 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op418: ExternKernelSchedulerNode(ExternKernelOut)
op418.writes = [StarDep(name='buf418', mode=None)]
op418.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op418.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op418.outputs = [
    buf418: ExternKernelOut
    buf418.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf418.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op418.node.kernel = extern_kernels.mm


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 786432}, None)]
op420.unmet_dependencies = [   MemoryDep('buf418', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (786432, 1)
op420.sizes = ([16, 6, 128, 64], [])
buf418_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op420_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf418', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf420', get_index_1, load, None)
        return store
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op421: ExternKernelSchedulerNode(ExternKernelOut)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf419', mode=None), StarDep(name='buf420', mode=None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ExternKernelOut
    buf421.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf421.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False)]
]
op421.node.kernel = extern_kernels.bmm


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 786432}, None)]
op422.unmet_dependencies = [   MemoryDep('buf421', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (786432, 1)
op422.sizes = ([16, 128, 6, 64], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op422_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf422', get_index_1, load, None)
        return store
op422 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf422', mode=None)]
op423.met_dependencies = [StarDep(name='arg165_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf423.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False)]
]
op423.node.kernel = extern_kernels.mm


op424_op425_op426: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op424_op425_op426.writes = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf425', c0, {c0: 2048}, None),
        MemoryDep('buf426', c0, {c0: 1048576}, None)]
op424_op425_op426.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf407', c0, {c0: 1048576}, None),
        MemoryDep('buf423', c0, {c0: 1048576}, None)]
op424_op425_op426.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 2048, c1: 512}, None)]
op424_op425_op426.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
    ]
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op424_op425_op426.snodes[0] =
op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 1048576}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 1048576}, None),
        MemoryDep('buf386', c0, {c0: 1048576}, None),
        MemoryDep('buf401', c0, {c0: 1048576}, None),
        MemoryDep('buf407', c0, {c0: 1048576}, None),
        MemoryDep('buf423', c0, {c0: 1048576}, None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf424.users = [
        NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
    ]
]
op424.group.device = cuda:0
op424.group.iteration = (1048576, 1)
op424.sizes = ([1048576], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op424_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf386', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf401', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf407', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf423', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf424', get_index_5, add_3, None)
        return store
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op424_op425_op426.snodes[1] =
op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', c0, {c0: 2048}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', c0, {c0: 1048576}, None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.group.device = cuda:0
op425.group.iteration = (2048, 512)
op425.sizes = ([2048], [512])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op425_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf425', get_index_1, reduction)
        return store_reduction
op425 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op424_op425_op426.snodes[2] =
op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 1048576}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf425', c0, {c0: 2048}, None)]
op426.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 2048, c1: 512}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (1048576, 1)
op426.sizes = ([2048, 512], [])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf425_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf426_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op426_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg171_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf425', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf426', get_index_3, mul_1, None)
        return store
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op424_op425_op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op428.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op428.node.kernel = extern_kernels.mm


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 786432}, None)]
op429.unmet_dependencies = [   MemoryDep('buf427', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf429.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (786432, 1)
op429.sizes = ([16, 6, 128, 64], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op429_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf429', get_index_1, load, None)
        return store
op429 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 786432}, None)]
op430.unmet_dependencies = [MemoryDep('buf428', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf430.users = [NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (786432, 1)
op430.sizes = ([16, 384, 128], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op430_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf430', get_index_1, load, None)
        return store
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf429', mode=None), StarDep(name='buf430', mode=None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
]
op431.node.kernel = extern_kernels.bmm


op432_op433_op435: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op432_op433_op435.writes = 
    [   MemoryDep('buf432', c0, {c0: 12288}, None),
        MemoryDep('buf433', c0, {c0: 12288}, None),
        MemoryDep('buf435', c0, {c0: 1572864}, None)]
op432_op433_op435.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 1572864}, None)]
op432_op433_op435.met_dependencies = []
op432_op433_op435.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf433.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op432_op433_op435.snodes[0] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 12288}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 1572864}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf432.users = [
        NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False),
    ]
]
op432.group.device = cuda:0
op432.group.iteration = (12288, 128)
op432.sizes = ([12288], [128])
buf431_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op432_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf432', get_index_1, reduction)
        return store_reduction
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op432_op433_op435.snodes[1] =
op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 12288}, None)]
op433.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 1572864}, None),
        MemoryDep('buf432', c0, {c0: 12288}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf433.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (12288, 128)
op433.sizes = ([12288], [128])
buf431_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf433_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op433_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf432', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf433', get_index_2, reduction)
        return store_reduction
op433 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op432_op433_op435.snodes[2] =
op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 1572864}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf431', c0, {c0: 1572864}, None),
        MemoryDep('buf432', c0, {c0: 12288}, None),
        MemoryDep('buf433', c0, {c0: 12288}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (1572864, 1)
op435.sizes = ([12288, 128], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf433_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf435_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op435_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf432', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf433', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf435', get_index_3, truediv, None)
        return store
op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op432_op433_op435 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op434: ExternKernelSchedulerNode(ExternKernelOut)
op434.writes = [StarDep(name='buf434', mode=None)]
op434.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op434.met_dependencies = [StarDep(name='arg169_1', mode=None)]
op434.outputs = [
    buf434: ExternKernelOut
    buf434.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf434.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op434.node.kernel = extern_kernels.mm


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 786432}, None)]
op436.unmet_dependencies = [   MemoryDep('buf434', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf436.users = [NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (786432, 1)
op436.sizes = ([16, 6, 128, 64], [])
buf434_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op436_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf436', get_index_1, load, None)
        return store
op436 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf435', mode=None), StarDep(name='buf436', mode=None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op437.node.kernel = extern_kernels.bmm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 786432}, None)]
op438.unmet_dependencies = [   MemoryDep('buf437', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf438.users = [NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (786432, 1)
op438.sizes = ([16, 128, 6, 64], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op438_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf438', get_index_1, load, None)
        return store
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf439.users = [
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
    ]
]
op439.node.kernel = extern_kernels.mm


op440_op441: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op440_op441.writes = 
    [   MemoryDep('buf440', c0, {c0: 2048}, None),
        MemoryDep('buf441', c0, {c0: 1048576}, None)]
op440_op441.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None)]
op440_op441.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 2048, c1: 512}, None)]
op440_op441.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf440.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf441.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
    ]
]
op440_op441.snodes[0] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 2048}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf440.users = [NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (2048, 512)
op440.sizes = ([2048], [512])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op440_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf440', get_index_2, reduction)
        return store_reduction
op440 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op440_op441.snodes[1] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 1048576}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf440', c0, {c0: 2048}, None)]
op441.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 2048, c1: 512}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf441.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
    ]
]
op441.group.device = cuda:0
op441.group.iteration = (1048576, 1)
op441.sizes = ([2048, 512], [])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf441_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op441_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg175_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf439', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf440', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf441', get_index_4, mul_1, None)
        return store
op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op440_op441 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op442: ExternKernelSchedulerNode(ExternKernelOut)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op442.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op442.outputs = [
    buf442: ExternKernelOut
    buf442.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf442.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op442.node.kernel = extern_kernels.mm


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf441', mode=None)]
op443.met_dependencies = [StarDep(name='arg173_1', mode=None)]
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf443.users = [NodeUser(node=SchedulerNode(name='op444'), can_inplace=True, is_weak=False)]
]
op443.node.kernel = extern_kernels.mm


op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', c0, {c0: 2097152}, None)]
op444.unmet_dependencies = 
    [   MemoryDep('buf442', c0, {c0: 2097152}, None),
        MemoryDep('buf443', c0, {c0: 2097152}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf444.users = [NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (2097152, 1)
op444.sizes = ([2097152], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf444_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op444_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf442', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf442', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf443', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf444', get_index_4, mul_6, None)
        return store
op444 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op445: ExternKernelSchedulerNode(ExternKernelOut)
op445.writes = [StarDep(name='buf445', mode=None)]
op445.unmet_dependencies = [StarDep(name='buf444', mode=None)]
op445.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op445.outputs = [
    buf445: ExternKernelOut
    buf445.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
    ]
]
op445.node.kernel = extern_kernels.mm


op446_op447: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op446_op447.writes = 
    [   MemoryDep('buf446', c0, {c0: 2048}, None),
        MemoryDep('buf447', c0, {c0: 1048576}, None)]
op446_op447.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None)]
op446_op447.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 2048, c1: 512}, None)]
op446_op447.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]
op446_op447.snodes[0] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 2048}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (2048, 512)
op446.sizes = ([2048], [512])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op446_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf445', get_index_2)
        add_1 = ops.add(add, load_2)
        mul = ops.mul(add_1, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf446', get_index_3, reduction)
        return store_reduction
op446 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tl.store(out_ptr0 + (x0), tmp8, None)
op446_op447.snodes[1] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', c0, {c0: 1048576}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf446', c0, {c0: 2048}, None)]
op447.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 2048, c1: 512}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf447.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False),
    ]
]
op447.group.device = cuda:0
op447.group.iteration = (1048576, 1)
op447.sizes = ([2048, 512], [])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf447_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op447_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg180_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf439', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf445', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf446', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(add_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_5 = self.get_index('index1')
        store = ops.store('buf447', get_index_5, mul_1, None)
        return store
op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = 512.0
        tmp8 = tmp6 / tmp7
        tmp9 = 1e-06
        tmp10 = tmp8 + tmp9
        tmp11 = libdevice.rsqrt(tmp10)
        tmp12 = tmp5 * tmp11
        tmp13 = tmp0 * tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)
op446_op447 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp9 = tl.load(in_ptr3 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tmp4 * tmp4
        tmp6 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp10 = 512.0
        tmp11 = tmp8 / tmp10
        tmp12 = 1e-06
        tmp13 = tmp11 + tmp12
        tmp14 = libdevice.rsqrt(tmp13)
        tmp15 = tmp4 * tmp14
        tmp16 = tmp9 * tmp15
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp16, None)


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op448.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf448.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op448.node.kernel = extern_kernels.mm


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op449.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf449.users = [
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op449.node.kernel = extern_kernels.mm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 786432}, None)]
op450.unmet_dependencies = [   MemoryDep('buf448', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (786432, 1)
op450.sizes = ([16, 6, 128, 64], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op450_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf450', get_index_1, load, None)
        return store
op450 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 786432}, None)]
op451.unmet_dependencies = [MemoryDep('buf449', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (786432, 1)
op451.sizes = ([16, 384, 128], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op451_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf451', get_index_1, load, None)
        return store
op451 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op452: ExternKernelSchedulerNode(ExternKernelOut)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf450', mode=None), StarDep(name='buf451', mode=None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: ExternKernelOut
    buf452.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False)]
]
op452.node.kernel = extern_kernels.bmm


op453_op454_op455_op457: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op453_op454_op455_op457.writes = 
    [   MemoryDep('buf453', c0, {c0: 1572864}, None),
        MemoryDep('buf454', c0, {c0: 12288}, None),
        MemoryDep('buf455', c0, {c0: 12288}, None),
        MemoryDep('buf457', c0, {c0: 1572864}, None)]
op453_op454_op455_op457.unmet_dependencies = [MemoryDep('buf452', c0, {c0: 1572864}, None)]
op453_op454_op455_op457.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op453_op454_op455_op457.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
    ]
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf455.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op453_op454_op455_op457.snodes[0] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 1572864}, None)]
op453.unmet_dependencies = [MemoryDep('buf452', c0, {c0: 1572864}, None)]
op453.met_dependencies = [MemoryDep('arg81_1', c1 + 6*tmp20, {c0: 16, c1: 6}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf453.users = [
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (1572864, 1)
op453.sizes = ([16, 6, 128, 128], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[32, 6], stride=[6, 1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op453_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 128}
    index0 = 98304*z0 + 16384*z1 + 128*z2 + z3
    index1 = -Min(0, -z2 + z3)
    index2 = 6*indirect0 + z1
    index3 = z3
    index4 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_2 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_2, torch.float32)
        constant_1 = ops.constant(0.0625, torch.float32)
        mul = ops.mul(index_expr_1, constant_1)
        log = ops.log(mul)
        constant_2 = ops.constant(0.48089834696298783, torch.float32)
        mul_1 = ops.mul(log, constant_2)
        constant_3 = ops.constant(16.0, torch.float32)
        mul_2 = ops.mul(mul_1, constant_3)
        to_dtype = ops.to_dtype(mul_2, torch.int64, src_dtype = torch.float32)
        constant_4 = ops.constant(16, torch.int64)
        add = ops.add(to_dtype, constant_4)
        constant_5 = ops.constant(31, torch.int64)
        minimum = ops.minimum(add, constant_5)
        get_index_3 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_3, torch.int64)
        where = ops.where(lt, index_expr_2, minimum)
        constant_6 = ops.constant(0, torch.int64)
        add_1 = ops.add(where, constant_6)
        set_indirect0 = self.set_indirect0(add_1)
        get_index_4 = self.get_index('index2')
        load_1 = ops.load('arg81_1', get_index_4)
        get_index_5 = self.get_index('index3')
        index_expr_3 = ops.index_expr(get_index_5, torch.int64)
        get_index_6 = self.get_index('index4')
        index_expr_4 = ops.index_expr(get_index_6, torch.int64)
        le = ops.le(index_expr_3, index_expr_4)
        to_dtype_1 = ops.to_dtype(le, torch.float32, src_dtype = torch.bool)
        constant_7 = ops.constant(1.0, torch.float32)
        sub = ops.sub(constant_7, to_dtype_1)
        constant_8 = ops.constant(-3.4028234663852886e+38, torch.float32)
        mul_3 = ops.mul(sub, constant_8)
        add_2 = ops.add(load_1, mul_3)
        add_3 = ops.add(load, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf453', get_index_7, add_3, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 128
        x2 = (xindex // 16384) % 6
        tmp0 = tl.load(in_out_ptr0 + (x4), None)
        tmp1 = (-1)*((0) * ((0) <= (x0 + ((-1)*x1))) + (x0 + ((-1)*x1)) * ((x0 + ((-1)*x1)) < (0)))
        tmp2 = tl.full([1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x2 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = x0
        tmp26 = x1
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tl.store(in_out_ptr0 + (x4), tmp34, None)
op453_op454_op455_op457.snodes[1] =
op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 12288}, None)]
op454.unmet_dependencies = [MemoryDep('buf453', c0, {c0: 1572864}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf454.users = [
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (12288, 128)
op454.sizes = ([12288], [128])
buf453_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op454_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf454', get_index_1, reduction)
        return store_reduction
op454 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op453_op454_op455_op457.snodes[2] =
op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 12288}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf453', c0, {c0: 1572864}, None),
        MemoryDep('buf454', c0, {c0: 12288}, None)]
op455.met_dependencies = []
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf455.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (12288, 128)
op455.sizes = ([12288], [128])
buf453_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op455_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf454', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf455', get_index_2, reduction)
        return store_reduction
op455 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op453_op454_op455_op457.snodes[3] =
op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 1572864}, None)]
op457.unmet_dependencies = 
    [   MemoryDep('buf453', c0, {c0: 1572864}, None),
        MemoryDep('buf454', c0, {c0: 12288}, None),
        MemoryDep('buf455', c0, {c0: 12288}, None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (1572864, 1)
op457.sizes = ([12288, 128], [])
buf453_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf455_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf457_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op457_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf454', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf455', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf457', get_index_3, truediv, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op453_op454_op455_op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r3 = rindex
        x4 = xindex
        x0 = xindex % 128
        x1 = (xindex // 128) % 6
        tmp0 = tl.load(in_out_ptr0 + (r3 + (128*x4)), None)
        tmp1 = (-1)*((0) * ((0) <= (r3 + ((-1)*x0))) + (r3 + ((-1)*x0)) * ((r3 + ((-1)*x0)) < (0)))
        tmp2 = tl.full([1, 1], 16, tl.int64)
        tmp3 = tmp1 < tmp2
        tmp4 = tmp1.to(tl.float32)
        tmp5 = 0.0625
        tmp6 = tmp4 * tmp5
        tmp7 = tl_math.log(tmp6)
        tmp8 = 0.48089834696298783
        tmp9 = tmp7 * tmp8
        tmp10 = 16.0
        tmp11 = tmp9 * tmp10
        tmp12 = tmp11.to(tl.int64)
        tmp13 = tmp12 + tmp2
        tmp14 = tl.full([1, 1], 31, tl.int64)
        tmp15 = triton_helpers.minimum(tmp13, tmp14)
        tmp16 = tl.where(tmp3, tmp1, tmp15)
        tmp17 = tl.full([1, 1], 0, tl.int64)
        tmp18 = tmp16 + tmp17
        tmp19 = tl.full([XBLOCK, RBLOCK], 32, tl.int32)
        tmp20 = tmp18 + tmp19
        tmp21 = tmp18 < 0
        tmp22 = tl.where(tmp21, tmp20, tmp18)
        tl.device_assert((0 <= tmp22) & (tmp22 < 32), "index out of bounds: 0 <= tmp22 < 32")
        tmp24 = tl.load(in_ptr0 + (x1 + (6*tmp22)), None, eviction_policy='evict_last')
        tmp25 = r3
        tmp26 = x0
        tmp27 = tmp25 <= tmp26
        tmp28 = tmp27.to(tl.float32)
        tmp29 = 1.0
        tmp30 = tmp29 - tmp28
        tmp31 = -3.4028234663852886e+38
        tmp32 = tmp30 * tmp31
        tmp33 = tmp24 + tmp32
        tmp34 = tmp0 + tmp33
        tmp35 = tl.broadcast_to(tmp34, [XBLOCK, RBLOCK])
        tmp37 = triton_helpers.max2(tmp35, 1)[:, None]
        tmp38 = tmp34 - tmp37
        tmp39 = tl_math.exp(tmp38)
        tmp40 = tl.broadcast_to(tmp39, [XBLOCK, RBLOCK])
        tmp42 = tl.sum(tmp40, 1)[:, None]
        tmp43 = tmp39 / tmp42
        tl.store(out_ptr2 + (r3 + (128*x4)), tmp43, None)


op456: ExternKernelSchedulerNode(ExternKernelOut)
op456.writes = [StarDep(name='buf456', mode=None)]
op456.unmet_dependencies = [StarDep(name='buf447', mode=None)]
op456.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op456.outputs = [
    buf456: ExternKernelOut
    buf456.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf456.users = [
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op456.node.kernel = extern_kernels.mm


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 786432}, None)]
op458.unmet_dependencies = [   MemoryDep('buf456', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf458.users = [NodeUser(node=ExternKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (786432, 1)
op458.sizes = ([16, 6, 128, 64], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op458_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf458', get_index_1, load, None)
        return store
op458 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op459: ExternKernelSchedulerNode(ExternKernelOut)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = [StarDep(name='buf457', mode=None), StarDep(name='buf458', mode=None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ExternKernelOut
    buf459.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf459.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.node.kernel = extern_kernels.bmm


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 786432}, None)]
op460.unmet_dependencies = [   MemoryDep('buf459', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (786432, 1)
op460.sizes = ([16, 128, 6, 64], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op460_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf460', get_index_1, load, None)
        return store
op460 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf461.users = [
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False),
    ]
]
op461.node.kernel = extern_kernels.mm


op462_op463: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op462_op463.writes = 
    [   MemoryDep('buf462', c0, {c0: 2048}, None),
        MemoryDep('buf463', c0, {c0: 1048576}, None)]
op462_op463.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf461', c0, {c0: 1048576}, None)]
op462_op463.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2048, c1: 512}, None)]
op462_op463.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op462_op463.snodes[0] =
op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 2048}, None)]
op462.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf461', c0, {c0: 1048576}, None)]
op462.met_dependencies = []
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (2048, 512)
op462.sizes = ([2048], [512])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op462_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf445', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf461', get_index_3)
        add_2 = ops.add(add_1, load_3)
        mul = ops.mul(add_2, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_4 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf462', get_index_4, reduction)
        return store_reduction
op462 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 4, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)
op462_op463.snodes[1] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 1048576}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf461', c0, {c0: 1048576}, None),
        MemoryDep('buf462', c0, {c0: 2048}, None)]
op463.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2048, c1: 512}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (1048576, 1)
op463.sizes = ([2048, 512], [])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf463_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op463_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg185_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf424', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf439', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf445', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('buf461', get_index_4)
        add_2 = ops.add(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf462', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(add_2, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_6 = self.get_index('index1')
        store = ops.store('buf463', get_index_6, mul_1, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x2), None)
        tmp6 = tl.load(in_ptr4 + (x2), None)
        tmp8 = tl.load(in_ptr5 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 + tmp6
        tmp9 = 512.0
        tmp10 = tmp8 / tmp9
        tmp11 = 1e-06
        tmp12 = tmp10 + tmp11
        tmp13 = libdevice.rsqrt(tmp12)
        tmp14 = tmp7 * tmp13
        tmp15 = tmp0 * tmp14
        tl.store(out_ptr0 + (x2), tmp15, None)
op462_op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 5, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp11 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp7 = tmp6 * tmp6
        tmp8 = tl.broadcast_to(tmp7, [RBLOCK])
        tmp10 = triton_helpers.promote_to_tensor(tl.sum(tmp8, 0))
        tmp12 = 512.0
        tmp13 = tmp10 / tmp12
        tmp14 = 1e-06
        tmp15 = tmp13 + tmp14
        tmp16 = libdevice.rsqrt(tmp15)
        tmp17 = tmp6 * tmp16
        tmp18 = tmp11 * tmp17
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp18, None)


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf464.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op464.node.kernel = extern_kernels.mm


op465: ExternKernelSchedulerNode(ExternKernelOut)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op465.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op465.outputs = [
    buf465: ExternKernelOut
    buf465.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf465.users = [
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op465.node.kernel = extern_kernels.mm


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 786432}, None)]
op466.unmet_dependencies = [   MemoryDep('buf464', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op466.met_dependencies = []
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf466.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (786432, 1)
op466.sizes = ([16, 6, 128, 64], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op466_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf466', get_index_1, load, None)
        return store
op466 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 786432}, None)]
op467.unmet_dependencies = [MemoryDep('buf465', 49152*c0 + c1 + 384*c2, {c0: 16, c1: 384, c2: 128}, None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (786432, 1)
op467.sizes = ([16, 384, 128], [])
buf465_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 64, 128], stride=[49152, 8192, 128, 1])
class op467_loop_body:
    var_ranges = {z0: 16, z1: 384, z2: 128}
    index0 = 49152*z0 + z1 + 384*z2
    index1 = 49152*z0 + 128*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf465', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf467', get_index_1, load, None)
        return store
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8192, 128], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6144
        xnumel = 128
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 384
        y1 = (yindex // 384)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (384*x2) + (49152*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (128*y3)), tmp0, xmask)


op468: ExternKernelSchedulerNode(ExternKernelOut)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf466', mode=None), StarDep(name='buf467', mode=None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ExternKernelOut
    buf468.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
    buf468.users = [
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
    ]
]
op468.node.kernel = extern_kernels.bmm


op469_op470_op472: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op469_op470_op472.writes = 
    [   MemoryDep('buf469', c0, {c0: 12288}, None),
        MemoryDep('buf470', c0, {c0: 12288}, None),
        MemoryDep('buf472', c0, {c0: 1572864}, None)]
op469_op470_op472.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 1572864}, None)]
op469_op470_op472.met_dependencies = []
op469_op470_op472.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
    ]
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf470.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op469_op470_op472.snodes[0] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 12288}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 1572864}, None)]
op469.met_dependencies = []
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
    ]
]
op469.group.device = cuda:0
op469.group.iteration = (12288, 128)
op469.sizes = ([12288], [128])
buf468_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op469_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf469', get_index_1, reduction)
        return store_reduction
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp3, None)
op469_op470_op472.snodes[1] =
op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 12288}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf468', c0, {c0: 1572864}, None),
        MemoryDep('buf469', c0, {c0: 12288}, None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
    buf470.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (12288, 128)
op470.sizes = ([12288], [128])
buf468_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf470_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
class op470_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf469', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf470', get_index_2, reduction)
        return store_reduction
op470 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.sum(tmp4, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)
op469_op470_op472.snodes[2] =
op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 1572864}, None)]
op472.unmet_dependencies = 
    [   MemoryDep('buf468', c0, {c0: 1572864}, None),
        MemoryDep('buf469', c0, {c0: 12288}, None),
        MemoryDep('buf470', c0, {c0: 12288}, None)]
op472.met_dependencies = []
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (1572864, 1)
op472.sizes = ([12288, 128], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 128], stride=[16384, 128, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf470_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 1], stride=[768, 128, 1, 12288])
buf472_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 128], stride=[98304, 16384, 128, 1])
class op472_loop_body:
    var_ranges = {z0: 12288, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf469', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf470', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf472', get_index_3, truediv, None)
        return store
op472 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1572864
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 128)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp4 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp5 = tmp3 / tmp4
        tl.store(out_ptr0 + (x2), tmp5, None)
op469_op470_op472 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 12288
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = triton_helpers.max2(tmp1, 1)[:, None]
        tmp4 = tmp0 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.sum(tmp6, 1)[:, None]
        tmp9 = tmp5 / tmp8
        tl.store(out_ptr2 + (r1 + (128*x0)), tmp9, None)


op471: ExternKernelSchedulerNode(ExternKernelOut)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op471.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op471.outputs = [
    buf471: ExternKernelOut
    buf471.layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
    buf471.users = [
        NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op471.node.kernel = extern_kernels.mm


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', c0, {c0: 786432}, None)]
op473.unmet_dependencies = [   MemoryDep('buf471', 49152*c0 + 64*c1 + 384*c2 + c3, {c0: 16, c1: 6, c2: 128, c3: 64}, None)]
op473.met_dependencies = []
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
    buf473.users = [NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op473.group.device = cuda:0
op473.group.iteration = (786432, 1)
op473.sizes = ([16, 6, 128, 64], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[2048, 384], stride=[384, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[16, 6, 128, 64], stride=[49152, 8192, 64, 1])
class op473_loop_body:
    var_ranges = {z0: 16, z1: 6, z2: 128, z3: 64}
    index0 = 49152*z0 + 64*z1 + 384*z2 + z3
    index1 = 49152*z0 + 8192*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf473', get_index_1, load, None)
        return store
op473 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 128
        x2 = (xindex // 8192) % 6
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (384*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op474: ExternKernelSchedulerNode(ExternKernelOut)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf472', mode=None), StarDep(name='buf473', mode=None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: ExternKernelOut
    buf474.layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
    buf474.users = [NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op474.node.kernel = extern_kernels.bmm


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 786432}, None)]
op475.unmet_dependencies = [   MemoryDep('buf474', 49152*c0 + 64*c1 + 8192*c2 + c3, {c0: 16, c1: 128, c2: 6, c3: 64}, None)]
op475.met_dependencies = []
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (786432, 1)
op475.sizes = ([16, 128, 6, 64], [])
buf474_layout = FixedLayout('cuda', torch.float32, size=[96, 128, 64], stride=[8192, 64, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 6, 64], stride=[49152, 384, 64, 1])
class op475_loop_body:
    var_ranges = {z0: 16, z1: 128, z2: 6, z3: 64}
    index0 = 49152*z0 + 64*z1 + 8192*z2 + z3
    index1 = 49152*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf474', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf475', get_index_1, load, None)
        return store
op475 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 786432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 64
        x1 = (xindex // 64) % 6
        x2 = (xindex // 384) % 128
        x3 = (xindex // 49152)
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x0 + (64*x2) + (8192*x1) + (49152*x3)), None)
        tl.store(out_ptr0 + (x4), tmp0, None)


op476: ExternKernelSchedulerNode(ExternKernelOut)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf475', mode=None)]
op476.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op476.outputs = [
    buf476: ExternKernelOut
    buf476.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf476.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=True, is_weak=False)]
]
op476.node.kernel = extern_kernels.mm


op477_op478_op479: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op477_op478_op479.writes = 
    [   MemoryDep('buf477', c0, {c0: 1048576}, None),
        MemoryDep('buf478', c0, {c0: 2048}, None),
        MemoryDep('buf479', c0, {c0: 1048576}, None)]
op477_op478_op479.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf461', c0, {c0: 1048576}, None),
        MemoryDep('buf476', c0, {c0: 1048576}, None)]
op477_op478_op479.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2048, c1: 512}, None)]
op477_op478_op479.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf477.users = [
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
    ]
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf478.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf479.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False),
    ]
]
op477_op478_op479.snodes[0] =
op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 1048576}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf424', c0, {c0: 1048576}, None),
        MemoryDep('buf439', c0, {c0: 1048576}, None),
        MemoryDep('buf445', c0, {c0: 1048576}, None),
        MemoryDep('buf461', c0, {c0: 1048576}, None),
        MemoryDep('buf476', c0, {c0: 1048576}, None)]
op477.met_dependencies = []
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf477.users = [
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
    ]
]
op477.group.device = cuda:0
op477.group.iteration = (1048576, 1)
op477.sizes = ([1048576], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op477_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf439', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf445', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf461', get_index_3)
        add_2 = ops.add(add_1, load_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf476', get_index_4)
        add_3 = ops.add(add_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf477', get_index_5, add_3, None)
        return store
op477 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (x0), None)
        tmp1 = tl.load(in_ptr1 + (x0), None)
        tmp3 = tl.load(in_ptr2 + (x0), None)
        tmp5 = tl.load(in_ptr3 + (x0), None)
        tmp7 = tl.load(in_out_ptr0 + (x0), None)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x0), tmp8, None)
op477_op478_op479.snodes[1] =
op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 2048}, None)]
op478.unmet_dependencies = [MemoryDep('buf477', c0, {c0: 1048576}, None)]
op478.met_dependencies = []
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf478.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (2048, 512)
op478.sizes = ([2048], [512])
buf477_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op478_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        mul = ops.mul(load, load)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf478', get_index_1, reduction)
        return store_reduction
op478 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tmp0 * tmp0
        tmp2 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp4 = triton_helpers.promote_to_tensor(tl.sum(tmp2, 0))
        tl.store(out_ptr0 + (x0), tmp4, None)
op477_op478_op479.snodes[2] =
op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 1048576}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 1048576}, None),
        MemoryDep('buf478', c0, {c0: 2048}, None)]
op479.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2048, c1: 512}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf479.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False),
    ]
]
op479.group.device = cuda:0
op479.group.iteration = (1048576, 1)
op479.sizes = ([2048, 512], [])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf479_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op479_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg189_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf477', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf478', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(load_1, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_3 = self.get_index('index1')
        store = ops.store('buf479', get_index_3, mul_1, None)
        return store
op479 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp3 = 512.0
        tmp4 = tmp2 / tmp3
        tmp5 = 1e-06
        tmp6 = tmp4 + tmp5
        tmp7 = libdevice.rsqrt(tmp6)
        tmp8 = tmp1 * tmp7
        tmp9 = tmp0 * tmp8
        tl.store(out_ptr0 + (x2), tmp9, None)
op477_op478_op479 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': True, 'num_load': 6, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp3 = tl.load(in_ptr2 + (r1 + (512*x0)), None)
        tmp5 = tl.load(in_ptr3 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_out_ptr0 + (r1 + (512*x0)), None)
        tmp13 = tl.load(in_ptr4 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 + tmp5
        tmp8 = tmp6 + tmp7
        tmp9 = tmp8 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [RBLOCK])
        tmp12 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp14 = 512.0
        tmp15 = tmp12 / tmp14
        tmp16 = 1e-06
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp8 * tmp18
        tmp20 = tmp13 * tmp19
        tl.store(in_out_ptr0 + (r1 + (512*x0)), tmp8, None)
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp20, None)


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op480.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op480.node.kernel = extern_kernels.mm


op481: ExternKernelSchedulerNode(ExternKernelOut)
op481.writes = [StarDep(name='buf481', mode=None)]
op481.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op481.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op481.outputs = [
    buf481: ExternKernelOut
    buf481.layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op481.node.kernel = extern_kernels.mm


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 2097152}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf480', c0, {c0: 2097152}, None),
        MemoryDep('buf481', c0, {c0: 2097152}, None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (2097152, 1)
op482.sizes = ([2097152], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[2048, 1024], stride=[1024, 1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1024], stride=[131072, 1024, 1])
class op482_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf480', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf480', get_index_2)
        mul_1 = ops.mul(load_2, load_2)
        mul_2 = ops.mul(mul_1, load_2)
        constant_1 = ops.constant(0.044715, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        add = ops.add(load_1, mul_3)
        constant_2 = ops.constant(0.7978845608028654, torch.float32)
        mul_4 = ops.mul(add, constant_2)
        tanh = ops.tanh(mul_4)
        constant_3 = ops.constant(1.0, torch.float32)
        add_1 = ops.add(tanh, constant_3)
        mul_5 = ops.mul(mul, add_1)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf481', get_index_3)
        mul_6 = ops.mul(mul_5, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf482', get_index_4, mul_6, None)
        return store
op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_out_ptr0 + (x0), None)
        tmp14 = tl.load(in_ptr0 + (x0), None)
        tmp1 = 0.5
        tmp2 = tmp0 * tmp1
        tmp3 = tmp0 * tmp0
        tmp4 = tmp3 * tmp0
        tmp5 = 0.044715
        tmp6 = tmp4 * tmp5
        tmp7 = tmp0 + tmp6
        tmp8 = 0.7978845608028654
        tmp9 = tmp7 * tmp8
        tmp10 = libdevice.tanh(tmp9)
        tmp11 = 1.0
        tmp12 = tmp10 + tmp11
        tmp13 = tmp2 * tmp12
        tmp15 = tmp13 * tmp14
        tl.store(in_out_ptr0 + (x0), tmp15, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf482', mode=None)]
op483.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=True, is_weak=False),
    ]
]
op483.node.kernel = extern_kernels.mm


op484_op485: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op484_op485.writes = 
    [   MemoryDep('buf484', c0, {c0: 2048}, None),
        MemoryDep('buf485', c0, {c0: 1048576}, None)]
op484_op485.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 1048576}, None),
        MemoryDep('buf483', c0, {c0: 1048576}, None)]
op484_op485.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 2048, c1: 512}, None)]
op484_op485.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf484.users = [NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484_op485.snodes[0] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 2048}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 1048576}, None),
        MemoryDep('buf483', c0, {c0: 1048576}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
    buf484.users = [NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (2048, 512)
op484.sizes = ([2048], [512])
buf477_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
class op484_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf483', get_index_1)
        add = ops.add(load, load_1)
        mul = ops.mul(add, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_2, reduction)
        return store_reduction
op484 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tl.store(out_ptr0 + (x0), tmp6, None)
op484_op485.snodes[1] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 1048576}, None)]
op485.unmet_dependencies = 
    [   MemoryDep('buf477', c0, {c0: 1048576}, None),
        MemoryDep('buf483', c0, {c0: 1048576}, None),
        MemoryDep('buf484', c0, {c0: 2048}, None)]
op485.met_dependencies = [MemoryDep('arg190_1', c1, {c0: 2048, c1: 512}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
    buf485.users = [NodeUser(node=ExternKernelSchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (1048576, 1)
op485.sizes = ([2048, 512], [])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[2048, 512], stride=[512, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 1], stride=[128, 1, 2048])
buf485_layout = FixedLayout('cuda', torch.float32, size=[16, 128, 512], stride=[65536, 512, 1])
class op485_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = z1
    index1 = 512*z0 + z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg190_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf477', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf483', get_index_2)
        add = ops.add(load_1, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf484', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(add, rsqrt)
        mul_1 = ops.mul(load, mul)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf485', get_index_4, mul_1, None)
        return store
op485 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1048576
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 512
        x2 = xindex
        x1 = (xindex // 512)
        tmp0 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), None)
        tmp2 = tl.load(in_ptr2 + (x2), None)
        tmp4 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp3 = tmp1 + tmp2
        tmp5 = 512.0
        tmp6 = tmp4 / tmp5
        tmp7 = 1e-06
        tmp8 = tmp6 + tmp7
        tmp9 = libdevice.rsqrt(tmp8)
        tmp10 = tmp3 * tmp9
        tmp11 = tmp0 * tmp10
        tl.store(out_ptr0 + (x2), tmp11, None)
op484_op485 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[2048, 512],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr1, xnumel, rnumel):
        xnumel = 2048
        XBLOCK: tl.constexpr = 1
        rnumel = 512
        RBLOCK: tl.constexpr = 512
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = tl.full([RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (512*x0)), None)
        tmp1 = tl.load(in_ptr1 + (r1 + (512*x0)), None)
        tmp7 = tl.load(in_ptr2 + (r1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tmp2 * tmp2
        tmp4 = tl.broadcast_to(tmp3, [RBLOCK])
        tmp6 = triton_helpers.promote_to_tensor(tl.sum(tmp4, 0))
        tmp8 = 512.0
        tmp9 = tmp6 / tmp8
        tmp10 = 1e-06
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp2 * tmp12
        tmp14 = tmp7 * tmp13
        tl.store(out_ptr1 + (r1 + (512*x0)), tmp14, None)


op486: ExternKernelSchedulerNode(ExternKernelOut)
op486.writes = [StarDep(name='buf486', mode=None)]
op486.unmet_dependencies = [StarDep(name='buf485', mode=None)]
op486.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op486.outputs = [
    buf486: ExternKernelOut
    buf486.layout = FixedLayout('cuda', torch.float32, size=[2048, 250112], stride=[250112, 1])
    buf486.users = [
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op486.node.kernel = extern_kernels.mm


op487_op488: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op487_op488.writes = 
    [   MemoryDep('buf487', c0, {c0: 2048}, None),
        MemoryDep('buf488', c0, {c0: 2048}, None)]
op487_op488.unmet_dependencies = [MemoryDep('buf486', c0, {c0: 512229376}, None)]
op487_op488.met_dependencies = []
op487_op488.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf487.users = [
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
    ]
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf488.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op487_op488.snodes[0] =
op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 2048}, None)]
op487.unmet_dependencies = [MemoryDep('buf486', c0, {c0: 512229376}, None)]
op487.met_dependencies = []
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf487.users = [
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
    ]
]
op487.group.device = cuda:0
op487.group.iteration = (2048, 250112)
op487.sizes = ([2048], [250112])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2048, 250112], stride=[250112, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op487_loop_body:
    var_ranges = {z0: 2048, z1: 250112}
    index0 = 250112*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf487', get_index_1, reduction)
        return store_reduction
op487 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 262144],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 250112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (250112*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
op487_op488.snodes[1] =
op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 2048}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf486', c0, {c0: 512229376}, None),
        MemoryDep('buf487', c0, {c0: 2048}, None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
    buf488.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.group.device = cuda:0
op488.group.iteration = (2048, 250112)
op488.sizes = ([2048], [250112])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2048, 250112], stride=[250112, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf488_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
class op488_loop_body:
    var_ranges = {z0: 2048, z1: 250112}
    index0 = 250112*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf486', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf487', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf488', get_index_2, reduction)
        return store_reduction
op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 262144],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 250112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (250112*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)
op487_op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2048, 262144],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2048
        rnumel = 250112
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (250112*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)
        _tmp8 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp4 = tl.load(in_ptr0 + (r1 + (250112*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp5 = tmp4 - tmp2
            tmp6 = tl_math.exp(tmp5)
            tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
            tmp9 = _tmp8 + tmp7
            _tmp8 = tl.where(rmask, tmp9, _tmp8)
        tmp8 = tl.sum(_tmp8, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp8, None)


op489_op490_op491: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op489_op490_op491.writes = 
    [   MemoryDep('buf489', 0, {}, None),
        MemoryDep('buf490', 0, {}, None),
        MemoryDep('buf491', 0, {}, None)]
op489_op490_op491.unmet_dependencies = 
    [   MemoryDep('buf486', 250112*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf487', c0, {c0: 2048}, None),
        MemoryDep('buf488', c0, {c0: 2048}, None)]
op489_op490_op491.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 2048}, None)]
op489_op490_op491.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf489.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf491.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op489_op490_op491.snodes[0] =
op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', 0, {}, None)]
op489.unmet_dependencies = 
    [   MemoryDep('buf486', 250112*c0 + tmp8, {c0: 2048}, None),
        MemoryDep('buf487', c0, {c0: 2048}, None),
        MemoryDep('buf488', c0, {c0: 2048}, None)]
op489.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 2048}, None)]
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf489.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (1, 2048)
op489.sizes = ([], [2048])
arg76_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[2048, 250112], stride=[250112, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf488_layout = FixedLayout('cuda', torch.float32, size=[2048, 1], stride=[1, 2048])
buf489_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op489_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = indirect0 + 250112*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg76_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg76_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf486', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf487', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf488', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf489', get_index_6, reduction)
        return store_reduction
op489 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 250112)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 250112")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (250112*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp20, None)
op489_op490_op491.snodes[1] =
op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', 0, {}, None)]
op490.unmet_dependencies = []
op490.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 2048}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (1, 2048)
op490.sizes = ([], [2048])
arg76_1_layout = FixedLayout('cuda', torch.int64, size=[16, 128], stride=[128, 1])
buf490_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op490_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf490', get_index_1, reduction)
        return store_reduction
op490 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp5, None)
op489_op490_op491.snodes[2] =
op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', 0, {}, None)]
op491.unmet_dependencies = [MemoryDep('buf489', 0, {}, None), MemoryDep('buf490', 0, {}, None)]
op491.met_dependencies = []
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf491.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (1, 1)
op491.sizes = ([], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf490_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf491_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op491_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf490', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf491', get_index_2, truediv, None)
        return store
op491 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)
op489_op490_op491 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[1, 2048],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2048
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        _tmp24 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r0 = rindex
            tmp0 = tl.load(in_ptr0 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r0), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 250112, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 250112)) | ~(rmask), "index out of bounds: 0 <= tmp8 < 250112")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (250112*r0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask, tmp21, _tmp20)
            tmp22 = tmp2.to(tl.int64)
            tmp23 = tl.broadcast_to(tmp22, [XBLOCK, RBLOCK])
            tmp25 = _tmp24 + tmp23
            _tmp24 = tl.where(rmask, tmp25, _tmp24)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tmp24 = tl.sum(_tmp24, 1)[:, None]
        tmp26 = tmp24.to(tl.float32)
        tmp27 = tmp20 / tmp26
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp27, None)



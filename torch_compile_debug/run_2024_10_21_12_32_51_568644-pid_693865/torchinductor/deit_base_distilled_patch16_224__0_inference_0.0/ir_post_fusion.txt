op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
    buf0.users = [NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.node.kernel = extern_kernels.convolution


op1_op2_op3_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op3_op5.writes = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf2', c0, {c0: 1584}, None),
        MemoryDep('buf3', c0, {c0: 1584}, None),
        MemoryDep('buf5', c0, {c0: 1216512}, None)]
op1_op2_op3_op5.unmet_dependencies = [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 198, c2: 768}, None)]
op1_op2_op3_op5.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 152064}, None),
        MemoryDep('arg4_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg5_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg6_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 1584, c1: 768}, None)]
op1_op2_op3_op5.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op1_op2_op3_op5.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 1216512}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 150528*c0 + 196*c2 + ModularIndexing(I, 1, 196), {c0: 8, c1: 198, c2: 768}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 152064}, None),
        MemoryDep('arg4_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg5_1', c1, {c0: 1584, c1: 768}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (1216512, 1)
op1.sizes = ([8, 198, 768], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 768], stride=[768, 768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 14, 14], stride=[150528, 196, 14, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 198, 768], stride=[152064, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 198, z2: 768}
    index0 = z1
    index1 = z2
    index2 = 150528*z0 + 196*z2 + ModularIndexing(I, 1, 196)
    index3 = 768*z1 + z2
    index4 = 152064*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(2, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(2, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(198, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index3')
        load = ops.load('arg3_1', get_index_6)
        add = ops.add(where_1, load)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf1', get_index_7, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg4_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg5_1', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op1_op2_op3_op5.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 1584}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 1216512}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf2.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (1584, 768)
op2.sizes = ([1584], [768])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op2_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem)
        return store_reduction
op1_op2_op3_op5.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 1584}, None)]
op3.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 1216512}, None)]
op3.met_dependencies = []
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf3.users = [NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (1584, 768)
op3.sizes = ([1584], [768])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op3_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem_1)
        return store_reduction
op1_op2_op3_op5.snodes[3] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1216512}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf2', c0, {c0: 1584}, None),
        MemoryDep('buf3', c0, {c0: 1584}, None)]
op5.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg7_1', c1, {c0: 1584, c1: 768}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1216512, 1)
op5.sizes = ([1584, 768], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op5_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf2', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf3', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg6_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg7_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf5', get_index_5, add_1, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf5', mode=None)]
op6.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op7: ExternKernelSchedulerNode(FallbackKernel)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: FallbackKernel
    buf7.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf7.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
    ]
]
op7.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op8: ExternKernelSchedulerNode(MultiOutput)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: MultiOutput
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = None


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op12.met_dependencies = [StarDep(name='arg10_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf12.users = [
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op12.node.kernel = extern_kernels.mm


op13_op14_op16: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op13_op14_op16.writes = 
    [   MemoryDep('buf13', c0, {c0: 1584}, None),
        MemoryDep('buf14', c0, {c0: 1584}, None),
        MemoryDep('buf16', c0, {c0: 1216512}, None)]
op13_op14_op16.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None)]
op13_op14_op16.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg13_1', c1, {c0: 1584, c1: 768}, None)]
op13_op14_op16.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op13_op14_op16.snodes[0] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 1584}, None)]
op13.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None)]
op13.met_dependencies = [MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf13.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (1584, 768)
op13.sizes = ([1584], [768])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op13_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf13', get_index_3, getitem)
        return store_reduction
op13_op14_op16.snodes[1] =
op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 1584}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None)]
op14.met_dependencies = [MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf14.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (1584, 768)
op14.sizes = ([1584], [768])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op14_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf14', get_index_3, getitem_1)
        return store_reduction
op13_op14_op16.snodes[2] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 1216512}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None),
        MemoryDep('buf13', c0, {c0: 1584}, None),
        MemoryDep('buf14', c0, {c0: 1584}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg12_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg13_1', c1, {c0: 1584, c1: 768}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (1216512, 1)
op16.sizes = ([1584, 768], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op16_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf13', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf14', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg12_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg13_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf16', get_index_7, add_3, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelOut)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelOut
    buf17.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.mm


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 4866048}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 4866048}, None)]
op18.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 1584, c1: 3072}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (4866048, 1)
op18.sizes = ([1584, 3072], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op18_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf17', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg15_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf18', get_index_4, mul_2, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf18', mode=None)]
op19.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.node.kernel = extern_kernels.mm


op20_op21_op22_op24: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op20_op21_op22_op24.writes = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf21', c0, {c0: 1584}, None),
        MemoryDep('buf22', c0, {c0: 1584}, None),
        MemoryDep('buf24', c0, {c0: 1216512}, None)]
op20_op21_op22_op24.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None),
        MemoryDep('buf19', c0, {c0: 1216512}, None)]
op20_op21_op22_op24.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg18_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg19_1', c1, {c0: 1584, c1: 768}, None)]
op20_op21_op22_op24.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf21.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op20_op21_op22_op24.snodes[0] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 1216512}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 1216512}, None),
        MemoryDep('buf12', c0, {c0: 1216512}, None),
        MemoryDep('buf19', c0, {c0: 1216512}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg11_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg17_1', c1, {c0: 1584, c1: 768}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (1216512, 1)
op20.sizes = ([1584, 768], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op20_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf12', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg11_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf19', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg17_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf20', get_index_5, add_3, None)
        return store
op20_op21_op22_op24.snodes[1] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1584}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 1216512}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf21.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (1584, 768)
op21.sizes = ([1584], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op21_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_1, getitem)
        return store_reduction
op20_op21_op22_op24.snodes[2] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 1584}, None)]
op22.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 1216512}, None)]
op22.met_dependencies = []
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (1584, 768)
op22.sizes = ([1584], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op22_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, getitem_1)
        return store_reduction
op20_op21_op22_op24.snodes[3] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1216512}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf21', c0, {c0: 1584}, None),
        MemoryDep('buf22', c0, {c0: 1584}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg19_1', c1, {c0: 1584, c1: 768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1216512, 1)
op24.sizes = ([1584, 768], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op24_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf21', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf22', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg18_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg19_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf24', get_index_5, add_1, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg20_1', mode=None), StarDep(name='arg21_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.addmm


op26: ExternKernelSchedulerNode(FallbackKernel)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: FallbackKernel
    buf26.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op26.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op27: ExternKernelSchedulerNode(MultiOutput)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: MultiOutput
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf27.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op27.node.kernel = None


op31: ExternKernelSchedulerNode(ExternKernelOut)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op31.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelOut
    buf31.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf31.users = [
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False),
    ]
]
op31.node.kernel = extern_kernels.mm


op32_op33_op35: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op32_op33_op35.writes = 
    [   MemoryDep('buf32', c0, {c0: 1584}, None),
        MemoryDep('buf33', c0, {c0: 1584}, None),
        MemoryDep('buf35', c0, {c0: 1216512}, None)]
op32_op33_op35.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None)]
op32_op33_op35.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg25_1', c1, {c0: 1584, c1: 768}, None)]
op32_op33_op35.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op32_op33_op35.snodes[0] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1584}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None)]
op32.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf32.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1584, 768)
op32.sizes = ([1584], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op32_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf32', get_index_3, getitem)
        return store_reduction
op32_op33_op35.snodes[1] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1584}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None)]
op33.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf33.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1584, 768)
op33.sizes = ([1584], [768])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op33_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_3, getitem_1)
        return store_reduction
op32_op33_op35.snodes[2] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1216512}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None),
        MemoryDep('buf32', c0, {c0: 1584}, None),
        MemoryDep('buf33', c0, {c0: 1584}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg24_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg25_1', c1, {c0: 1584, c1: 768}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf35.users = [NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1216512, 1)
op35.sizes = ([1584, 768], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op35_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf32', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf33', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg24_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg25_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf35', get_index_7, add_3, None)
        return store


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf36.users = [NodeUser(node=SchedulerNode(name='op37'), can_inplace=True, is_weak=False)]
]
op36.node.kernel = extern_kernels.mm


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 4866048}, None)]
op37.unmet_dependencies = [MemoryDep('buf36', c0, {c0: 4866048}, None)]
op37.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 1584, c1: 3072}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (4866048, 1)
op37.sizes = ([1584, 3072], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op37_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg27_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf37', get_index_4, mul_2, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf37', mode=None)]
op38.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.mm


op39_op40_op41_op43: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op39_op40_op41_op43.writes = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf40', c0, {c0: 1584}, None),
        MemoryDep('buf41', c0, {c0: 1584}, None),
        MemoryDep('buf43', c0, {c0: 1216512}, None)]
op39_op40_op41_op43.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None),
        MemoryDep('buf38', c0, {c0: 1216512}, None)]
op39_op40_op41_op43.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg29_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg30_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg31_1', c1, {c0: 1584, c1: 768}, None)]
op39_op40_op41_op43.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op39_op40_op41_op43.snodes[0] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 1216512}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf20', c0, {c0: 1216512}, None),
        MemoryDep('buf31', c0, {c0: 1216512}, None),
        MemoryDep('buf38', c0, {c0: 1216512}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg29_1', c1, {c0: 1584, c1: 768}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (1216512, 1)
op39.sizes = ([1584, 768], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op39_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf31', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf38', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg29_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf39', get_index_5, add_3, None)
        return store
op39_op40_op41_op43.snodes[1] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1584}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 1216512}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf40.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1584, 768)
op40.sizes = ([1584], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op40_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf40', get_index_1, getitem)
        return store_reduction
op39_op40_op41_op43.snodes[2] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 1584}, None)]
op41.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 1216512}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf41.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (1584, 768)
op41.sizes = ([1584], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op41_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf41', get_index_1, getitem_1)
        return store_reduction
op39_op40_op41_op43.snodes[3] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1216512}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf40', c0, {c0: 1584}, None),
        MemoryDep('buf41', c0, {c0: 1584}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg31_1', c1, {c0: 1584, c1: 768}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1216512, 1)
op43.sizes = ([1584, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op43_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf40', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf41', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg30_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg31_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, add_1, None)
        return store


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf43', mode=None)]
op44.met_dependencies = [StarDep(name='arg32_1', mode=None), StarDep(name='arg33_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.node.kernel = extern_kernels.addmm


op45: ExternKernelSchedulerNode(FallbackKernel)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: FallbackKernel
    buf45.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf45.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op45.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op46: ExternKernelSchedulerNode(MultiOutput)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: MultiOutput
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op46.node.kernel = None


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op50.met_dependencies = [StarDep(name='arg34_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.mm


op51_op52_op54: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op51_op52_op54.writes = 
    [   MemoryDep('buf51', c0, {c0: 1584}, None),
        MemoryDep('buf52', c0, {c0: 1584}, None),
        MemoryDep('buf54', c0, {c0: 1216512}, None)]
op51_op52_op54.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None)]
op51_op52_op54.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg36_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg37_1', c1, {c0: 1584, c1: 768}, None)]
op51_op52_op54.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf51.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op51_op52_op54.snodes[0] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 1584}, None)]
op51.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None)]
op51.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf51.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (1584, 768)
op51.sizes = ([1584], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op51_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf50', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_3, getitem)
        return store_reduction
op51_op52_op54.snodes[1] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1584}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None)]
op52.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1584, 768)
op52.sizes = ([1584], [768])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op52_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf50', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf52', get_index_3, getitem_1)
        return store_reduction
op51_op52_op54.snodes[2] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1216512}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None),
        MemoryDep('buf51', c0, {c0: 1584}, None),
        MemoryDep('buf52', c0, {c0: 1584}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg36_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg37_1', c1, {c0: 1584, c1: 768}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1216512, 1)
op54.sizes = ([1584, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op54_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf50', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf51', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf52', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg36_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg37_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf54', get_index_7, add_3, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 4866048}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 4866048}, None)]
op56.met_dependencies = [MemoryDep('arg39_1', c1, {c0: 1584, c1: 3072}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (4866048, 1)
op56.sizes = ([1584, 3072], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op56_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf56', get_index_4, mul_2, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58_op59_op60_op62: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op58_op59_op60_op62.writes = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf59', c0, {c0: 1584}, None),
        MemoryDep('buf60', c0, {c0: 1584}, None),
        MemoryDep('buf62', c0, {c0: 1216512}, None)]
op58_op59_op60_op62.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None),
        MemoryDep('buf57', c0, {c0: 1216512}, None)]
op58_op59_op60_op62.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg42_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 1584, c1: 768}, None)]
op58_op59_op60_op62.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op58_op59_op60_op62.snodes[0] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1216512}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 1216512}, None),
        MemoryDep('buf50', c0, {c0: 1216512}, None),
        MemoryDep('buf57', c0, {c0: 1216512}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg41_1', c1, {c0: 1584, c1: 768}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (1216512, 1)
op58.sizes = ([1584, 768], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op58_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf50', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf57', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg41_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_3, None)
        return store
op58_op59_op60_op62.snodes[1] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1584}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1216512}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1584, 768)
op59.sizes = ([1584], [768])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op59_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf59', get_index_1, getitem)
        return store_reduction
op58_op59_op60_op62.snodes[2] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1584}, None)]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1216512}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1584, 768)
op60.sizes = ([1584], [768])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op60_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf60', get_index_1, getitem_1)
        return store_reduction
op58_op59_op60_op62.snodes[3] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1216512}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf59', c0, {c0: 1584}, None),
        MemoryDep('buf60', c0, {c0: 1584}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg43_1', c1, {c0: 1584, c1: 768}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (1216512, 1)
op62.sizes = ([1584, 768], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op62_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf59', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf60', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg42_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg43_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add_1, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg44_1', mode=None), StarDep(name='arg45_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.node.kernel = extern_kernels.addmm


op64: ExternKernelSchedulerNode(FallbackKernel)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: FallbackKernel
    buf64.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op65: ExternKernelSchedulerNode(MultiOutput)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: MultiOutput
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op65.node.kernel = None


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op69.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op69.node.kernel = extern_kernels.mm


op70_op71_op73: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op70_op71_op73.writes = 
    [   MemoryDep('buf70', c0, {c0: 1584}, None),
        MemoryDep('buf71', c0, {c0: 1584}, None),
        MemoryDep('buf73', c0, {c0: 1216512}, None)]
op70_op71_op73.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None)]
op70_op71_op73.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg49_1', c1, {c0: 1584, c1: 768}, None)]
op70_op71_op73.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op70_op71_op73.snodes[0] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 1584}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None)]
op70.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf70.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (1584, 768)
op70.sizes = ([1584], [768])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op70_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf70', get_index_3, getitem)
        return store_reduction
op70_op71_op73.snodes[1] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 1584}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None)]
op71.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf71.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (1584, 768)
op71.sizes = ([1584], [768])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op71_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf71', get_index_3, getitem_1)
        return store_reduction
op70_op71_op73.snodes[2] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 1216512}, None)]
op73.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None),
        MemoryDep('buf70', c0, {c0: 1584}, None),
        MemoryDep('buf71', c0, {c0: 1584}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg48_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg49_1', c1, {c0: 1584, c1: 768}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (1216512, 1)
op73.sizes = ([1584, 768], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op73_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf70', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf71', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg49_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf73', get_index_7, add_3, None)
        return store


op74: ExternKernelSchedulerNode(ExternKernelOut)
op74.writes = [StarDep(name='buf74', mode=None)]
op74.unmet_dependencies = [StarDep(name='buf73', mode=None)]
op74.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op74.outputs = [
    buf74: ExternKernelOut
    buf74.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf74.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=True, is_weak=False)]
]
op74.node.kernel = extern_kernels.mm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 4866048}, None)]
op75.unmet_dependencies = [MemoryDep('buf74', c0, {c0: 4866048}, None)]
op75.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 1584, c1: 3072}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (4866048, 1)
op75.sizes = ([1584, 3072], [])
buf74_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op75_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf74', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf74', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf75', get_index_4, mul_2, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf75', mode=None)]
op76.met_dependencies = [StarDep(name='arg52_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77_op78_op79_op81: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op77_op78_op79_op81.writes = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf78', c0, {c0: 1584}, None),
        MemoryDep('buf79', c0, {c0: 1584}, None),
        MemoryDep('buf81', c0, {c0: 1216512}, None)]
op77_op78_op79_op81.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None),
        MemoryDep('buf76', c0, {c0: 1216512}, None)]
op77_op78_op79_op81.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg53_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg54_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg55_1', c1, {c0: 1584, c1: 768}, None)]
op77_op78_op79_op81.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op77_op78_op79_op81.snodes[0] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1216512}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 1216512}, None),
        MemoryDep('buf69', c0, {c0: 1216512}, None),
        MemoryDep('buf76', c0, {c0: 1216512}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg53_1', c1, {c0: 1584, c1: 768}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (1216512, 1)
op77.sizes = ([1584, 768], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op77_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg47_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf76', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg53_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf77', get_index_5, add_3, None)
        return store
op77_op78_op79_op81.snodes[1] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1584}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 1216512}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf78.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (1584, 768)
op78.sizes = ([1584], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op78_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, getitem)
        return store_reduction
op77_op78_op79_op81.snodes[2] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1584}, None)]
op79.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 1216512}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf79.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1584, 768)
op79.sizes = ([1584], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op79_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem_1)
        return store_reduction
op77_op78_op79_op81.snodes[3] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1216512}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf78', c0, {c0: 1584}, None),
        MemoryDep('buf79', c0, {c0: 1584}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg55_1', c1, {c0: 1584, c1: 768}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (1216512, 1)
op81.sizes = ([1584, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op81_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, add_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.node.kernel = extern_kernels.addmm


op83: ExternKernelSchedulerNode(FallbackKernel)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = []
op83.outputs = [
    buf83: FallbackKernel
    buf83.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf83.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
    ]
]
op83.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op84: ExternKernelSchedulerNode(MultiOutput)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: MultiOutput
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op84.node.kernel = None


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op88.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf88.users = [
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False),
    ]
]
op88.node.kernel = extern_kernels.mm


op89_op90_op92: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op89_op90_op92.writes = 
    [   MemoryDep('buf89', c0, {c0: 1584}, None),
        MemoryDep('buf90', c0, {c0: 1584}, None),
        MemoryDep('buf92', c0, {c0: 1216512}, None)]
op89_op90_op92.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None)]
op89_op90_op92.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg61_1', c1, {c0: 1584, c1: 768}, None)]
op89_op90_op92.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf89.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op89_op90_op92.snodes[0] =
op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 1584}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None)]
op89.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf89.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (1584, 768)
op89.sizes = ([1584], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op89_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf89', get_index_3, getitem)
        return store_reduction
op89_op90_op92.snodes[1] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1584}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None)]
op90.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf90.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1584, 768)
op90.sizes = ([1584], [768])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op90_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_3, getitem_1)
        return store_reduction
op89_op90_op92.snodes[2] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1216512}, None)]
op92.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None),
        MemoryDep('buf89', c0, {c0: 1584}, None),
        MemoryDep('buf90', c0, {c0: 1584}, None)]
op92.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg60_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg61_1', c1, {c0: 1584, c1: 768}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1216512, 1)
op92.sizes = ([1584, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op92_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf89', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf90', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg60_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg61_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf92', get_index_7, add_3, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False)]
]
op93.node.kernel = extern_kernels.mm


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 4866048}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', c0, {c0: 4866048}, None)]
op94.met_dependencies = [MemoryDep('arg63_1', c1, {c0: 1584, c1: 3072}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (4866048, 1)
op94.sizes = ([1584, 3072], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op94_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg63_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf94', get_index_4, mul_2, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96_op97_op98_op100: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op96_op97_op98_op100.writes = 
    [   MemoryDep('buf100', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None),
        MemoryDep('buf97', c0, {c0: 1584}, None),
        MemoryDep('buf98', c0, {c0: 1584}, None)]
op96_op97_op98_op100.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None),
        MemoryDep('buf95', c0, {c0: 1216512}, None)]
op96_op97_op98_op100.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg66_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 1584, c1: 768}, None)]
op96_op97_op98_op100.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op96_op97_op98_op100.snodes[0] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 1216512}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 1216512}, None),
        MemoryDep('buf88', c0, {c0: 1216512}, None),
        MemoryDep('buf95', c0, {c0: 1216512}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg65_1', c1, {c0: 1584, c1: 768}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (1216512, 1)
op96.sizes = ([1584, 768], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op96_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf88', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg59_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf95', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, add_3, None)
        return store
op96_op97_op98_op100.snodes[1] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1584}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 1216512}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1584, 768)
op97.sizes = ([1584], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op97_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, getitem)
        return store_reduction
op96_op97_op98_op100.snodes[2] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1584}, None)]
op98.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 1216512}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1584, 768)
op98.sizes = ([1584], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op98_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, getitem_1)
        return store_reduction
op96_op97_op98_op100.snodes[3] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 1216512}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf96', c0, {c0: 1216512}, None),
        MemoryDep('buf97', c0, {c0: 1584}, None),
        MemoryDep('buf98', c0, {c0: 1584}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg66_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg67_1', c1, {c0: 1584, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (1216512, 1)
op100.sizes = ([1584, 768], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op100_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf97', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf98', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg66_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg67_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf100', get_index_5, add_1, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg68_1', mode=None), StarDep(name='arg69_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = extern_kernels.addmm


op102: ExternKernelSchedulerNode(FallbackKernel)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: FallbackKernel
    buf102.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
    ]
]
op102.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op103: ExternKernelSchedulerNode(MultiOutput)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: MultiOutput
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = None


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op107.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False),
    ]
]
op107.node.kernel = extern_kernels.mm


op108_op109_op111: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op108_op109_op111.writes = 
    [   MemoryDep('buf108', c0, {c0: 1584}, None),
        MemoryDep('buf109', c0, {c0: 1584}, None),
        MemoryDep('buf111', c0, {c0: 1216512}, None)]
op108_op109_op111.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op108_op109_op111.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg73_1', c1, {c0: 1584, c1: 768}, None)]
op108_op109_op111.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op108_op109_op111.snodes[0] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1584}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op108.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf108.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (1584, 768)
op108.sizes = ([1584], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op108_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf108', get_index_3, getitem)
        return store_reduction
op108_op109_op111.snodes[1] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1584}, None)]
op109.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op109.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf109.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1584, 768)
op109.sizes = ([1584], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op109_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf109', get_index_3, getitem_1)
        return store_reduction
op108_op109_op111.snodes[2] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 1216512}, None)]
op111.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf108', c0, {c0: 1584}, None),
        MemoryDep('buf109', c0, {c0: 1584}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op111.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg72_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg73_1', c1, {c0: 1584, c1: 768}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1216512, 1)
op111.sizes = ([1584, 768], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op111_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf108', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf109', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg72_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg73_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf111', get_index_7, add_3, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False)]
]
op112.node.kernel = extern_kernels.mm


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 4866048}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 4866048}, None)]
op113.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 1584, c1: 3072}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (4866048, 1)
op113.sizes = ([1584, 3072], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op113_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf112', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf113', get_index_4, mul_2, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.mm


op115_op116_op117_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op115_op116_op117_op119.writes = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf116', c0, {c0: 1584}, None),
        MemoryDep('buf117', c0, {c0: 1584}, None),
        MemoryDep('buf119', c0, {c0: 1216512}, None)]
op115_op116_op117_op119.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf114', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op115_op116_op117_op119.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg78_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg79_1', c1, {c0: 1584, c1: 768}, None)]
op115_op116_op117_op119.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op115_op116_op117_op119.snodes[0] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1216512}, None)]
op115.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1216512}, None),
        MemoryDep('buf114', c0, {c0: 1216512}, None),
        MemoryDep('buf96', c0, {c0: 1216512}, None)]
op115.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg77_1', c1, {c0: 1584, c1: 768}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (1216512, 1)
op115.sizes = ([1584, 768], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op115_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg71_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf114', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf115', get_index_5, add_3, None)
        return store
op115_op116_op117_op119.snodes[1] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 1584}, None)]
op116.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1216512}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (1584, 768)
op116.sizes = ([1584], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op116_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf116', get_index_1, getitem)
        return store_reduction
op115_op116_op117_op119.snodes[2] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1584}, None)]
op117.unmet_dependencies = [MemoryDep('buf115', c0, {c0: 1216512}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (1584, 768)
op117.sizes = ([1584], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op117_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, getitem_1)
        return store_reduction
op115_op116_op117_op119.snodes[3] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1216512}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf116', c0, {c0: 1584}, None),
        MemoryDep('buf117', c0, {c0: 1584}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg78_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg79_1', c1, {c0: 1584, c1: 768}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1216512, 1)
op119.sizes = ([1584, 768], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op119_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf117', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg78_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg79_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf119', get_index_5, add_1, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg80_1', mode=None), StarDep(name='arg81_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.node.kernel = extern_kernels.addmm


op121: ExternKernelSchedulerNode(FallbackKernel)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: FallbackKernel
    buf121.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf121.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
    ]
]
op121.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op122: ExternKernelSchedulerNode(MultiOutput)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: MultiOutput
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = None


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op126.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf126.users = [
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False),
    ]
]
op126.node.kernel = extern_kernels.mm


op127_op128_op130: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op127_op128_op130.writes = 
    [   MemoryDep('buf127', c0, {c0: 1584}, None),
        MemoryDep('buf128', c0, {c0: 1584}, None),
        MemoryDep('buf130', c0, {c0: 1216512}, None)]
op127_op128_op130.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None)]
op127_op128_op130.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg84_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg85_1', c1, {c0: 1584, c1: 768}, None)]
op127_op128_op130.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf127.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf128.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op127_op128_op130.snodes[0] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 1584}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None)]
op127.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf127.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (1584, 768)
op127.sizes = ([1584], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op127_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf127', get_index_3, getitem)
        return store_reduction
op127_op128_op130.snodes[1] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1584}, None)]
op128.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None)]
op128.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf128.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1584, 768)
op128.sizes = ([1584], [768])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op128_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_3, getitem_1)
        return store_reduction
op127_op128_op130.snodes[2] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1216512}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None),
        MemoryDep('buf127', c0, {c0: 1584}, None),
        MemoryDep('buf128', c0, {c0: 1584}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg84_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg85_1', c1, {c0: 1584, c1: 768}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1216512, 1)
op130.sizes = ([1584, 768], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op130_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf127', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf128', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg84_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg85_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf130', get_index_7, add_3, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 4866048}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 4866048}, None)]
op132.met_dependencies = [MemoryDep('arg87_1', c1, {c0: 1584, c1: 3072}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4866048, 1)
op132.sizes = ([1584, 3072], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op132_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf131', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg87_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf132', get_index_4, mul_2, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.mm


op134_op135_op136_op138: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op134_op135_op136_op138.writes = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf135', c0, {c0: 1584}, None),
        MemoryDep('buf136', c0, {c0: 1584}, None),
        MemoryDep('buf138', c0, {c0: 1216512}, None)]
op134_op135_op136_op138.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None),
        MemoryDep('buf133', c0, {c0: 1216512}, None)]
op134_op135_op136_op138.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg90_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg91_1', c1, {c0: 1584, c1: 768}, None)]
op134_op135_op136_op138.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf136.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op134_op135_op136_op138.snodes[0] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1216512}, None)]
op134.unmet_dependencies = 
    [   MemoryDep('buf115', c0, {c0: 1216512}, None),
        MemoryDep('buf126', c0, {c0: 1216512}, None),
        MemoryDep('buf133', c0, {c0: 1216512}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg89_1', c1, {c0: 1584, c1: 768}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf134.users = [
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1216512, 1)
op134.sizes = ([1584, 768], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op134_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf133', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg89_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_3, None)
        return store
op134_op135_op136_op138.snodes[1] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 1584}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 1216512}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf135.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (1584, 768)
op135.sizes = ([1584], [768])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op135_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf135', get_index_1, getitem)
        return store_reduction
op134_op135_op136_op138.snodes[2] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 1584}, None)]
op136.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 1216512}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf136.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (1584, 768)
op136.sizes = ([1584], [768])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op136_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_1, getitem_1)
        return store_reduction
op134_op135_op136_op138.snodes[3] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 1216512}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf135', c0, {c0: 1584}, None),
        MemoryDep('buf136', c0, {c0: 1584}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg91_1', c1, {c0: 1584, c1: 768}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (1216512, 1)
op138.sizes = ([1584, 768], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op138_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf136', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf138', get_index_5, add_1, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg92_1', mode=None), StarDep(name='arg93_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.node.kernel = extern_kernels.addmm


op140: ExternKernelSchedulerNode(FallbackKernel)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: FallbackKernel
    buf140.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf140.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
    ]
]
op140.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op141: ExternKernelSchedulerNode(MultiOutput)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: MultiOutput
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = None


op145: ExternKernelSchedulerNode(ExternKernelOut)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op145.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelOut
    buf145.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.mm


op146_op147_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op146_op147_op149.writes = 
    [   MemoryDep('buf146', c0, {c0: 1584}, None),
        MemoryDep('buf147', c0, {c0: 1584}, None),
        MemoryDep('buf149', c0, {c0: 1216512}, None)]
op146_op147_op149.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None)]
op146_op147_op149.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 1584, c1: 768}, None)]
op146_op147_op149.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op146_op147_op149.snodes[0] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 1584}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None)]
op146.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (1584, 768)
op146.sizes = ([1584], [768])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op146_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_3, getitem)
        return store_reduction
op146_op147_op149.snodes[1] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 1584}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None)]
op147.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (1584, 768)
op147.sizes = ([1584], [768])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op147_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_3, getitem_1)
        return store_reduction
op146_op147_op149.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1216512}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None),
        MemoryDep('buf146', c0, {c0: 1584}, None),
        MemoryDep('buf147', c0, {c0: 1584}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg96_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 1584, c1: 768}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1216512, 1)
op149.sizes = ([1584, 768], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op149_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf146', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf147', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf149', get_index_7, add_3, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 4866048}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 4866048}, None)]
op151.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 1584, c1: 3072}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (4866048, 1)
op151.sizes = ([1584, 3072], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op151_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf151', get_index_4, mul_2, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153_op154_op155_op157: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op153_op154_op155_op157.writes = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf154', c0, {c0: 1584}, None),
        MemoryDep('buf155', c0, {c0: 1584}, None),
        MemoryDep('buf157', c0, {c0: 1216512}, None)]
op153_op154_op155_op157.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None),
        MemoryDep('buf152', c0, {c0: 1216512}, None)]
op153_op154_op155_op157.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg102_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg103_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None)]
op153_op154_op155_op157.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op153_op154_op155_op157.snodes[0] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1216512}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf134', c0, {c0: 1216512}, None),
        MemoryDep('buf145', c0, {c0: 1216512}, None),
        MemoryDep('buf152', c0, {c0: 1216512}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg95_1', c1, {c0: 1584, c1: 768}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (1216512, 1)
op153.sizes = ([1584, 768], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op153_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf152', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf153', get_index_5, add_3, None)
        return store
op153_op154_op155_op157.snodes[1] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1584}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1216512}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1584, 768)
op154.sizes = ([1584], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op154_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, getitem)
        return store_reduction
op153_op154_op155_op157.snodes[2] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 1584}, None)]
op155.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 1216512}, None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (1584, 768)
op155.sizes = ([1584], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op155_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf155', get_index_1, getitem_1)
        return store_reduction
op153_op154_op155_op157.snodes[3] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 1216512}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf154', c0, {c0: 1584}, None),
        MemoryDep('buf155', c0, {c0: 1584}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg103_1', c1, {c0: 1584, c1: 768}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (1216512, 1)
op157.sizes = ([1584, 768], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op157_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf154', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf155', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_1, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.node.kernel = extern_kernels.addmm


op159: ExternKernelSchedulerNode(FallbackKernel)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: FallbackKernel
    buf159.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
    ]
]
op159.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op160: ExternKernelSchedulerNode(MultiOutput)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: MultiOutput
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = None


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op164.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf164.users = [
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False),
    ]
]
op164.node.kernel = extern_kernels.mm


op165_op166_op168: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op165_op166_op168.writes = 
    [   MemoryDep('buf165', c0, {c0: 1584}, None),
        MemoryDep('buf166', c0, {c0: 1584}, None),
        MemoryDep('buf168', c0, {c0: 1216512}, None)]
op165_op166_op168.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None)]
op165_op166_op168.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg109_1', c1, {c0: 1584, c1: 768}, None)]
op165_op166_op168.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op165_op166_op168.snodes[0] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1584}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None)]
op165.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf165.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1584, 768)
op165.sizes = ([1584], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op165_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf165', get_index_3, getitem)
        return store_reduction
op165_op166_op168.snodes[1] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 1584}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None)]
op166.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf166.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (1584, 768)
op166.sizes = ([1584], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op166_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf166', get_index_3, getitem_1)
        return store_reduction
op165_op166_op168.snodes[2] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1216512}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None),
        MemoryDep('buf165', c0, {c0: 1584}, None),
        MemoryDep('buf166', c0, {c0: 1584}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg108_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg109_1', c1, {c0: 1584, c1: 768}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1216512, 1)
op168.sizes = ([1584, 768], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op168_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf165', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf166', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg108_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg109_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf168', get_index_7, add_3, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.mm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 4866048}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 4866048}, None)]
op170.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 1584, c1: 3072}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf170.users = [NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.group.device = cuda:0
op170.group.iteration = (4866048, 1)
op170.sizes = ([1584, 3072], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op170_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf170', get_index_4, mul_2, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172_op173_op174_op176: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op172_op173_op174_op176.writes = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf173', c0, {c0: 1584}, None),
        MemoryDep('buf174', c0, {c0: 1584}, None),
        MemoryDep('buf176', c0, {c0: 1216512}, None)]
op172_op173_op174_op176.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None),
        MemoryDep('buf171', c0, {c0: 1216512}, None)]
op172_op173_op174_op176.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg113_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg115_1', c1, {c0: 1584, c1: 768}, None)]
op172_op173_op174_op176.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op172_op173_op174_op176.snodes[0] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1216512}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1216512}, None),
        MemoryDep('buf164', c0, {c0: 1216512}, None),
        MemoryDep('buf171', c0, {c0: 1216512}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg113_1', c1, {c0: 1584, c1: 768}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
]
op172.group.device = cuda:0
op172.group.iteration = (1216512, 1)
op172.sizes = ([1584, 768], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op172_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf164', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf171', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg113_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf172', get_index_5, add_3, None)
        return store
op172_op173_op174_op176.snodes[1] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 1584}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1216512}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (1584, 768)
op173.sizes = ([1584], [768])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op173_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem)
        return store_reduction
op172_op173_op174_op176.snodes[2] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 1584}, None)]
op174.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1216512}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (1584, 768)
op174.sizes = ([1584], [768])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op174_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf174', get_index_1, getitem_1)
        return store_reduction
op172_op173_op174_op176.snodes[3] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1216512}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf173', c0, {c0: 1584}, None),
        MemoryDep('buf174', c0, {c0: 1584}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg114_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg115_1', c1, {c0: 1584, c1: 768}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (1216512, 1)
op176.sizes = ([1584, 768], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op176_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf173', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf174', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf176', get_index_5, add_1, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg116_1', mode=None), StarDep(name='arg117_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.node.kernel = extern_kernels.addmm


op178: ExternKernelSchedulerNode(FallbackKernel)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: FallbackKernel
    buf178.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op178.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op179: ExternKernelSchedulerNode(MultiOutput)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: MultiOutput
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf179.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = None


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf179', mode=None)]
op183.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
    ]
]
op183.node.kernel = extern_kernels.mm


op184_op185_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op184_op185_op187.writes = 
    [   MemoryDep('buf184', c0, {c0: 1584}, None),
        MemoryDep('buf185', c0, {c0: 1584}, None),
        MemoryDep('buf187', c0, {c0: 1216512}, None)]
op184_op185_op187.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None)]
op184_op185_op187.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg121_1', c1, {c0: 1584, c1: 768}, None)]
op184_op185_op187.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op184_op185_op187.snodes[0] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 1584}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None)]
op184.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf184.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (1584, 768)
op184.sizes = ([1584], [768])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op184_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg119_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf184', get_index_3, getitem)
        return store_reduction
op184_op185_op187.snodes[1] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1584}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None)]
op185.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf185.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1584, 768)
op185.sizes = ([1584], [768])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op185_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg119_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf185', get_index_3, getitem_1)
        return store_reduction
op184_op185_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 1216512}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None),
        MemoryDep('buf184', c0, {c0: 1584}, None),
        MemoryDep('buf185', c0, {c0: 1584}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg121_1', c1, {c0: 1584, c1: 768}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (1216512, 1)
op187.sizes = ([1584, 768], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op187_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg119_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf184', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf185', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg120_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg121_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf187', get_index_7, add_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 4866048}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 4866048}, None)]
op189.met_dependencies = [MemoryDep('arg123_1', c1, {c0: 1584, c1: 3072}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (4866048, 1)
op189.sizes = ([1584, 3072], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op189_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg123_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg123_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf189', get_index_4, mul_2, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.mm


op191_op192_op193_op195: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op193_op195.writes = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf192', c0, {c0: 1584}, None),
        MemoryDep('buf193', c0, {c0: 1584}, None),
        MemoryDep('buf195', c0, {c0: 1216512}, None)]
op191_op192_op193_op195.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None),
        MemoryDep('buf190', c0, {c0: 1216512}, None)]
op191_op192_op193_op195.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg125_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg126_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg127_1', c1, {c0: 1584, c1: 768}, None)]
op191_op192_op193_op195.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf192.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf193.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op191_op192_op193_op195.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 1216512}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1216512}, None),
        MemoryDep('buf183', c0, {c0: 1216512}, None),
        MemoryDep('buf190', c0, {c0: 1216512}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg125_1', c1, {c0: 1584, c1: 768}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (1216512, 1)
op191.sizes = ([1584, 768], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op191_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf183', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg119_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf190', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf191', get_index_5, add_3, None)
        return store
op191_op192_op193_op195.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 1584}, None)]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 1216512}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf192.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (1584, 768)
op192.sizes = ([1584], [768])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op192_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf192', get_index_1, getitem)
        return store_reduction
op191_op192_op193_op195.snodes[2] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 1584}, None)]
op193.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 1216512}, None)]
op193.met_dependencies = []
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf193.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (1584, 768)
op193.sizes = ([1584], [768])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op193_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf193', get_index_1, getitem_1)
        return store_reduction
op191_op192_op193_op195.snodes[3] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 1216512}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf192', c0, {c0: 1584}, None),
        MemoryDep('buf193', c0, {c0: 1584}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg126_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg127_1', c1, {c0: 1584, c1: 768}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (1216512, 1)
op195.sizes = ([1584, 768], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op195_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf192', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf193', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_1, None)
        return store


op196: ExternKernelSchedulerNode(ExternKernelOut)
op196.writes = [StarDep(name='buf196', mode=None)]
op196.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op196.met_dependencies = [StarDep(name='arg128_1', mode=None), StarDep(name='arg129_1', mode=None)]
op196.outputs = [
    buf196: ExternKernelOut
    buf196.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.node.kernel = extern_kernels.addmm


op197: ExternKernelSchedulerNode(FallbackKernel)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: FallbackKernel
    buf197.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
    ]
]
op197.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op198: ExternKernelSchedulerNode(MultiOutput)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf197', mode=None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: MultiOutput
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = None


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op202.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf202.users = [
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op202.node.kernel = extern_kernels.mm


op203_op204_op206: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op203_op204_op206.writes = 
    [   MemoryDep('buf203', c0, {c0: 1584}, None),
        MemoryDep('buf204', c0, {c0: 1584}, None),
        MemoryDep('buf206', c0, {c0: 1216512}, None)]
op203_op204_op206.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None)]
op203_op204_op206.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg132_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg133_1', c1, {c0: 1584, c1: 768}, None)]
op203_op204_op206.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op203_op204_op206.snodes[0] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1584}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None)]
op203.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf203.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1584, 768)
op203.sizes = ([1584], [768])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op203_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf203', get_index_3, getitem)
        return store_reduction
op203_op204_op206.snodes[1] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 1584}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None)]
op204.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (1584, 768)
op204.sizes = ([1584], [768])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op204_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf204', get_index_3, getitem_1)
        return store_reduction
op203_op204_op206.snodes[2] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1216512}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None),
        MemoryDep('buf203', c0, {c0: 1584}, None),
        MemoryDep('buf204', c0, {c0: 1584}, None)]
op206.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg132_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg133_1', c1, {c0: 1584, c1: 768}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1216512, 1)
op206.sizes = ([1584, 768], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op206_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf203', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf204', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg132_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg133_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf206', get_index_7, add_3, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelOut)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelOut
    buf207.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.mm


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 4866048}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 4866048}, None)]
op208.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 1584, c1: 3072}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (4866048, 1)
op208.sizes = ([1584, 3072], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op208_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg135_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf208', get_index_4, mul_2, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False)]
]
op209.node.kernel = extern_kernels.mm


op210_op211_op212_op214: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op210_op211_op212_op214.writes = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf211', c0, {c0: 1584}, None),
        MemoryDep('buf212', c0, {c0: 1584}, None),
        MemoryDep('buf214', c0, {c0: 1216512}, None)]
op210_op211_op212_op214.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None),
        MemoryDep('buf209', c0, {c0: 1216512}, None)]
op210_op211_op212_op214.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg138_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg139_1', c1, {c0: 1584, c1: 768}, None)]
op210_op211_op212_op214.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op210_op211_op212_op214.snodes[0] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 1216512}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf191', c0, {c0: 1216512}, None),
        MemoryDep('buf202', c0, {c0: 1216512}, None),
        MemoryDep('buf209', c0, {c0: 1216512}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 1584, c1: 768}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op210.group.device = cuda:0
op210.group.iteration = (1216512, 1)
op210.sizes = ([1584, 768], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op210_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf209', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg137_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf210', get_index_5, add_3, None)
        return store
op210_op211_op212_op214.snodes[1] =
op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 1584}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 1216512}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf211.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (1584, 768)
op211.sizes = ([1584], [768])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op211_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf211', get_index_1, getitem)
        return store_reduction
op210_op211_op212_op214.snodes[2] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 1584}, None)]
op212.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 1216512}, None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (1584, 768)
op212.sizes = ([1584], [768])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op212_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf212', get_index_1, getitem_1)
        return store_reduction
op210_op211_op212_op214.snodes[3] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 1216512}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf211', c0, {c0: 1584}, None),
        MemoryDep('buf212', c0, {c0: 1584}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg138_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg139_1', c1, {c0: 1584, c1: 768}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (1216512, 1)
op214.sizes = ([1584, 768], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op214_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf211', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf212', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg138_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg139_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf214', get_index_5, add_1, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg140_1', mode=None), StarDep(name='arg141_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[1584, 2304], stride=[2304, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.addmm


op216: ExternKernelSchedulerNode(FallbackKernel)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: FallbackKernel
    buf216.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
    ]
]
op216.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op217: ExternKernelSchedulerNode(MultiOutput)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: MultiOutput
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 12, 198, 64], stride=[152064, 64, 768, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op217.node.kernel = None


op221: ExternKernelSchedulerNode(ExternKernelOut)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op221.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelOut
    buf221.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False),
    ]
]
op221.node.kernel = extern_kernels.mm


op222_op223_op225: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op222_op223_op225.writes = 
    [   MemoryDep('buf222', c0, {c0: 1584}, None),
        MemoryDep('buf223', c0, {c0: 1584}, None),
        MemoryDep('buf225', c0, {c0: 1216512}, None)]
op222_op223_op225.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None)]
op222_op223_op225.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg144_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg145_1', c1, {c0: 1584, c1: 768}, None)]
op222_op223_op225.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op222_op223_op225.snodes[0] =
op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 1584}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None)]
op222.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf222.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (1584, 768)
op222.sizes = ([1584], [768])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op222_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem)
        return store_reduction
op222_op223_op225.snodes[1] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 1584}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None)]
op223.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf223.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (1584, 768)
op223.sizes = ([1584], [768])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op223_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf223', get_index_3, getitem_1)
        return store_reduction
op222_op223_op225.snodes[2] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1216512}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None),
        MemoryDep('buf222', c0, {c0: 1584}, None),
        MemoryDep('buf223', c0, {c0: 1584}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg144_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg145_1', c1, {c0: 1584, c1: 768}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (1216512, 1)
op225.sizes = ([1584, 768], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op225_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf222', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf223', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg144_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg145_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf225', get_index_7, add_3, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelOut)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelOut
    buf226.layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
]
op226.node.kernel = extern_kernels.mm


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 4866048}, None)]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 4866048}, None)]
op227.met_dependencies = [MemoryDep('arg147_1', c1, {c0: 1584, c1: 3072}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (4866048, 1)
op227.sizes = ([1584, 3072], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[1584, 3072], stride=[3072, 1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 3072], stride=[608256, 3072, 1])
class op227_loop_body:
    var_ranges = {z0: 1584, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf226', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg147_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf227', get_index_4, mul_2, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.node.kernel = extern_kernels.mm


op229_op230_op231_op233: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op229_op230_op231_op233.writes = 
    [   MemoryDep('buf229', c0, {c0: 1216512}, None),
        MemoryDep('buf230', c0, {c0: 1584}, None),
        MemoryDep('buf231', c0, {c0: 1584}, None),
        MemoryDep('buf233', c0, {c0: 1216512}, None)]
op229_op230_op231_op233.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None),
        MemoryDep('buf228', c0, {c0: 1216512}, None)]
op229_op230_op231_op233.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg149_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg150_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg151_1', c1, {c0: 1584, c1: 768}, None)]
op229_op230_op231_op233.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
    ]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf230.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf231.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf233.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
]
op229_op230_op231_op233.snodes[0] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 1216512}, None)]
op229.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 1216512}, None),
        MemoryDep('buf221', c0, {c0: 1216512}, None),
        MemoryDep('buf228', c0, {c0: 1216512}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg149_1', c1, {c0: 1584, c1: 768}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (1216512, 1)
op229.sizes = ([1584, 768], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[1584, 768], stride=[768, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op229_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf221', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf228', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg149_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf229', get_index_5, add_3, None)
        return store
op229_op230_op231_op233.snodes[1] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 1584}, None)]
op230.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 1216512}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf230.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (1584, 768)
op230.sizes = ([1584], [768])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op230_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_1, getitem)
        return store_reduction
op229_op230_op231_op233.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 1584}, None)]
op231.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 1216512}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
    buf231.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (1584, 768)
op231.sizes = ([1584], [768])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
class op231_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf231', get_index_1, getitem_1)
        return store_reduction
op229_op230_op231_op233.snodes[3] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 1216512}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 1216512}, None),
        MemoryDep('buf230', c0, {c0: 1584}, None),
        MemoryDep('buf231', c0, {c0: 1584}, None)]
op233.met_dependencies = 
    [   MemoryDep('arg150_1', c1, {c0: 1584, c1: 768}, None),
        MemoryDep('arg151_1', c1, {c0: 1584, c1: 768}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
    buf233.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
]
op233.group.device = cuda:0
op233.group.iteration = (1216512, 1)
op233.sizes = ([1584, 768], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 1], stride=[198, 1, 1600])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 198, 768], stride=[152064, 768, 1])
class op233_loop_body:
    var_ranges = {z0: 1584, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf230', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf231', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg150_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg151_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf233', get_index_5, add_1, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op234.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op234.node.kernel = extern_kernels.mm


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf233', mode=None)]
op235.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 8000}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf234', c0, {c0: 8000}, None),
        MemoryDep('buf235', c0, {c0: 8000}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg153_1', c1, {c0: 8, c1: 1000}, None),
        MemoryDep('arg155_1', c1, {c0: 8, c1: 1000}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf236.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (8000, 1)
op236.sizes = ([8, 1000], [])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[1000], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 1000}
    index0 = 1000*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf235', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg155_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf236', get_index_4, mul, None)
        return store



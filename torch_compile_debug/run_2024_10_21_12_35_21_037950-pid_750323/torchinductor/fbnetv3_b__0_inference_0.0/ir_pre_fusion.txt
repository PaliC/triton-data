op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 196608*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 65536}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1572864}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1572864, 1)
op0.sizes = ([8, 3, 65536], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 65536}
    index0 = 196608*z0 + 65536*z1 + z2
    index1 = 196608*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 16, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 432}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (432, 1)
op1.sizes = ([16, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 2097152}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 16}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (2097152, 1)
op3.sizes = ([131072, 16], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op3_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2097152}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (2097152, 1)
op4.sizes = ([2097152], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op4_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul_1, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 2097152}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 2097152}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 16}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (2097152, 1)
op6.sizes = ([131072, 16], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op6_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, add_1, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 2097152}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 2097152}, None)]
op7.met_dependencies = []
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (2097152, 1)
op7.sizes = ([2097152], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op7_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf6', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf7', get_index_2, mul_1, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf8.users = [NodeUser(node=SchedulerNode(name='op9'), can_inplace=True, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 2097152}, None)]
op9.unmet_dependencies = 
    [   MemoryDep('buf4', c0, {c0: 2097152}, None),
        MemoryDep('buf8', c0, {c0: 2097152}, None)]
op9.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg13_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg14_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg15_1', c1, {c0: 131072, c1: 16}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf9.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False),
    ]
]
op9.group.device = cuda:0
op9.group.iteration = (2097152, 1)
op9.sizes = ([131072, 16], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op9_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf4', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf9', get_index_6, add_2, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op10.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 2097152}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg18_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg19_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg20_1', c1, {c0: 131072, c1: 16}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (2097152, 1)
op11.sizes = ([131072, 16], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op11_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, add_1, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152}, None)]
op12.unmet_dependencies = [MemoryDep('buf11', c0, {c0: 2097152}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([2097152], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op12_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf11', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf12', get_index_2, mul_1, None)
        return store


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op14.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 2097152}, None),
        MemoryDep('buf9', c0, {c0: 2097152}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg23_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg24_1', c1, {c0: 131072, c1: 16}, None),
        MemoryDep('arg25_1', c1, {c0: 131072, c1: 16}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (2097152, 1)
op14.sizes = ([131072, 16], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 1, 2048, 16])
class op14_loop_body:
    var_ranges = {z0: 131072, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf9', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf14', get_index_6, add_2, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=True, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 8388608}, None)]
op16.unmet_dependencies = [MemoryDep('buf15', c0, {c0: 8388608}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg28_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg29_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg30_1', c1, {c0: 131072, c1: 64}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (8388608, 1)
op16.sizes = ([131072, 64], [])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op16_loop_body:
    var_ranges = {z0: 131072, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf16', get_index_5, add_1, None)
        return store


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 8388608}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 8388608}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (8388608, 1)
op17.sizes = ([8388608], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op17_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf16', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf17', get_index_2, mul_1, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 2097152}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 2097152}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg35_1', c1, {c0: 32768, c1: 64}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (2097152, 1)
op19.sizes = ([32768, 64], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op19_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, add_1, None)
        return store


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 2097152}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 2097152}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (2097152, 1)
op20.sizes = ([2097152], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op20_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf19', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf20', get_index_2, mul_1, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelAlloc)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelAlloc
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.convolution


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 786432}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 786432}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg38_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg40_1', c1, {c0: 32768, c1: 24}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf22.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (786432, 1)
op22.sizes = ([32768, 24], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
class op22_loop_body:
    var_ranges = {z0: 32768, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf22', get_index_5, add_1, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelAlloc)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelAlloc
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.convolution


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 1572864}, None)]
op24.unmet_dependencies = [MemoryDep('buf23', c0, {c0: 1572864}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg43_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg45_1', c1, {c0: 32768, c1: 48}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (1572864, 1)
op24.sizes = ([32768, 48], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op24_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf24', get_index_5, add_1, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 1572864}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 1572864}, None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (1572864, 1)
op25.sizes = ([1572864], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op25_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf25', get_index_2, mul_1, None)
        return store


op26: ExternKernelSchedulerNode(ExternKernelAlloc)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelAlloc
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.convolution


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 1572864}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 1572864}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg48_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg49_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg50_1', c1, {c0: 32768, c1: 48}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (1572864, 1)
op27.sizes = ([32768, 48], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op27_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, add_1, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1572864}, None)]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 1572864}, None)]
op28.met_dependencies = []
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1572864, 1)
op28.sizes = ([1572864], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op28_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf27', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf28', get_index_2, mul_1, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelAlloc)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelAlloc
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.node.kernel = extern_kernels.convolution


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 786432}, None)]
op30.unmet_dependencies = 
    [   MemoryDep('buf22', c0, {c0: 786432}, None),
        MemoryDep('buf29', c0, {c0: 786432}, None)]
op30.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg53_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg54_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg55_1', c1, {c0: 32768, c1: 24}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf30.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op30.group.device = cuda:0
op30.group.iteration = (786432, 1)
op30.sizes = ([32768, 24], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
class op30_loop_body:
    var_ranges = {z0: 32768, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf22', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf30', get_index_6, add_2, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf31.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 1572864}, None)]
op32.unmet_dependencies = [MemoryDep('buf31', c0, {c0: 1572864}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg58_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg59_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg60_1', c1, {c0: 32768, c1: 48}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (1572864, 1)
op32.sizes = ([32768, 48], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op32_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, add_1, None)
        return store


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 1572864}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 1572864}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (1572864, 1)
op33.sizes = ([1572864], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op33_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf32', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf33', get_index_2, mul_1, None)
        return store


op34: ExternKernelSchedulerNode(ExternKernelAlloc)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelAlloc
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.convolution


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 1572864}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 1572864}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg63_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg64_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg65_1', c1, {c0: 32768, c1: 48}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (1572864, 1)
op35.sizes = ([32768, 48], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op35_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf35', get_index_5, add_1, None)
        return store


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 1572864}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 1572864}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (1572864, 1)
op36.sizes = ([1572864], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op36_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf36', get_index_2, mul_1, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 786432}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 786432}, None),
        MemoryDep('buf37', c0, {c0: 786432}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg68_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg69_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg70_1', c1, {c0: 32768, c1: 24}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf38.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False),
    ]
]
op38.group.device = cuda:0
op38.group.iteration = (786432, 1)
op38.sizes = ([32768, 24], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
class op38_loop_body:
    var_ranges = {z0: 32768, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf30', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf38', get_index_6, add_2, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelAlloc)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelAlloc
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.node.kernel = extern_kernels.convolution


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 1572864}, None)]
op40.unmet_dependencies = [MemoryDep('buf39', c0, {c0: 1572864}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg73_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg74_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg75_1', c1, {c0: 32768, c1: 48}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (1572864, 1)
op40.sizes = ([32768, 48], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op40_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf40', get_index_5, add_1, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 1572864}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 1572864}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (1572864, 1)
op41.sizes = ([1572864], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op41_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf40', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf41', get_index_2, mul_1, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1572864}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 1572864}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg78_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg79_1', c1, {c0: 32768, c1: 48}, None),
        MemoryDep('arg80_1', c1, {c0: 32768, c1: 48}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1572864, 1)
op43.sizes = ([32768, 48], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op43_loop_body:
    var_ranges = {z0: 32768, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, add_1, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 1572864}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 1572864}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (1572864, 1)
op44.sizes = ([1572864], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 64, 64], stride=[196608, 1, 3072, 48])
class op44_loop_body:
    var_ranges = {z0: 1572864}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf44', get_index_2, mul_1, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 786432}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf38', c0, {c0: 786432}, None),
        MemoryDep('buf45', c0, {c0: 786432}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg83_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg84_1', c1, {c0: 32768, c1: 24}, None),
        MemoryDep('arg85_1', c1, {c0: 32768, c1: 24}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (786432, 1)
op46.sizes = ([32768, 24], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 64, 64], stride=[98304, 1, 1536, 24])
class op46_loop_body:
    var_ranges = {z0: 32768, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf38', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf46', get_index_6, add_2, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 3932160}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 3932160}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 32768, c1: 120}, None),
        MemoryDep('arg88_1', c1, {c0: 32768, c1: 120}, None),
        MemoryDep('arg89_1', c1, {c0: 32768, c1: 120}, None),
        MemoryDep('arg90_1', c1, {c0: 32768, c1: 120}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (3932160, 1)
op48.sizes = ([32768, 120], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
class op48_loop_body:
    var_ranges = {z0: 32768, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, add_1, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 3932160}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', c0, {c0: 3932160}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (3932160, 1)
op49.sizes = ([3932160], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 64, 64], stride=[491520, 1, 7680, 120])
class op49_loop_body:
    var_ranges = {z0: 3932160}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf49', get_index_2, mul_1, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 983040}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 983040}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg93_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg94_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg95_1', c1, {c0: 8192, c1: 120}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (983040, 1)
op51.sizes = ([8192, 120], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op51_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, add_1, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 7680}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', 15360*c0 + c1 + 120*c2, {c0: 64, c1: 120, c2: 128}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (7680, 128)
op52.sizes = ([64, 120], [128])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
class op52_loop_body:
    var_ranges = {z0: 64, z1: 120, z2: 128}
    index0 = 15360*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_2, reduction)
        return store_reduction


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 960}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', 960*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 8}, None)]
op53.met_dependencies = []
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (960, 8)
op53.sizes = ([8, 120], [8])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 8}
    index0 = 960*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf53', get_index_1, reduction)
        return store_reduction


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 960}, None)]
op54.unmet_dependencies = [MemoryDep('buf53', c0, {c0: 960}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (960, 1)
op54.sizes = ([960], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op54_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf54', get_index_1, truediv, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 64}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 64}, None)]
op56.met_dependencies = [MemoryDep('arg97_1', c1, {c0: 8, c1: 8}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (64, 1)
op56.sizes = ([8, 8], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[8], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 1, 1], stride=[8, 1, 1, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 8}
    index0 = 8*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf55', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf56', get_index_4, mul_1, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 983040}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 983040}, None),
        MemoryDep('buf57', 120*c0 + c2, {c0: 8, c1: 1024, c2: 120}, None)]
op58.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 8192, c1: 120}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (983040, 1)
op58.sizes = ([8, 1024, 120], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 120}
    index0 = 122880*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf51', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf57', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf58', get_index_4, mul_3, None)
        return store


op59: ExternKernelSchedulerNode(ExternKernelAlloc)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelAlloc
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.convolution


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 327680}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 327680}, None)]
op60.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg102_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg103_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg104_1', c1, {c0: 8192, c1: 40}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf60.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op60.group.device = cuda:0
op60.group.iteration = (327680, 1)
op60.sizes = ([8192, 40], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
class op60_loop_body:
    var_ranges = {z0: 8192, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg103_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg104_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf60', get_index_5, add_1, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg105_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 983040}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 983040}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg106_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg107_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg108_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg109_1', c1, {c0: 8192, c1: 120}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (983040, 1)
op62.sizes = ([8192, 120], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op62_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg106_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg109_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add_1, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 983040}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 983040}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (983040, 1)
op63.sizes = ([983040], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op63_loop_body:
    var_ranges = {z0: 983040}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf63', get_index_2, mul_1, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelAlloc)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelAlloc
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.node.kernel = extern_kernels.convolution


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 983040}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 983040}, None)]
op65.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg112_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg113_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg114_1', c1, {c0: 8192, c1: 120}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
    ]
]
op65.group.device = cuda:0
op65.group.iteration = (983040, 1)
op65.sizes = ([8192, 120], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op65_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg112_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg113_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf65', get_index_5, add_1, None)
        return store


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 7680}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', 15360*c0 + c1 + 120*c2, {c0: 64, c1: 120, c2: 128}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (7680, 128)
op66.sizes = ([64, 120], [128])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
class op66_loop_body:
    var_ranges = {z0: 64, z1: 120, z2: 128}
    index0 = 15360*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf66', get_index_2, reduction)
        return store_reduction


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 960}, None)]
op67.unmet_dependencies = [MemoryDep('buf66', 960*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 8}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (960, 8)
op67.sizes = ([8, 120], [8])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 8}
    index0 = 960*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf66', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_1, reduction)
        return store_reduction


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 960}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 960}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (960, 1)
op68.sizes = ([960], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op68_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf68', get_index_1, truediv, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelAlloc)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelAlloc
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.convolution


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 128}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 128}, None)]
op70.met_dependencies = [MemoryDep('arg116_1', c1, {c0: 8, c1: 16}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (128, 1)
op70.sizes = ([8, 16], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op70_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg116_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf69', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg116_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf70', get_index_4, mul_1, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 983040}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf65', c0, {c0: 983040}, None),
        MemoryDep('buf71', 120*c0 + c2, {c0: 8, c1: 1024, c2: 120}, None)]
op72.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 8192, c1: 120}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (983040, 1)
op72.sizes = ([8, 1024, 120], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op72_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 120}
    index0 = 122880*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf65', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf71', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg118_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf72', get_index_4, mul_3, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False)]
]
op73.node.kernel = extern_kernels.convolution


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 327680}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 327680}, None),
        MemoryDep('buf73', c0, {c0: 327680}, None)]
op74.met_dependencies = 
    [   MemoryDep('arg120_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg121_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg122_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg123_1', c1, {c0: 8192, c1: 40}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf74.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False),
    ]
]
op74.group.device = cuda:0
op74.group.iteration = (327680, 1)
op74.sizes = ([8192, 40], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
class op74_loop_body:
    var_ranges = {z0: 8192, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg121_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf60', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf74', get_index_6, add_2, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 983040}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 983040}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg126_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg127_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg128_1', c1, {c0: 8192, c1: 120}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (983040, 1)
op76.sizes = ([8192, 120], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op76_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg126_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg127_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg128_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf76', get_index_5, add_1, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 983040}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', c0, {c0: 983040}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (983040, 1)
op77.sizes = ([983040], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op77_loop_body:
    var_ranges = {z0: 983040}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf76', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf77', get_index_2, mul_1, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelAlloc)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelAlloc
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.convolution


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 983040}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 983040}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg131_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg132_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg133_1', c1, {c0: 8192, c1: 120}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (983040, 1)
op79.sizes = ([8192, 120], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op79_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg130_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg131_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, add_1, None)
        return store


op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 7680}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', 15360*c0 + c1 + 120*c2, {c0: 64, c1: 120, c2: 128}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (7680, 128)
op80.sizes = ([64, 120], [128])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
class op80_loop_body:
    var_ranges = {z0: 64, z1: 120, z2: 128}
    index0 = 15360*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_2, reduction)
        return store_reduction


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 960}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', 960*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 8}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf81.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (960, 8)
op81.sizes = ([8, 120], [8])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 8}
    index0 = 960*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, reduction)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 960}, None)]
op82.unmet_dependencies = [MemoryDep('buf81', c0, {c0: 960}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (960, 1)
op82.sizes = ([960], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op82_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf82', get_index_1, truediv, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelAlloc)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelAlloc
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.convolution


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 128}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 128}, None)]
op84.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 8, c1: 16}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (128, 1)
op84.sizes = ([8, 16], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op84_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg135_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_1, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelAlloc)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelAlloc
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.node.kernel = extern_kernels.convolution


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 983040}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 983040}, None),
        MemoryDep('buf85', 120*c0 + c2, {c0: 8, c1: 1024, c2: 120}, None)]
op86.met_dependencies = [MemoryDep('arg137_1', c1, {c0: 8192, c1: 120}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (983040, 1)
op86.sizes = ([8, 1024, 120], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op86_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 120}
    index0 = 122880*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf79', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf85', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg137_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf86', get_index_4, mul_3, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 327680}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf74', c0, {c0: 327680}, None),
        MemoryDep('buf87', c0, {c0: 327680}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg140_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg141_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg142_1', c1, {c0: 8192, c1: 40}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf88.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op88.group.device = cuda:0
op88.group.iteration = (327680, 1)
op88.sizes = ([8192, 40], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
class op88_loop_body:
    var_ranges = {z0: 8192, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg139_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg140_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg141_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg142_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf74', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf88', get_index_6, add_2, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 983040}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', c0, {c0: 983040}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg144_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg145_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg146_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg147_1', c1, {c0: 8192, c1: 120}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (983040, 1)
op90.sizes = ([8192, 120], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op90_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg145_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, add_1, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 983040}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 983040}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (983040, 1)
op91.sizes = ([983040], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op91_loop_body:
    var_ranges = {z0: 983040}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf90', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf91', get_index_2, mul_1, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 983040}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 983040}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg150_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg151_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg152_1', c1, {c0: 8192, c1: 120}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (983040, 1)
op93.sizes = ([8192, 120], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op93_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg150_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg152_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, add_1, None)
        return store


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 7680}, None)]
op94.unmet_dependencies = [MemoryDep('buf93', 15360*c0 + c1 + 120*c2, {c0: 64, c1: 120, c2: 128}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (7680, 128)
op94.sizes = ([64, 120], [128])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
class op94_loop_body:
    var_ranges = {z0: 64, z1: 120, z2: 128}
    index0 = 15360*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_2, reduction)
        return store_reduction


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 960}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', 960*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 8}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (960, 8)
op95.sizes = ([8, 120], [8])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op95_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 8}
    index0 = 960*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, reduction)
        return store_reduction


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 960}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 960}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (960, 1)
op96.sizes = ([960], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op96_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf96', get_index_1, truediv, None)
        return store


op97: ExternKernelSchedulerNode(ExternKernelAlloc)
op97.writes = [StarDep(name='buf97', mode=None)]
op97.unmet_dependencies = [StarDep(name='buf96', mode=None)]
op97.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op97.outputs = [
    buf97: ExternKernelAlloc
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False)]
]
op97.node.kernel = extern_kernels.convolution


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 128}, None)]
op98.unmet_dependencies = [MemoryDep('buf97', c0, {c0: 128}, None)]
op98.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 8, c1: 16}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (128, 1)
op98.sizes = ([8, 16], [])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf97', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf97', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf98', get_index_4, mul_1, None)
        return store


op99: ExternKernelSchedulerNode(ExternKernelAlloc)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf98', mode=None)]
op99.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelAlloc
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf99.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.convolution


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 983040}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 983040}, None),
        MemoryDep('buf99', 120*c0 + c2, {c0: 8, c1: 1024, c2: 120}, None)]
op100.met_dependencies = [MemoryDep('arg156_1', c1, {c0: 8192, c1: 120}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (983040, 1)
op100.sizes = ([8, 1024, 120], [])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 120}
    index0 = 122880*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf93', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf99', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf100', get_index_4, mul_3, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 327680}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 327680}, None),
        MemoryDep('buf88', c0, {c0: 327680}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg159_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg160_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg161_1', c1, {c0: 8192, c1: 40}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (327680, 1)
op102.sizes = ([8192, 40], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
class op102_loop_body:
    var_ranges = {z0: 8192, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf88', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf102', get_index_6, add_2, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 983040}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 983040}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg164_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg165_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg166_1', c1, {c0: 8192, c1: 120}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (983040, 1)
op104.sizes = ([8192, 120], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op104_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg166_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf104', get_index_5, add_1, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 983040}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 983040}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (983040, 1)
op105.sizes = ([983040], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op105_loop_body:
    var_ranges = {z0: 983040}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf104', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf105', get_index_2, mul_1, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg167_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf106.users = [NodeUser(node=SchedulerNode(name='op107'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', c0, {c0: 983040}, None)]
op107.unmet_dependencies = [MemoryDep('buf106', c0, {c0: 983040}, None)]
op107.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg169_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg170_1', c1, {c0: 8192, c1: 120}, None),
        MemoryDep('arg171_1', c1, {c0: 8192, c1: 120}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf107.users = [
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False),
    ]
]
op107.group.device = cuda:0
op107.group.iteration = (983040, 1)
op107.sizes = ([8192, 120], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op107_loop_body:
    var_ranges = {z0: 8192, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg168_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg169_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg170_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg171_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf107', get_index_5, add_1, None)
        return store


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 7680}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', 15360*c0 + c1 + 120*c2, {c0: 64, c1: 120, c2: 128}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (7680, 128)
op108.sizes = ([64, 120], [128])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
class op108_loop_body:
    var_ranges = {z0: 64, z1: 120, z2: 128}
    index0 = 15360*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_2, reduction)
        return store_reduction


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 960}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', 960*c0 + c1 + 120*c2, {c0: 8, c1: 120, c2: 8}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (960, 8)
op109.sizes = ([8, 120], [8])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1, 8], stride=[960, 1, 7680, 7680, 120])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 120, z2: 8}
    index0 = 960*z0 + z1 + 120*z2
    index1 = 120*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, reduction)
        return store_reduction


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 960}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 960}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (960, 1)
op110.sizes = ([960], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 960, 960])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
class op110_loop_body:
    var_ranges = {z0: 960}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf110', get_index_1, truediv, None)
        return store


op111: ExternKernelSchedulerNode(ExternKernelAlloc)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelAlloc
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.convolution


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 128}, None)]
op112.unmet_dependencies = [MemoryDep('buf111', c0, {c0: 128}, None)]
op112.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 8, c1: 16}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (128, 1)
op112.sizes = ([8, 16], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 1], stride=[16, 1, 1, 1])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 16}
    index0 = 16*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf111', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg173_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf112', get_index_4, mul_1, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelAlloc)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelAlloc
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.node.kernel = extern_kernels.convolution


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 983040}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 983040}, None),
        MemoryDep('buf113', 120*c0 + c2, {c0: 8, c1: 1024, c2: 120}, None)]
op114.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 8192, c1: 120}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (983040, 1)
op114.sizes = ([8, 1024, 120], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 1, 1], stride=[120, 1, 1, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 32, 32], stride=[122880, 1, 3840, 120])
class op114_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 120}
    index0 = 122880*z0 + 120*z1 + z2
    index1 = 120*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf107', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf113', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg175_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf114', get_index_4, mul_3, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelAlloc)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelAlloc
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.convolution


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 327680}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 327680}, None),
        MemoryDep('buf115', c0, {c0: 327680}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg178_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg179_1', c1, {c0: 8192, c1: 40}, None),
        MemoryDep('arg180_1', c1, {c0: 8192, c1: 40}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (327680, 1)
op116.sizes = ([8192, 40], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[40], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 40, 32, 32], stride=[40960, 1, 1280, 40])
class op116_loop_body:
    var_ranges = {z0: 8192, z1: 40}
    index0 = 40*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf102', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf116', get_index_6, add_2, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelAlloc)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelAlloc
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.convolution


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 1638400}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 1638400}, None)]
op118.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 8192, c1: 200}, None),
        MemoryDep('arg183_1', c1, {c0: 8192, c1: 200}, None),
        MemoryDep('arg184_1', c1, {c0: 8192, c1: 200}, None),
        MemoryDep('arg185_1', c1, {c0: 8192, c1: 200}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
    buf118.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (1638400, 1)
op118.sizes = ([8192, 200], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
class op118_loop_body:
    var_ranges = {z0: 8192, z1: 200}
    index0 = 200*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf118', get_index_5, add_1, None)
        return store


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 1638400}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 1638400}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
    buf119.users = [NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (1638400, 1)
op119.sizes = ([1638400], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 32, 32], stride=[204800, 1, 6400, 200])
class op119_loop_body:
    var_ranges = {z0: 1638400}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf118', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf119', get_index_2, mul_1, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelAlloc)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelAlloc
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
    buf120.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=True, is_weak=False)]
]
op120.node.kernel = extern_kernels.convolution


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 409600}, None)]
op121.unmet_dependencies = [MemoryDep('buf120', c0, {c0: 409600}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 2048, c1: 200}, None),
        MemoryDep('arg188_1', c1, {c0: 2048, c1: 200}, None),
        MemoryDep('arg189_1', c1, {c0: 2048, c1: 200}, None),
        MemoryDep('arg190_1', c1, {c0: 2048, c1: 200}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (409600, 1)
op121.sizes = ([2048, 200], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[200], stride=[1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
class op121_loop_body:
    var_ranges = {z0: 2048, z1: 200}
    index0 = 200*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf121', get_index_5, add_1, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 409600}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 409600}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (409600, 1)
op122.sizes = ([409600], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 200, 16, 16], stride=[51200, 1, 3200, 200])
class op122_loop_body:
    var_ranges = {z0: 409600}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf121', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf122', get_index_2, mul_1, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelAlloc)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelAlloc
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.convolution


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 147456}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 147456}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg193_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg194_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg195_1', c1, {c0: 2048, c1: 72}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf124.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (147456, 1)
op124.sizes = ([2048, 72], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
class op124_loop_body:
    var_ranges = {z0: 2048, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, add_1, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.convolution


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 442368}, None)]
op126.unmet_dependencies = [MemoryDep('buf125', c0, {c0: 442368}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg198_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg199_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg200_1', c1, {c0: 2048, c1: 216}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (442368, 1)
op126.sizes = ([2048, 216], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op126_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf126', get_index_5, add_1, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 442368}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 442368}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (442368, 1)
op127.sizes = ([442368], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op127_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf126', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf127', get_index_2, mul_1, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelAlloc)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelAlloc
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf128.users = [NodeUser(node=SchedulerNode(name='op129'), can_inplace=True, is_weak=False)]
]
op128.node.kernel = extern_kernels.convolution


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 442368}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 442368}, None)]
op129.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg203_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg204_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg205_1', c1, {c0: 2048, c1: 216}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (442368, 1)
op129.sizes = ([2048, 216], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op129_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf129', get_index_5, add_1, None)
        return store


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 442368}, None)]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 442368}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (442368, 1)
op130.sizes = ([442368], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op130_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf129', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf130', get_index_2, mul_1, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelAlloc)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelAlloc
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.convolution


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 147456}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf124', c0, {c0: 147456}, None),
        MemoryDep('buf131', c0, {c0: 147456}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg208_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg209_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg210_1', c1, {c0: 2048, c1: 72}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (147456, 1)
op132.sizes = ([2048, 72], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
class op132_loop_body:
    var_ranges = {z0: 2048, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf124', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf132', get_index_6, add_2, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 442368}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 442368}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg213_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg214_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg215_1', c1, {c0: 2048, c1: 216}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (442368, 1)
op134.sizes = ([2048, 216], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op134_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, add_1, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 442368}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', c0, {c0: 442368}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (442368, 1)
op135.sizes = ([442368], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op135_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf134', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf135', get_index_2, mul_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=True, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 442368}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 442368}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg218_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg219_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg220_1', c1, {c0: 2048, c1: 216}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (442368, 1)
op137.sizes = ([2048, 216], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op137_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf137', get_index_5, add_1, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 442368}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 442368}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (442368, 1)
op138.sizes = ([442368], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op138_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf137', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf138', get_index_2, mul_1, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelAlloc)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelAlloc
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf139.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False)]
]
op139.node.kernel = extern_kernels.convolution


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 147456}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 147456}, None),
        MemoryDep('buf139', c0, {c0: 147456}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg223_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg224_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg225_1', c1, {c0: 2048, c1: 72}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf140.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (147456, 1)
op140.sizes = ([2048, 72], [])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
class op140_loop_body:
    var_ranges = {z0: 2048, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf139', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf132', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf140', get_index_6, add_2, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelAlloc)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelAlloc
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.convolution


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 442368}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 442368}, None)]
op142.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg228_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg229_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg230_1', c1, {c0: 2048, c1: 216}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (442368, 1)
op142.sizes = ([2048, 216], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op142_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, add_1, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 442368}, None)]
op143.unmet_dependencies = [MemoryDep('buf142', c0, {c0: 442368}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (442368, 1)
op143.sizes = ([442368], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op143_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf142', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf143', get_index_2, mul_1, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.convolution


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 442368}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 442368}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg233_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg234_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg235_1', c1, {c0: 2048, c1: 216}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (442368, 1)
op145.sizes = ([2048, 216], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op145_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf145', get_index_5, add_1, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 442368}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 442368}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (442368, 1)
op146.sizes = ([442368], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op146_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf146', get_index_2, mul_1, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 147456}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf140', c0, {c0: 147456}, None),
        MemoryDep('buf147', c0, {c0: 147456}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg238_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg239_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg240_1', c1, {c0: 2048, c1: 72}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf148.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False),
    ]
]
op148.group.device = cuda:0
op148.group.iteration = (147456, 1)
op148.sizes = ([2048, 72], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
class op148_loop_body:
    var_ranges = {z0: 2048, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf140', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf148', get_index_6, add_2, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelAlloc)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelAlloc
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.node.kernel = extern_kernels.convolution


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 442368}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 442368}, None)]
op150.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg243_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg244_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg245_1', c1, {c0: 2048, c1: 216}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (442368, 1)
op150.sizes = ([2048, 216], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op150_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf150', get_index_5, add_1, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 442368}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 442368}, None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (442368, 1)
op151.sizes = ([442368], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op151_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf150', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf151', get_index_2, mul_1, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 442368}, None)]
op153.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 442368}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg248_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg249_1', c1, {c0: 2048, c1: 216}, None),
        MemoryDep('arg250_1', c1, {c0: 2048, c1: 216}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (442368, 1)
op153.sizes = ([2048, 216], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[216], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op153_loop_body:
    var_ranges = {z0: 2048, z1: 216}
    index0 = 216*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf153', get_index_5, add_1, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 442368}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 442368}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (442368, 1)
op154.sizes = ([442368], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 216, 16, 16], stride=[55296, 1, 3456, 216])
class op154_loop_body:
    var_ranges = {z0: 442368}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf153', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf154', get_index_2, mul_1, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelAlloc)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelAlloc
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf155.users = [NodeUser(node=SchedulerNode(name='op156'), can_inplace=True, is_weak=False)]
]
op155.node.kernel = extern_kernels.convolution


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 147456}, None)]
op156.unmet_dependencies = 
    [   MemoryDep('buf148', c0, {c0: 147456}, None),
        MemoryDep('buf155', c0, {c0: 147456}, None)]
op156.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg253_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg254_1', c1, {c0: 2048, c1: 72}, None),
        MemoryDep('arg255_1', c1, {c0: 2048, c1: 72}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (147456, 1)
op156.sizes = ([2048, 72], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 16, 16], stride=[18432, 1, 1152, 72])
class op156_loop_body:
    var_ranges = {z0: 2048, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf148', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf156', get_index_6, add_2, None)
        return store


op157: ExternKernelSchedulerNode(ExternKernelAlloc)
op157.writes = [StarDep(name='buf157', mode=None)]
op157.unmet_dependencies = [StarDep(name='buf156', mode=None)]
op157.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op157.outputs = [
    buf157: ExternKernelAlloc
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf157.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False)]
]
op157.node.kernel = extern_kernels.convolution


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 737280}, None)]
op158.unmet_dependencies = [MemoryDep('buf157', c0, {c0: 737280}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg258_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg259_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg260_1', c1, {c0: 2048, c1: 360}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (737280, 1)
op158.sizes = ([2048, 360], [])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op158_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf158', get_index_5, add_1, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 737280}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 737280}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (737280, 1)
op159.sizes = ([737280], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op159_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf158', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf159', get_index_2, mul_1, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg261_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=True, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 737280}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', c0, {c0: 737280}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg263_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg264_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg265_1', c1, {c0: 2048, c1: 360}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (737280, 1)
op161.sizes = ([2048, 360], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op161_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf161', get_index_5, add_1, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 5760}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf162.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (5760, 128)
op162.sizes = ([16, 360], [128])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op162_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_2, reduction)
        return store_reduction


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 2880}, None)]
op163.unmet_dependencies = [MemoryDep('buf162', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf163.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (2880, 2)
op163.sizes = ([8, 360], [2])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf162', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_1, reduction)
        return store_reduction


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 2880}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 2880}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (2880, 1)
op164.sizes = ([2880], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op164_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf164', get_index_1, truediv, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 192}, None)]
op166.unmet_dependencies = [MemoryDep('buf165', c0, {c0: 192}, None)]
op166.met_dependencies = [MemoryDep('arg267_1', c1, {c0: 8, c1: 24}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (192, 1)
op166.sizes = ([8, 24], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 1, 1], stride=[24, 1, 1, 1])
class op166_loop_body:
    var_ranges = {z0: 8, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf165', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg267_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf166', get_index_4, mul_1, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelAlloc)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelAlloc
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.convolution


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 737280}, None)]
op168.unmet_dependencies = 
    [   MemoryDep('buf161', c0, {c0: 737280}, None),
        MemoryDep('buf167', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op168.met_dependencies = [MemoryDep('arg269_1', c1, {c0: 2048, c1: 360}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf168.users = [NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (737280, 1)
op168.sizes = ([8, 256, 360], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op168_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf161', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf167', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg269_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf168', get_index_4, mul_3, None)
        return store


op169: ExternKernelSchedulerNode(ExternKernelAlloc)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = [StarDep(name='arg270_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelAlloc
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.convolution


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 245760}, None)]
op170.unmet_dependencies = [MemoryDep('buf169', c0, {c0: 245760}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg272_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg273_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg274_1', c1, {c0: 2048, c1: 120}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (245760, 1)
op170.sizes = ([2048, 120], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op170_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf169', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg271_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg272_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg274_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf170', get_index_5, add_1, None)
        return store


op171: ExternKernelSchedulerNode(ExternKernelAlloc)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg275_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelAlloc
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.convolution


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 737280}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 737280}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg276_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg277_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg278_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg279_1', c1, {c0: 2048, c1: 360}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf172.users = [NodeUser(node=SchedulerNode(name='op173'), can_inplace=True, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (737280, 1)
op172.sizes = ([2048, 360], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op172_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg276_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg277_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg278_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg279_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf172', get_index_5, add_1, None)
        return store


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 737280}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 737280}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (737280, 1)
op173.sizes = ([737280], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op173_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf172', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf173', get_index_2, mul_1, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelAlloc)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf173', mode=None)]
op174.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op174.outputs = [
    buf174: ExternKernelAlloc
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False)]
]
op174.node.kernel = extern_kernels.convolution


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 737280}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', c0, {c0: 737280}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg281_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg282_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg283_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg284_1', c1, {c0: 2048, c1: 360}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (737280, 1)
op175.sizes = ([2048, 360], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op175_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg282_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg283_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg284_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 5760}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (5760, 128)
op176.sizes = ([16, 360], [128])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op176_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf176', get_index_2, reduction)
        return store_reduction


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 2880}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (2880, 2)
op177.sizes = ([8, 360], [2])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf177', get_index_1, reduction)
        return store_reduction


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 2880}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 2880}, None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (2880, 1)
op178.sizes = ([2880], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op178_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf178', get_index_1, truediv, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg285_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 256}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 256}, None)]
op180.met_dependencies = [MemoryDep('arg286_1', c1, {c0: 8, c1: 32}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (256, 1)
op180.sizes = ([8, 32], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg286_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf179', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg286_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf180', get_index_4, mul_1, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.convolution


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 737280}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf175', c0, {c0: 737280}, None),
        MemoryDep('buf181', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op182.met_dependencies = [MemoryDep('arg288_1', c1, {c0: 2048, c1: 360}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (737280, 1)
op182.sizes = ([8, 256, 360], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op182_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf175', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf181', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg288_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf182', get_index_4, mul_3, None)
        return store


op183: ExternKernelSchedulerNode(ExternKernelAlloc)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelAlloc
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf183.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False)]
]
op183.node.kernel = extern_kernels.convolution


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 245760}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf170', c0, {c0: 245760}, None),
        MemoryDep('buf183', c0, {c0: 245760}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg291_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg292_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg293_1', c1, {c0: 2048, c1: 120}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf184.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op184.group.device = cuda:0
op184.group.iteration = (245760, 1)
op184.sizes = ([2048, 120], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op184_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg290_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg291_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg292_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg293_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf170', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf184', get_index_6, add_2, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelAlloc)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelAlloc
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False)]
]
op185.node.kernel = extern_kernels.convolution


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 737280}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 737280}, None)]
op186.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg296_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg297_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg298_1', c1, {c0: 2048, c1: 360}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (737280, 1)
op186.sizes = ([2048, 360], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op186_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg295_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg296_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg297_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg298_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf186', get_index_5, add_1, None)
        return store


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 737280}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 737280}, None)]
op187.met_dependencies = []
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (737280, 1)
op187.sizes = ([737280], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op187_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf186', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf187', get_index_2, mul_1, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg299_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 737280}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 737280}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg300_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg301_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg302_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg303_1', c1, {c0: 2048, c1: 360}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf189.users = [
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (737280, 1)
op189.sizes = ([2048, 360], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op189_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg300_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg301_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg302_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg303_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf189', get_index_5, add_1, None)
        return store


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 5760}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (5760, 128)
op190.sizes = ([16, 360], [128])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op190_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf189', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf190', get_index_2, reduction)
        return store_reduction


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2880}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (2880, 2)
op191.sizes = ([8, 360], [2])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf191', get_index_1, reduction)
        return store_reduction


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 2880}, None)]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 2880}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (2880, 1)
op192.sizes = ([2880], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op192_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf192', get_index_1, truediv, None)
        return store


op193: ExternKernelSchedulerNode(ExternKernelAlloc)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf192', mode=None)]
op193.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelAlloc
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf193.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False)]
]
op193.node.kernel = extern_kernels.convolution


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 256}, None)]
op194.unmet_dependencies = [MemoryDep('buf193', c0, {c0: 256}, None)]
op194.met_dependencies = [MemoryDep('arg305_1', c1, {c0: 8, c1: 32}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (256, 1)
op194.sizes = ([8, 32], [])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op194_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf193', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg305_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf193', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg305_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf194', get_index_4, mul_1, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelAlloc)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelAlloc
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = extern_kernels.convolution


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 737280}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 737280}, None),
        MemoryDep('buf195', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op196.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 2048, c1: 360}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (737280, 1)
op196.sizes = ([8, 256, 360], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf189', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf195', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg307_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf196', get_index_4, mul_3, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg308_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 245760}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf184', c0, {c0: 245760}, None),
        MemoryDep('buf197', c0, {c0: 245760}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg309_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg310_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg311_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg312_1', c1, {c0: 2048, c1: 120}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (245760, 1)
op198.sizes = ([2048, 120], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op198_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg309_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg310_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg311_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg312_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf184', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf198', get_index_6, add_2, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg313_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 737280}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 737280}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg314_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg315_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg316_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg317_1', c1, {c0: 2048, c1: 360}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (737280, 1)
op200.sizes = ([2048, 360], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op200_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg314_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg315_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg316_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg317_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf200', get_index_5, add_1, None)
        return store


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 737280}, None)]
op201.unmet_dependencies = [MemoryDep('buf200', c0, {c0: 737280}, None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (737280, 1)
op201.sizes = ([737280], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op201_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf200', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf201', get_index_2, mul_1, None)
        return store


op202: ExternKernelSchedulerNode(ExternKernelAlloc)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelAlloc
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.node.kernel = extern_kernels.convolution


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 737280}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 737280}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg319_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg320_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg321_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg322_1', c1, {c0: 2048, c1: 360}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=True, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (737280, 1)
op203.sizes = ([2048, 360], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op203_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg319_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg320_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg321_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg322_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf203', get_index_5, add_1, None)
        return store


op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 5760}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (5760, 128)
op204.sizes = ([16, 360], [128])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op204_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf203', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_2, reduction)
        return store_reduction


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 2880}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (2880, 2)
op205.sizes = ([8, 360], [2])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_1, reduction)
        return store_reduction


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 2880}, None)]
op206.unmet_dependencies = [MemoryDep('buf205', c0, {c0: 2880}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (2880, 1)
op206.sizes = ([2880], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op206_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf206', get_index_1, truediv, None)
        return store


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf207.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 256}, None)]
op208.unmet_dependencies = [MemoryDep('buf207', c0, {c0: 256}, None)]
op208.met_dependencies = [MemoryDep('arg324_1', c1, {c0: 8, c1: 32}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (256, 1)
op208.sizes = ([8, 32], [])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf207', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf207', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg324_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf208', get_index_4, mul_1, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelAlloc)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg325_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelAlloc
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.convolution


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 737280}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 737280}, None),
        MemoryDep('buf209', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op210.met_dependencies = [MemoryDep('arg326_1', c1, {c0: 2048, c1: 360}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (737280, 1)
op210.sizes = ([8, 256, 360], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf203', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf209', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg326_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf210', get_index_4, mul_3, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 245760}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 245760}, None),
        MemoryDep('buf211', c0, {c0: 245760}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg328_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg329_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg330_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg331_1', c1, {c0: 2048, c1: 120}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf212.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False),
    ]
]
op212.group.device = cuda:0
op212.group.iteration = (245760, 1)
op212.sizes = ([2048, 120], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op212_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg328_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg329_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg330_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg331_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf198', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf212', get_index_6, add_2, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelAlloc)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelAlloc
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.convolution


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 737280}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 737280}, None)]
op214.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg334_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg335_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg336_1', c1, {c0: 2048, c1: 360}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (737280, 1)
op214.sizes = ([2048, 360], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op214_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg334_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg335_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg336_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf214', get_index_5, add_1, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 737280}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 737280}, None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (737280, 1)
op215.sizes = ([737280], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op215_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf214', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, mul_1, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg337_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 737280}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 737280}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg338_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg339_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg340_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg341_1', c1, {c0: 2048, c1: 360}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (737280, 1)
op217.sizes = ([2048, 360], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op217_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg338_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg339_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg340_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg341_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_1, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 5760}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (5760, 128)
op218.sizes = ([16, 360], [128])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op218_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf217', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf218', get_index_2, reduction)
        return store_reduction


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2880}, None)]
op219.unmet_dependencies = [MemoryDep('buf218', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf219.users = [NodeUser(node=SchedulerNode(name='op220'), can_inplace=True, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (2880, 2)
op219.sizes = ([8, 360], [2])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op219_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf219', get_index_1, reduction)
        return store_reduction


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2880}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 2880}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (2880, 1)
op220.sizes = ([2880], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op220_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf220', get_index_1, truediv, None)
        return store


op221: ExternKernelSchedulerNode(ExternKernelAlloc)
op221.writes = [StarDep(name='buf221', mode=None)]
op221.unmet_dependencies = [StarDep(name='buf220', mode=None)]
op221.met_dependencies = [StarDep(name='arg342_1', mode=None)]
op221.outputs = [
    buf221: ExternKernelAlloc
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf221.users = [NodeUser(node=SchedulerNode(name='op222'), can_inplace=True, is_weak=False)]
]
op221.node.kernel = extern_kernels.convolution


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 256}, None)]
op222.unmet_dependencies = [MemoryDep('buf221', c0, {c0: 256}, None)]
op222.met_dependencies = [MemoryDep('arg343_1', c1, {c0: 8, c1: 32}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (256, 1)
op222.sizes = ([8, 32], [])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg343_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg343_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf222', get_index_4, mul_1, None)
        return store


op223: ExternKernelSchedulerNode(ExternKernelAlloc)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf222', mode=None)]
op223.met_dependencies = [StarDep(name='arg344_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelAlloc
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf223.users = [NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.convolution


op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 737280}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 737280}, None),
        MemoryDep('buf223', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op224.met_dependencies = [MemoryDep('arg345_1', c1, {c0: 2048, c1: 360}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (737280, 1)
op224.sizes = ([8, 256, 360], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op224_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf217', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf223', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg345_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf224', get_index_4, mul_3, None)
        return store


op225: ExternKernelSchedulerNode(ExternKernelAlloc)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = [StarDep(name='buf224', mode=None)]
op225.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op225.outputs = [
    buf225: ExternKernelAlloc
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf225.users = [NodeUser(node=SchedulerNode(name='op226'), can_inplace=True, is_weak=False)]
]
op225.node.kernel = extern_kernels.convolution


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 245760}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 245760}, None),
        MemoryDep('buf225', c0, {c0: 245760}, None)]
op226.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg348_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg349_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg350_1', c1, {c0: 2048, c1: 120}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf226.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op226.group.device = cuda:0
op226.group.iteration = (245760, 1)
op226.sizes = ([2048, 120], [])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op226_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf212', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf226', get_index_6, add_2, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelAlloc)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op227.met_dependencies = [StarDep(name='arg351_1', mode=None)]
op227.outputs = [
    buf227: ExternKernelAlloc
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf227.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False)]
]
op227.node.kernel = extern_kernels.convolution


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 737280}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 737280}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg353_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg354_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg355_1', c1, {c0: 2048, c1: 360}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=True, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (737280, 1)
op228.sizes = ([2048, 360], [])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op228_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf228', get_index_5, add_1, None)
        return store


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 737280}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', c0, {c0: 737280}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (737280, 1)
op229.sizes = ([737280], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op229_loop_body:
    var_ranges = {z0: 737280}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf228', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf229', get_index_2, mul_1, None)
        return store


op230: ExternKernelSchedulerNode(ExternKernelAlloc)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf229', mode=None)]
op230.met_dependencies = [StarDep(name='arg356_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelAlloc
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.convolution


op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 737280}, None)]
op231.unmet_dependencies = [MemoryDep('buf230', c0, {c0: 737280}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg358_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg359_1', c1, {c0: 2048, c1: 360}, None),
        MemoryDep('arg360_1', c1, {c0: 2048, c1: 360}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False),
    ]
]
op231.group.device = cuda:0
op231.group.iteration = (737280, 1)
op231.sizes = ([2048, 360], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op231_loop_body:
    var_ranges = {z0: 2048, z1: 360}
    index0 = 360*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf231', get_index_5, add_1, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 5760}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', 46080*c0 + c1 + 360*c2, {c0: 16, c1: 360, c2: 128}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (5760, 128)
op232.sizes = ([16, 360], [128])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
class op232_loop_body:
    var_ranges = {z0: 16, z1: 360, z2: 128}
    index0 = 46080*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_2, reduction)
        return store_reduction


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 2880}, None)]
op233.unmet_dependencies = [MemoryDep('buf232', 720*c0 + c1 + 360*c2, {c0: 8, c1: 360, c2: 2}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (2880, 2)
op233.sizes = ([8, 360], [2])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1, 2], stride=[720, 1, 5760, 5760, 360])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
class op233_loop_body:
    var_ranges = {z0: 8, z1: 360, z2: 2}
    index0 = 720*z0 + z1 + 360*z2
    index1 = 360*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_1, reduction)
        return store_reduction


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 2880}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 2880}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (2880, 1)
op234.sizes = ([2880], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 2880, 2880])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
class op234_loop_body:
    var_ranges = {z0: 2880}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf234', get_index_1, truediv, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg361_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 256}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 256}, None)]
op236.met_dependencies = [MemoryDep('arg362_1', c1, {c0: 8, c1: 32}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (256, 1)
op236.sizes = ([8, 32], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf235', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg362_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf236', get_index_4, mul_1, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelAlloc)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg363_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelAlloc
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.convolution


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 737280}, None)]
op238.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 737280}, None),
        MemoryDep('buf237', 360*c0 + c2, {c0: 8, c1: 256, c2: 360}, None)]
op238.met_dependencies = [MemoryDep('arg364_1', c1, {c0: 2048, c1: 360}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (737280, 1)
op238.sizes = ([8, 256, 360], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 1, 1], stride=[360, 1, 1, 1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[360], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 360, 16, 16], stride=[92160, 1, 5760, 360])
class op238_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 360}
    index0 = 92160*z0 + 360*z1 + z2
    index1 = 360*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf231', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf237', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg364_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf238', get_index_4, mul_3, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelAlloc)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg365_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelAlloc
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.convolution


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 245760}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 245760}, None),
        MemoryDep('buf239', c0, {c0: 245760}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg366_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg367_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg368_1', c1, {c0: 2048, c1: 120}, None),
        MemoryDep('arg369_1', c1, {c0: 2048, c1: 120}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
    buf240.users = [NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.group.device = cuda:0
op240.group.iteration = (245760, 1)
op240.sizes = ([2048, 120], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[120], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 120, 16, 16], stride=[30720, 1, 1920, 120])
class op240_loop_body:
    var_ranges = {z0: 2048, z1: 120}
    index0 = 120*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg366_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg367_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg368_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg369_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf226', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf240', get_index_6, add_2, None)
        return store


op241: ExternKernelSchedulerNode(ExternKernelAlloc)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg370_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelAlloc
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.convolution


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 1474560}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 1474560}, None)]
op242.met_dependencies = 
    [   MemoryDep('arg371_1', c1, {c0: 2048, c1: 720}, None),
        MemoryDep('arg372_1', c1, {c0: 2048, c1: 720}, None),
        MemoryDep('arg373_1', c1, {c0: 2048, c1: 720}, None),
        MemoryDep('arg374_1', c1, {c0: 2048, c1: 720}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (1474560, 1)
op242.sizes = ([2048, 720], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
class op242_loop_body:
    var_ranges = {z0: 2048, z1: 720}
    index0 = 720*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg372_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg373_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg374_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf242', get_index_5, add_1, None)
        return store


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 1474560}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 1474560}, None)]
op243.met_dependencies = []
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (1474560, 1)
op243.sizes = ([1474560], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 16, 16], stride=[184320, 1, 11520, 720])
class op243_loop_body:
    var_ranges = {z0: 1474560}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf242', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf243', get_index_2, mul_1, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg375_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=True, is_weak=False)]
]
op244.node.kernel = extern_kernels.convolution


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 368640}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 368640}, None)]
op245.met_dependencies = 
    [   MemoryDep('arg376_1', c1, {c0: 512, c1: 720}, None),
        MemoryDep('arg377_1', c1, {c0: 512, c1: 720}, None),
        MemoryDep('arg378_1', c1, {c0: 512, c1: 720}, None),
        MemoryDep('arg379_1', c1, {c0: 512, c1: 720}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
    buf245.users = [
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
    ]
]
op245.group.device = cuda:0
op245.group.iteration = (368640, 1)
op245.sizes = ([512, 720], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
arg376_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
class op245_loop_body:
    var_ranges = {z0: 512, z1: 720}
    index0 = 720*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg376_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg377_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg378_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg379_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf245', get_index_5, add_1, None)
        return store


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 5760}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', 46080*c0 + c1 + 720*c2, {c0: 8, c1: 720, c2: 64}, None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 5760, 5760])
    buf246.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (5760, 64)
op246.sizes = ([8, 720], [64])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 5760, 5760])
class op246_loop_body:
    var_ranges = {z0: 8, z1: 720, z2: 64}
    index0 = 46080*z0 + z1 + 720*z2
    index1 = 720*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf245', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf246', get_index_2, reduction)
        return store_reduction


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 5760}, None)]
op247.unmet_dependencies = [MemoryDep('buf246', c0, {c0: 5760}, None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 1, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (5760, 1)
op247.sizes = ([5760], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 5760, 5760])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 1, 1])
class op247_loop_body:
    var_ranges = {z0: 5760}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf247', get_index_1, truediv, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelAlloc)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg380_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelAlloc
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf248.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=True, is_weak=False)]
]
op248.node.kernel = extern_kernels.convolution


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 256}, None)]
op249.unmet_dependencies = [MemoryDep('buf248', c0, {c0: 256}, None)]
op249.met_dependencies = [MemoryDep('arg381_1', c1, {c0: 8, c1: 32}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (256, 1)
op249.sizes = ([8, 32], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
arg381_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 1, 1], stride=[32, 1, 1, 1])
class op249_loop_body:
    var_ranges = {z0: 8, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg381_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf248', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg381_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf249', get_index_4, mul_1, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelAlloc)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf249', mode=None)]
op250.met_dependencies = [StarDep(name='arg382_1', mode=None)]
op250.outputs = [
    buf250: ExternKernelAlloc
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 1, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.convolution


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 368640}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf245', c0, {c0: 368640}, None),
        MemoryDep('buf250', 720*c0 + c2, {c0: 8, c1: 64, c2: 720}, None)]
op251.met_dependencies = [MemoryDep('arg383_1', c1, {c0: 512, c1: 720}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (368640, 1)
op251.sizes = ([8, 64, 720], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 1, 1], stride=[720, 1, 1, 1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[720], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 720, 8, 8], stride=[46080, 1, 5760, 720])
class op251_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 720}
    index0 = 46080*z0 + 720*z1 + z2
    index1 = 720*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf245', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf250', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg383_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf251', get_index_4, mul_3, None)
        return store


op252: ExternKernelSchedulerNode(ExternKernelAlloc)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = [StarDep(name='buf251', mode=None)]
op252.met_dependencies = [StarDep(name='arg384_1', mode=None)]
op252.outputs = [
    buf252: ExternKernelAlloc
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op252.node.kernel = extern_kernels.convolution


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 94208}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 94208}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg385_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg386_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg387_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg388_1', c1, {c0: 512, c1: 184}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (94208, 1)
op253.sizes = ([512, 184], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op253_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg385_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg386_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg387_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg388_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf253', get_index_5, add_1, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelAlloc)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg389_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelAlloc
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.convolution


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 376832}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 376832}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg390_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg391_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg392_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg393_1', c1, {c0: 512, c1: 736}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf255.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (376832, 1)
op255.sizes = ([512, 736], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op255_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg390_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg391_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg392_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg393_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf255', get_index_5, add_1, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 376832}, None)]
op256.unmet_dependencies = [MemoryDep('buf255', c0, {c0: 376832}, None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (376832, 1)
op256.sizes = ([376832], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op256_loop_body:
    var_ranges = {z0: 376832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf255', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf256', get_index_2, mul_1, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelAlloc)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg394_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelAlloc
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=True, is_weak=False)]
]
op257.node.kernel = extern_kernels.convolution


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 376832}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', c0, {c0: 376832}, None)]
op258.met_dependencies = 
    [   MemoryDep('arg395_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg396_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg397_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg398_1', c1, {c0: 512, c1: 736}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf258.users = [
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (376832, 1)
op258.sizes = ([512, 736], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op258_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg395_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg396_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg397_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg398_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf258', get_index_5, add_1, None)
        return store


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 5888}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', 47104*c0 + c1 + 736*c2, {c0: 8, c1: 736, c2: 64}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
    buf259.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (5888, 64)
op259.sizes = ([8, 736], [64])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 736, z2: 64}
    index0 = 47104*z0 + z1 + 736*z2
    index1 = 736*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf259', get_index_2, reduction)
        return store_reduction


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 5888}, None)]
op260.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 5888}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (5888, 1)
op260.sizes = ([5888], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
class op260_loop_body:
    var_ranges = {z0: 5888}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf260', get_index_1, truediv, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelAlloc)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg399_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelAlloc
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False)]
]
op261.node.kernel = extern_kernels.convolution


op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 384}, None)]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 384}, None)]
op262.met_dependencies = [MemoryDep('arg400_1', c1, {c0: 8, c1: 48}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op262.group.device = cuda:0
op262.group.iteration = (384, 1)
op262.sizes = ([8, 48], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op262_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg400_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf261', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg400_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf262', get_index_4, mul_1, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelAlloc)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg401_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelAlloc
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.convolution


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 376832}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf258', c0, {c0: 376832}, None),
        MemoryDep('buf263', 736*c0 + c2, {c0: 8, c1: 64, c2: 736}, None)]
op264.met_dependencies = [MemoryDep('arg402_1', c1, {c0: 512, c1: 736}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (376832, 1)
op264.sizes = ([8, 64, 736], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op264_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 736}
    index0 = 47104*z0 + 736*z1 + z2
    index1 = 736*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf258', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf263', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg402_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf264', get_index_4, mul_3, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg403_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
]
op265.node.kernel = extern_kernels.convolution


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 94208}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 94208}, None),
        MemoryDep('buf265', c0, {c0: 94208}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg404_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg405_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg406_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg407_1', c1, {c0: 512, c1: 184}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (94208, 1)
op266.sizes = ([512, 184], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op266_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg404_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg405_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg406_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg407_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf253', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf266', get_index_6, add_2, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelAlloc)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg408_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelAlloc
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False)]
]
op267.node.kernel = extern_kernels.convolution


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 376832}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 376832}, None)]
op268.met_dependencies = 
    [   MemoryDep('arg409_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg410_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg411_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg412_1', c1, {c0: 512, c1: 736}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (376832, 1)
op268.sizes = ([512, 736], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op268_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg409_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg410_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg411_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg412_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf268', get_index_5, add_1, None)
        return store


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 376832}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 376832}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (376832, 1)
op269.sizes = ([376832], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op269_loop_body:
    var_ranges = {z0: 376832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf268', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, mul_1, None)
        return store


op270: ExternKernelSchedulerNode(ExternKernelAlloc)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg413_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelAlloc
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf270.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
]
op270.node.kernel = extern_kernels.convolution


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 376832}, None)]
op271.unmet_dependencies = [MemoryDep('buf270', c0, {c0: 376832}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg414_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg415_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg416_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg417_1', c1, {c0: 512, c1: 736}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False),
    ]
]
op271.group.device = cuda:0
op271.group.iteration = (376832, 1)
op271.sizes = ([512, 736], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op271_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg414_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg415_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg416_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg417_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 5888}, None)]
op272.unmet_dependencies = [MemoryDep('buf271', 47104*c0 + c1 + 736*c2, {c0: 8, c1: 736, c2: 64}, None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (5888, 64)
op272.sizes = ([8, 736], [64])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
class op272_loop_body:
    var_ranges = {z0: 8, z1: 736, z2: 64}
    index0 = 47104*z0 + z1 + 736*z2
    index1 = 736*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf271', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf272', get_index_2, reduction)
        return store_reduction


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 5888}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 5888}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (5888, 1)
op273.sizes = ([5888], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
class op273_loop_body:
    var_ranges = {z0: 5888}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf273', get_index_1, truediv, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelAlloc)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg418_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelAlloc
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False)]
]
op274.node.kernel = extern_kernels.convolution


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 384}, None)]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 384}, None)]
op275.met_dependencies = [MemoryDep('arg419_1', c1, {c0: 8, c1: 48}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (384, 1)
op275.sizes = ([8, 48], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg419_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf274', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg419_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf275', get_index_4, mul_1, None)
        return store


op276: ExternKernelSchedulerNode(ExternKernelAlloc)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='arg420_1', mode=None)]
op276.outputs = [
    buf276: ExternKernelAlloc
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.node.kernel = extern_kernels.convolution


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 376832}, None)]
op277.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 376832}, None),
        MemoryDep('buf276', 736*c0 + c2, {c0: 8, c1: 64, c2: 736}, None)]
op277.met_dependencies = [MemoryDep('arg421_1', c1, {c0: 512, c1: 736}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (376832, 1)
op277.sizes = ([8, 64, 736], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 736}
    index0 = 47104*z0 + 736*z1 + z2
    index1 = 736*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf271', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf276', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg421_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf277', get_index_4, mul_3, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelAlloc)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg422_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelAlloc
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.convolution


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 94208}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 94208}, None),
        MemoryDep('buf278', c0, {c0: 94208}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg423_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg424_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg425_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg426_1', c1, {c0: 512, c1: 184}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (94208, 1)
op279.sizes = ([512, 184], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg426_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op279_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg423_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg424_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg425_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg426_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf266', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf279', get_index_6, add_2, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg427_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.convolution


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 376832}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 376832}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg428_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg429_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg430_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg431_1', c1, {c0: 512, c1: 736}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (376832, 1)
op281.sizes = ([512, 736], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op281_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg428_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg429_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg430_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg431_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf281', get_index_5, add_1, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 376832}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', c0, {c0: 376832}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (376832, 1)
op282.sizes = ([376832], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op282_loop_body:
    var_ranges = {z0: 376832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf281', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf282', get_index_2, mul_1, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg432_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 376832}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 376832}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg433_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg434_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg435_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg436_1', c1, {c0: 512, c1: 736}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf284.users = [
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op284.group.device = cuda:0
op284.group.iteration = (376832, 1)
op284.sizes = ([512, 736], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op284_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg433_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg434_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg435_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg436_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf284', get_index_5, add_1, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 5888}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', 47104*c0 + c1 + 736*c2, {c0: 8, c1: 736, c2: 64}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (5888, 64)
op285.sizes = ([8, 736], [64])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
class op285_loop_body:
    var_ranges = {z0: 8, z1: 736, z2: 64}
    index0 = 47104*z0 + z1 + 736*z2
    index1 = 736*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf285', get_index_2, reduction)
        return store_reduction


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 5888}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 5888}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (5888, 1)
op286.sizes = ([5888], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
class op286_loop_body:
    var_ranges = {z0: 5888}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf286', get_index_1, truediv, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelAlloc)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg437_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelAlloc
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op287.node.kernel = extern_kernels.convolution


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 384}, None)]
op288.unmet_dependencies = [MemoryDep('buf287', c0, {c0: 384}, None)]
op288.met_dependencies = [MemoryDep('arg438_1', c1, {c0: 8, c1: 48}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (384, 1)
op288.sizes = ([8, 48], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op288_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg438_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf287', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg438_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf288', get_index_4, mul_1, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelAlloc)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='arg439_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelAlloc
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.convolution


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 376832}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf284', c0, {c0: 376832}, None),
        MemoryDep('buf289', 736*c0 + c2, {c0: 8, c1: 64, c2: 736}, None)]
op290.met_dependencies = [MemoryDep('arg440_1', c1, {c0: 512, c1: 736}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (376832, 1)
op290.sizes = ([8, 64, 736], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op290_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 736}
    index0 = 47104*z0 + 736*z1 + z2
    index1 = 736*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf284', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf289', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg440_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf290', get_index_4, mul_3, None)
        return store


op291: ExternKernelSchedulerNode(ExternKernelAlloc)
op291.writes = [StarDep(name='buf291', mode=None)]
op291.unmet_dependencies = [StarDep(name='buf290', mode=None)]
op291.met_dependencies = [StarDep(name='arg441_1', mode=None)]
op291.outputs = [
    buf291: ExternKernelAlloc
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf291.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False)]
]
op291.node.kernel = extern_kernels.convolution


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 94208}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 94208}, None),
        MemoryDep('buf291', c0, {c0: 94208}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg443_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg444_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg445_1', c1, {c0: 512, c1: 184}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (94208, 1)
op292.sizes = ([512, 184], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op292_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf279', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf292', get_index_6, add_2, None)
        return store


op293: ExternKernelSchedulerNode(ExternKernelAlloc)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg446_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelAlloc
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.convolution


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 376832}, None)]
op294.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 376832}, None)]
op294.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg448_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg449_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg450_1', c1, {c0: 512, c1: 736}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (376832, 1)
op294.sizes = ([512, 736], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op294_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg448_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg449_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg450_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf294', get_index_5, add_1, None)
        return store


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 376832}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 376832}, None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (376832, 1)
op295.sizes = ([376832], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op295_loop_body:
    var_ranges = {z0: 376832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf294', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf295', get_index_2, mul_1, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelAlloc)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg451_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelAlloc
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf296.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False)]
]
op296.node.kernel = extern_kernels.convolution


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 376832}, None)]
op297.unmet_dependencies = [MemoryDep('buf296', c0, {c0: 376832}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg453_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg454_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg455_1', c1, {c0: 512, c1: 736}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf297.users = [
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=True, is_weak=False),
    ]
]
op297.group.device = cuda:0
op297.group.iteration = (376832, 1)
op297.sizes = ([512, 736], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op297_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf297', get_index_5, add_1, None)
        return store


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 5888}, None)]
op298.unmet_dependencies = [MemoryDep('buf297', 47104*c0 + c1 + 736*c2, {c0: 8, c1: 736, c2: 64}, None)]
op298.met_dependencies = []
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
    buf298.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (5888, 64)
op298.sizes = ([8, 736], [64])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 736, z2: 64}
    index0 = 47104*z0 + z1 + 736*z2
    index1 = 736*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf297', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf298', get_index_2, reduction)
        return store_reduction


op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 5888}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 5888}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (5888, 1)
op299.sizes = ([5888], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
class op299_loop_body:
    var_ranges = {z0: 5888}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf299', get_index_1, truediv, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelAlloc)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg456_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelAlloc
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf300.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=True, is_weak=False)]
]
op300.node.kernel = extern_kernels.convolution


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 384}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 384}, None)]
op301.met_dependencies = [MemoryDep('arg457_1', c1, {c0: 8, c1: 48}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (384, 1)
op301.sizes = ([8, 48], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op301_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg457_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg457_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf301', get_index_4, mul_1, None)
        return store


op302: ExternKernelSchedulerNode(ExternKernelAlloc)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf301', mode=None)]
op302.met_dependencies = [StarDep(name='arg458_1', mode=None)]
op302.outputs = [
    buf302: ExternKernelAlloc
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.convolution


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 376832}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf297', c0, {c0: 376832}, None),
        MemoryDep('buf302', 736*c0 + c2, {c0: 8, c1: 64, c2: 736}, None)]
op303.met_dependencies = [MemoryDep('arg459_1', c1, {c0: 512, c1: 736}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (376832, 1)
op303.sizes = ([8, 64, 736], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op303_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 736}
    index0 = 47104*z0 + 736*z1 + z2
    index1 = 736*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf297', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf302', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg459_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf303', get_index_4, mul_3, None)
        return store


op304: ExternKernelSchedulerNode(ExternKernelAlloc)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op304.met_dependencies = [StarDep(name='arg460_1', mode=None)]
op304.outputs = [
    buf304: ExternKernelAlloc
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.node.kernel = extern_kernels.convolution


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 94208}, None)]
op305.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 94208}, None),
        MemoryDep('buf304', c0, {c0: 94208}, None)]
op305.met_dependencies = 
    [   MemoryDep('arg461_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg462_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg463_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg464_1', c1, {c0: 512, c1: 184}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf305.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False),
    ]
]
op305.group.device = cuda:0
op305.group.iteration = (94208, 1)
op305.sizes = ([512, 184], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg461_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op305_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg461_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg462_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg463_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg464_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf292', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf305', get_index_6, add_2, None)
        return store


op306: ExternKernelSchedulerNode(ExternKernelAlloc)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = [StarDep(name='arg465_1', mode=None)]
op306.outputs = [
    buf306: ExternKernelAlloc
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf306.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=True, is_weak=False)]
]
op306.node.kernel = extern_kernels.convolution


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 376832}, None)]
op307.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 376832}, None)]
op307.met_dependencies = 
    [   MemoryDep('arg466_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg467_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg468_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg469_1', c1, {c0: 512, c1: 736}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.group.device = cuda:0
op307.group.iteration = (376832, 1)
op307.sizes = ([512, 736], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op307_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg466_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg467_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg468_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg469_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf307', get_index_5, add_1, None)
        return store


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 376832}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 376832}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (376832, 1)
op308.sizes = ([376832], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op308_loop_body:
    var_ranges = {z0: 376832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf308', get_index_2, mul_1, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelAlloc)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg470_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelAlloc
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.convolution


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 376832}, None)]
op310.unmet_dependencies = [MemoryDep('buf309', c0, {c0: 376832}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg471_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg472_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg473_1', c1, {c0: 512, c1: 736}, None),
        MemoryDep('arg474_1', c1, {c0: 512, c1: 736}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
]
op310.group.device = cuda:0
op310.group.iteration = (376832, 1)
op310.sizes = ([512, 736], [])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
arg471_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op310_loop_body:
    var_ranges = {z0: 512, z1: 736}
    index0 = 736*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg471_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg472_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg473_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg474_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf310', get_index_5, add_1, None)
        return store


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 5888}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', 47104*c0 + c1 + 736*c2, {c0: 8, c1: 736, c2: 64}, None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (5888, 64)
op311.sizes = ([8, 736], [64])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 736, z2: 64}
    index0 = 47104*z0 + z1 + 736*z2
    index1 = 736*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf310', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf311', get_index_2, reduction)
        return store_reduction


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 5888}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 5888}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (5888, 1)
op312.sizes = ([5888], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 5888, 5888])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
class op312_loop_body:
    var_ranges = {z0: 5888}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, truediv, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelAlloc)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg475_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelAlloc
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.convolution


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 384}, None)]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 384}, None)]
op314.met_dependencies = [MemoryDep('arg476_1', c1, {c0: 8, c1: 48}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (384, 1)
op314.sizes = ([8, 48], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op314_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg476_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf313', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg476_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf314', get_index_4, mul_1, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg477_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.convolution


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 376832}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf310', c0, {c0: 376832}, None),
        MemoryDep('buf315', 736*c0 + c2, {c0: 8, c1: 64, c2: 736}, None)]
op316.met_dependencies = [MemoryDep('arg478_1', c1, {c0: 512, c1: 736}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (376832, 1)
op316.sizes = ([8, 64, 736], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 1, 1], stride=[736, 1, 1, 1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[736], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 736, 8, 8], stride=[47104, 1, 5888, 736])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 736}
    index0 = 47104*z0 + 736*z1 + z2
    index1 = 736*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf310', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf315', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg478_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf316', get_index_4, mul_3, None)
        return store


op317: ExternKernelSchedulerNode(ExternKernelAlloc)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg479_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelAlloc
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf317.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False)]
]
op317.node.kernel = extern_kernels.convolution


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 94208}, None)]
op318.unmet_dependencies = 
    [   MemoryDep('buf305', c0, {c0: 94208}, None),
        MemoryDep('buf317', c0, {c0: 94208}, None)]
op318.met_dependencies = 
    [   MemoryDep('arg480_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg481_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg482_1', c1, {c0: 512, c1: 184}, None),
        MemoryDep('arg483_1', c1, {c0: 512, c1: 184}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (94208, 1)
op318.sizes = ([512, 184], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[184], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 184, 8, 8], stride=[11776, 1, 1472, 184])
class op318_loop_body:
    var_ranges = {z0: 512, z1: 184}
    index0 = 184*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg480_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg481_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg482_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg483_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf305', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf318', get_index_6, add_2, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelAlloc)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = [StarDep(name='arg484_1', mode=None)]
op319.outputs = [
    buf319: ExternKernelAlloc
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.node.kernel = extern_kernels.convolution


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 565248}, None)]
op320.unmet_dependencies = [MemoryDep('buf319', c0, {c0: 565248}, None)]
op320.met_dependencies = 
    [   MemoryDep('arg485_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg486_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg487_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg488_1', c1, {c0: 512, c1: 1104}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf320.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (565248, 1)
op320.sizes = ([512, 1104], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
class op320_loop_body:
    var_ranges = {z0: 512, z1: 1104}
    index0 = 1104*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg485_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg486_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg487_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg488_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf320', get_index_5, add_1, None)
        return store


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 565248}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 565248}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (565248, 1)
op321.sizes = ([565248], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
class op321_loop_body:
    var_ranges = {z0: 565248}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf320', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf321', get_index_2, mul_1, None)
        return store


op322: ExternKernelSchedulerNode(ExternKernelAlloc)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = [StarDep(name='arg489_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelAlloc
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False)]
]
op322.node.kernel = extern_kernels.convolution


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 565248}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 565248}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg490_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg491_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg492_1', c1, {c0: 512, c1: 1104}, None),
        MemoryDep('arg493_1', c1, {c0: 512, c1: 1104}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (565248, 1)
op323.sizes = ([512, 1104], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
class op323_loop_body:
    var_ranges = {z0: 512, z1: 1104}
    index0 = 1104*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg490_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg491_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg492_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg493_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf323', get_index_5, add_1, None)
        return store


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 8832}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', 70656*c0 + c1 + 1104*c2, {c0: 8, c1: 1104, c2: 64}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 8832, 8832])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (8832, 64)
op324.sizes = ([8, 1104], [64])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 8832, 8832])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 1104, z2: 64}
    index0 = 70656*z0 + z1 + 1104*z2
    index1 = 1104*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf323', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_2, reduction)
        return store_reduction


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 8832}, None)]
op325.unmet_dependencies = [MemoryDep('buf324', c0, {c0: 8832}, None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 1, 1])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (8832, 1)
op325.sizes = ([8832], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 8832, 8832])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 1, 1])
class op325_loop_body:
    var_ranges = {z0: 8832}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf325', get_index_1, truediv, None)
        return store


op326: ExternKernelSchedulerNode(ExternKernelAlloc)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = [StarDep(name='arg494_1', mode=None)]
op326.outputs = [
    buf326: ExternKernelAlloc
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False)]
]
op326.node.kernel = extern_kernels.convolution


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 384}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 384}, None)]
op327.met_dependencies = [MemoryDep('arg495_1', c1, {c0: 8, c1: 48}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (384, 1)
op327.sizes = ([8, 48], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[48], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 48, 1, 1], stride=[48, 1, 1, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 48}
    index0 = 48*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg495_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf326', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg495_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add_2, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(add, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf327', get_index_4, mul_1, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelAlloc)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg496_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelAlloc
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 1, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.node.kernel = extern_kernels.convolution


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 565248}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 565248}, None),
        MemoryDep('buf328', 1104*c0 + c2, {c0: 8, c1: 64, c2: 1104}, None)]
op329.met_dependencies = [MemoryDep('arg497_1', c1, {c0: 512, c1: 1104}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
    buf329.users = [NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (565248, 1)
op329.sizes = ([8, 64, 1104], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 1, 1], stride=[1104, 1, 1, 1])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[1104], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1104, 8, 8], stride=[70656, 1, 8832, 1104])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 1104}
    index0 = 70656*z0 + 1104*z1 + z2
    index1 = 1104*z0 + z2
    index2 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf323', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf328', get_index_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg497_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_4 = ops.constant(3.0, torch.float32)
        add_2 = ops.add(add_1, constant_4)
        constant_5 = ops.constant(0.0, torch.float32)
        maximum_1 = ops.maximum(add_2, constant_5)
        constant_6 = ops.constant(6.0, torch.float32)
        minimum_1 = ops.minimum(maximum_1, constant_6)
        constant_7 = ops.constant(0.16666666666666666, torch.float32)
        mul_2 = ops.mul(minimum_1, constant_7)
        mul_3 = ops.mul(mul_1, mul_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf329', get_index_4, mul_3, None)
        return store


op330: ExternKernelSchedulerNode(ExternKernelAlloc)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg498_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelAlloc
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 8, 8], stride=[14336, 1, 1792, 224])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.convolution


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 114688}, None)]
op331.unmet_dependencies = [MemoryDep('buf330', c0, {c0: 114688}, None)]
op331.met_dependencies = 
    [   MemoryDep('arg499_1', c1, {c0: 512, c1: 224}, None),
        MemoryDep('arg500_1', c1, {c0: 512, c1: 224}, None),
        MemoryDep('arg501_1', c1, {c0: 512, c1: 224}, None),
        MemoryDep('arg502_1', c1, {c0: 512, c1: 224}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 8, 8], stride=[14336, 1, 1792, 224])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (114688, 1)
op331.sizes = ([512, 224], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 8, 8], stride=[14336, 1, 1792, 224])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 8, 8], stride=[14336, 1, 1792, 224])
class op331_loop_body:
    var_ranges = {z0: 512, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg499_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg500_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg501_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg502_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf331', get_index_5, add_1, None)
        return store


op332: ExternKernelSchedulerNode(ExternKernelAlloc)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg503_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelAlloc
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 8, 8], stride=[86016, 1, 10752, 1344])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op332.node.kernel = extern_kernels.convolution


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 688128}, None)]
op333.unmet_dependencies = [MemoryDep('buf332', c0, {c0: 688128}, None)]
op333.met_dependencies = 
    [   MemoryDep('arg504_1', c1, {c0: 512, c1: 1344}, None),
        MemoryDep('arg505_1', c1, {c0: 512, c1: 1344}, None),
        MemoryDep('arg506_1', c1, {c0: 512, c1: 1344}, None),
        MemoryDep('arg507_1', c1, {c0: 512, c1: 1344}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 8, 8], stride=[86016, 1, 10752, 1344])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (688128, 1)
op333.sizes = ([512, 1344], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 8, 8], stride=[86016, 1, 10752, 1344])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[1344], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[1344], stride=[1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[1344], stride=[1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[1344], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 8, 8], stride=[86016, 1, 10752, 1344])
class op333_loop_body:
    var_ranges = {z0: 512, z1: 1344}
    index0 = 1344*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg504_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg505_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg506_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg507_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf333', get_index_5, add_1, None)
        return store


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 10752}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', 86016*c0 + c1 + 1344*c2, {c0: 8, c1: 1344, c2: 64}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 1, 1], stride=[1344, 1, 10752, 10752])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (10752, 64)
op334.sizes = ([8, 1344], [64])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 8, 8], stride=[86016, 1, 10752, 1344])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 1, 1], stride=[1344, 1, 10752, 10752])
class op334_loop_body:
    var_ranges = {z0: 8, z1: 1344, z2: 64}
    index0 = 86016*z0 + z1 + 1344*z2
    index1 = 1344*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf333', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_1)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf334', get_index_2, reduction)
        return store_reduction


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 10752}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 10752}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 1, 1], stride=[1344, 1, 1, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (10752, 1)
op335.sizes = ([10752], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 1, 1], stride=[1344, 1, 10752, 10752])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 1344, 1, 1], stride=[1344, 1, 1, 1])
class op335_loop_body:
    var_ranges = {z0: 10752}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf335', get_index_1, truediv, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg508_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 1984, 1, 1], stride=[1984, 1, 1, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 15872}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', c0, {c0: 15872}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 1984, 1, 1], stride=[1984, 1, 15872, 15872])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (15872, 1)
op337.sizes = ([15872], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 1984, 1, 1], stride=[1984, 1, 1, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 1984, 1, 1], stride=[1984, 1, 15872, 15872])
class op337_loop_body:
    var_ranges = {z0: 15872}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf336', get_index_1)
        constant = ops.constant(3.0, torch.float32)
        add = ops.add(load_1, constant)
        constant_1 = ops.constant(0.0, torch.float32)
        maximum = ops.maximum(add, constant_1)
        constant_2 = ops.constant(6.0, torch.float32)
        minimum = ops.minimum(maximum, constant_2)
        mul = ops.mul(load, minimum)
        constant_3 = ops.constant(0.16666666666666666, torch.float32)
        mul_1 = ops.mul(mul, constant_3)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf337', get_index_2, mul_1, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg509_1', mode=None), StarDep(name='arg510_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf338.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op338.node.kernel = extern_kernels.addmm



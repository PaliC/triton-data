op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 196608*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 65536}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1572864}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1572864, 1)
op0.sizes = ([8, 3, 65536], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 1, 768, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 65536}
    index0 = 196608*z0 + 65536*z1 + z2
    index1 = 196608*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 24, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 648}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (648, 1)
op1.sizes = ([24, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[24, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 24, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3145728}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3145728}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg3_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg4_1', c1, {c0: 131072, c1: 24}, None),
        MemoryDep('arg5_1', c1, {c0: 131072, c1: 24}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3145728, 1)
op3.sizes = ([131072, 24], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
class op3_loop_body:
    var_ranges = {z0: 131072, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, add_1, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 3145728}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 3145728}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (3145728, 1)
op4.sizes = ([3145728], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 128, 128], stride=[393216, 1, 3072, 24])
class op4_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf3', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf4', get_index_2, mul, None)
        return store


op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', 216*c0 + c1 + 24*c2, {c0: 32, c1: 24, c2: 9}, None)]
op5.unmet_dependencies = []
op5.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 6912}, None)]
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 1, 72, 24])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (6912, 1)
op5.sizes = ([32, 24, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 9, 3, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[32, 24, 3, 3], stride=[216, 1, 72, 24])
class op5_loop_body:
    var_ranges = {z0: 32, z1: 24, z2: 9}
    index0 = 216*z0 + 9*z1 + z2
    index1 = 216*z0 + z1 + 24*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf5', get_index_1, load, None)
        return store


op6: ExternKernelSchedulerNode(ExternKernelAlloc)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None), StarDep(name='buf5', mode=None)]
op6.met_dependencies = []
op6.outputs = [
    buf6: ExternKernelAlloc
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf6.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=True, is_weak=False)]
]
op6.node.kernel = extern_kernels.convolution


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op7.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 4194304}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg7_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg8_1', c1, {c0: 131072, c1: 32}, None),
        MemoryDep('arg9_1', c1, {c0: 131072, c1: 32}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (4194304, 1)
op7.sizes = ([131072, 32], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op7_loop_body:
    var_ranges = {z0: 131072, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf6', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf7', get_index_5, add_1, None)
        return store


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 4194304}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 4194304}, None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (4194304, 1)
op8.sizes = ([4194304], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 1, 4096, 32])
class op8_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf7', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf8', get_index_2, mul, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 288*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 9}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 18432}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (18432, 1)
op9.sizes = ([64, 32, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
class op9_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 8388608}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 8388608}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 131072, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 131072, c1: 64}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (8388608, 1)
op11.sizes = ([131072, 64], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
class op11_loop_body:
    var_ranges = {z0: 131072, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, add_1, None)
        return store


op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 2097152}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf11', 16384*c0 + 128*c1 + c2 + 64, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 + 8128, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 + 8192, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 + 8256, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 - 64, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 - 8128, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 - 8192, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2 - 8256, {c0: 512, c1: 64, c2: 64}, None),
        MemoryDep('buf11', 16384*c0 + 128*c1 + c2, {c0: 512, c1: 64, c2: 64}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf12.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
    ]
]
op12.group.device = cuda:0
op12.group.iteration = (2097152, 1)
op12.sizes = ([8, 64, 64, 64], [])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 1, 8192, 64])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op12_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64, z3: 64}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 1048576*z0 + 16384*z1 + 128*z2 + z3 - 8256
    index3 = 2*z2
    index4 = 1048576*z0 + 16384*z1 + 128*z2 + z3 - 8192
    index5 = 2*z2 + 1
    index6 = 1048576*z0 + 16384*z1 + 128*z2 + z3 - 8128
    index7 = 2*z1
    index8 = 1048576*z0 + 16384*z1 + 128*z2 + z3 - 64
    index9 = 1048576*z0 + 16384*z1 + 128*z2 + z3
    index10 = 1048576*z0 + 16384*z1 + 128*z2 + z3 + 64
    index11 = 2*z1 + 1
    index12 = 1048576*z0 + 16384*z1 + 128*z2 + z3 + 8128
    index13 = 1048576*z0 + 16384*z1 + 128*z2 + z3 + 8192
    index14 = 1048576*z0 + 16384*z1 + 128*z2 + z3 + 8256
    index15 = 262144*z0 + 4096*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(128, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(128, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(128, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(128, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(128, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(128, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(128, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(128, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(128, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(128, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(128, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(128, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(128, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(128, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(128, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf12', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index2')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index9')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index10')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index12')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index13')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf11', get_index)
        get_index_1 = self.get_index('index14')
        load_1 = ops.load('buf11', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        return mul


op13: ExternKernelSchedulerNode(ExternKernelAlloc)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op13.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelAlloc
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf13.users = [NodeUser(node=SchedulerNode(name='op14'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.convolution


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op14.unmet_dependencies = [MemoryDep('buf13', c0, {c0: 2097152}, None)]
op14.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg18_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg19_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg20_1', c1, {c0: 32768, c1: 64}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (2097152, 1)
op14.sizes = ([32768, 64], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op14_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf14', get_index_5, add_1, None)
        return store


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 2097152}, None)]
op15.unmet_dependencies = [MemoryDep('buf14', c0, {c0: 2097152}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (2097152, 1)
op15.sizes = ([2097152], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op15_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf14', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf15', get_index_2, mul, None)
        return store


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', 144*c0 + c1 + 16*c2, {c0: 64, c1: 16, c2: 9}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = [MemoryDep('arg21_1', c0, {c0: 9216}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 1, 48, 16])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (9216, 1)
op16.sizes = ([64, 16, 9], [])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 9, 3, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 1, 48, 16])
class op16_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg21_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf16', get_index_1, load, None)
        return store


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf16', mode=None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 2097152}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 2097152}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg23_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg24_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 32768, c1: 64}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (2097152, 1)
op18.sizes = ([32768, 64], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op18_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, add_1, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 16384}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', 8192*c0 + c1 + 64*c2, {c0: 256, c1: 64, c2: 128}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
    buf19.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (16384, 128)
op19.sizes = ([256, 64], [128])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
class op19_loop_body:
    var_ranges = {z0: 256, z1: 64, z2: 128}
    index0 = 8192*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 512}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (512, 32)
op20.sizes = ([8, 64], [32])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
class op20_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 32}
    index0 = 2048*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_1, reduction)
        return store_reduction


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 512}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 512}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (512, 1)
op21.sizes = ([512], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
class op21_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf21', get_index_1, truediv, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 64], stride=[64, 64, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 2097152}, None),
        MemoryDep('buf22', 64*c0 + c2, {c0: 8, c1: 4096, c2: 64}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (2097152, 1)
op23.sizes = ([8, 4096, 64], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 64], stride=[64, 64, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 4096, z2: 64}
    index0 = 262144*z0 + 64*z1 + z2
    index1 = 64*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf18', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf22', get_index_2)
        sigmoid_1 = ops.sigmoid(load_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf23', get_index_3, mul_1, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelAlloc)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelAlloc
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf24.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.convolution


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf12', mode=None)]
op25.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 8388608}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 8388608}, None),
        MemoryDep('buf25', c0, {c0: 8388608}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg28_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg29_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg30_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg31_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg33_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg35_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg36_1', c1, {c0: 32768, c1: 256}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (8388608, 1)
op26.sizes = ([32768, 256], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op26_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg29_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg30_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg31_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf25', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg33_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg34_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg35_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg36_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf26', get_index_10, add_4, None)
        return store


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 8388608}, None)]
op27.unmet_dependencies = [MemoryDep('buf26', c0, {c0: 8388608}, None)]
op27.met_dependencies = []
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (8388608, 1)
op27.sizes = ([8388608], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op27_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf26', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf27', get_index_2, mul, None)
        return store


op28: ExternKernelSchedulerNode(ExternKernelAlloc)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelAlloc
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.convolution


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 2097152}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 2097152}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg38_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg39_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg40_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg41_1', c1, {c0: 32768, c1: 64}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf29.users = [NodeUser(node=SchedulerNode(name='op30'), can_inplace=True, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (2097152, 1)
op29.sizes = ([32768, 64], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op29_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg38_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg39_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg41_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf29', get_index_5, add_1, None)
        return store


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 2097152}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 2097152}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (2097152, 1)
op30.sizes = ([2097152], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op30_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf29', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf30', get_index_2, mul, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', 144*c0 + c1 + 16*c2, {c0: 64, c1: 16, c2: 9}, None)]
op31.unmet_dependencies = []
op31.met_dependencies = [MemoryDep('arg42_1', c0, {c0: 9216}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 1, 48, 16])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (9216, 1)
op31.sizes = ([64, 16, 9], [])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 9, 3, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[64, 16, 3, 3], stride=[144, 1, 48, 16])
class op31_loop_body:
    var_ranges = {z0: 64, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf31', get_index_1, load, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 2097152}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 2097152}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg43_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg45_1', c1, {c0: 32768, c1: 64}, None),
        MemoryDep('arg46_1', c1, {c0: 32768, c1: 64}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf33.users = [
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (2097152, 1)
op33.sizes = ([32768, 64], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op33_loop_body:
    var_ranges = {z0: 32768, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg45_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg46_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, add_1, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 16384}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', 8192*c0 + c1 + 64*c2, {c0: 256, c1: 64, c2: 128}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (16384, 128)
op34.sizes = ([256, 64], [128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
class op34_loop_body:
    var_ranges = {z0: 256, z1: 64, z2: 128}
    index0 = 8192*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_2, reduction)
        return store_reduction


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 512}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', 2048*c0 + c1 + 64*c2, {c0: 8, c1: 64, c2: 32}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (512, 32)
op35.sizes = ([8, 64], [32])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 32], stride=[2048, 1, 64])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
class op35_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 32}
    index0 = 2048*z0 + z1 + 64*z2
    index1 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_1, reduction)
        return store_reduction


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 512}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 512}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (512, 1)
op36.sizes = ([512], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 64], stride=[64, 1])
class op36_loop_body:
    var_ranges = {z0: 512}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf36', get_index_1, truediv, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 64], stride=[64, 64, 1])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 2097152}, None)]
op38.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 2097152}, None),
        MemoryDep('buf37', 64*c0 + c2, {c0: 8, c1: 4096, c2: 64}, None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (2097152, 1)
op38.sizes = ([8, 4096, 64], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 64], stride=[64, 64, 1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 64, 64], stride=[262144, 1, 4096, 64])
class op38_loop_body:
    var_ranges = {z0: 8, z1: 4096, z2: 64}
    index0 = 262144*z0 + 64*z1 + z2
    index1 = 64*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf33', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf37', get_index_2)
        sigmoid_1 = ops.sigmoid(load_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf38', get_index_3, mul_1, None)
        return store


op39: ExternKernelSchedulerNode(ExternKernelAlloc)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf38', mode=None)]
op39.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelAlloc
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf39.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False)]
]
op39.node.kernel = extern_kernels.convolution


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 8388608}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 8388608}, None),
        MemoryDep('buf39', c0, {c0: 8388608}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg49_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg50_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg51_1', c1, {c0: 32768, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 32768, c1: 256}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (8388608, 1)
op40.sizes = ([32768, 256], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op40_loop_body:
    var_ranges = {z0: 32768, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg52_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf27', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf40', get_index_6, add_2, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 8388608}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 8388608}, None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (8388608, 1)
op41.sizes = ([8388608], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 1, 16384, 256])
class op41_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf40', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf41', get_index_2, mul, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 4194304}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 4194304}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg54_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg55_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg56_1', c1, {c0: 32768, c1: 128}, None),
        MemoryDep('arg57_1', c1, {c0: 32768, c1: 128}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf43.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (4194304, 1)
op43.sizes = ([32768, 128], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op43_loop_body:
    var_ranges = {z0: 32768, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg55_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg56_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg57_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, add_1, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 4194304}, None)]
op44.unmet_dependencies = [MemoryDep('buf43', c0, {c0: 4194304}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (4194304, 1)
op44.sizes = ([4194304], [])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 1, 8192, 128])
class op44_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf43', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf44', get_index_2, mul, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 144*c0 + c1 + 16*c2, {c0: 128, c1: 16, c2: 9}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg58_1', c0, {c0: 18432}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 1, 48, 16])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (18432, 1)
op45.sizes = ([128, 16, 9], [])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 9, 3, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 1, 48, 16])
class op45_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg58_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 1048576}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 1048576}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg59_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg60_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg61_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg62_1', c1, {c0: 8192, c1: 128}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (1048576, 1)
op47.sizes = ([8192, 128], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op47_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg60_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg62_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf47', get_index_5, add_1, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 8192}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', 16384*c0 + c1 + 128*c2, {c0: 64, c1: 128, c2: 128}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (8192, 128)
op48.sizes = ([64, 128], [128])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
class op48_loop_body:
    var_ranges = {z0: 64, z1: 128, z2: 128}
    index0 = 16384*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_2, reduction)
        return store_reduction


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 1024}, None)]
op49.unmet_dependencies = [MemoryDep('buf48', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1024, 8)
op49.sizes = ([8, 128], [8])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 8}
    index0 = 1024*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, reduction)
        return store_reduction


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 1024}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 1024}, None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (1024, 1)
op50.sizes = ([1024], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
class op50_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf50', get_index_1, truediv, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg63_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False)]
]
op51.node.kernel = extern_kernels.convolution


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 1048576}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf47', c0, {c0: 1048576}, None),
        MemoryDep('buf51', 128*c0 + c2, {c0: 8, c1: 1024, c2: 128}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (1048576, 1)
op52.sizes = ([8, 1024, 128], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 128}
    index0 = 131072*z0 + 128*z1 + z2
    index1 = 128*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf47', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf51', get_index_2)
        sigmoid_1 = ops.sigmoid(load_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf52', get_index_3, mul_1, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelAlloc)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelAlloc
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.convolution


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op54.met_dependencies = [StarDep(name='arg69_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 4194304}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf53', c0, {c0: 4194304}, None),
        MemoryDep('buf54', c0, {c0: 4194304}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg65_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg66_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg67_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg71_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg72_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 8192, c1: 512}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (4194304, 1)
op55.sizes = ([8192, 512], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op55_loop_body:
    var_ranges = {z0: 8192, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg66_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg67_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf54', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg70_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg71_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg72_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg73_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf55', get_index_10, add_4, None)
        return store


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 4194304}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 4194304}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (4194304, 1)
op56.sizes = ([4194304], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op56_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf55', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, mul, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 1048576}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 1048576}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg75_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg76_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg77_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg78_1', c1, {c0: 8192, c1: 128}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (1048576, 1)
op58.sizes = ([8192, 128], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op58_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg75_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg76_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg78_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_1, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 1048576}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 1048576}, None)]
op59.met_dependencies = []
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (1048576, 1)
op59.sizes = ([1048576], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op59_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf58', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf59', get_index_2, mul, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', 144*c0 + c1 + 16*c2, {c0: 128, c1: 16, c2: 9}, None)]
op60.unmet_dependencies = []
op60.met_dependencies = [MemoryDep('arg79_1', c0, {c0: 18432}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 1, 48, 16])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (18432, 1)
op60.sizes = ([128, 16, 9], [])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 9, 3, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[128, 16, 3, 3], stride=[144, 1, 48, 16])
class op60_loop_body:
    var_ranges = {z0: 128, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf60', get_index_1, load, None)
        return store


op61: ExternKernelSchedulerNode(ExternKernelAlloc)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf59', mode=None), StarDep(name='buf60', mode=None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ExternKernelAlloc
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.convolution


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 1048576}, None)]
op62.unmet_dependencies = [MemoryDep('buf61', c0, {c0: 1048576}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg80_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg81_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg82_1', c1, {c0: 8192, c1: 128}, None),
        MemoryDep('arg83_1', c1, {c0: 8192, c1: 128}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf62.users = [
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=True, is_weak=False),
    ]
]
op62.group.device = cuda:0
op62.group.iteration = (1048576, 1)
op62.sizes = ([8192, 128], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op62_loop_body:
    var_ranges = {z0: 8192, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg80_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg81_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg82_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg83_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add_1, None)
        return store


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 8192}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', 16384*c0 + c1 + 128*c2, {c0: 64, c1: 128, c2: 128}, None)]
op63.met_dependencies = []
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (8192, 128)
op63.sizes = ([64, 128], [128])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
class op63_loop_body:
    var_ranges = {z0: 64, z1: 128, z2: 128}
    index0 = 16384*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_2, reduction)
        return store_reduction


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 1024}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', 1024*c0 + c1 + 128*c2, {c0: 8, c1: 128, c2: 8}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf64.users = [NodeUser(node=SchedulerNode(name='op65'), can_inplace=True, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (1024, 8)
op64.sizes = ([8, 128], [8])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 8], stride=[1024, 1, 128])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 8}
    index0 = 1024*z0 + z1 + 128*z2
    index1 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, reduction)
        return store_reduction


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1024}, None)]
op65.unmet_dependencies = [MemoryDep('buf64', c0, {c0: 1024}, None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1024, 1)
op65.sizes = ([1024], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 128], stride=[128, 1])
class op65_loop_body:
    var_ranges = {z0: 1024}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf65', get_index_1, truediv, None)
        return store


op66: ExternKernelSchedulerNode(ExternKernelAlloc)
op66.writes = [StarDep(name='buf66', mode=None)]
op66.unmet_dependencies = [StarDep(name='buf65', mode=None)]
op66.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op66.outputs = [
    buf66: ExternKernelAlloc
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
    buf66.users = [NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.node.kernel = extern_kernels.convolution


op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1048576}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf62', c0, {c0: 1048576}, None),
        MemoryDep('buf66', 128*c0 + c2, {c0: 8, c1: 1024, c2: 128}, None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1048576, 1)
op67.sizes = ([8, 1024, 128], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 128], stride=[128, 128, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 32, 32], stride=[131072, 1, 4096, 128])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 128}
    index0 = 131072*z0 + 128*z1 + z2
    index1 = 128*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf62', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf66', get_index_2)
        sigmoid_1 = ops.sigmoid(load_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf67', get_index_3, mul_1, None)
        return store


op68: ExternKernelSchedulerNode(ExternKernelAlloc)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf67', mode=None)]
op68.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelAlloc
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf68.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False)]
]
op68.node.kernel = extern_kernels.convolution


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 4194304}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf56', c0, {c0: 4194304}, None),
        MemoryDep('buf68', c0, {c0: 4194304}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg88_1', c1, {c0: 8192, c1: 512}, None),
        MemoryDep('arg89_1', c1, {c0: 8192, c1: 512}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (4194304, 1)
op69.sizes = ([8192, 512], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op69_loop_body:
    var_ranges = {z0: 8192, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg87_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg89_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf56', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf69', get_index_6, add_2, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 4194304}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 4194304}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (4194304, 1)
op70.sizes = ([4194304], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1, 16384, 512])
class op70_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf69', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf70', get_index_2, mul, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 2097152}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 2097152}, None)]
op72.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg92_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg93_1', c1, {c0: 8192, c1: 256}, None),
        MemoryDep('arg94_1', c1, {c0: 8192, c1: 256}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (2097152, 1)
op72.sizes = ([8192, 256], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op72_loop_body:
    var_ranges = {z0: 8192, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg92_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg94_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf72', get_index_5, add_1, None)
        return store


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 2097152}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 2097152}, None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (2097152, 1)
op73.sizes = ([2097152], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1, 8192, 256])
class op73_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf72', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf73', get_index_2, mul, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', 144*c0 + c1 + 16*c2, {c0: 256, c1: 16, c2: 9}, None)]
op74.unmet_dependencies = []
op74.met_dependencies = [MemoryDep('arg95_1', c0, {c0: 36864}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[256, 16, 3, 3], stride=[144, 1, 48, 16])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (36864, 1)
op74.sizes = ([256, 16, 9], [])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[256, 16, 3, 3], stride=[144, 9, 3, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[256, 16, 3, 3], stride=[144, 1, 48, 16])
class op74_loop_body:
    var_ranges = {z0: 256, z1: 16, z2: 9}
    index0 = 144*z0 + 9*z1 + z2
    index1 = 144*z0 + z1 + 16*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg95_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 524288}, None)]
op76.unmet_dependencies = [MemoryDep('buf75', c0, {c0: 524288}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg97_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg98_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg99_1', c1, {c0: 2048, c1: 256}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (524288, 1)
op76.sizes = ([2048, 256], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op76_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg97_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg98_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg99_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf76', get_index_5, add_1, None)
        return store


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 4096}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', 32768*c0 + c1 + 256*c2, {c0: 16, c1: 256, c2: 128}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (4096, 128)
op77.sizes = ([16, 256], [128])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
class op77_loop_body:
    var_ranges = {z0: 16, z1: 256, z2: 128}
    index0 = 32768*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf76', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf77', get_index_2, reduction)
        return store_reduction


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 2048}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', 512*c0 + c1 + 256*c2, {c0: 8, c1: 256, c2: 2}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (2048, 2)
op78.sizes = ([8, 256], [2])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 2], stride=[512, 1, 256])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 2}
    index0 = 512*z0 + z1 + 256*z2
    index1 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, reduction)
        return store_reduction


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 2048}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 2048}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (2048, 1)
op79.sizes = ([2048], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 256], stride=[256, 1])
class op79_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf79', get_index_1, truediv, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 524288}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 524288}, None),
        MemoryDep('buf80', 256*c0 + c2, {c0: 8, c1: 256, c2: 256}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (524288, 1)
op81.sizes = ([8, 256, 256], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 256], stride=[256, 256, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 256*z0 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf76', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf80', get_index_2)
        sigmoid_1 = ops.sigmoid(load_2)
        mul_1 = ops.mul(mul, sigmoid_1)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf81', get_index_3, mul_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf82.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: ExternKernelSchedulerNode(ExternKernelAlloc)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op83.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelAlloc
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.convolution


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2097152}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 2097152}, None),
        MemoryDep('buf83', c0, {c0: 2097152}, None)]
op84.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg103_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg104_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg105_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg107_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg108_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg109_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg110_1', c1, {c0: 2048, c1: 1024}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2097152, 1)
op84.sizes = ([2048, 1024], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op84_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf83', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg107_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg108_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg109_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg110_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf84', get_index_10, add_4, None)
        return store


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2097152}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2097152}, None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (2097152, 1)
op85.sizes = ([2097152], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op85_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf84', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf85', get_index_2, mul, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelAlloc)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelAlloc
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.convolution


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 524288}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 524288}, None)]
op87.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg113_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg114_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg115_1', c1, {c0: 2048, c1: 256}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (524288, 1)
op87.sizes = ([2048, 256], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op87_loop_body:
    var_ranges = {z0: 2048, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf87', get_index_5, add_1, None)
        return store


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 524288}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 524288}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (524288, 1)
op88.sizes = ([524288], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op88_loop_body:
    var_ranges = {z0: 524288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf87', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf88', get_index_2, mul, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelAlloc)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelAlloc
    buf89.layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.convolution


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 131072}, None)]
op90.unmet_dependencies = [MemoryDep('buf89', 98304*c0 + c1 + 384*c2, {c0: 8, c1: 64, c2: 256}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (131072, 1)
op90.sizes = ([8, 64, 256], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 98304*z0 + z1 + 384*z2
    index1 = 16384*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf90', get_index_1, load, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 131072}, None)]
op91.unmet_dependencies = [   MemoryDep('buf89', 98304*c0 + c1 + 384*c2 + 64, {c0: 8, c1: 64, c2: 256}, None)]
op91.met_dependencies = []
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (131072, 1)
op91.sizes = ([8, 64, 256], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
class op91_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 98304*z0 + z1 + 384*z2 + 64
    index1 = 16384*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf92.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op92.node.kernel = extern_kernels.bmm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 131072}, None)]
op93.unmet_dependencies = [   MemoryDep('buf90', 4096*c0 + c1 + 16*c2 + 256*c3 + 256*(((c1 + 16*c2)//256)), {c0: 32, c1: 16, c2: 16, c3: 16}, None)]
op93.met_dependencies = []
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (131072, 1)
op93.sizes = ([32, 16, 16, 16], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
class op93_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 16, z3: 16}
    index0 = 4096*z0 + z1 + 16*z2 + 256*z3 + 256*(((z1 + 16*z2)//256))
    index1 = 4096*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf93', get_index_1, load, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 131072}, None)]
op95.unmet_dependencies = [MemoryDep('buf90', 4096*c0 + c1 + 256*c2, {c0: 32, c1: 256, c2: 16}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (131072, 1)
op95.sizes = ([32, 256, 16], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
class op95_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 16}
    index0 = 4096*z0 + z1 + 256*z2
    index1 = 4096*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf95', get_index_1, load, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg117_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 8192}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 2097152}, None),
        MemoryDep('buf94', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf96', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (8192, 256)
op97.sizes = ([32, 256], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op97_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf97', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf94', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf96', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 8192}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 2097152}, None),
        MemoryDep('buf94', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf96', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf97', c0, {c0: 8192}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (8192, 256)
op98.sizes = ([32, 256], [256])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op98_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf97', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf98', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf94', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf96', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 2097152}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf92', c0, {c0: 2097152}, None),
        MemoryDep('buf94', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf96', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf97', c0, {c0: 8192}, None),
        MemoryDep('buf98', c0, {c0: 8192}, None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (2097152, 1)
op99.sizes = ([32, 256, 256], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf99_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
class op99_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf97', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf98', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf94', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf96', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 524288}, None)]
op100.unmet_dependencies = [   MemoryDep('buf89', 98304*c0 + c1 + 384*c2 + 128, {c0: 8, c1: 256, c2: 256}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (524288, 1)
op100.sizes = ([8, 256, 256], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[8, 384, 16, 16], stride=[98304, 1, 6144, 384])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 256, 16, 1])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 98304*z0 + z1 + 384*z2 + 128
    index1 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 64], stride=[16384, 64, 1])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.node.kernel = extern_kernels.bmm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 524288}, None)]
op102.unmet_dependencies = [   MemoryDep('buf101', 65536*c0 + 64*c1 + 16384*(((c1 + 256*c2)//16384)) + ModularIndexing(c2, 1, 64), {c0: 8, c1: 256, c2: 256}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg120_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg121_1', c1, {c0: 2048, c1: 256}, None),
        MemoryDep('arg122_1', c1, {c0: 2048, c1: 256}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf102.users = [NodeUser(node=SchedulerNode(name='op103'), can_inplace=True, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (524288, 1)
op102.sizes = ([8, 256, 256], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 64], stride=[16384, 64, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 256}
    index0 = 65536*z0 + 64*z1 + 16384*(((z1 + 256*z2)//16384)) + ModularIndexing(z2, 1, 64)
    index1 = z2
    index2 = 65536*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg122_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf102', get_index_5, add_1, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 524288}, None)]
op103.unmet_dependencies = [MemoryDep('buf102', c0, {c0: 524288}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (524288, 1)
op103.sizes = ([524288], [])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 16, 16], stride=[65536, 1, 4096, 256])
class op103_loop_body:
    var_ranges = {z0: 524288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf102', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf103', get_index_2, mul, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelAlloc)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf103', mode=None)]
op104.met_dependencies = [StarDep(name='arg123_1', mode=None)]
op104.outputs = [
    buf104: ExternKernelAlloc
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.node.kernel = extern_kernels.convolution


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 2097152}, None)]
op105.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 2097152}, None),
        MemoryDep('buf85', c0, {c0: 2097152}, None)]
op105.met_dependencies = 
    [   MemoryDep('arg124_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg125_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg126_1', c1, {c0: 2048, c1: 1024}, None),
        MemoryDep('arg127_1', c1, {c0: 2048, c1: 1024}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (2097152, 1)
op105.sizes = ([2048, 1024], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op105_loop_body:
    var_ranges = {z0: 2048, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg124_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg125_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg127_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf85', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf105', get_index_6, add_2, None)
        return store


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 2097152}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 2097152}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
    buf106.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
]
op106.group.device = cuda:0
op106.group.iteration = (2097152, 1)
op106.sizes = ([2097152], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 16, 16], stride=[262144, 1, 16384, 1024])
class op106_loop_body:
    var_ranges = {z0: 2097152}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf105', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf106', get_index_2, mul, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelAlloc)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelAlloc
    buf107.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.convolution


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1048576}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 1048576}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg129_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg130_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg131_1', c1, {c0: 2048, c1: 512}, None),
        MemoryDep('arg132_1', c1, {c0: 2048, c1: 512}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf108.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=True, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (1048576, 1)
op108.sizes = ([2048, 512], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op108_loop_body:
    var_ranges = {z0: 2048, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg130_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf108', get_index_5, add_1, None)
        return store


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 1048576}, None)]
op109.unmet_dependencies = [MemoryDep('buf108', c0, {c0: 1048576}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (1048576, 1)
op109.sizes = ([1048576], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 1, 8192, 512])
class op109_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf108', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf109', get_index_2, mul, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf109', mode=None)]
op110.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
    buf110.users = [
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
    ]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 131072}, None)]
op111.unmet_dependencies = [MemoryDep('buf110', 163840*c0 + c1 + 640*c2, {c0: 8, c1: 64, c2: 256}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
    buf111.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op111.group.device = cuda:0
op111.group.iteration = (131072, 1)
op111.sizes = ([8, 64, 256], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 163840*z0 + z1 + 640*z2
    index1 = 16384*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 131072}, None)]
op112.unmet_dependencies = [   MemoryDep('buf110', 163840*c0 + c1 + 640*c2 + 64, {c0: 8, c1: 64, c2: 256}, None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
    buf112.users = [NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (131072, 1)
op112.sizes = ([8, 64, 256], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
class op112_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 256}
    index0 = 163840*z0 + z1 + 640*z2 + 64
    index1 = 16384*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf112', get_index_1, load, None)
        return store


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf111', mode=None), StarDep(name='buf112', mode=None)]
op113.met_dependencies = []
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf113.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
]
op113.node.kernel = extern_kernels.bmm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 131072}, None)]
op114.unmet_dependencies = [   MemoryDep('buf111', 4096*c0 + c1 + 16*c2 + 256*c3 + 256*(((c1 + 16*c2)//256)), {c0: 32, c1: 16, c2: 16, c3: 16}, None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (131072, 1)
op114.sizes = ([32, 16, 16, 16], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
class op114_loop_body:
    var_ranges = {z0: 32, z1: 16, z2: 16, z3: 16}
    index0 = 4096*z0 + z1 + 16*z2 + 256*z3 + 256*(((z1 + 16*z2)//256))
    index1 = 4096*z0 + 256*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf114', get_index_1, load, None)
        return store


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 131072}, None)]
op116.unmet_dependencies = [MemoryDep('buf111', 4096*c0 + c1 + 256*c2, {c0: 32, c1: 256, c2: 16}, None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
    buf116.users = [NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (131072, 1)
op116.sizes = ([32, 256, 16], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 16, 16], stride=[16384, 256, 16, 1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 16, 16], stride=[4096, 256, 16, 1])
class op116_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 16}
    index0 = 4096*z0 + z1 + 256*z2
    index1 = 4096*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf116', get_index_1, load, None)
        return store


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 8192}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf115', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf117', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (8192, 256)
op118.sizes = ([32, 256], [256])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op118_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf118', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf115', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf117', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 8192}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf115', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf117', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf118', c0, {c0: 8192}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (8192, 256)
op119.sizes = ([32, 256], [256])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
class op119_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf118', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf119', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf115', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf117', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2097152}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf113', c0, {c0: 2097152}, None),
        MemoryDep('buf115', 7936*c0 + 31*(((31*((c1//16)) + (c2//16) + 15)//32)) + 496*ModularIndexing(c1, 1, 16) + ModularIndexing(31*((c1//16)) + (c2//16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf117', 7936*c0 + 496*((c1//16)) + 31*(((31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(c1, 1, 16) + ModularIndexing(c2, 1, 16) + 15, 1, 32), {c0: 32, c1: 256, c2: 256}, None),
        MemoryDep('buf118', c0, {c0: 8192}, None),
        MemoryDep('buf119', c0, {c0: 8192}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (2097152, 1)
op120.sizes = ([32, 256, 256], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8192, 31], stride=[31, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf119_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 1], stride=[256, 1, 8192])
buf120_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 256], stride=[65536, 256, 1])
class op120_loop_body:
    var_ranges = {z0: 32, z1: 256, z2: 256}
    index0 = 65536*z0 + 256*z1 + z2
    index1 = 31*((z1//16)) + (z2//16) + 15
    index2 = ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index3 = 7936*z0 + 31*(((31*((z1//16)) + (z2//16) + 15)//32)) + 496*ModularIndexing(z1, 1, 16) + ModularIndexing(31*((z1//16)) + (z2//16) + 15, 1, 32)
    index4 = 31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15
    index5 = ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index6 = 7936*z0 + 496*((z1//16)) + 31*(((31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15)//32)) + ModularIndexing(31*ModularIndexing(z1, 1, 16) + ModularIndexing(z2, 1, 16) + 15, 1, 32)
    index7 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(512, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf118', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf119', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf120', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf115', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf117', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(31, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 1048576}, None)]
op121.unmet_dependencies = [   MemoryDep('buf110', 163840*c0 + c1 + 640*c2 + 128, {c0: 8, c1: 512, c2: 256}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (1048576, 1)
op121.sizes = ([8, 512, 256], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 16, 16], stride=[163840, 1, 10240, 640])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 256}
    index0 = 163840*z0 + z1 + 640*z2 + 128
    index1 = 131072*z0 + 256*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf121', get_index_1, load, None)
        return store


op122: ExternKernelSchedulerNode(ExternKernelOut)
op122.writes = [StarDep(name='buf122', mode=None)]
op122.unmet_dependencies = [StarDep(name='buf120', mode=None), StarDep(name='buf121', mode=None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ExternKernelOut
    buf122.layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
    buf122.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.node.kernel = extern_kernels.bmm


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 262144}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf122', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3 + 8)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3 + 8, 128, 128) + 2048, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf122', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((16*c1 + c2 + 128*c3)//16384)) + ModularIndexing(16*c1 + c2 + 128*c3, 128, 128), {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf122', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 1)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 1, 256, 128) + 128, {c0: 8, c1: 8, c2: 8, c3: 512}, None),
        MemoryDep('buf122', 131072*c0 + 4096*c1 + 256*c2 + 32768*(((32*c1 + 2*c2 + 256*c3 + 17)//32768)) + ModularIndexing(32*c1 + 2*c2 + 256*c3 + 17, 256, 128) + 2176, {c0: 8, c1: 8, c2: 8, c3: 512}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg137_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg138_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg139_1', c1, {c0: 512, c1: 512}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (262144, 1)
op123.sizes = ([8, 8, 8, 512], [])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 256, 128], stride=[32768, 128, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op123_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 8, z3: 512}
    index0 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((16*z1 + z2 + 128*z3)//16384)) + ModularIndexing(16*z1 + z2 + 128*z3, 128, 128)
    index1 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((32*z1 + 2*z2 + 256*z3 + 1)//32768)) + ModularIndexing(32*z1 + 2*z2 + 256*z3 + 1, 256, 128) + 128
    index2 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((16*z1 + z2 + 128*z3 + 8)//16384)) + ModularIndexing(16*z1 + z2 + 128*z3 + 8, 128, 128) + 2048
    index3 = 131072*z0 + 4096*z1 + 256*z2 + 32768*(((32*z1 + 2*z2 + 256*z3 + 17)//32768)) + ModularIndexing(32*z1 + 2*z2 + 256*z3 + 17, 256, 128) + 2176
    index4 = z3
    index5 = 32768*z0 + 4096*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf122', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf122', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf122', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf122', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg136_1', get_index_4)
        sub = ops.sub(mul, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg137_1', get_index_5)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_3 = ops.add(load_5, constant_1)
        sqrt = ops.sqrt(add_3)
        reciprocal = ops.reciprocal(sqrt)
        constant_2 = ops.constant(1.0, torch.float32)
        mul_1 = ops.mul(reciprocal, constant_2)
        mul_2 = ops.mul(sub, mul_1)
        get_index_6 = self.get_index('index4')
        load_6 = ops.load('arg138_1', get_index_6)
        mul_3 = ops.mul(mul_2, load_6)
        get_index_7 = self.get_index('index4')
        load_7 = ops.load('arg139_1', get_index_7)
        add_4 = ops.add(mul_3, load_7)
        get_index_8 = self.get_index('index5')
        store = ops.store('buf123', get_index_8, add_4, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 262144}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 262144}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (262144, 1)
op124.sizes = ([262144], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op124_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf123', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf124', get_index_2, mul, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelAlloc)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelAlloc
    buf125.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.convolution


op126: ExternKernelSchedulerNode(ExternKernelAlloc)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op126.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelAlloc
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.convolution


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 1048576}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 1048576}, None),
        MemoryDep('buf126', c0, {c0: 1048576}, None)]
op127.met_dependencies = 
    [   MemoryDep('arg141_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg142_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg143_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg144_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg146_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg147_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg148_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg149_1', c1, {c0: 512, c1: 2048}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (1048576, 1)
op127.sizes = ([512, 2048], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
class op127_loop_body:
    var_ranges = {z0: 512, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg142_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg143_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg144_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf126', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg146_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg147_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg148_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg149_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf127', get_index_10, add_4, None)
        return store


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 1048576}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1048576}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (1048576, 1)
op128.sizes = ([1048576], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
class op128_loop_body:
    var_ranges = {z0: 1048576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf127', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf128', get_index_2, mul, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 262144}, None)]
op130.unmet_dependencies = [MemoryDep('buf129', c0, {c0: 262144}, None)]
op130.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg152_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg153_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg154_1', c1, {c0: 512, c1: 512}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (262144, 1)
op130.sizes = ([512, 512], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op130_loop_body:
    var_ranges = {z0: 512, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg152_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg153_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg154_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf130', get_index_5, add_1, None)
        return store


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 262144}, None)]
op131.unmet_dependencies = [MemoryDep('buf130', c0, {c0: 262144}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (262144, 1)
op131.sizes = ([262144], [])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op131_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf130', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf130', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf131', get_index_2, mul, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelAlloc)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelAlloc
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = extern_kernels.convolution


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 32768}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', 40960*c0 + c1 + 640*c2, {c0: 8, c1: 64, c2: 64}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
    ]
]
op133.group.device = cuda:0
op133.group.iteration = (32768, 1)
op133.sizes = ([8, 64, 64], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 40960*z0 + z1 + 640*z2
    index1 = 4096*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf133', get_index_1, load, None)
        return store


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 32768}, None)]
op134.unmet_dependencies = [   MemoryDep('buf132', 40960*c0 + c1 + 640*c2 + 64, {c0: 8, c1: 64, c2: 64}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (32768, 1)
op134.sizes = ([8, 64, 64], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
class op134_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 64}
    index0 = 40960*z0 + z1 + 640*z2 + 64
    index1 = 4096*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf134', get_index_1, load, None)
        return store


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf133', mode=None), StarDep(name='buf134', mode=None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf135.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False),
    ]
]
op135.node.kernel = extern_kernels.bmm


op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 32768}, None)]
op136.unmet_dependencies = [   MemoryDep('buf133', 1024*c0 + c1 + 8*c2 + 64*c3 + 64*(((c1 + 8*c2)//64)), {c0: 32, c1: 8, c2: 8, c3: 16}, None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 16], stride=[1024, 128, 16, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (32768, 1)
op136.sizes = ([32, 8, 8, 16], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 16], stride=[1024, 128, 16, 1])
class op136_loop_body:
    var_ranges = {z0: 32, z1: 8, z2: 8, z3: 16}
    index0 = 1024*z0 + z1 + 8*z2 + 64*z3 + 64*(((z1 + 8*z2)//64))
    index1 = 1024*z0 + 128*z1 + 16*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf136', get_index_1, load, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 32768}, None)]
op138.unmet_dependencies = [MemoryDep('buf133', 1024*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 16}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 16], stride=[1024, 128, 16, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (32768, 1)
op138.sizes = ([32, 64, 16], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 8, 8], stride=[4096, 64, 8, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[32, 8, 8, 16], stride=[1024, 128, 16, 1])
class op138_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 16}
    index0 = 1024*z0 + z1 + 64*z2
    index1 = 1024*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf138', get_index_1, load, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.mm


op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 2048}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 131072}, None),
        MemoryDep('buf137', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf139', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf140.users = [
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op140.group.device = cuda:0
op140.group.iteration = (2048, 64)
op140.sizes = ([32, 64], [64])
buf135_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op140_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add_1)
        get_index_3 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf140', get_index_3, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf137', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf139', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 2048}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 131072}, None),
        MemoryDep('buf137', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf139', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf140', c0, {c0: 2048}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (2048, 64)
op141.sizes = ([32, 64], [64])
buf135_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf141_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
class op141_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_4 = self.get_index('index7')
        store_reduction = ops.store_reduction('buf141', get_index_4, reduction)
        return store_reduction
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf137', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf139', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 131072}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 131072}, None),
        MemoryDep('buf137', 960*c0 + 15*(((15*((c1//8)) + (c2//8) + 7)//16)) + 120*ModularIndexing(c1, 1, 8) + ModularIndexing(15*((c1//8)) + (c2//8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf139', 960*c0 + 120*((c1//8)) + 15*(((15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(c1, 1, 8) + ModularIndexing(c2, 1, 8) + 7, 1, 16), {c0: 32, c1: 64, c2: 64}, None),
        MemoryDep('buf140', c0, {c0: 2048}, None),
        MemoryDep('buf141', c0, {c0: 2048}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (131072, 1)
op142.sizes = ([32, 64, 64], [])
buf135_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[2048, 15], stride=[15, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf141_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 1], stride=[64, 1, 2048])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 64], stride=[4096, 64, 1])
class op142_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 64}
    index0 = 4096*z0 + 64*z1 + z2
    index1 = 15*((z1//8)) + (z2//8) + 7
    index2 = ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index3 = 960*z0 + 15*(((15*((z1//8)) + (z2//8) + 7)//16)) + 120*ModularIndexing(z1, 1, 8) + ModularIndexing(15*((z1//8)) + (z2//8) + 7, 1, 16)
    index4 = 15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7
    index5 = ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index6 = 960*z0 + 120*((z1//8)) + 15*(((15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7)//16)) + ModularIndexing(15*ModularIndexing(z1, 1, 8) + ModularIndexing(z2, 1, 8) + 7, 1, 16)
    index7 = 64*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf135', get_index)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        index_expr = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_2)
        masked_subblock3 = self.masked_subblock3(lt_1, 0.0)
        add = ops.add(masked_subblock1, masked_subblock3)
        add_1 = ops.add(mul, add)
        get_index_3 = self.get_index('index7')
        load_1 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_1)
        exp = ops.exp(sub)
        get_index_4 = self.get_index('index7')
        load_2 = ops.load('buf141', get_index_4)
        truediv = ops.truediv(exp, load_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf142', get_index_5, truediv, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf137', get_index)
        return load
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf139', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index5')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(15, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock4 = self.masked_subblock4(lt, 0.0)
        return masked_subblock4


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 262144}, None)]
op143.unmet_dependencies = [   MemoryDep('buf132', 40960*c0 + c1 + 640*c2 + 128, {c0: 8, c1: 512, c2: 64}, None)]
op143.met_dependencies = []
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (262144, 1)
op143.sizes = ([8, 512, 64], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 640, 8, 8], stride=[40960, 1, 5120, 640])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 64, 8, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 64}
    index0 = 40960*z0 + z1 + 640*z2 + 128
    index1 = 32768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf142', mode=None), StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 128], stride=[8192, 128, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.bmm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 262144}, None)]
op145.unmet_dependencies = [   MemoryDep('buf144', 32768*c0 + 128*c1 + 8192*(((c1 + 64*c2)//8192)) + ModularIndexing(c2, 1, 128), {c0: 8, c1: 64, c2: 512}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg159_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg160_1', c1, {c0: 512, c1: 512}, None),
        MemoryDep('arg161_1', c1, {c0: 512, c1: 512}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf145.users = [NodeUser(node=SchedulerNode(name='op146'), can_inplace=True, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (262144, 1)
op145.sizes = ([8, 64, 512], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 128], stride=[8192, 128, 1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 512}
    index0 = 32768*z0 + 128*z1 + 8192*(((z1 + 64*z2)//8192)) + ModularIndexing(z2, 1, 128)
    index1 = z2
    index2 = 32768*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg159_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg161_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf145', get_index_5, add_1, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 262144}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 262144}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op147'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (262144, 1)
op146.sizes = ([262144], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 8, 8], stride=[32768, 1, 4096, 512])
class op146_loop_body:
    var_ranges = {z0: 262144}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf145', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf146', get_index_2, mul, None)
        return store


op147: ExternKernelSchedulerNode(ExternKernelAlloc)
op147.writes = [StarDep(name='buf147', mode=None)]
op147.unmet_dependencies = [StarDep(name='buf146', mode=None)]
op147.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op147.outputs = [
    buf147: ExternKernelAlloc
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf147.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False)]
]
op147.node.kernel = extern_kernels.convolution


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 1048576}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 1048576}, None),
        MemoryDep('buf147', c0, {c0: 1048576}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg164_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg165_1', c1, {c0: 512, c1: 2048}, None),
        MemoryDep('arg166_1', c1, {c0: 512, c1: 2048}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (1048576, 1)
op148.sizes = ([512, 2048], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
class op148_loop_body:
    var_ranges = {z0: 512, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg164_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg166_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf128', get_index_5)
        add_2 = ops.add(add_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf148', get_index_6, add_2, None)
        return store


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 16384}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', 131072*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 64}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf149.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (16384, 64)
op149.sizes = ([8, 2048], [64])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 8, 8], stride=[131072, 1, 16384, 2048])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op149_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 64}
    index0 = 131072*z0 + z1 + 2048*z2
    index1 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf148', get_index_1)
        sigmoid = ops.sigmoid(load_1)
        mul = ops.mul(load, sigmoid)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_2, reduction)
        return store_reduction


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 16384}, None)]
op150.unmet_dependencies = [MemoryDep('buf149', c0, {c0: 16384}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (16384, 1)
op150.sizes = ([16384], [])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op150_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf150', get_index_1, truediv, None)
        return store


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf150', mode=None)]
op151.met_dependencies = [StarDep(name='arg167_1', mode=None), StarDep(name='arg168_1', mode=None)]
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf151.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.addmm



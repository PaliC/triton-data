op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 147*c0 + c1 + 3*c2, {c0: 64, c1: 3, c2: 49}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 9408}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 1, 21, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (9408, 1)
op1.sizes = ([64, 3, 49], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 49, 7, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[64, 3, 7, 7], stride=[147, 1, 21, 3])
class op1_loop_body:
    var_ranges = {z0: 64, z1: 3, z2: 49}
    index0 = 147*z0 + 49*z1 + z2
    index1 = 147*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 6422528}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 6422528}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 64}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 64}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (6422528, 1)
op3.sizes = ([100352, 64], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1605632}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 64, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7104, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7168, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 + 7232, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 64, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7104, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7168, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2 - 7232, {c0: 448, c1: 56, c2: 64}, None),
        MemoryDep('buf3', 14336*c0 + 128*c1 + c2, {c0: 448, c1: 56, c2: 64}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (1605632, 1)
op4.sizes = ([8, 56, 56, 64], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 112, 112], stride=[802816, 1, 7168, 64])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 56, z3: 64}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7232
    index3 = 2*z2
    index4 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7168
    index5 = 2*z2 + 1
    index6 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 7104
    index7 = 2*z1
    index8 = 802816*z0 + 14336*z1 + 128*z2 + z3 - 64
    index9 = 802816*z0 + 14336*z1 + 128*z2 + z3
    index10 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 64
    index11 = 2*z1 + 1
    index12 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7104
    index13 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7168
    index14 = 802816*z0 + 14336*z1 + 128*z2 + z3 + 7232
    index15 = 200704*z0 + 3584*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(112, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(112, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, -inf)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(112, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(112, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, -inf)
        maximum = ops.maximum(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(112, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(112, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, -inf)
        maximum_1 = ops.maximum(masked_subblock3, maximum)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(112, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(112, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, -inf)
        maximum_2 = ops.maximum(masked_subblock4, maximum_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(112, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(112, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, -inf)
        maximum_3 = ops.maximum(masked_subblock5, maximum_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(112, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(112, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, -inf)
        maximum_4 = ops.maximum(masked_subblock6, maximum_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(112, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(112, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, -inf)
        maximum_5 = ops.maximum(masked_subblock7, maximum_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(112, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(112, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, -inf)
        maximum_6 = ops.maximum(masked_subblock8, maximum_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(112, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(112, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, -inf)
        maximum_7 = ops.maximum(masked_subblock9, maximum_6)
        get_index_36 = self.get_index('index15')
        store = ops.store('buf4', get_index_36, maximum_7, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf3', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf3', get_index)
        return load


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 2809856}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 2809856}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg7_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg8_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 112}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (2809856, 1)
op6.sizes = ([25088, 112], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op6_loop_body:
    var_ranges = {z0: 25088, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('arg11_1', c0, {c0: 1764}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (1764, 1)
op7.sizes = ([14, 14, 9], [])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op7_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg11_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf7', get_index_1, load, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelAlloc)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelAlloc
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf8.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op8.node.kernel = extern_kernels.convolution


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 1764}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (1764, 1)
op9.sizes = ([14, 14, 9], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op9_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf10.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op11.unmet_dependencies = []
op11.met_dependencies = [MemoryDep('arg21_1', c0, {c0: 1764}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (1764, 1)
op11.sizes = ([14, 14, 9], [])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op11_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg21_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf11', get_index_1, load, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None), StarDep(name='buf6', mode=None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf12.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op13.unmet_dependencies = []
op13.met_dependencies = [MemoryDep('arg26_1', c0, {c0: 1764}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (1764, 1)
op13.sizes = ([14, 14, 9], [])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op13_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf13', get_index_1, load, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelAlloc)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None), StarDep(name='buf6', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelAlloc
    buf14.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf14.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.convolution


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op15.unmet_dependencies = []
op15.met_dependencies = [MemoryDep('arg31_1', c0, {c0: 1764}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (1764, 1)
op15.sizes = ([14, 14, 9], [])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op15_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg31_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None), StarDep(name='buf6', mode=None)]
op16.met_dependencies = []
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf16.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op17.unmet_dependencies = []
op17.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 1764}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (1764, 1)
op17.sizes = ([14, 14, 9], [])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op17_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


op18: ExternKernelSchedulerNode(ExternKernelAlloc)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf6', mode=None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ExternKernelAlloc
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf18.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op18.node.kernel = extern_kernels.convolution


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('arg41_1', c0, {c0: 1764}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (1764, 1)
op19.sizes = ([14, 14, 9], [])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op19_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg41_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf19', get_index_1, load, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None), StarDep(name='buf6', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf20.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf6', 112*c0 + c1 + 210, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 + 6258, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 + 6370, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 + 6482, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 + 98, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 - 14, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 - 6062, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 - 6174, {c0: 25088, c1: 14}, None),
        MemoryDep('buf6', 112*c0 + c1 - 6286, {c0: 25088, c1: 14}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf21.aliases = ['buf29']
    buf21.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (351232, 1)
op21.sizes = ([8, 56, 56, 14], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf21_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op21_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 56, z3: 14}
    index0 = z1 - 1
    index1 = z2 - 1
    index2 = 351232*z0 + 6272*z1 + 112*z2 + z3 - 6286
    index3 = z2
    index4 = 351232*z0 + 6272*z1 + 112*z2 + z3 - 6174
    index5 = z2 + 1
    index6 = 351232*z0 + 6272*z1 + 112*z2 + z3 - 6062
    index7 = z1
    index8 = 351232*z0 + 6272*z1 + 112*z2 + z3 - 14
    index9 = 351232*z0 + 6272*z1 + 112*z2 + z3 + 98
    index10 = 351232*z0 + 6272*z1 + 112*z2 + z3 + 210
    index11 = z1 + 1
    index12 = 351232*z0 + 6272*z1 + 112*z2 + z3 + 6258
    index13 = 351232*z0 + 6272*z1 + 112*z2 + z3 + 6370
    index14 = 351232*z0 + 6272*z1 + 112*z2 + z3 + 6482
    index15 = z1*z2 - z1*Min(57, z2 + 2) - z1 - z2*Min(57, z1 + 2) - z2 + Min(57, z1 + 2)*Min(57, z2 + 2) + Min(57, z1 + 2) + Min(57, z2 + 2) + 1
    index16 = 351232*z0 + 56*z1 + z2 + 3136*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf21', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf6', get_index)
        return load


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op22.unmet_dependencies = [MemoryDep('buf8', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op22.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg13_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg14_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg15_1', c1, {c0: 8, c1: 14}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf22.aliases = ['buf29']
    buf22.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op22.group.device = cuda:0
op22.group.iteration = (351232, 1)
op22.sizes = ([8, 14, 3136], [])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf22_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op22_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf22', get_index_5, relu, None)
        return store


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op23.unmet_dependencies = [MemoryDep('buf10', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg18_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg19_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg20_1', c1, {c0: 8, c1: 14}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf23.aliases = ['buf29']
    buf23.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (351232, 1)
op23.sizes = ([8, 14, 3136], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf23_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op23_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf23', get_index_5, relu, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op24.unmet_dependencies = [MemoryDep('buf12', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg23_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg24_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg25_1', c1, {c0: 8, c1: 14}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf24.aliases = ['buf29']
    buf24.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (351232, 1)
op24.sizes = ([8, 14, 3136], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf24_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op24_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf24', get_index_5, relu, None)
        return store


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op25.unmet_dependencies = [MemoryDep('buf14', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op25.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg28_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg29_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg30_1', c1, {c0: 8, c1: 14}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf25.aliases = ['buf29']
    buf25.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op25.group.device = cuda:0
op25.group.iteration = (351232, 1)
op25.sizes = ([8, 14, 3136], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf25_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op25_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf25', get_index_5, relu, None)
        return store


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op26.unmet_dependencies = [MemoryDep('buf16', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg33_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg34_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg35_1', c1, {c0: 8, c1: 14}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf26.aliases = ['buf29']
    buf26.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (351232, 1)
op26.sizes = ([8, 14, 3136], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf26_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op26_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf26', get_index_5, relu, None)
        return store


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op27.unmet_dependencies = [MemoryDep('buf18', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg38_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg39_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg40_1', c1, {c0: 8, c1: 14}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf27.aliases = ['buf29']
    buf27.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (351232, 1)
op27.sizes = ([8, 14, 3136], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf27_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op27_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf27', get_index_5, relu, None)
        return store


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op28.unmet_dependencies = [MemoryDep('buf20', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg43_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg44_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg45_1', c1, {c0: 8, c1: 14}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf28.aliases = ['buf29']
    buf28.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (351232, 1)
op28.sizes = ([8, 14, 3136], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf28_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op28_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf28', get_index_5, relu, None)
        return store


op29: NopKernelSchedulerNode(ConcatKernel)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = 
    [   StarDep(name='buf21', mode=None),
        StarDep(name='buf22', mode=None),
        StarDep(name='buf23', mode=None),
        StarDep(name='buf24', mode=None),
        StarDep(name='buf25', mode=None),
        StarDep(name='buf26', mode=None),
        StarDep(name='buf27', mode=None),
        StarDep(name='buf28', mode=None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ConcatKernel
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
    buf29.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
    ]
]


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', 351232*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 3136}, None)]
op30.unmet_dependencies = [MemoryDep('buf29', c0, {c0: 2809856}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (2809856, 1)
op30.sizes = ([8, 112, 3136], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op30_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 3136}
    index0 = 351232*z0 + 3136*z1 + z2
    index1 = 351232*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf30', get_index_1, load, None)
        return store


op31: ExternKernelSchedulerNode(ExternKernelAlloc)
op31.writes = [StarDep(name='buf31', mode=None)]
op31.unmet_dependencies = [StarDep(name='buf30', mode=None)]
op31.met_dependencies = [StarDep(name='arg46_1', mode=None)]
op31.outputs = [
    buf31: ExternKernelAlloc
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf31.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op31.node.kernel = extern_kernels.convolution


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op32.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 6422528}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf31', c0, {c0: 6422528}, None),
        MemoryDep('buf32', c0, {c0: 6422528}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 256}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (6422528, 1)
op33.sizes = ([25088, 256], [])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op33_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf31', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf32', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg53_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg54_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg55_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf33', get_index_10, add_4, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 6422528}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 6422528}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf34.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (6422528, 1)
op34.sizes = ([6422528], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op34_loop_body:
    var_ranges = {z0: 6422528}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf34', get_index_1, relu, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg56_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 2809856}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 2809856}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg57_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg58_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg59_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg60_1', c1, {c0: 25088, c1: 112}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (2809856, 1)
op36.sizes = ([25088, 112], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op36_loop_body:
    var_ranges = {z0: 25088, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf36', get_index_5, relu, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('arg61_1', c0, {c0: 1764}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (1764, 1)
op37.sizes = ([14, 14, 9], [])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op37_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg61_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg63_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg64_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg65_1', c1, {c0: 8, c1: 14}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf39.aliases = ['buf65']
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (351232, 1)
op39.sizes = ([8, 14, 3136], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf39_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf39', get_index_5, relu, None)
        return store


op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 351232}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 14, {c0: 25088, c1: 14}, None),
        MemoryDep('buf39', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (351232, 1)
op40.sizes = ([8, 3136, 14], [])
buf39_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op40_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 14
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf40', get_index_2, add, None)
        return store


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op41.unmet_dependencies = []
op41.met_dependencies = [MemoryDep('arg66_1', c0, {c0: 1764}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf41.users = [NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (1764, 1)
op41.sizes = ([14, 14, 9], [])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op41_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg66_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf41', get_index_1, load, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf40', mode=None), StarDep(name='buf41', mode=None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg68_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg69_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg70_1', c1, {c0: 8, c1: 14}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf43.aliases = ['buf65']
    buf43.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op43.group.device = cuda:0
op43.group.iteration = (351232, 1)
op43.sizes = ([8, 14, 3136], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf43_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op43_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 351232}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 28, {c0: 25088, c1: 14}, None),
        MemoryDep('buf43', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op44.met_dependencies = []
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (351232, 1)
op44.sizes = ([8, 3136, 14], [])
buf43_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 28
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf43', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf44', get_index_2, add, None)
        return store


op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg71_1', c0, {c0: 1764}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (1764, 1)
op45.sizes = ([14, 14, 9], [])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op45_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg71_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf45', get_index_1, load, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelAlloc)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf44', mode=None), StarDep(name='buf45', mode=None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ExternKernelAlloc
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.node.kernel = extern_kernels.convolution


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op47.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg73_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg74_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg75_1', c1, {c0: 8, c1: 14}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf47.aliases = ['buf65']
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op47.group.device = cuda:0
op47.group.iteration = (351232, 1)
op47.sizes = ([8, 14, 3136], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf47_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op47_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf47', get_index_5, relu, None)
        return store


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 351232}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 42, {c0: 25088, c1: 14}, None),
        MemoryDep('buf47', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (351232, 1)
op48.sizes = ([8, 3136, 14], [])
buf47_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op48_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 42
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf48', get_index_2, add, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 1764}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (1764, 1)
op49.sizes = ([14, 14, 9], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op49_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg78_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg79_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg80_1', c1, {c0: 8, c1: 14}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf51.aliases = ['buf65']
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (351232, 1)
op51.sizes = ([8, 14, 3136], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf51_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf51', get_index_5, relu, None)
        return store


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 351232}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 56, {c0: 25088, c1: 14}, None),
        MemoryDep('buf51', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (351232, 1)
op52.sizes = ([8, 3136, 14], [])
buf51_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 56
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf52', get_index_2, add, None)
        return store


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op53.unmet_dependencies = []
op53.met_dependencies = [MemoryDep('arg81_1', c0, {c0: 1764}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (1764, 1)
op53.sizes = ([14, 14, 9], [])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op53_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg81_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf53', get_index_1, load, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelAlloc)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf52', mode=None), StarDep(name='buf53', mode=None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ExternKernelAlloc
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.node.kernel = extern_kernels.convolution


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg83_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg85_1', c1, {c0: 8, c1: 14}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf55.aliases = ['buf65']
    buf55.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op55.group.device = cuda:0
op55.group.iteration = (351232, 1)
op55.sizes = ([8, 14, 3136], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf55_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf55', get_index_5, relu, None)
        return store


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 351232}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 70, {c0: 25088, c1: 14}, None),
        MemoryDep('buf55', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (351232, 1)
op56.sizes = ([8, 3136, 14], [])
buf55_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 70
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf56', get_index_2, add, None)
        return store


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op57.unmet_dependencies = []
op57.met_dependencies = [MemoryDep('arg86_1', c0, {c0: 1764}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (1764, 1)
op57.sizes = ([14, 14, 9], [])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op57_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg86_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, load, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf56', mode=None), StarDep(name='buf57', mode=None)]
op58.met_dependencies = []
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False)]
]
op58.node.kernel = extern_kernels.convolution


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg87_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg89_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg90_1', c1, {c0: 8, c1: 14}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf59.aliases = ['buf65']
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (351232, 1)
op59.sizes = ([8, 14, 3136], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf59_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf59', get_index_5, relu, None)
        return store


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 351232}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf36', 112*c0 + c1 + 84, {c0: 25088, c1: 14}, None),
        MemoryDep('buf59', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (351232, 1)
op60.sizes = ([8, 3136, 14], [])
buf59_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 84
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf60', get_index_2, add, None)
        return store


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op61.unmet_dependencies = []
op61.met_dependencies = [MemoryDep('arg91_1', c0, {c0: 1764}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1764, 1)
op61.sizes = ([14, 14, 9], [])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op61_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg91_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf61', get_index_1, load, None)
        return store


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf60', mode=None), StarDep(name='buf61', mode=None)]
op62.met_dependencies = []
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg93_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg94_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg95_1', c1, {c0: 8, c1: 14}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf63.aliases = ['buf65']
    buf63.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op63.group.device = cuda:0
op63.group.iteration = (351232, 1)
op63.sizes = ([8, 14, 3136], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf63_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf63', get_index_5, relu, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op64.unmet_dependencies = [   MemoryDep('buf36', 351232*c0 + c1 + 112*c2 + 98, {c0: 8, c1: 14, c2: 3136}, None)]
op64.met_dependencies = []
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf64.aliases = ['buf65']
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (351232, 1)
op64.sizes = ([8, 14, 3136], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf64_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op64_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 351232*z0 + z1 + 112*z2 + 98
    index1 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf64', get_index_1, load, None)
        return store


op65: NopKernelSchedulerNode(ConcatKernel)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = 
    [   StarDep(name='buf39', mode=None),
        StarDep(name='buf43', mode=None),
        StarDep(name='buf47', mode=None),
        StarDep(name='buf51', mode=None),
        StarDep(name='buf55', mode=None),
        StarDep(name='buf59', mode=None),
        StarDep(name='buf63', mode=None),
        StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ConcatKernel
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
    ]
]


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', 351232*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 3136}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2809856}, None)]
op66.met_dependencies = []
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (2809856, 1)
op66.sizes = ([8, 112, 3136], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 3136}
    index0 = 351232*z0 + 3136*z1 + z2
    index1 = 351232*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf66', get_index_1, load, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 6422528}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf34', c0, {c0: 6422528}, None),
        MemoryDep('buf67', c0, {c0: 6422528}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg97_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg98_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg99_1', c1, {c0: 25088, c1: 256}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (6422528, 1)
op68.sizes = ([25088, 256], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op68_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf34', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf68', get_index_6, relu, None)
        return store


op69: ExternKernelSchedulerNode(ExternKernelAlloc)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelAlloc
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf69.users = [NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False)]
]
op69.node.kernel = extern_kernels.convolution


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 2809856}, None)]
op70.unmet_dependencies = [MemoryDep('buf69', c0, {c0: 2809856}, None)]
op70.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg103_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg104_1', c1, {c0: 25088, c1: 112}, None),
        MemoryDep('arg105_1', c1, {c0: 25088, c1: 112}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op70.group.device = cuda:0
op70.group.iteration = (2809856, 1)
op70.sizes = ([25088, 112], [])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op70_loop_body:
    var_ranges = {z0: 25088, z1: 112}
    index0 = 112*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf69', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf70', get_index_5, relu, None)
        return store


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op71.unmet_dependencies = []
op71.met_dependencies = [MemoryDep('arg106_1', c0, {c0: 1764}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (1764, 1)
op71.sizes = ([14, 14, 9], [])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op71_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg106_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf71', get_index_1, load, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf70', mode=None), StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg108_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg109_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg110_1', c1, {c0: 8, c1: 14}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf73.aliases = ['buf99']
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op73.group.device = cuda:0
op73.group.iteration = (351232, 1)
op73.sizes = ([8, 14, 3136], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf73_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op73_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 351232}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 14, {c0: 25088, c1: 14}, None),
        MemoryDep('buf73', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (351232, 1)
op74.sizes = ([8, 3136, 14], [])
buf73_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 14
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf74', get_index_2, add, None)
        return store


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op75.unmet_dependencies = []
op75.met_dependencies = [MemoryDep('arg111_1', c0, {c0: 1764}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (1764, 1)
op75.sizes = ([14, 14, 9], [])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op75_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg111_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf75', get_index_1, load, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelAlloc)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None), StarDep(name='buf75', mode=None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ExternKernelAlloc
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.convolution


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op77.unmet_dependencies = [MemoryDep('buf76', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg113_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg114_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg115_1', c1, {c0: 8, c1: 14}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf77.aliases = ['buf99']
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (351232, 1)
op77.sizes = ([8, 14, 3136], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf77_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf77', get_index_5, relu, None)
        return store


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 351232}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 28, {c0: 25088, c1: 14}, None),
        MemoryDep('buf77', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (351232, 1)
op78.sizes = ([8, 3136, 14], [])
buf77_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 28
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf78', get_index_2, add, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op79.unmet_dependencies = []
op79.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 1764}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1764, 1)
op79.sizes = ([14, 14, 9], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op79_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf79', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg118_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg119_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg120_1', c1, {c0: 8, c1: 14}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf81.aliases = ['buf99']
    buf81.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (351232, 1)
op81.sizes = ([8, 14, 3136], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf81_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op81_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 351232}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 42, {c0: 25088, c1: 14}, None),
        MemoryDep('buf81', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op82.met_dependencies = []
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (351232, 1)
op82.sizes = ([8, 3136, 14], [])
buf81_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 42
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf81', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf82', get_index_2, add, None)
        return store


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op83.unmet_dependencies = []
op83.met_dependencies = [MemoryDep('arg121_1', c0, {c0: 1764}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (1764, 1)
op83.sizes = ([14, 14, 9], [])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op83_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg121_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf83', get_index_1, load, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelAlloc)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf82', mode=None), StarDep(name='buf83', mode=None)]
op84.met_dependencies = []
op84.outputs = [
    buf84: ExternKernelAlloc
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.node.kernel = extern_kernels.convolution


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg123_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg124_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg125_1', c1, {c0: 8, c1: 14}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf85.aliases = ['buf99']
    buf85.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (351232, 1)
op85.sizes = ([8, 14, 3136], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf85_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op85_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf85', get_index_5, relu, None)
        return store


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 351232}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 56, {c0: 25088, c1: 14}, None),
        MemoryDep('buf85', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op86.met_dependencies = []
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (351232, 1)
op86.sizes = ([8, 3136, 14], [])
buf85_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op86_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 56
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf86', get_index_2, add, None)
        return store


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op87.unmet_dependencies = []
op87.met_dependencies = [MemoryDep('arg126_1', c0, {c0: 1764}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (1764, 1)
op87.sizes = ([14, 14, 9], [])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op87_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg126_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf87', get_index_1, load, None)
        return store


op88: ExternKernelSchedulerNode(ExternKernelAlloc)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf86', mode=None), StarDep(name='buf87', mode=None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ExternKernelAlloc
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.node.kernel = extern_kernels.convolution


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op89.unmet_dependencies = [MemoryDep('buf88', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg128_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg129_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg130_1', c1, {c0: 8, c1: 14}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf89.aliases = ['buf99']
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (351232, 1)
op89.sizes = ([8, 14, 3136], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf89_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op89_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf89', get_index_5, relu, None)
        return store


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 351232}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 70, {c0: 25088, c1: 14}, None),
        MemoryDep('buf89', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (351232, 1)
op90.sizes = ([8, 3136, 14], [])
buf89_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op90_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 70
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf90', get_index_2, add, None)
        return store


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op91.unmet_dependencies = []
op91.met_dependencies = [MemoryDep('arg131_1', c0, {c0: 1764}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1764, 1)
op91.sizes = ([14, 14, 9], [])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op91_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg131_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf91', get_index_1, load, None)
        return store


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf90', mode=None), StarDep(name='buf91', mode=None)]
op92.met_dependencies = []
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg133_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg134_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg135_1', c1, {c0: 8, c1: 14}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf93.aliases = ['buf99']
    buf93.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (351232, 1)
op93.sizes = ([8, 14, 3136], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf93_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf93', get_index_5, relu, None)
        return store


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 351232}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf70', 112*c0 + c1 + 84, {c0: 25088, c1: 14}, None),
        MemoryDep('buf93', 351232*c0 + c1 + 3136*c2, {c0: 8, c1: 3136, c2: 14}, None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (351232, 1)
op94.sizes = ([8, 3136, 14], [])
buf93_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf94_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
class op94_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 14}
    index0 = 351232*z0 + z1 + 3136*z2
    index1 = 351232*z0 + 112*z1 + z2 + 84
    index2 = 43904*z0 + 14*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf93', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf70', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf94', get_index_2, add, None)
        return store


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', 126*c0 + c1 + 14*c2, {c0: 14, c1: 14, c2: 9}, None)]
op95.unmet_dependencies = []
op95.met_dependencies = [MemoryDep('arg136_1', c0, {c0: 1764}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1764, 1)
op95.sizes = ([14, 14, 9], [])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 9, 3, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[14, 14, 3, 3], stride=[126, 1, 42, 14])
class op95_loop_body:
    var_ranges = {z0: 14, z1: 14, z2: 9}
    index0 = 126*z0 + 9*z1 + z2
    index1 = 126*z0 + z1 + 14*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg136_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf95', get_index_1, load, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelAlloc)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf94', mode=None), StarDep(name='buf95', mode=None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ExternKernelAlloc
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False)]
]
op96.node.kernel = extern_kernels.convolution


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', 43904*c0 + c1 + 14*c2, {c0: 8, c1: 14, c2: 3136}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg138_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 14}, None),
        MemoryDep('arg140_1', c1, {c0: 8, c1: 14}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf97.aliases = ['buf99']
    buf97.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (351232, 1)
op97.sizes = ([8, 14, 3136], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[43904, 1, 784, 14])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[14], stride=[1])
buf97_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op97_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 43904*z0 + z1 + 14*z2
    index1 = z1
    index2 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf97', get_index_5, relu, None)
        return store


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', 351232*c0 + c1, {c0: 8, c1: 43904}, None)]
op98.unmet_dependencies = [   MemoryDep('buf70', 351232*c0 + c1 + 112*c2 + 98, {c0: 8, c1: 14, c2: 3136}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
    buf98.aliases = ['buf99']
    buf98.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]
op98.group.device = cuda:0
op98.group.iteration = (351232, 1)
op98.sizes = ([8, 14, 3136], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
buf98_layout = NonOwningLayout('cuda', torch.float32, size=[8, 14, 56, 56], stride=[351232, 3136, 56, 1])
class op98_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 3136}
    index0 = 351232*z0 + z1 + 112*z2 + 98
    index1 = 351232*z0 + 3136*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf98', get_index_1, load, None)
        return store


op99: NopKernelSchedulerNode(ConcatKernel)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = 
    [   StarDep(name='buf73', mode=None),
        StarDep(name='buf77', mode=None),
        StarDep(name='buf81', mode=None),
        StarDep(name='buf85', mode=None),
        StarDep(name='buf89', mode=None),
        StarDep(name='buf93', mode=None),
        StarDep(name='buf97', mode=None),
        StarDep(name='buf98', mode=None)]
op99.met_dependencies = []
op99.outputs = [
    buf99: ConcatKernel
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
    buf99.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False),
    ]
]


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 351232*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 3136}, None)]
op100.unmet_dependencies = [MemoryDep('buf99', c0, {c0: 2809856}, None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (2809856, 1)
op100.sizes = ([8, 112, 3136], [])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 3136, 56, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 56, 56], stride=[351232, 1, 6272, 112])
class op100_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 3136}
    index0 = 351232*z0 + 3136*z1 + z2
    index1 = 351232*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf99', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 6422528}, None)]
op102.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 6422528}, None),
        MemoryDep('buf68', c0, {c0: 6422528}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg143_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg144_1', c1, {c0: 25088, c1: 256}, None),
        MemoryDep('arg145_1', c1, {c0: 25088, c1: 256}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf102.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op102.group.device = cuda:0
op102.group.iteration = (6422528, 1)
op102.sizes = ([25088, 256], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
class op102_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf68', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf102', get_index_6, relu, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg146_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 5619712}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', c0, {c0: 5619712}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg147_1', c1, {c0: 25088, c1: 224}, None),
        MemoryDep('arg148_1', c1, {c0: 25088, c1: 224}, None),
        MemoryDep('arg149_1', c1, {c0: 25088, c1: 224}, None),
        MemoryDep('arg150_1', c1, {c0: 25088, c1: 224}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
    ]
]
op104.group.device = cuda:0
op104.group.iteration = (5619712, 1)
op104.sizes = ([25088, 224], [])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
class op104_loop_body:
    var_ranges = {z0: 25088, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf104', get_index_5, relu, None)
        return store


op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op105.unmet_dependencies = []
op105.met_dependencies = [MemoryDep('arg151_1', c0, {c0: 7056}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (7056, 1)
op105.sizes = ([28, 28, 9], [])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op105_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg151_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf105', get_index_1, load, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelAlloc)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf105', mode=None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ExternKernelAlloc
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf106.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.convolution


op107: SchedulerNode(ComputedBuffer)
op107.writes = [MemoryDep('buf107', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op107.unmet_dependencies = []
op107.met_dependencies = [MemoryDep('arg156_1', c0, {c0: 7056}, None)]
op107.outputs = [
    buf107: ComputedBuffer
    buf107.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf107.users = [NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op107.group.device = cuda:0
op107.group.iteration = (7056, 1)
op107.sizes = ([28, 28, 9], [])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op107_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg156_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf107', get_index_1, load, None)
        return store


op108: ExternKernelSchedulerNode(ExternKernelAlloc)
op108.writes = [StarDep(name='buf108', mode=None)]
op108.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf107', mode=None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ExternKernelAlloc
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf108.users = [NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op108.node.kernel = extern_kernels.convolution


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op109.unmet_dependencies = []
op109.met_dependencies = [MemoryDep('arg161_1', c0, {c0: 7056}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (7056, 1)
op109.sizes = ([28, 28, 9], [])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op109_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelAlloc)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ExternKernelAlloc
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf110.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = extern_kernels.convolution


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op111.unmet_dependencies = []
op111.met_dependencies = [MemoryDep('arg166_1', c0, {c0: 7056}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (7056, 1)
op111.sizes = ([28, 28, 9], [])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op111_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg166_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf112.users = [NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op113.unmet_dependencies = []
op113.met_dependencies = [MemoryDep('arg171_1', c0, {c0: 7056}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (7056, 1)
op113.sizes = ([28, 28, 9], [])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op113_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg171_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf113', get_index_1, load, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelAlloc)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf113', mode=None)]
op114.met_dependencies = []
op114.outputs = [
    buf114: ExternKernelAlloc
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf114.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op114.node.kernel = extern_kernels.convolution


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op115.unmet_dependencies = []
op115.met_dependencies = [MemoryDep('arg176_1', c0, {c0: 7056}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (7056, 1)
op115.sizes = ([28, 28, 9], [])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op115_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg176_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf115', get_index_1, load, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelAlloc)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf115', mode=None)]
op116.met_dependencies = []
op116.outputs = [
    buf116: ExternKernelAlloc
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf116.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op116.node.kernel = extern_kernels.convolution


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op117.unmet_dependencies = []
op117.met_dependencies = [MemoryDep('arg181_1', c0, {c0: 7056}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (7056, 1)
op117.sizes = ([28, 28, 9], [])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op117_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf117', get_index_1, load, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf104', mode=None), StarDep(name='buf117', mode=None)]
op118.met_dependencies = []
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf118.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False)]
]
op118.node.kernel = extern_kernels.convolution


op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf104', 25088*c0 + 448*c1 + c2 + 12516, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 + 12740, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 + 12964, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 + 196, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 + 420, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 - 12124, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 - 12348, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 - 12572, {c0: 224, c1: 28, c2: 28}, None),
        MemoryDep('buf104', 25088*c0 + 448*c1 + c2 - 28, {c0: 224, c1: 28, c2: 28}, None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf119.aliases = ['buf127']
    buf119.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (175616, 1)
op119.sizes = ([8, 28, 28, 28], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 56, 56], stride=[702464, 1, 12544, 224])
buf119_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 28}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 702464*z0 + 25088*z1 + 448*z2 + z3 - 12572
    index3 = 2*z2
    index4 = 702464*z0 + 25088*z1 + 448*z2 + z3 - 12348
    index5 = 2*z2 + 1
    index6 = 702464*z0 + 25088*z1 + 448*z2 + z3 - 12124
    index7 = 2*z1
    index8 = 702464*z0 + 25088*z1 + 448*z2 + z3 - 28
    index9 = 702464*z0 + 25088*z1 + 448*z2 + z3 + 196
    index10 = 702464*z0 + 25088*z1 + 448*z2 + z3 + 420
    index11 = 2*z1 + 1
    index12 = 702464*z0 + 25088*z1 + 448*z2 + z3 + 12516
    index13 = 702464*z0 + 25088*z1 + 448*z2 + z3 + 12740
    index14 = 702464*z0 + 25088*z1 + 448*z2 + z3 + 12964
    index15 = 4*z1*z2 - 2*z1*Min(57, 2*z2 + 2) - 2*z1 - 2*z2*Min(57, 2*z1 + 2) - 2*z2 + Min(57, 2*z1 + 2)*Min(57, 2*z2 + 2) + Min(57, 2*z1 + 2) + Min(57, 2*z2 + 2) + 1
    index16 = 175616*z0 + 28*z1 + z2 + 784*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(56, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(56, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(56, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(56, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(56, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(56, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(56, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(56, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(56, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(56, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(56, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(56, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(56, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(56, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(56, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(56, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf119', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf104', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf104', get_index)
        return load


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op120.unmet_dependencies = [MemoryDep('buf106', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg153_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg154_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg155_1', c1, {c0: 8, c1: 28}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf120.aliases = ['buf127']
    buf120.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (175616, 1)
op120.sizes = ([8, 28, 784], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf120_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf120', get_index_5, relu, None)
        return store


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op121.unmet_dependencies = [MemoryDep('buf108', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op121.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg158_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg159_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg160_1', c1, {c0: 8, c1: 28}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf121.aliases = ['buf127']
    buf121.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op121.group.device = cuda:0
op121.group.iteration = (175616, 1)
op121.sizes = ([8, 28, 784], [])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf121_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op121_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf108', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf121', get_index_5, relu, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op122.unmet_dependencies = [MemoryDep('buf110', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg163_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg164_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg165_1', c1, {c0: 8, c1: 28}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf122.aliases = ['buf127']
    buf122.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op122.group.device = cuda:0
op122.group.iteration = (175616, 1)
op122.sizes = ([8, 28, 784], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf122_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op122_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf122', get_index_5, relu, None)
        return store


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op123.unmet_dependencies = [MemoryDep('buf112', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op123.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg168_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg169_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg170_1', c1, {c0: 8, c1: 28}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf123.aliases = ['buf127']
    buf123.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op123.group.device = cuda:0
op123.group.iteration = (175616, 1)
op123.sizes = ([8, 28, 784], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf123_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op123_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf123', get_index_5, relu, None)
        return store


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op124.unmet_dependencies = [MemoryDep('buf114', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg174_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg175_1', c1, {c0: 8, c1: 28}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf124.aliases = ['buf127']
    buf124.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (175616, 1)
op124.sizes = ([8, 28, 784], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf124_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf124', get_index_5, relu, None)
        return store


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op125.unmet_dependencies = [MemoryDep('buf116', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg178_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg179_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg180_1', c1, {c0: 8, c1: 28}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf125.aliases = ['buf127']
    buf125.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (175616, 1)
op125.sizes = ([8, 28, 784], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf125_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op125_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf125', get_index_5, relu, None)
        return store


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op126.unmet_dependencies = [MemoryDep('buf118', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg183_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg184_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg185_1', c1, {c0: 8, c1: 28}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf126.aliases = ['buf127']
    buf126.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (175616, 1)
op126.sizes = ([8, 28, 784], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf126_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf126', get_index_5, relu, None)
        return store


op127: NopKernelSchedulerNode(ConcatKernel)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = 
    [   StarDep(name='buf119', mode=None),
        StarDep(name='buf120', mode=None),
        StarDep(name='buf121', mode=None),
        StarDep(name='buf122', mode=None),
        StarDep(name='buf123', mode=None),
        StarDep(name='buf124', mode=None),
        StarDep(name='buf125', mode=None),
        StarDep(name='buf126', mode=None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ConcatKernel
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
    buf127.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
    ]
]


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', 175616*c0 + c1 + 224*c2, {c0: 8, c1: 224, c2: 784}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1404928}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (1404928, 1)
op128.sizes = ([8, 224, 784], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op128_loop_body:
    var_ranges = {z0: 8, z1: 224, z2: 784}
    index0 = 175616*z0 + 784*z1 + z2
    index1 = 175616*z0 + z1 + 224*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf128', get_index_1, load, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelAlloc)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelAlloc
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op129.node.kernel = extern_kernels.convolution


op130: ExternKernelSchedulerNode(ExternKernelAlloc)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op130.met_dependencies = [StarDep(name='arg191_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelAlloc
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf130.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False)]
]
op130.node.kernel = extern_kernels.convolution


op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 3211264}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 3211264}, None),
        MemoryDep('buf130', c0, {c0: 3211264}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg188_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg189_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg190_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg192_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg193_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg194_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 6272, c1: 512}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (3211264, 1)
op131.sizes = ([6272, 512], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op131_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf130', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg192_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg193_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg194_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg195_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf131', get_index_10, add_4, None)
        return store


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 3211264}, None)]
op132.unmet_dependencies = [MemoryDep('buf131', c0, {c0: 3211264}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (3211264, 1)
op132.sizes = ([3211264], [])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op132_loop_body:
    var_ranges = {z0: 3211264}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf131', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf132', get_index_1, relu, None)
        return store


op133: ExternKernelSchedulerNode(ExternKernelAlloc)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelAlloc
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf133.users = [NodeUser(node=SchedulerNode(name='op134'), can_inplace=True, is_weak=False)]
]
op133.node.kernel = extern_kernels.convolution


op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 1404928}, None)]
op134.unmet_dependencies = [MemoryDep('buf133', c0, {c0: 1404928}, None)]
op134.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg198_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg199_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg200_1', c1, {c0: 6272, c1: 224}, None)]
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf134.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op134.group.device = cuda:0
op134.group.iteration = (1404928, 1)
op134.sizes = ([6272, 224], [])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op134_loop_body:
    var_ranges = {z0: 6272, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf133', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf134', get_index_5, relu, None)
        return store


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op135.unmet_dependencies = []
op135.met_dependencies = [MemoryDep('arg201_1', c0, {c0: 7056}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (7056, 1)
op135.sizes = ([28, 28, 9], [])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op135_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg201_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf134', mode=None), StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf136.users = [NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.node.kernel = extern_kernels.convolution


op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg203_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg204_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg205_1', c1, {c0: 8, c1: 28}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf137.aliases = ['buf163']
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (175616, 1)
op137.sizes = ([8, 28, 784], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf137_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf137', get_index_5, relu, None)
        return store


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 175616}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 28, {c0: 6272, c1: 28}, None),
        MemoryDep('buf137', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op138.met_dependencies = []
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (175616, 1)
op138.sizes = ([8, 784, 28], [])
buf137_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 28
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf138', get_index_2, add, None)
        return store


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op139.unmet_dependencies = []
op139.met_dependencies = [MemoryDep('arg206_1', c0, {c0: 7056}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf139.users = [NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (7056, 1)
op139.sizes = ([28, 28, 9], [])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op139_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg206_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf139', get_index_1, load, None)
        return store


op140: ExternKernelSchedulerNode(ExternKernelAlloc)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf138', mode=None), StarDep(name='buf139', mode=None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ExternKernelAlloc
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.node.kernel = extern_kernels.convolution


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op141.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg208_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg209_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg210_1', c1, {c0: 8, c1: 28}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf141.aliases = ['buf163']
    buf141.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op141.group.device = cuda:0
op141.group.iteration = (175616, 1)
op141.sizes = ([8, 28, 784], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf141_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op141_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg208_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf141', get_index_5, relu, None)
        return store


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 175616}, None)]
op142.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 56, {c0: 6272, c1: 28}, None),
        MemoryDep('buf141', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (175616, 1)
op142.sizes = ([8, 784, 28], [])
buf141_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op142_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 56
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf142', get_index_2, add, None)
        return store


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op143.unmet_dependencies = []
op143.met_dependencies = [MemoryDep('arg211_1', c0, {c0: 7056}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (7056, 1)
op143.sizes = ([28, 28, 9], [])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op143_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg211_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf143', get_index_1, load, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf142', mode=None), StarDep(name='buf143', mode=None)]
op144.met_dependencies = []
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.convolution


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op145.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg213_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg214_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg215_1', c1, {c0: 8, c1: 28}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf145.aliases = ['buf163']
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op145.group.device = cuda:0
op145.group.iteration = (175616, 1)
op145.sizes = ([8, 28, 784], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf145_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op145_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg213_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf145', get_index_5, relu, None)
        return store


op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 175616}, None)]
op146.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 84, {c0: 6272, c1: 28}, None),
        MemoryDep('buf145', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op146.met_dependencies = []
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf146.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (175616, 1)
op146.sizes = ([8, 784, 28], [])
buf145_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op146_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 84
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf146', get_index_2, add, None)
        return store


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op147.unmet_dependencies = []
op147.met_dependencies = [MemoryDep('arg216_1', c0, {c0: 7056}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf147.users = [NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (7056, 1)
op147.sizes = ([28, 28, 9], [])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op147_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg216_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf147', get_index_1, load, None)
        return store


op148: ExternKernelSchedulerNode(ExternKernelAlloc)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf146', mode=None), StarDep(name='buf147', mode=None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ExternKernelAlloc
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.node.kernel = extern_kernels.convolution


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg218_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg219_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg220_1', c1, {c0: 8, c1: 28}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf149.aliases = ['buf163']
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op149.group.device = cuda:0
op149.group.iteration = (175616, 1)
op149.sizes = ([8, 28, 784], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf149_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op149_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg218_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg220_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf149', get_index_5, relu, None)
        return store


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 175616}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 112, {c0: 6272, c1: 28}, None),
        MemoryDep('buf149', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op150.met_dependencies = []
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (175616, 1)
op150.sizes = ([8, 784, 28], [])
buf149_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 112
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf149', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf150', get_index_2, add, None)
        return store


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op151.unmet_dependencies = []
op151.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 7056}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (7056, 1)
op151.sizes = ([28, 28, 9], [])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op151_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf151', get_index_1, load, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelAlloc)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf150', mode=None), StarDep(name='buf151', mode=None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ExternKernelAlloc
    buf152.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.node.kernel = extern_kernels.convolution


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op153.unmet_dependencies = [MemoryDep('buf152', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg222_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg223_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg224_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg225_1', c1, {c0: 8, c1: 28}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf153.aliases = ['buf163']
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (175616, 1)
op153.sizes = ([8, 28, 784], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf153_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg222_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf153', get_index_5, relu, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 175616}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 140, {c0: 6272, c1: 28}, None),
        MemoryDep('buf153', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op154.met_dependencies = []
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (175616, 1)
op154.sizes = ([8, 784, 28], [])
buf153_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 140
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf154', get_index_2, add, None)
        return store


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op155.unmet_dependencies = []
op155.met_dependencies = [MemoryDep('arg226_1', c0, {c0: 7056}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (7056, 1)
op155.sizes = ([28, 28, 9], [])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op155_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg226_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf155', get_index_1, load, None)
        return store


op156: ExternKernelSchedulerNode(ExternKernelAlloc)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf154', mode=None), StarDep(name='buf155', mode=None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ExternKernelAlloc
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op156.node.kernel = extern_kernels.convolution


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op157.unmet_dependencies = [MemoryDep('buf156', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg228_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg229_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg230_1', c1, {c0: 8, c1: 28}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf157.aliases = ['buf163']
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (175616, 1)
op157.sizes = ([8, 28, 784], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf157_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg229_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf157', get_index_5, relu, None)
        return store


op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 175616}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf134', 224*c0 + c1 + 168, {c0: 6272, c1: 28}, None),
        MemoryDep('buf157', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (175616, 1)
op158.sizes = ([8, 784, 28], [])
buf157_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op158_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 168
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf157', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf134', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf158', get_index_2, add, None)
        return store


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op159.unmet_dependencies = []
op159.met_dependencies = [MemoryDep('arg231_1', c0, {c0: 7056}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (7056, 1)
op159.sizes = ([28, 28, 9], [])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op159_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg231_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf159', get_index_1, load, None)
        return store


op160: ExternKernelSchedulerNode(ExternKernelAlloc)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf158', mode=None), StarDep(name='buf159', mode=None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ExternKernelAlloc
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf160.users = [NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = extern_kernels.convolution


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op161.unmet_dependencies = [MemoryDep('buf160', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op161.met_dependencies = 
    [   MemoryDep('arg232_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg233_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg234_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg235_1', c1, {c0: 8, c1: 28}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf161.aliases = ['buf163']
    buf161.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op161.group.device = cuda:0
op161.group.iteration = (175616, 1)
op161.sizes = ([8, 28, 784], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf161_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op161_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg233_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf161', get_index_5, relu, None)
        return store


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op162.unmet_dependencies = [   MemoryDep('buf134', 175616*c0 + c1 + 224*c2 + 196, {c0: 8, c1: 28, c2: 784}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf162.aliases = ['buf163']
    buf162.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (175616, 1)
op162.sizes = ([8, 28, 784], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf162_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 175616*z0 + z1 + 224*z2 + 196
    index1 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: NopKernelSchedulerNode(ConcatKernel)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = 
    [   StarDep(name='buf137', mode=None),
        StarDep(name='buf141', mode=None),
        StarDep(name='buf145', mode=None),
        StarDep(name='buf149', mode=None),
        StarDep(name='buf153', mode=None),
        StarDep(name='buf157', mode=None),
        StarDep(name='buf161', mode=None),
        StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ConcatKernel
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
    ]
]


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', 175616*c0 + c1 + 224*c2, {c0: 8, c1: 224, c2: 784}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 1404928}, None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1404928, 1)
op164.sizes = ([8, 224, 784], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op164_loop_body:
    var_ranges = {z0: 8, z1: 224, z2: 784}
    index0 = 175616*z0 + 784*z1 + z2
    index1 = 175616*z0 + z1 + 224*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf164', get_index_1, load, None)
        return store


op165: ExternKernelSchedulerNode(ExternKernelAlloc)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg236_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelAlloc
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf165.users = [NodeUser(node=SchedulerNode(name='op166'), can_inplace=True, is_weak=False)]
]
op165.node.kernel = extern_kernels.convolution


op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 3211264}, None)]
op166.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 3211264}, None),
        MemoryDep('buf165', c0, {c0: 3211264}, None)]
op166.met_dependencies = 
    [   MemoryDep('arg237_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg238_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg239_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg240_1', c1, {c0: 6272, c1: 512}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf166.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False),
    ]
]
op166.group.device = cuda:0
op166.group.iteration = (3211264, 1)
op166.sizes = ([6272, 512], [])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg238_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op166_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf165', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg237_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg238_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf132', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf166', get_index_6, relu, None)
        return store


op167: ExternKernelSchedulerNode(ExternKernelAlloc)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf166', mode=None)]
op167.met_dependencies = [StarDep(name='arg241_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelAlloc
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf167.users = [NodeUser(node=SchedulerNode(name='op168'), can_inplace=True, is_weak=False)]
]
op167.node.kernel = extern_kernels.convolution


op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1404928}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 1404928}, None)]
op168.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg243_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg244_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg245_1', c1, {c0: 6272, c1: 224}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
    ]
]
op168.group.device = cuda:0
op168.group.iteration = (1404928, 1)
op168.sizes = ([6272, 224], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg244_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op168_loop_body:
    var_ranges = {z0: 6272, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg242_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg243_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg244_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg245_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf168', get_index_5, relu, None)
        return store


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op169.unmet_dependencies = []
op169.met_dependencies = [MemoryDep('arg246_1', c0, {c0: 7056}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (7056, 1)
op169.sizes = ([28, 28, 9], [])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op169_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg246_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf169', get_index_1, load, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelAlloc)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf168', mode=None), StarDep(name='buf169', mode=None)]
op170.met_dependencies = []
op170.outputs = [
    buf170: ExternKernelAlloc
    buf170.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False)]
]
op170.node.kernel = extern_kernels.convolution


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op171.unmet_dependencies = [MemoryDep('buf170', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg248_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg249_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg250_1', c1, {c0: 8, c1: 28}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf171.aliases = ['buf197']
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (175616, 1)
op171.sizes = ([8, 28, 784], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf171_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op171_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg248_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg249_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg250_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf171', get_index_5, relu, None)
        return store


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 175616}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 28, {c0: 6272, c1: 28}, None),
        MemoryDep('buf171', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (175616, 1)
op172.sizes = ([8, 784, 28], [])
buf171_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op172_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 28
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf172', get_index_2, add, None)
        return store


op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op173.unmet_dependencies = []
op173.met_dependencies = [MemoryDep('arg251_1', c0, {c0: 7056}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf173.users = [NodeUser(node=ExternKernelSchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (7056, 1)
op173.sizes = ([28, 28, 9], [])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op173_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg251_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf173', get_index_1, load, None)
        return store


op174: ExternKernelSchedulerNode(ExternKernelAlloc)
op174.writes = [StarDep(name='buf174', mode=None)]
op174.unmet_dependencies = [StarDep(name='buf172', mode=None), StarDep(name='buf173', mode=None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ExternKernelAlloc
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf174.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.node.kernel = extern_kernels.convolution


op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op175.unmet_dependencies = [MemoryDep('buf174', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg252_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg253_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg254_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg255_1', c1, {c0: 8, c1: 28}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf175.aliases = ['buf197']
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op175.group.device = cuda:0
op175.group.iteration = (175616, 1)
op175.sizes = ([8, 28, 784], [])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf175_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op175_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf174', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg253_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf175', get_index_5, relu, None)
        return store


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 175616}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 56, {c0: 6272, c1: 28}, None),
        MemoryDep('buf175', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (175616, 1)
op176.sizes = ([8, 784, 28], [])
buf175_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op176_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 56
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf176', get_index_2, add, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op177.unmet_dependencies = []
op177.met_dependencies = [MemoryDep('arg256_1', c0, {c0: 7056}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (7056, 1)
op177.sizes = ([28, 28, 9], [])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op177_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg256_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelAlloc)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelAlloc
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf178.users = [NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.node.kernel = extern_kernels.convolution


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op179.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg258_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg259_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg260_1', c1, {c0: 8, c1: 28}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf179.aliases = ['buf197']
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (175616, 1)
op179.sizes = ([8, 28, 784], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf179_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op179_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg258_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg260_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf179', get_index_5, relu, None)
        return store


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 175616}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 84, {c0: 6272, c1: 28}, None),
        MemoryDep('buf179', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (175616, 1)
op180.sizes = ([8, 784, 28], [])
buf179_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 84
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf180', get_index_2, add, None)
        return store


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op181.unmet_dependencies = []
op181.met_dependencies = [MemoryDep('arg261_1', c0, {c0: 7056}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (7056, 1)
op181.sizes = ([28, 28, 9], [])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op181_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg261_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf181', get_index_1, load, None)
        return store


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op183.met_dependencies = 
    [   MemoryDep('arg262_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg263_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg264_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg265_1', c1, {c0: 8, c1: 28}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf183.aliases = ['buf197']
    buf183.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (175616, 1)
op183.sizes = ([8, 28, 784], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg262_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf183_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg262_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg263_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf183', get_index_5, relu, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 175616}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 112, {c0: 6272, c1: 28}, None),
        MemoryDep('buf183', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (175616, 1)
op184.sizes = ([8, 784, 28], [])
buf183_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 112
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf184', get_index_2, add, None)
        return store


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op185.unmet_dependencies = []
op185.met_dependencies = [MemoryDep('arg266_1', c0, {c0: 7056}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (7056, 1)
op185.sizes = ([28, 28, 9], [])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op185_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg266_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelAlloc)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf184', mode=None), StarDep(name='buf185', mode=None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ExternKernelAlloc
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.node.kernel = extern_kernels.convolution


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg267_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg268_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg269_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg270_1', c1, {c0: 8, c1: 28}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf187.aliases = ['buf197']
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (175616, 1)
op187.sizes = ([8, 28, 784], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf187_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op187_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg268_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg269_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf187', get_index_5, relu, None)
        return store


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 175616}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 140, {c0: 6272, c1: 28}, None),
        MemoryDep('buf187', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf188.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (175616, 1)
op188.sizes = ([8, 784, 28], [])
buf187_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op188_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 140
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf188', get_index_2, add, None)
        return store


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op189.unmet_dependencies = []
op189.met_dependencies = [MemoryDep('arg271_1', c0, {c0: 7056}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (7056, 1)
op189.sizes = ([28, 28, 9], [])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op189_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg271_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf189', get_index_1, load, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf188', mode=None), StarDep(name='buf189', mode=None)]
op190.met_dependencies = []
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.node.kernel = extern_kernels.convolution


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg273_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg274_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg275_1', c1, {c0: 8, c1: 28}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf191.aliases = ['buf197']
    buf191.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op191.group.device = cuda:0
op191.group.iteration = (175616, 1)
op191.sizes = ([8, 28, 784], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf191_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op191_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg274_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg275_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf191', get_index_5, relu, None)
        return store


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 175616}, None)]
op192.unmet_dependencies = 
    [   MemoryDep('buf168', 224*c0 + c1 + 168, {c0: 6272, c1: 28}, None),
        MemoryDep('buf191', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op192.met_dependencies = []
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (175616, 1)
op192.sizes = ([8, 784, 28], [])
buf191_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 168
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf192', get_index_2, add, None)
        return store


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op193.unmet_dependencies = []
op193.met_dependencies = [MemoryDep('arg276_1', c0, {c0: 7056}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (7056, 1)
op193.sizes = ([28, 28, 9], [])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op193_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg276_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf193', get_index_1, load, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf192', mode=None), StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.node.kernel = extern_kernels.convolution


op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg277_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg278_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg279_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg280_1', c1, {c0: 8, c1: 28}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf195.aliases = ['buf197']
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (175616, 1)
op195.sizes = ([8, 28, 784], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf195_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg277_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg278_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg280_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf195', get_index_5, relu, None)
        return store


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op196.unmet_dependencies = [   MemoryDep('buf168', 175616*c0 + c1 + 224*c2 + 196, {c0: 8, c1: 28, c2: 784}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf196.aliases = ['buf197']
    buf196.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (175616, 1)
op196.sizes = ([8, 28, 784], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf196_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op196_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 175616*z0 + z1 + 224*z2 + 196
    index1 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf196', get_index_1, load, None)
        return store


op197: NopKernelSchedulerNode(ConcatKernel)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = 
    [   StarDep(name='buf171', mode=None),
        StarDep(name='buf175', mode=None),
        StarDep(name='buf179', mode=None),
        StarDep(name='buf183', mode=None),
        StarDep(name='buf187', mode=None),
        StarDep(name='buf191', mode=None),
        StarDep(name='buf195', mode=None),
        StarDep(name='buf196', mode=None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ConcatKernel
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
    buf197.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', 175616*c0 + c1 + 224*c2, {c0: 8, c1: 224, c2: 784}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 1404928}, None)]
op198.met_dependencies = []
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (1404928, 1)
op198.sizes = ([8, 224, 784], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 224, z2: 784}
    index0 = 175616*z0 + 784*z1 + z2
    index1 = 175616*z0 + z1 + 224*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf198', get_index_1, load, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg281_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 3211264}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf166', c0, {c0: 3211264}, None),
        MemoryDep('buf199', c0, {c0: 3211264}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg282_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg283_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg284_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg285_1', c1, {c0: 6272, c1: 512}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False),
    ]
]
op200.group.device = cuda:0
op200.group.iteration = (3211264, 1)
op200.sizes = ([6272, 512], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op200_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg282_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg284_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf166', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf200', get_index_6, relu, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 1404928}, None)]
op202.unmet_dependencies = [MemoryDep('buf201', c0, {c0: 1404928}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg287_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg288_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg289_1', c1, {c0: 6272, c1: 224}, None),
        MemoryDep('arg290_1', c1, {c0: 6272, c1: 224}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf202.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op202.group.device = cuda:0
op202.group.iteration = (1404928, 1)
op202.sizes = ([6272, 224], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[224], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op202_loop_body:
    var_ranges = {z0: 6272, z1: 224}
    index0 = 224*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf201', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg288_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg290_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf202', get_index_5, relu, None)
        return store


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op203.unmet_dependencies = []
op203.met_dependencies = [MemoryDep('arg291_1', c0, {c0: 7056}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (7056, 1)
op203.sizes = ([28, 28, 9], [])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op203_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg291_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf203', get_index_1, load, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelAlloc)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf202', mode=None), StarDep(name='buf203', mode=None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ExternKernelAlloc
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.node.kernel = extern_kernels.convolution


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg292_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg293_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg294_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg295_1', c1, {c0: 8, c1: 28}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf205.aliases = ['buf231']
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (175616, 1)
op205.sizes = ([8, 28, 784], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf205_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op205_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg292_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg293_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg294_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg295_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf205', get_index_5, relu, None)
        return store


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 175616}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 28, {c0: 6272, c1: 28}, None),
        MemoryDep('buf205', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (175616, 1)
op206.sizes = ([8, 784, 28], [])
buf205_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 28
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf206', get_index_2, add, None)
        return store


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op207.unmet_dependencies = []
op207.met_dependencies = [MemoryDep('arg296_1', c0, {c0: 7056}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (7056, 1)
op207.sizes = ([28, 28, 9], [])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op207_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg296_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf207', get_index_1, load, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = extern_kernels.convolution


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op209.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg298_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg299_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg300_1', c1, {c0: 8, c1: 28}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf209.aliases = ['buf231']
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (175616, 1)
op209.sizes = ([8, 28, 784], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf209_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg298_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg300_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf209', get_index_5, relu, None)
        return store


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 175616}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 56, {c0: 6272, c1: 28}, None),
        MemoryDep('buf209', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (175616, 1)
op210.sizes = ([8, 784, 28], [])
buf209_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 56
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf210', get_index_2, add, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op211.unmet_dependencies = []
op211.met_dependencies = [MemoryDep('arg301_1', c0, {c0: 7056}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (7056, 1)
op211.sizes = ([28, 28, 9], [])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op211_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg301_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf211', get_index_1, load, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelAlloc)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf210', mode=None), StarDep(name='buf211', mode=None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ExternKernelAlloc
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.node.kernel = extern_kernels.convolution


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg303_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg304_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg305_1', c1, {c0: 8, c1: 28}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf213.aliases = ['buf231']
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (175616, 1)
op213.sizes = ([8, 28, 784], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf213_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg304_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg305_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf213', get_index_5, relu, None)
        return store


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 175616}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 84, {c0: 6272, c1: 28}, None),
        MemoryDep('buf213', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (175616, 1)
op214.sizes = ([8, 784, 28], [])
buf213_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op214_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 84
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf214', get_index_2, add, None)
        return store


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op215.unmet_dependencies = []
op215.met_dependencies = [MemoryDep('arg306_1', c0, {c0: 7056}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (7056, 1)
op215.sizes = ([28, 28, 9], [])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op215_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg306_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf215', get_index_1, load, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelAlloc)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf214', mode=None), StarDep(name='buf215', mode=None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ExternKernelAlloc
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.node.kernel = extern_kernels.convolution


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg308_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg309_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg310_1', c1, {c0: 8, c1: 28}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf217.aliases = ['buf231']
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op217.group.device = cuda:0
op217.group.iteration = (175616, 1)
op217.sizes = ([8, 28, 784], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf217_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg307_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg308_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg309_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg310_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf217', get_index_5, relu, None)
        return store


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 175616}, None)]
op218.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 112, {c0: 6272, c1: 28}, None),
        MemoryDep('buf217', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (175616, 1)
op218.sizes = ([8, 784, 28], [])
buf217_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op218_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 112
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf218', get_index_2, add, None)
        return store


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op219.unmet_dependencies = []
op219.met_dependencies = [MemoryDep('arg311_1', c0, {c0: 7056}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (7056, 1)
op219.sizes = ([28, 28, 9], [])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op219_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg311_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf219', get_index_1, load, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelAlloc)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf218', mode=None), StarDep(name='buf219', mode=None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ExternKernelAlloc
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op220.node.kernel = extern_kernels.convolution


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg312_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg313_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg314_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg315_1', c1, {c0: 8, c1: 28}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf221.aliases = ['buf231']
    buf221.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (175616, 1)
op221.sizes = ([8, 28, 784], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf221_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op221_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg312_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg313_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf221', get_index_5, relu, None)
        return store


op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 175616}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 140, {c0: 6272, c1: 28}, None),
        MemoryDep('buf221', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (175616, 1)
op222.sizes = ([8, 784, 28], [])
buf221_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op222_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 140
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf221', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf222', get_index_2, add, None)
        return store


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op223.unmet_dependencies = []
op223.met_dependencies = [MemoryDep('arg316_1', c0, {c0: 7056}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (7056, 1)
op223.sizes = ([28, 28, 9], [])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op223_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg316_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf223', get_index_1, load, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelAlloc)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf222', mode=None), StarDep(name='buf223', mode=None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ExternKernelAlloc
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf224.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.convolution


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op225.unmet_dependencies = [MemoryDep('buf224', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg317_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg318_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg319_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg320_1', c1, {c0: 8, c1: 28}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf225.aliases = ['buf231']
    buf225.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op225.group.device = cuda:0
op225.group.iteration = (175616, 1)
op225.sizes = ([8, 28, 784], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg318_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf225_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op225_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg318_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg319_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg320_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf225', get_index_5, relu, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 175616}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf202', 224*c0 + c1 + 168, {c0: 6272, c1: 28}, None),
        MemoryDep('buf225', 175616*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 28}, None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (175616, 1)
op226.sizes = ([8, 784, 28], [])
buf225_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 784, z2: 28}
    index0 = 175616*z0 + z1 + 784*z2
    index1 = 175616*z0 + 224*z1 + z2 + 168
    index2 = 21952*z0 + 28*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf225', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf202', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf226', get_index_2, add, None)
        return store


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', 252*c0 + c1 + 28*c2, {c0: 28, c1: 28, c2: 9}, None)]
op227.unmet_dependencies = []
op227.met_dependencies = [MemoryDep('arg321_1', c0, {c0: 7056}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (7056, 1)
op227.sizes = ([28, 28, 9], [])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 9, 3, 1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[28, 28, 3, 3], stride=[252, 1, 84, 28])
class op227_loop_body:
    var_ranges = {z0: 28, z1: 28, z2: 9}
    index0 = 252*z0 + 9*z1 + z2
    index1 = 252*z0 + z1 + 28*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg321_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf227', get_index_1, load, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelAlloc)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf226', mode=None), StarDep(name='buf227', mode=None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ExternKernelAlloc
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
    buf228.users = [NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.node.kernel = extern_kernels.convolution


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op229.unmet_dependencies = [MemoryDep('buf228', 21952*c0 + c1 + 28*c2, {c0: 8, c1: 28, c2: 784}, None)]
op229.met_dependencies = 
    [   MemoryDep('arg322_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg323_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg324_1', c1, {c0: 8, c1: 28}, None),
        MemoryDep('arg325_1', c1, {c0: 8, c1: 28}, None)]
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf229.aliases = ['buf231']
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (175616, 1)
op229.sizes = ([8, 28, 784], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[21952, 1, 784, 28])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[28], stride=[1])
buf229_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op229_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 21952*z0 + z1 + 28*z2
    index1 = z1
    index2 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg322_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg323_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg324_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf229', get_index_5, relu, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', 175616*c0 + c1, {c0: 8, c1: 21952}, None)]
op230.unmet_dependencies = [   MemoryDep('buf202', 175616*c0 + c1 + 224*c2 + 196, {c0: 8, c1: 28, c2: 784}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
    buf230.aliases = ['buf231']
    buf230.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op230.group.device = cuda:0
op230.group.iteration = (175616, 1)
op230.sizes = ([8, 28, 784], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
buf230_layout = NonOwningLayout('cuda', torch.float32, size=[8, 28, 28, 28], stride=[175616, 784, 28, 1])
class op230_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 784}
    index0 = 175616*z0 + z1 + 224*z2 + 196
    index1 = 175616*z0 + 784*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf230', get_index_1, load, None)
        return store


op231: NopKernelSchedulerNode(ConcatKernel)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = 
    [   StarDep(name='buf205', mode=None),
        StarDep(name='buf209', mode=None),
        StarDep(name='buf213', mode=None),
        StarDep(name='buf217', mode=None),
        StarDep(name='buf221', mode=None),
        StarDep(name='buf225', mode=None),
        StarDep(name='buf229', mode=None),
        StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ConcatKernel
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', 175616*c0 + c1 + 224*c2, {c0: 8, c1: 224, c2: 784}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 1404928}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (1404928, 1)
op232.sizes = ([8, 224, 784], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 784, 28, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 224, 28, 28], stride=[175616, 1, 6272, 224])
class op232_loop_body:
    var_ranges = {z0: 8, z1: 224, z2: 784}
    index0 = 175616*z0 + 784*z1 + z2
    index1 = 175616*z0 + z1 + 224*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf232', get_index_1, load, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelAlloc)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelAlloc
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.convolution


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 3211264}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf200', c0, {c0: 3211264}, None),
        MemoryDep('buf233', c0, {c0: 3211264}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg328_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg329_1', c1, {c0: 6272, c1: 512}, None),
        MemoryDep('arg330_1', c1, {c0: 6272, c1: 512}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (3211264, 1)
op234.sizes = ([6272, 512], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
class op234_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg328_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg330_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf200', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf234', get_index_6, relu, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg331_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.convolution


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 2809856}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 2809856}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg332_1', c1, {c0: 6272, c1: 448}, None),
        MemoryDep('arg333_1', c1, {c0: 6272, c1: 448}, None),
        MemoryDep('arg334_1', c1, {c0: 6272, c1: 448}, None),
        MemoryDep('arg335_1', c1, {c0: 6272, c1: 448}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (2809856, 1)
op236.sizes = ([6272, 448], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
class op236_loop_body:
    var_ranges = {z0: 6272, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg332_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg333_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg334_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg335_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, relu, None)
        return store


op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op237.unmet_dependencies = []
op237.met_dependencies = [MemoryDep('arg336_1', c0, {c0: 28224}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (28224, 1)
op237.sizes = ([56, 56, 9], [])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op237_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg336_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf237', get_index_1, load, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelAlloc)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf237', mode=None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ExternKernelAlloc
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf238.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op238.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op239.unmet_dependencies = []
op239.met_dependencies = [MemoryDep('arg341_1', c0, {c0: 28224}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (28224, 1)
op239.sizes = ([56, 56, 9], [])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op239_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg341_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf239', get_index_1, load, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf239', mode=None)]
op240.met_dependencies = []
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf240.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op241.unmet_dependencies = []
op241.met_dependencies = [MemoryDep('arg346_1', c0, {c0: 28224}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (28224, 1)
op241.sizes = ([56, 56, 9], [])
arg346_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op241_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg346_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf241', get_index_1, load, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelAlloc)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf241', mode=None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ExternKernelAlloc
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf242.users = [NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op242.node.kernel = extern_kernels.convolution


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op243.unmet_dependencies = []
op243.met_dependencies = [MemoryDep('arg351_1', c0, {c0: 28224}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (28224, 1)
op243.sizes = ([56, 56, 9], [])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op243_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg351_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf243', get_index_1, load, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf243', mode=None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf244.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.convolution


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op245.unmet_dependencies = []
op245.met_dependencies = [MemoryDep('arg356_1', c0, {c0: 28224}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (28224, 1)
op245.sizes = ([56, 56, 9], [])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op245_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg356_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf245', get_index_1, load, None)
        return store


op246: ExternKernelSchedulerNode(ExternKernelAlloc)
op246.writes = [StarDep(name='buf246', mode=None)]
op246.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf245', mode=None)]
op246.met_dependencies = []
op246.outputs = [
    buf246: ExternKernelAlloc
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf246.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op246.node.kernel = extern_kernels.convolution


op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op247.unmet_dependencies = []
op247.met_dependencies = [MemoryDep('arg361_1', c0, {c0: 28224}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (28224, 1)
op247.sizes = ([56, 56, 9], [])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op247_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg361_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf247', get_index_1, load, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelAlloc)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf247', mode=None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ExternKernelAlloc
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf248.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op248.node.kernel = extern_kernels.convolution


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op249.unmet_dependencies = []
op249.met_dependencies = [MemoryDep('arg366_1', c0, {c0: 28224}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (28224, 1)
op249.sizes = ([56, 56, 9], [])
arg366_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op249_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg366_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf249', get_index_1, load, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelAlloc)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf236', mode=None), StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ExternKernelAlloc
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf250.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op250.node.kernel = extern_kernels.convolution


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf236', 25088*c0 + 896*c1 + c2 + 12488, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 + 12936, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 + 13384, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 + 392, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 + 840, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 - 11704, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 - 12152, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 - 12600, {c0: 112, c1: 14, c2: 56}, None),
        MemoryDep('buf236', 25088*c0 + 896*c1 + c2 - 56, {c0: 112, c1: 14, c2: 56}, None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf251.aliases = ['buf259']
    buf251.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op251.group.device = cuda:0
op251.group.iteration = (87808, 1)
op251.sizes = ([8, 14, 14, 56], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 28, 28], stride=[351232, 1, 12544, 448])
buf251_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op251_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 14, z3: 56}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 351232*z0 + 25088*z1 + 896*z2 + z3 - 12600
    index3 = 2*z2
    index4 = 351232*z0 + 25088*z1 + 896*z2 + z3 - 12152
    index5 = 2*z2 + 1
    index6 = 351232*z0 + 25088*z1 + 896*z2 + z3 - 11704
    index7 = 2*z1
    index8 = 351232*z0 + 25088*z1 + 896*z2 + z3 - 56
    index9 = 351232*z0 + 25088*z1 + 896*z2 + z3 + 392
    index10 = 351232*z0 + 25088*z1 + 896*z2 + z3 + 840
    index11 = 2*z1 + 1
    index12 = 351232*z0 + 25088*z1 + 896*z2 + z3 + 12488
    index13 = 351232*z0 + 25088*z1 + 896*z2 + z3 + 12936
    index14 = 351232*z0 + 25088*z1 + 896*z2 + z3 + 13384
    index15 = 4*z1*z2 - 2*z1*Min(29, 2*z2 + 2) - 2*z1 - 2*z2*Min(29, 2*z1 + 2) - 2*z2 + Min(29, 2*z1 + 2)*Min(29, 2*z2 + 2) + Min(29, 2*z1 + 2) + Min(29, 2*z2 + 2) + 1
    index16 = 87808*z0 + 14*z1 + z2 + 196*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(28, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(28, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(28, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(28, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(28, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(28, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(28, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(28, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(28, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(28, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(28, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(28, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(28, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(28, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(28, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(28, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf251', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf236', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf236', get_index)
        return load


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op252.unmet_dependencies = [MemoryDep('buf238', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg338_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg339_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 56}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf252.aliases = ['buf259']
    buf252.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (87808, 1)
op252.sizes = ([8, 56, 196], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf252_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg338_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg339_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg340_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf252', get_index_5, relu, None)
        return store


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op253.unmet_dependencies = [MemoryDep('buf240', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg342_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg343_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg344_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg345_1', c1, {c0: 8, c1: 56}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf253.aliases = ['buf259']
    buf253.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (87808, 1)
op253.sizes = ([8, 56, 196], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf253_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op253_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg342_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg343_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg344_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg345_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf253', get_index_5, relu, None)
        return store


op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op254.unmet_dependencies = [MemoryDep('buf242', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op254.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg348_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg349_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg350_1', c1, {c0: 8, c1: 56}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf254.aliases = ['buf259']
    buf254.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op254.group.device = cuda:0
op254.group.iteration = (87808, 1)
op254.sizes = ([8, 56, 196], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg350_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf254_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg348_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg350_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf254', get_index_5, relu, None)
        return store


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op255.unmet_dependencies = [MemoryDep('buf244', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg352_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg353_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg354_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg355_1', c1, {c0: 8, c1: 56}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf255.aliases = ['buf259']
    buf255.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (87808, 1)
op255.sizes = ([8, 56, 196], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg354_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf255_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg352_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg353_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg354_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg355_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf255', get_index_5, relu, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op256.unmet_dependencies = [MemoryDep('buf246', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg357_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg358_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg359_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg360_1', c1, {c0: 8, c1: 56}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf256.aliases = ['buf259']
    buf256.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op256.group.device = cuda:0
op256.group.iteration = (87808, 1)
op256.sizes = ([8, 56, 196], [])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg358_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg360_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf256_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf246', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg357_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg358_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg359_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg360_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf256', get_index_5, relu, None)
        return store


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op257.unmet_dependencies = [MemoryDep('buf248', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op257.met_dependencies = 
    [   MemoryDep('arg362_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg363_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg364_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg365_1', c1, {c0: 8, c1: 56}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf257.aliases = ['buf259']
    buf257.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op257.group.device = cuda:0
op257.group.iteration = (87808, 1)
op257.sizes = ([8, 56, 196], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg364_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf257_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg362_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg363_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg364_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg365_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf257', get_index_5, relu, None)
        return store


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op258.unmet_dependencies = [MemoryDep('buf250', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op258.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg368_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg369_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg370_1', c1, {c0: 8, c1: 56}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf258.aliases = ['buf259']
    buf258.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op258.group.device = cuda:0
op258.group.iteration = (87808, 1)
op258.sizes = ([8, 56, 196], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg370_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf258_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg368_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg370_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf258', get_index_5, relu, None)
        return store


op259: NopKernelSchedulerNode(ConcatKernel)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = 
    [   StarDep(name='buf251', mode=None),
        StarDep(name='buf252', mode=None),
        StarDep(name='buf253', mode=None),
        StarDep(name='buf254', mode=None),
        StarDep(name='buf255', mode=None),
        StarDep(name='buf256', mode=None),
        StarDep(name='buf257', mode=None),
        StarDep(name='buf258', mode=None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ConcatKernel
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf259.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op260.unmet_dependencies = [MemoryDep('buf259', c0, {c0: 702464}, None)]
op260.met_dependencies = []
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (702464, 1)
op260.sizes = ([8, 448, 196], [])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op260_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf259', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf260', get_index_1, load, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelAlloc)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg371_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelAlloc
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op261.node.kernel = extern_kernels.convolution


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op262.met_dependencies = [StarDep(name='arg376_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op262.node.kernel = extern_kernels.convolution


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 1605632}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 1605632}, None),
        MemoryDep('buf262', c0, {c0: 1605632}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg372_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg373_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg374_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg375_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg377_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg378_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg379_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg380_1', c1, {c0: 1568, c1: 1024}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf263.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=True, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (1605632, 1)
op263.sizes = ([1568, 1024], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg372_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg377_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg378_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg379_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg380_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op263_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg372_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg373_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg374_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg375_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf262', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg377_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg378_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg379_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg380_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf263', get_index_10, add_4, None)
        return store


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1605632}, None)]
op264.unmet_dependencies = [MemoryDep('buf263', c0, {c0: 1605632}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf264.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op264.group.device = cuda:0
op264.group.iteration = (1605632, 1)
op264.sizes = ([1605632], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op264_loop_body:
    var_ranges = {z0: 1605632}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf264', get_index_1, relu, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = [StarDep(name='arg381_1', mode=None)]
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
]
op265.node.kernel = extern_kernels.convolution


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 702464}, None)]
op266.unmet_dependencies = [MemoryDep('buf265', c0, {c0: 702464}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg382_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg383_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg384_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg385_1', c1, {c0: 1568, c1: 448}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf266.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
    ]
]
op266.group.device = cuda:0
op266.group.iteration = (702464, 1)
op266.sizes = ([1568, 448], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
arg382_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op266_loop_body:
    var_ranges = {z0: 1568, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg382_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg383_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg384_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg385_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf266', get_index_5, relu, None)
        return store


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op267.unmet_dependencies = []
op267.met_dependencies = [MemoryDep('arg386_1', c0, {c0: 28224}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (28224, 1)
op267.sizes = ([56, 56, 9], [])
arg386_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op267_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg386_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf267', get_index_1, load, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelAlloc)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf267', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ExternKernelAlloc
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.node.kernel = extern_kernels.convolution


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op269.met_dependencies = 
    [   MemoryDep('arg387_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg388_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg389_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg390_1', c1, {c0: 8, c1: 56}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf269.aliases = ['buf295']
    buf269.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op269.group.device = cuda:0
op269.group.iteration = (87808, 1)
op269.sizes = ([8, 56, 196], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg388_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf269_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op269_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg388_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg389_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf269', get_index_5, relu, None)
        return store


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 87808}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 56, {c0: 1568, c1: 56}, None),
        MemoryDep('buf269', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (87808, 1)
op270.sizes = ([8, 196, 56], [])
buf269_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op270_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 56
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf270', get_index_2, add, None)
        return store


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op271.unmet_dependencies = []
op271.met_dependencies = [MemoryDep('arg391_1', c0, {c0: 28224}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (28224, 1)
op271.sizes = ([56, 56, 9], [])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op271_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg391_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg392_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg393_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg394_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg395_1', c1, {c0: 8, c1: 56}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf273.aliases = ['buf295']
    buf273.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op273.group.device = cuda:0
op273.group.iteration = (87808, 1)
op273.sizes = ([8, 56, 196], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg392_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf273_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg392_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg393_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg394_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg395_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf273', get_index_5, relu, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 87808}, None)]
op274.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 112, {c0: 1568, c1: 56}, None),
        MemoryDep('buf273', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (87808, 1)
op274.sizes = ([8, 196, 56], [])
buf273_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 112
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf273', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf274', get_index_2, add, None)
        return store


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op275.unmet_dependencies = []
op275.met_dependencies = [MemoryDep('arg396_1', c0, {c0: 28224}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (28224, 1)
op275.sizes = ([56, 56, 9], [])
arg396_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op275_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg396_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf275', get_index_1, load, None)
        return store


op276: ExternKernelSchedulerNode(ExternKernelAlloc)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf274', mode=None), StarDep(name='buf275', mode=None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ExternKernelAlloc
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.node.kernel = extern_kernels.convolution


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op277.met_dependencies = 
    [   MemoryDep('arg397_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg398_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg399_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg400_1', c1, {c0: 8, c1: 56}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf277.aliases = ['buf295']
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (87808, 1)
op277.sizes = ([8, 56, 196], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg400_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf277_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op277_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg397_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg398_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg399_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg400_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf277', get_index_5, relu, None)
        return store


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 87808}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 168, {c0: 1568, c1: 56}, None),
        MemoryDep('buf277', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (87808, 1)
op278.sizes = ([8, 196, 56], [])
buf277_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 168
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf278', get_index_2, add, None)
        return store


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op279.unmet_dependencies = []
op279.met_dependencies = [MemoryDep('arg401_1', c0, {c0: 28224}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (28224, 1)
op279.sizes = ([56, 56, 9], [])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op279_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg401_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf279', get_index_1, load, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf278', mode=None), StarDep(name='buf279', mode=None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.node.kernel = extern_kernels.convolution


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg402_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg403_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg404_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg405_1', c1, {c0: 8, c1: 56}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf281.aliases = ['buf295']
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (87808, 1)
op281.sizes = ([8, 56, 196], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg404_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf281_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op281_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg402_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg403_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg404_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg405_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf281', get_index_5, relu, None)
        return store


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 87808}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 224, {c0: 1568, c1: 56}, None),
        MemoryDep('buf281', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (87808, 1)
op282.sizes = ([8, 196, 56], [])
buf281_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 224
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf282', get_index_2, add, None)
        return store


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op283.unmet_dependencies = []
op283.met_dependencies = [MemoryDep('arg406_1', c0, {c0: 28224}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf283.users = [NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (28224, 1)
op283.sizes = ([56, 56, 9], [])
arg406_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op283_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg406_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf283', get_index_1, load, None)
        return store


op284: ExternKernelSchedulerNode(ExternKernelAlloc)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf282', mode=None), StarDep(name='buf283', mode=None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ExternKernelAlloc
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf284.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.node.kernel = extern_kernels.convolution


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op285.unmet_dependencies = [MemoryDep('buf284', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg408_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg409_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg410_1', c1, {c0: 8, c1: 56}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf285.aliases = ['buf295']
    buf285.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (87808, 1)
op285.sizes = ([8, 56, 196], [])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg410_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf285_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op285_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf284', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg407_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg408_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg409_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg410_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf285', get_index_5, relu, None)
        return store


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 87808}, None)]
op286.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 280, {c0: 1568, c1: 56}, None),
        MemoryDep('buf285', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (87808, 1)
op286.sizes = ([8, 196, 56], [])
buf285_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op286_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 280
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf286', get_index_2, add, None)
        return store


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op287.unmet_dependencies = []
op287.met_dependencies = [MemoryDep('arg411_1', c0, {c0: 28224}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (28224, 1)
op287.sizes = ([56, 56, 9], [])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op287_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg411_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf287', get_index_1, load, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelAlloc)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf286', mode=None), StarDep(name='buf287', mode=None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ExternKernelAlloc
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.node.kernel = extern_kernels.convolution


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op289.unmet_dependencies = [MemoryDep('buf288', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op289.met_dependencies = 
    [   MemoryDep('arg412_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg413_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg414_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg415_1', c1, {c0: 8, c1: 56}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf289.aliases = ['buf295']
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op289.group.device = cuda:0
op289.group.iteration = (87808, 1)
op289.sizes = ([8, 56, 196], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg412_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf289_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op289_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg412_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg413_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg414_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg415_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf289', get_index_5, relu, None)
        return store


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 87808}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf266', 448*c0 + c1 + 336, {c0: 1568, c1: 56}, None),
        MemoryDep('buf289', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (87808, 1)
op290.sizes = ([8, 196, 56], [])
buf289_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op290_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 336
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf266', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf290', get_index_2, add, None)
        return store


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op291.unmet_dependencies = []
op291.met_dependencies = [MemoryDep('arg416_1', c0, {c0: 28224}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (28224, 1)
op291.sizes = ([56, 56, 9], [])
arg416_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op291_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg416_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf291', get_index_1, load, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelAlloc)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None), StarDep(name='buf291', mode=None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ExternKernelAlloc
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.node.kernel = extern_kernels.convolution


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg417_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg418_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg419_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg420_1', c1, {c0: 8, c1: 56}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf293.aliases = ['buf295']
    buf293.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op293.group.device = cuda:0
op293.group.iteration = (87808, 1)
op293.sizes = ([8, 56, 196], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg418_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf293_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op293_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg417_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg418_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg419_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg420_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf293', get_index_5, relu, None)
        return store


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op294.unmet_dependencies = [   MemoryDep('buf266', 87808*c0 + c1 + 448*c2 + 392, {c0: 8, c1: 56, c2: 196}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf294.aliases = ['buf295']
    buf294.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (87808, 1)
op294.sizes = ([8, 56, 196], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf294_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op294_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 87808*z0 + z1 + 448*z2 + 392
    index1 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf294', get_index_1, load, None)
        return store


op295: NopKernelSchedulerNode(ConcatKernel)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = 
    [   StarDep(name='buf269', mode=None),
        StarDep(name='buf273', mode=None),
        StarDep(name='buf277', mode=None),
        StarDep(name='buf281', mode=None),
        StarDep(name='buf285', mode=None),
        StarDep(name='buf289', mode=None),
        StarDep(name='buf293', mode=None),
        StarDep(name='buf294', mode=None)]
op295.met_dependencies = []
op295.outputs = [
    buf295: ConcatKernel
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
    ]
]


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 702464}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (702464, 1)
op296.sizes = ([8, 448, 196], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf296', get_index_1, load, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelAlloc)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg421_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelAlloc
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.convolution


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 1605632}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf264', c0, {c0: 1605632}, None),
        MemoryDep('buf297', c0, {c0: 1605632}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg422_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg423_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg424_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg425_1', c1, {c0: 1568, c1: 1024}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (1605632, 1)
op298.sizes = ([1568, 1024], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg422_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg423_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg424_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg425_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op298_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg422_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg423_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg424_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg425_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf264', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf298', get_index_6, relu, None)
        return store


op299: ExternKernelSchedulerNode(ExternKernelAlloc)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg426_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelAlloc
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False)]
]
op299.node.kernel = extern_kernels.convolution


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 702464}, None)]
op300.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 702464}, None)]
op300.met_dependencies = 
    [   MemoryDep('arg427_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg428_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg429_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg430_1', c1, {c0: 1568, c1: 448}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf300.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
    ]
]
op300.group.device = cuda:0
op300.group.iteration = (702464, 1)
op300.sizes = ([1568, 448], [])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
arg427_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg428_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op300_loop_body:
    var_ranges = {z0: 1568, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg427_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg428_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg429_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg430_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf300', get_index_5, relu, None)
        return store


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op301.unmet_dependencies = []
op301.met_dependencies = [MemoryDep('arg431_1', c0, {c0: 28224}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (28224, 1)
op301.sizes = ([56, 56, 9], [])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op301_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg431_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf301', get_index_1, load, None)
        return store


op302: ExternKernelSchedulerNode(ExternKernelAlloc)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf300', mode=None), StarDep(name='buf301', mode=None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ExternKernelAlloc
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.node.kernel = extern_kernels.convolution


op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op303.unmet_dependencies = [MemoryDep('buf302', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op303.met_dependencies = 
    [   MemoryDep('arg432_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg433_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg434_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg435_1', c1, {c0: 8, c1: 56}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf303.aliases = ['buf329']
    buf303.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op303.group.device = cuda:0
op303.group.iteration = (87808, 1)
op303.sizes = ([8, 56, 196], [])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg432_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg434_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf303_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op303_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf302', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg432_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg433_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg434_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg435_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf303', get_index_5, relu, None)
        return store


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 87808}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 56, {c0: 1568, c1: 56}, None),
        MemoryDep('buf303', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (87808, 1)
op304.sizes = ([8, 196, 56], [])
buf303_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 56
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf304', get_index_2, add, None)
        return store


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op305.unmet_dependencies = []
op305.met_dependencies = [MemoryDep('arg436_1', c0, {c0: 28224}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (28224, 1)
op305.sizes = ([56, 56, 9], [])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op305_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg436_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf305', get_index_1, load, None)
        return store


op306: ExternKernelSchedulerNode(ExternKernelAlloc)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf304', mode=None), StarDep(name='buf305', mode=None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ExternKernelAlloc
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf306.users = [NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.node.kernel = extern_kernels.convolution


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op307.unmet_dependencies = [MemoryDep('buf306', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op307.met_dependencies = 
    [   MemoryDep('arg437_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg438_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg439_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg440_1', c1, {c0: 8, c1: 56}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf307.aliases = ['buf329']
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (87808, 1)
op307.sizes = ([8, 56, 196], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg438_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf307_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op307_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg437_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg438_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg439_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg440_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf307', get_index_5, relu, None)
        return store


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 87808}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 112, {c0: 1568, c1: 56}, None),
        MemoryDep('buf307', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op308.met_dependencies = []
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (87808, 1)
op308.sizes = ([8, 196, 56], [])
buf307_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 112
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf308', get_index_2, add, None)
        return store


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op309.unmet_dependencies = []
op309.met_dependencies = [MemoryDep('arg441_1', c0, {c0: 28224}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (28224, 1)
op309.sizes = ([56, 56, 9], [])
arg441_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op309_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg441_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf309', get_index_1, load, None)
        return store


op310: ExternKernelSchedulerNode(ExternKernelAlloc)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf308', mode=None), StarDep(name='buf309', mode=None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ExternKernelAlloc
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf310.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.node.kernel = extern_kernels.convolution


op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op311.met_dependencies = 
    [   MemoryDep('arg442_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg443_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg444_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg445_1', c1, {c0: 8, c1: 56}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf311.aliases = ['buf329']
    buf311.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op311.group.device = cuda:0
op311.group.iteration = (87808, 1)
op311.sizes = ([8, 56, 196], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg442_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf311_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg442_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg443_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg444_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf311', get_index_5, relu, None)
        return store


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 87808}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 168, {c0: 1568, c1: 56}, None),
        MemoryDep('buf311', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (87808, 1)
op312.sizes = ([8, 196, 56], [])
buf311_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op312_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 168
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf312', get_index_2, add, None)
        return store


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op313.unmet_dependencies = []
op313.met_dependencies = [MemoryDep('arg446_1', c0, {c0: 28224}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (28224, 1)
op313.sizes = ([56, 56, 9], [])
arg446_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op313_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg446_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf313', get_index_1, load, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelAlloc)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf312', mode=None), StarDep(name='buf313', mode=None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ExternKernelAlloc
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.node.kernel = extern_kernels.convolution


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op315.unmet_dependencies = [MemoryDep('buf314', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg448_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg449_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg450_1', c1, {c0: 8, c1: 56}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf315.aliases = ['buf329']
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (87808, 1)
op315.sizes = ([8, 56, 196], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg450_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf315_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op315_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg448_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg449_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg450_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf315', get_index_5, relu, None)
        return store


op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 87808}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 224, {c0: 1568, c1: 56}, None),
        MemoryDep('buf315', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (87808, 1)
op316.sizes = ([8, 196, 56], [])
buf315_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 224
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf316', get_index_2, add, None)
        return store


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op317.unmet_dependencies = []
op317.met_dependencies = [MemoryDep('arg451_1', c0, {c0: 28224}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (28224, 1)
op317.sizes = ([56, 56, 9], [])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op317_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg451_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf317', get_index_1, load, None)
        return store


op318: ExternKernelSchedulerNode(ExternKernelAlloc)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf316', mode=None), StarDep(name='buf317', mode=None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ExternKernelAlloc
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf318.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.node.kernel = extern_kernels.convolution


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op319.unmet_dependencies = [MemoryDep('buf318', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg452_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg453_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg454_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg455_1', c1, {c0: 8, c1: 56}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf319.aliases = ['buf329']
    buf319.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op319.group.device = cuda:0
op319.group.iteration = (87808, 1)
op319.sizes = ([8, 56, 196], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg452_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf319_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op319_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg452_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg453_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg454_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg455_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf319', get_index_5, relu, None)
        return store


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 87808}, None)]
op320.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 280, {c0: 1568, c1: 56}, None),
        MemoryDep('buf319', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (87808, 1)
op320.sizes = ([8, 196, 56], [])
buf319_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 280
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf320', get_index_2, add, None)
        return store


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op321.unmet_dependencies = []
op321.met_dependencies = [MemoryDep('arg456_1', c0, {c0: 28224}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (28224, 1)
op321.sizes = ([56, 56, 9], [])
arg456_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op321_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg456_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf321', get_index_1, load, None)
        return store


op322: ExternKernelSchedulerNode(ExternKernelAlloc)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf320', mode=None), StarDep(name='buf321', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ExternKernelAlloc
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.node.kernel = extern_kernels.convolution


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op323.met_dependencies = 
    [   MemoryDep('arg457_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg458_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg459_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg460_1', c1, {c0: 8, c1: 56}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf323.aliases = ['buf329']
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op323.group.device = cuda:0
op323.group.iteration = (87808, 1)
op323.sizes = ([8, 56, 196], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg458_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf323_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op323_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg457_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg458_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg459_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg460_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf323', get_index_5, relu, None)
        return store


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 87808}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf300', 448*c0 + c1 + 336, {c0: 1568, c1: 56}, None),
        MemoryDep('buf323', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (87808, 1)
op324.sizes = ([8, 196, 56], [])
buf323_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 336
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf300', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf324', get_index_2, add, None)
        return store


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op325.unmet_dependencies = []
op325.met_dependencies = [MemoryDep('arg461_1', c0, {c0: 28224}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (28224, 1)
op325.sizes = ([56, 56, 9], [])
arg461_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op325_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg461_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf325', get_index_1, load, None)
        return store


op326: ExternKernelSchedulerNode(ExternKernelAlloc)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf324', mode=None), StarDep(name='buf325', mode=None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ExternKernelAlloc
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = extern_kernels.convolution


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op327.met_dependencies = 
    [   MemoryDep('arg462_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg463_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg464_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg465_1', c1, {c0: 8, c1: 56}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf327.aliases = ['buf329']
    buf327.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op327.group.device = cuda:0
op327.group.iteration = (87808, 1)
op327.sizes = ([8, 56, 196], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg462_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg464_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf327_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg462_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg463_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg464_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg465_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf327', get_index_5, relu, None)
        return store


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op328.unmet_dependencies = [   MemoryDep('buf300', 87808*c0 + c1 + 448*c2 + 392, {c0: 8, c1: 56, c2: 196}, None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf328.aliases = ['buf329']
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]
op328.group.device = cuda:0
op328.group.iteration = (87808, 1)
op328.sizes = ([8, 56, 196], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf328_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 87808*z0 + z1 + 448*z2 + 392
    index1 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf328', get_index_1, load, None)
        return store


op329: NopKernelSchedulerNode(ConcatKernel)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = 
    [   StarDep(name='buf303', mode=None),
        StarDep(name='buf307', mode=None),
        StarDep(name='buf311', mode=None),
        StarDep(name='buf315', mode=None),
        StarDep(name='buf319', mode=None),
        StarDep(name='buf323', mode=None),
        StarDep(name='buf327', mode=None),
        StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ConcatKernel
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf329.users = [
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
    ]
]


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op330.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 702464}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (702464, 1)
op330.sizes = ([8, 448, 196], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf330', get_index_1, load, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelAlloc)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='arg466_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelAlloc
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.convolution


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1605632}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 1605632}, None),
        MemoryDep('buf331', c0, {c0: 1605632}, None)]
op332.met_dependencies = 
    [   MemoryDep('arg467_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg468_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg469_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg470_1', c1, {c0: 1568, c1: 1024}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf332.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False),
    ]
]
op332.group.device = cuda:0
op332.group.iteration = (1605632, 1)
op332.sizes = ([1568, 1024], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg468_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg469_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg470_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op332_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg467_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg468_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg469_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg470_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf298', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf332', get_index_6, relu, None)
        return store


op333: ExternKernelSchedulerNode(ExternKernelAlloc)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg471_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelAlloc
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False)]
]
op333.node.kernel = extern_kernels.convolution


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 702464}, None)]
op334.unmet_dependencies = [MemoryDep('buf333', c0, {c0: 702464}, None)]
op334.met_dependencies = 
    [   MemoryDep('arg472_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg473_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg474_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg475_1', c1, {c0: 1568, c1: 448}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf334.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op362'), can_inplace=False, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (702464, 1)
op334.sizes = ([1568, 448], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
arg472_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg473_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg474_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op334_loop_body:
    var_ranges = {z0: 1568, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg472_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg473_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg474_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg475_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf334', get_index_5, relu, None)
        return store


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op335.unmet_dependencies = []
op335.met_dependencies = [MemoryDep('arg476_1', c0, {c0: 28224}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (28224, 1)
op335.sizes = ([56, 56, 9], [])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op335_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg476_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf335', get_index_1, load, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf334', mode=None), StarDep(name='buf335', mode=None)]
op336.met_dependencies = []
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op337.met_dependencies = 
    [   MemoryDep('arg477_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg478_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg479_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg480_1', c1, {c0: 8, c1: 56}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf337.aliases = ['buf363']
    buf337.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (87808, 1)
op337.sizes = ([8, 56, 196], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg478_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg480_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf337_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op337_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg477_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg478_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg479_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg480_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf337', get_index_5, relu, None)
        return store


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 87808}, None)]
op338.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 56, {c0: 1568, c1: 56}, None),
        MemoryDep('buf337', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (87808, 1)
op338.sizes = ([8, 196, 56], [])
buf337_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op338_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 56
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf338', get_index_2, add, None)
        return store


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op339.unmet_dependencies = []
op339.met_dependencies = [MemoryDep('arg481_1', c0, {c0: 28224}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (28224, 1)
op339.sizes = ([56, 56, 9], [])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op339_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg481_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf339', get_index_1, load, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf338', mode=None), StarDep(name='buf339', mode=None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op340.node.kernel = extern_kernels.convolution


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op341.met_dependencies = 
    [   MemoryDep('arg482_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg483_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg484_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg485_1', c1, {c0: 8, c1: 56}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf341.aliases = ['buf363']
    buf341.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op341.group.device = cuda:0
op341.group.iteration = (87808, 1)
op341.sizes = ([8, 56, 196], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg484_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf341_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg482_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg483_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg484_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg485_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf341', get_index_5, relu, None)
        return store


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 87808}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 112, {c0: 1568, c1: 56}, None),
        MemoryDep('buf341', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op342.met_dependencies = []
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (87808, 1)
op342.sizes = ([8, 196, 56], [])
buf341_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op342_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 112
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf341', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf342', get_index_2, add, None)
        return store


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op343.unmet_dependencies = []
op343.met_dependencies = [MemoryDep('arg486_1', c0, {c0: 28224}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (28224, 1)
op343.sizes = ([56, 56, 9], [])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op343_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg486_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf343', get_index_1, load, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelAlloc)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf342', mode=None), StarDep(name='buf343', mode=None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ExternKernelAlloc
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.node.kernel = extern_kernels.convolution


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg487_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg488_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg489_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg490_1', c1, {c0: 8, c1: 56}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf345.aliases = ['buf363']
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (87808, 1)
op345.sizes = ([8, 56, 196], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg488_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf345_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op345_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg487_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg488_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg490_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf345', get_index_5, relu, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 87808}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 168, {c0: 1568, c1: 56}, None),
        MemoryDep('buf345', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (87808, 1)
op346.sizes = ([8, 196, 56], [])
buf345_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op346_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 168
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf346', get_index_2, add, None)
        return store


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op347.unmet_dependencies = []
op347.met_dependencies = [MemoryDep('arg491_1', c0, {c0: 28224}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (28224, 1)
op347.sizes = ([56, 56, 9], [])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op347_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg491_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf347', get_index_1, load, None)
        return store


op348: ExternKernelSchedulerNode(ExternKernelAlloc)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf346', mode=None), StarDep(name='buf347', mode=None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ExternKernelAlloc
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = extern_kernels.convolution


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg492_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg493_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg494_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg495_1', c1, {c0: 8, c1: 56}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf349.aliases = ['buf363']
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (87808, 1)
op349.sizes = ([8, 56, 196], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg492_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf349_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op349_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg492_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg493_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg495_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf349', get_index_5, relu, None)
        return store


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 87808}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 224, {c0: 1568, c1: 56}, None),
        MemoryDep('buf349', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (87808, 1)
op350.sizes = ([8, 196, 56], [])
buf349_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 224
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf350', get_index_2, add, None)
        return store


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op351.unmet_dependencies = []
op351.met_dependencies = [MemoryDep('arg496_1', c0, {c0: 28224}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (28224, 1)
op351.sizes = ([56, 56, 9], [])
arg496_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op351_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg496_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf351', get_index_1, load, None)
        return store


op352: ExternKernelSchedulerNode(ExternKernelAlloc)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf350', mode=None), StarDep(name='buf351', mode=None)]
op352.met_dependencies = []
op352.outputs = [
    buf352: ExternKernelAlloc
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.node.kernel = extern_kernels.convolution


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op353.unmet_dependencies = [MemoryDep('buf352', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op353.met_dependencies = 
    [   MemoryDep('arg497_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg498_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg499_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg500_1', c1, {c0: 8, c1: 56}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf353.aliases = ['buf363']
    buf353.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (87808, 1)
op353.sizes = ([8, 56, 196], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg498_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf353_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op353_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg498_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg499_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf353', get_index_5, relu, None)
        return store


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 87808}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 280, {c0: 1568, c1: 56}, None),
        MemoryDep('buf353', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (87808, 1)
op354.sizes = ([8, 196, 56], [])
buf353_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 280
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf354', get_index_2, add, None)
        return store


op355: SchedulerNode(ComputedBuffer)
op355.writes = [MemoryDep('buf355', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op355.unmet_dependencies = []
op355.met_dependencies = [MemoryDep('arg501_1', c0, {c0: 28224}, None)]
op355.outputs = [
    buf355: ComputedBuffer
    buf355.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf355.users = [NodeUser(node=ExternKernelSchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.group.device = cuda:0
op355.group.iteration = (28224, 1)
op355.sizes = ([56, 56, 9], [])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op355_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg501_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf355', get_index_1, load, None)
        return store


op356: ExternKernelSchedulerNode(ExternKernelAlloc)
op356.writes = [StarDep(name='buf356', mode=None)]
op356.unmet_dependencies = [StarDep(name='buf354', mode=None), StarDep(name='buf355', mode=None)]
op356.met_dependencies = []
op356.outputs = [
    buf356: ExternKernelAlloc
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf356.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op356.node.kernel = extern_kernels.convolution


op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op357.unmet_dependencies = [MemoryDep('buf356', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op357.met_dependencies = 
    [   MemoryDep('arg502_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg503_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg504_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg505_1', c1, {c0: 8, c1: 56}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf357.aliases = ['buf363']
    buf357.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op357.group.device = cuda:0
op357.group.iteration = (87808, 1)
op357.sizes = ([8, 56, 196], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg502_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg504_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf357_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op357_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg502_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg503_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg504_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg505_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf357', get_index_5, relu, None)
        return store


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 87808}, None)]
op358.unmet_dependencies = 
    [   MemoryDep('buf334', 448*c0 + c1 + 336, {c0: 1568, c1: 56}, None),
        MemoryDep('buf357', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (87808, 1)
op358.sizes = ([8, 196, 56], [])
buf357_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op358_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 336
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf334', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf358', get_index_2, add, None)
        return store


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op359.unmet_dependencies = []
op359.met_dependencies = [MemoryDep('arg506_1', c0, {c0: 28224}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (28224, 1)
op359.sizes = ([56, 56, 9], [])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op359_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg506_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf359', get_index_1, load, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelAlloc)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf358', mode=None), StarDep(name='buf359', mode=None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: ExternKernelAlloc
    buf360.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.node.kernel = extern_kernels.convolution


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op361.unmet_dependencies = [MemoryDep('buf360', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op361.met_dependencies = 
    [   MemoryDep('arg507_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg508_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg509_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg510_1', c1, {c0: 8, c1: 56}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf361.aliases = ['buf363']
    buf361.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op361.group.device = cuda:0
op361.group.iteration = (87808, 1)
op361.sizes = ([8, 56, 196], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg508_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg510_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf361_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op361_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg507_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg508_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg509_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg510_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf361', get_index_5, relu, None)
        return store


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op362.unmet_dependencies = [   MemoryDep('buf334', 87808*c0 + c1 + 448*c2 + 392, {c0: 8, c1: 56, c2: 196}, None)]
op362.met_dependencies = []
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf362.aliases = ['buf363']
    buf362.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op362.group.device = cuda:0
op362.group.iteration = (87808, 1)
op362.sizes = ([8, 56, 196], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf362_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 87808*z0 + z1 + 448*z2 + 392
    index1 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf362', get_index_1, load, None)
        return store


op363: NopKernelSchedulerNode(ConcatKernel)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = 
    [   StarDep(name='buf337', mode=None),
        StarDep(name='buf341', mode=None),
        StarDep(name='buf345', mode=None),
        StarDep(name='buf349', mode=None),
        StarDep(name='buf353', mode=None),
        StarDep(name='buf357', mode=None),
        StarDep(name='buf361', mode=None),
        StarDep(name='buf362', mode=None)]
op363.met_dependencies = []
op363.outputs = [
    buf363: ConcatKernel
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 702464}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (702464, 1)
op364.sizes = ([8, 448, 196], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op364_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf364', get_index_1, load, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelAlloc)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg511_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelAlloc
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.convolution


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 1605632}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf332', c0, {c0: 1605632}, None),
        MemoryDep('buf365', c0, {c0: 1605632}, None)]
op366.met_dependencies = 
    [   MemoryDep('arg512_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg513_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg514_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg515_1', c1, {c0: 1568, c1: 1024}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf366.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False),
    ]
]
op366.group.device = cuda:0
op366.group.iteration = (1605632, 1)
op366.sizes = ([1568, 1024], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg514_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg515_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op366_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg512_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg513_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg514_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg515_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf332', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf366', get_index_6, relu, None)
        return store


op367: ExternKernelSchedulerNode(ExternKernelAlloc)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg516_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelAlloc
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.node.kernel = extern_kernels.convolution


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 702464}, None)]
op368.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 702464}, None)]
op368.met_dependencies = 
    [   MemoryDep('arg517_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg518_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg519_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg520_1', c1, {c0: 1568, c1: 448}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf368.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (702464, 1)
op368.sizes = ([1568, 448], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
arg517_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg518_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg519_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg520_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op368_loop_body:
    var_ranges = {z0: 1568, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg517_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg518_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg519_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg520_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf368', get_index_5, relu, None)
        return store


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op369.unmet_dependencies = []
op369.met_dependencies = [MemoryDep('arg521_1', c0, {c0: 28224}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (28224, 1)
op369.sizes = ([56, 56, 9], [])
arg521_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op369_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg521_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf369', get_index_1, load, None)
        return store


op370: ExternKernelSchedulerNode(ExternKernelAlloc)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf368', mode=None), StarDep(name='buf369', mode=None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ExternKernelAlloc
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf370.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.node.kernel = extern_kernels.convolution


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op371.met_dependencies = 
    [   MemoryDep('arg522_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg523_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg524_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg525_1', c1, {c0: 8, c1: 56}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf371.aliases = ['buf397']
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op371.group.device = cuda:0
op371.group.iteration = (87808, 1)
op371.sizes = ([8, 56, 196], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg524_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf371_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op371_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg522_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg523_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg524_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg525_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf371', get_index_5, relu, None)
        return store


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 87808}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 56, {c0: 1568, c1: 56}, None),
        MemoryDep('buf371', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (87808, 1)
op372.sizes = ([8, 196, 56], [])
buf371_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 56
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf372', get_index_2, add, None)
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op373.unmet_dependencies = []
op373.met_dependencies = [MemoryDep('arg526_1', c0, {c0: 28224}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (28224, 1)
op373.sizes = ([56, 56, 9], [])
arg526_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op373_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg526_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf373', get_index_1, load, None)
        return store


op374: ExternKernelSchedulerNode(ExternKernelAlloc)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf372', mode=None), StarDep(name='buf373', mode=None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ExternKernelAlloc
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.node.kernel = extern_kernels.convolution


op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op375.met_dependencies = 
    [   MemoryDep('arg527_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg528_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg529_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg530_1', c1, {c0: 8, c1: 56}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf375.aliases = ['buf397']
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (87808, 1)
op375.sizes = ([8, 56, 196], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg529_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg530_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf375_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg527_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg528_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg529_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg530_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf375', get_index_5, relu, None)
        return store


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 87808}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 112, {c0: 1568, c1: 56}, None),
        MemoryDep('buf375', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (87808, 1)
op376.sizes = ([8, 196, 56], [])
buf375_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op376_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 112
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf376', get_index_2, add, None)
        return store


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op377.unmet_dependencies = []
op377.met_dependencies = [MemoryDep('arg531_1', c0, {c0: 28224}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (28224, 1)
op377.sizes = ([56, 56, 9], [])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op377_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg531_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf377', get_index_1, load, None)
        return store


op378: ExternKernelSchedulerNode(ExternKernelAlloc)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf376', mode=None), StarDep(name='buf377', mode=None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ExternKernelAlloc
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf378.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.node.kernel = extern_kernels.convolution


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op379.unmet_dependencies = [MemoryDep('buf378', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op379.met_dependencies = 
    [   MemoryDep('arg532_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg533_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg534_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg535_1', c1, {c0: 8, c1: 56}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf379.aliases = ['buf397']
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op379.group.device = cuda:0
op379.group.iteration = (87808, 1)
op379.sizes = ([8, 56, 196], [])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg533_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg534_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg535_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf379_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf378', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg532_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg533_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg534_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg535_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf379', get_index_5, relu, None)
        return store


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 87808}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 168, {c0: 1568, c1: 56}, None),
        MemoryDep('buf379', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (87808, 1)
op380.sizes = ([8, 196, 56], [])
buf379_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op380_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 168
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf380', get_index_2, add, None)
        return store


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op381.unmet_dependencies = []
op381.met_dependencies = [MemoryDep('arg536_1', c0, {c0: 28224}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (28224, 1)
op381.sizes = ([56, 56, 9], [])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op381_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg536_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf381', get_index_1, load, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelAlloc)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf380', mode=None), StarDep(name='buf381', mode=None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ExternKernelAlloc
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op382.node.kernel = extern_kernels.convolution


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op383.unmet_dependencies = [MemoryDep('buf382', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op383.met_dependencies = 
    [   MemoryDep('arg537_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg538_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg539_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg540_1', c1, {c0: 8, c1: 56}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf383.aliases = ['buf397']
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (87808, 1)
op383.sizes = ([8, 56, 196], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg538_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg539_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg540_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf383_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op383_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg537_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg538_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg539_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg540_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf383', get_index_5, relu, None)
        return store


op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 87808}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 224, {c0: 1568, c1: 56}, None),
        MemoryDep('buf383', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (87808, 1)
op384.sizes = ([8, 196, 56], [])
buf383_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op384_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 224
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf384', get_index_2, add, None)
        return store


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op385.unmet_dependencies = []
op385.met_dependencies = [MemoryDep('arg541_1', c0, {c0: 28224}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (28224, 1)
op385.sizes = ([56, 56, 9], [])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op385_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg541_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf385', get_index_1, load, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelAlloc)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf384', mode=None), StarDep(name='buf385', mode=None)]
op386.met_dependencies = []
op386.outputs = [
    buf386: ExternKernelAlloc
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False)]
]
op386.node.kernel = extern_kernels.convolution


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op387.unmet_dependencies = [MemoryDep('buf386', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg542_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg543_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg544_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg545_1', c1, {c0: 8, c1: 56}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf387.aliases = ['buf397']
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (87808, 1)
op387.sizes = ([8, 56, 196], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg542_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg544_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg545_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf387_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op387_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg542_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg543_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg544_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg545_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf387', get_index_5, relu, None)
        return store


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 87808}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 280, {c0: 1568, c1: 56}, None),
        MemoryDep('buf387', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op388.met_dependencies = []
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (87808, 1)
op388.sizes = ([8, 196, 56], [])
buf387_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op388_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 280
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf388', get_index_2, add, None)
        return store


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op389.unmet_dependencies = []
op389.met_dependencies = [MemoryDep('arg546_1', c0, {c0: 28224}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (28224, 1)
op389.sizes = ([56, 56, 9], [])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op389_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg546_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf389', get_index_1, load, None)
        return store


op390: ExternKernelSchedulerNode(ExternKernelAlloc)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf388', mode=None), StarDep(name='buf389', mode=None)]
op390.met_dependencies = []
op390.outputs = [
    buf390: ExternKernelAlloc
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf390.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.node.kernel = extern_kernels.convolution


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op391.unmet_dependencies = [MemoryDep('buf390', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op391.met_dependencies = 
    [   MemoryDep('arg547_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg548_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg549_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg550_1', c1, {c0: 8, c1: 56}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf391.aliases = ['buf397']
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (87808, 1)
op391.sizes = ([8, 56, 196], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg547_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg548_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg549_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg550_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf391_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op391_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg547_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg548_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg549_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg550_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf391', get_index_5, relu, None)
        return store


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 87808}, None)]
op392.unmet_dependencies = 
    [   MemoryDep('buf368', 448*c0 + c1 + 336, {c0: 1568, c1: 56}, None),
        MemoryDep('buf391', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (87808, 1)
op392.sizes = ([8, 196, 56], [])
buf391_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op392_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 336
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf368', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf392', get_index_2, add, None)
        return store


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op393.unmet_dependencies = []
op393.met_dependencies = [MemoryDep('arg551_1', c0, {c0: 28224}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (28224, 1)
op393.sizes = ([56, 56, 9], [])
arg551_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op393_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg551_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf393', get_index_1, load, None)
        return store


op394: ExternKernelSchedulerNode(ExternKernelAlloc)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf392', mode=None), StarDep(name='buf393', mode=None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ExternKernelAlloc
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.node.kernel = extern_kernels.convolution


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op395.unmet_dependencies = [MemoryDep('buf394', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op395.met_dependencies = 
    [   MemoryDep('arg552_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg553_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg554_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg555_1', c1, {c0: 8, c1: 56}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf395.aliases = ['buf397']
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (87808, 1)
op395.sizes = ([8, 56, 196], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg553_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg554_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf395_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op395_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg552_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg553_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg554_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg555_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf395', get_index_5, relu, None)
        return store


op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op396.unmet_dependencies = [   MemoryDep('buf368', 87808*c0 + c1 + 448*c2 + 392, {c0: 8, c1: 56, c2: 196}, None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf396.aliases = ['buf397']
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op396.group.device = cuda:0
op396.group.iteration = (87808, 1)
op396.sizes = ([8, 56, 196], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf396_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op396_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 87808*z0 + z1 + 448*z2 + 392
    index1 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf396', get_index_1, load, None)
        return store


op397: NopKernelSchedulerNode(ConcatKernel)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = 
    [   StarDep(name='buf371', mode=None),
        StarDep(name='buf375', mode=None),
        StarDep(name='buf379', mode=None),
        StarDep(name='buf383', mode=None),
        StarDep(name='buf387', mode=None),
        StarDep(name='buf391', mode=None),
        StarDep(name='buf395', mode=None),
        StarDep(name='buf396', mode=None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ConcatKernel
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op398.unmet_dependencies = [MemoryDep('buf397', c0, {c0: 702464}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (702464, 1)
op398.sizes = ([8, 448, 196], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf398', get_index_1, load, None)
        return store


op399: ExternKernelSchedulerNode(ExternKernelAlloc)
op399.writes = [StarDep(name='buf399', mode=None)]
op399.unmet_dependencies = [StarDep(name='buf398', mode=None)]
op399.met_dependencies = [StarDep(name='arg556_1', mode=None)]
op399.outputs = [
    buf399: ExternKernelAlloc
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=True, is_weak=False)]
]
op399.node.kernel = extern_kernels.convolution


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 1605632}, None)]
op400.unmet_dependencies = 
    [   MemoryDep('buf366', c0, {c0: 1605632}, None),
        MemoryDep('buf399', c0, {c0: 1605632}, None)]
op400.met_dependencies = 
    [   MemoryDep('arg557_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg558_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg559_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg560_1', c1, {c0: 1568, c1: 1024}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf400.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False),
    ]
]
op400.group.device = cuda:0
op400.group.iteration = (1605632, 1)
op400.sizes = ([1568, 1024], [])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg557_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg558_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg560_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op400_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg557_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg558_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg559_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg560_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf366', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf400', get_index_6, relu, None)
        return store


op401: ExternKernelSchedulerNode(ExternKernelAlloc)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf400', mode=None)]
op401.met_dependencies = [StarDep(name='arg561_1', mode=None)]
op401.outputs = [
    buf401: ExternKernelAlloc
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=True, is_weak=False)]
]
op401.node.kernel = extern_kernels.convolution


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 702464}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 702464}, None)]
op402.met_dependencies = 
    [   MemoryDep('arg562_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg563_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg564_1', c1, {c0: 1568, c1: 448}, None),
        MemoryDep('arg565_1', c1, {c0: 1568, c1: 448}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf402.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
    ]
]
op402.group.device = cuda:0
op402.group.iteration = (702464, 1)
op402.sizes = ([1568, 448], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
arg562_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg563_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg564_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
arg565_1_layout = FixedLayout('cuda', torch.float32, size=[448], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op402_loop_body:
    var_ranges = {z0: 1568, z1: 448}
    index0 = 448*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg562_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg563_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg564_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg565_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf402', get_index_5, relu, None)
        return store


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op403.unmet_dependencies = []
op403.met_dependencies = [MemoryDep('arg566_1', c0, {c0: 28224}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (28224, 1)
op403.sizes = ([56, 56, 9], [])
arg566_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op403_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg566_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf403', get_index_1, load, None)
        return store


op404: ExternKernelSchedulerNode(ExternKernelAlloc)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf402', mode=None), StarDep(name='buf403', mode=None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ExternKernelAlloc
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False)]
]
op404.node.kernel = extern_kernels.convolution


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op405.unmet_dependencies = [MemoryDep('buf404', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg567_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg568_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg569_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg570_1', c1, {c0: 8, c1: 56}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf405.aliases = ['buf431']
    buf405.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op405.group.device = cuda:0
op405.group.iteration = (87808, 1)
op405.sizes = ([8, 56, 196], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg567_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg569_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg570_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf405_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op405_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg567_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg568_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg569_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg570_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf405', get_index_5, relu, None)
        return store


op406: SchedulerNode(ComputedBuffer)
op406.writes = [MemoryDep('buf406', c0, {c0: 87808}, None)]
op406.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 56, {c0: 1568, c1: 56}, None),
        MemoryDep('buf405', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op406.met_dependencies = []
op406.outputs = [
    buf406: ComputedBuffer
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf406.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op406.group.device = cuda:0
op406.group.iteration = (87808, 1)
op406.sizes = ([8, 196, 56], [])
buf405_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op406_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 56
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf405', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf406', get_index_2, add, None)
        return store


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op407.unmet_dependencies = []
op407.met_dependencies = [MemoryDep('arg571_1', c0, {c0: 28224}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (28224, 1)
op407.sizes = ([56, 56, 9], [])
arg571_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op407_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg571_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf407', get_index_1, load, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelAlloc)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf406', mode=None), StarDep(name='buf407', mode=None)]
op408.met_dependencies = []
op408.outputs = [
    buf408: ExternKernelAlloc
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.node.kernel = extern_kernels.convolution


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op409.unmet_dependencies = [MemoryDep('buf408', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op409.met_dependencies = 
    [   MemoryDep('arg572_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg573_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg574_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg575_1', c1, {c0: 8, c1: 56}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf409.aliases = ['buf431']
    buf409.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op409.group.device = cuda:0
op409.group.iteration = (87808, 1)
op409.sizes = ([8, 56, 196], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg572_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg574_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg575_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf409_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op409_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg572_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg573_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg574_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg575_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf409', get_index_5, relu, None)
        return store


op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 87808}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 112, {c0: 1568, c1: 56}, None),
        MemoryDep('buf409', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op410.met_dependencies = []
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (87808, 1)
op410.sizes = ([8, 196, 56], [])
buf409_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf410_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op410_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 112
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf409', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf410', get_index_2, add, None)
        return store


op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op411.unmet_dependencies = []
op411.met_dependencies = [MemoryDep('arg576_1', c0, {c0: 28224}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf411.users = [NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (28224, 1)
op411.sizes = ([56, 56, 9], [])
arg576_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op411_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg576_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf411', get_index_1, load, None)
        return store


op412: ExternKernelSchedulerNode(ExternKernelAlloc)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf410', mode=None), StarDep(name='buf411', mode=None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ExternKernelAlloc
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = extern_kernels.convolution


op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op413.met_dependencies = 
    [   MemoryDep('arg577_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg578_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg579_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg580_1', c1, {c0: 8, c1: 56}, None)]
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf413.aliases = ['buf431']
    buf413.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op413.group.device = cuda:0
op413.group.iteration = (87808, 1)
op413.sizes = ([8, 56, 196], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg578_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg580_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf413_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op413_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg577_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg578_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg580_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf413', get_index_5, relu, None)
        return store


op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 87808}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 168, {c0: 1568, c1: 56}, None),
        MemoryDep('buf413', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op414.met_dependencies = []
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (87808, 1)
op414.sizes = ([8, 196, 56], [])
buf413_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op414_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 168
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf413', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf414', get_index_2, add, None)
        return store


op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op415.unmet_dependencies = []
op415.met_dependencies = [MemoryDep('arg581_1', c0, {c0: 28224}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (28224, 1)
op415.sizes = ([56, 56, 9], [])
arg581_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op415_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg581_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf415', get_index_1, load, None)
        return store


op416: ExternKernelSchedulerNode(ExternKernelAlloc)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf414', mode=None), StarDep(name='buf415', mode=None)]
op416.met_dependencies = []
op416.outputs = [
    buf416: ExternKernelAlloc
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf416.users = [NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.node.kernel = extern_kernels.convolution


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op417.unmet_dependencies = [MemoryDep('buf416', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op417.met_dependencies = 
    [   MemoryDep('arg582_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg583_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg584_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg585_1', c1, {c0: 8, c1: 56}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf417.aliases = ['buf431']
    buf417.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op417.group.device = cuda:0
op417.group.iteration = (87808, 1)
op417.sizes = ([8, 56, 196], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg583_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg584_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg585_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf417_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg582_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg583_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg584_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg585_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf417', get_index_5, relu, None)
        return store


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 87808}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 224, {c0: 1568, c1: 56}, None),
        MemoryDep('buf417', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op418.met_dependencies = []
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (87808, 1)
op418.sizes = ([8, 196, 56], [])
buf417_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op418_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 224
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf417', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf418', get_index_2, add, None)
        return store


op419: SchedulerNode(ComputedBuffer)
op419.writes = [MemoryDep('buf419', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op419.unmet_dependencies = []
op419.met_dependencies = [MemoryDep('arg586_1', c0, {c0: 28224}, None)]
op419.outputs = [
    buf419: ComputedBuffer
    buf419.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf419.users = [NodeUser(node=ExternKernelSchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.group.device = cuda:0
op419.group.iteration = (28224, 1)
op419.sizes = ([56, 56, 9], [])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op419_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg586_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf419', get_index_1, load, None)
        return store


op420: ExternKernelSchedulerNode(ExternKernelAlloc)
op420.writes = [StarDep(name='buf420', mode=None)]
op420.unmet_dependencies = [StarDep(name='buf418', mode=None), StarDep(name='buf419', mode=None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ExternKernelAlloc
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf420.users = [NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.node.kernel = extern_kernels.convolution


op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op421.unmet_dependencies = [MemoryDep('buf420', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op421.met_dependencies = 
    [   MemoryDep('arg587_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg588_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg589_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg590_1', c1, {c0: 8, c1: 56}, None)]
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf421.aliases = ['buf431']
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op421.group.device = cuda:0
op421.group.iteration = (87808, 1)
op421.sizes = ([8, 56, 196], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg587_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg588_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg589_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg590_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf421_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op421_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg587_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg588_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg589_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg590_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf421', get_index_5, relu, None)
        return store


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 87808}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 280, {c0: 1568, c1: 56}, None),
        MemoryDep('buf421', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf422.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (87808, 1)
op422.sizes = ([8, 196, 56], [])
buf421_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op422_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 280
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf422', get_index_2, add, None)
        return store


op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op423.unmet_dependencies = []
op423.met_dependencies = [MemoryDep('arg591_1', c0, {c0: 28224}, None)]
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (28224, 1)
op423.sizes = ([56, 56, 9], [])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf423_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op423_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg591_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf423', get_index_1, load, None)
        return store


op424: ExternKernelSchedulerNode(ExternKernelAlloc)
op424.writes = [StarDep(name='buf424', mode=None)]
op424.unmet_dependencies = [StarDep(name='buf422', mode=None), StarDep(name='buf423', mode=None)]
op424.met_dependencies = []
op424.outputs = [
    buf424: ExternKernelAlloc
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf424.users = [NodeUser(node=SchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.node.kernel = extern_kernels.convolution


op425: SchedulerNode(ComputedBuffer)
op425.writes = [MemoryDep('buf425', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op425.unmet_dependencies = [MemoryDep('buf424', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op425.met_dependencies = 
    [   MemoryDep('arg592_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg593_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg594_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg595_1', c1, {c0: 8, c1: 56}, None)]
op425.outputs = [
    buf425: ComputedBuffer
    buf425.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf425.aliases = ['buf431']
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op425.group.device = cuda:0
op425.group.iteration = (87808, 1)
op425.sizes = ([8, 56, 196], [])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg592_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg593_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg594_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf425_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op425_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf424', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg592_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg593_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg594_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg595_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf425', get_index_5, relu, None)
        return store


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 87808}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf402', 448*c0 + c1 + 336, {c0: 1568, c1: 56}, None),
        MemoryDep('buf425', 87808*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 56}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (87808, 1)
op426.sizes = ([8, 196, 56], [])
buf425_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
class op426_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 56}
    index0 = 87808*z0 + z1 + 196*z2
    index1 = 87808*z0 + 448*z1 + z2 + 336
    index2 = 10976*z0 + 56*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf402', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf426', get_index_2, add, None)
        return store


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', 504*c0 + c1 + 56*c2, {c0: 56, c1: 56, c2: 9}, None)]
op427.unmet_dependencies = []
op427.met_dependencies = [MemoryDep('arg596_1', c0, {c0: 28224}, None)]
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (28224, 1)
op427.sizes = ([56, 56, 9], [])
arg596_1_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 9, 3, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[56, 56, 3, 3], stride=[504, 1, 168, 56])
class op427_loop_body:
    var_ranges = {z0: 56, z1: 56, z2: 9}
    index0 = 504*z0 + 9*z1 + z2
    index1 = 504*z0 + z1 + 56*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg596_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf427', get_index_1, load, None)
        return store


op428: ExternKernelSchedulerNode(ExternKernelAlloc)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf426', mode=None), StarDep(name='buf427', mode=None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ExternKernelAlloc
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
    buf428.users = [NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.node.kernel = extern_kernels.convolution


op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op429.unmet_dependencies = [MemoryDep('buf428', 10976*c0 + c1 + 56*c2, {c0: 8, c1: 56, c2: 196}, None)]
op429.met_dependencies = 
    [   MemoryDep('arg597_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg598_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg599_1', c1, {c0: 8, c1: 56}, None),
        MemoryDep('arg600_1', c1, {c0: 8, c1: 56}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf429.aliases = ['buf431']
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (87808, 1)
op429.sizes = ([8, 56, 196], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[10976, 1, 784, 56])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg598_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg599_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
arg600_1_layout = FixedLayout('cuda', torch.float32, size=[56], stride=[1])
buf429_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op429_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 10976*z0 + z1 + 56*z2
    index1 = z1
    index2 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg597_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg598_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg599_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg600_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf429', get_index_5, relu, None)
        return store


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', 87808*c0 + c1, {c0: 8, c1: 10976}, None)]
op430.unmet_dependencies = [   MemoryDep('buf402', 87808*c0 + c1 + 448*c2 + 392, {c0: 8, c1: 56, c2: 196}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
    buf430.aliases = ['buf431']
    buf430.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op430.group.device = cuda:0
op430.group.iteration = (87808, 1)
op430.sizes = ([8, 56, 196], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
buf430_layout = NonOwningLayout('cuda', torch.float32, size=[8, 56, 14, 14], stride=[87808, 196, 14, 1])
class op430_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 196}
    index0 = 87808*z0 + z1 + 448*z2 + 392
    index1 = 87808*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf430', get_index_1, load, None)
        return store


op431: NopKernelSchedulerNode(ConcatKernel)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = 
    [   StarDep(name='buf405', mode=None),
        StarDep(name='buf409', mode=None),
        StarDep(name='buf413', mode=None),
        StarDep(name='buf417', mode=None),
        StarDep(name='buf421', mode=None),
        StarDep(name='buf425', mode=None),
        StarDep(name='buf429', mode=None),
        StarDep(name='buf430', mode=None)]
op431.met_dependencies = []
op431.outputs = [
    buf431: ConcatKernel
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
    buf431.users = [
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', 87808*c0 + c1 + 448*c2, {c0: 8, c1: 448, c2: 196}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 702464}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (702464, 1)
op432.sizes = ([8, 448, 196], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 196, 14, 1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 448, 14, 14], stride=[87808, 1, 6272, 448])
class op432_loop_body:
    var_ranges = {z0: 8, z1: 448, z2: 196}
    index0 = 87808*z0 + 196*z1 + z2
    index1 = 87808*z0 + z1 + 448*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf432', get_index_1, load, None)
        return store


op433: ExternKernelSchedulerNode(ExternKernelAlloc)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op433.met_dependencies = [StarDep(name='arg601_1', mode=None)]
op433.outputs = [
    buf433: ExternKernelAlloc
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False)]
]
op433.node.kernel = extern_kernels.convolution


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 1605632}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf400', c0, {c0: 1605632}, None),
        MemoryDep('buf433', c0, {c0: 1605632}, None)]
op434.met_dependencies = 
    [   MemoryDep('arg602_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg603_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg604_1', c1, {c0: 1568, c1: 1024}, None),
        MemoryDep('arg605_1', c1, {c0: 1568, c1: 1024}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
    buf434.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False),
    ]
]
op434.group.device = cuda:0
op434.group.iteration = (1605632, 1)
op434.sizes = ([1568, 1024], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
arg602_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg603_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg605_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
buf434_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 14, 14], stride=[200704, 1, 14336, 1024])
class op434_loop_body:
    var_ranges = {z0: 1568, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg602_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg603_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg604_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg605_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf400', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf434', get_index_6, relu, None)
        return store


op435: ExternKernelSchedulerNode(ExternKernelAlloc)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op435.met_dependencies = [StarDep(name='arg606_1', mode=None)]
op435.outputs = [
    buf435: ExternKernelAlloc
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
    buf435.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False)]
]
op435.node.kernel = extern_kernels.convolution


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 1404928}, None)]
op436.unmet_dependencies = [MemoryDep('buf435', c0, {c0: 1404928}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg607_1', c1, {c0: 1568, c1: 896}, None),
        MemoryDep('arg608_1', c1, {c0: 1568, c1: 896}, None),
        MemoryDep('arg609_1', c1, {c0: 1568, c1: 896}, None),
        MemoryDep('arg610_1', c1, {c0: 1568, c1: 896}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
    buf436.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
]
op436.group.device = cuda:0
op436.group.iteration = (1404928, 1)
op436.sizes = ([1568, 896], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
arg607_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg608_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg609_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg610_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
class op436_loop_body:
    var_ranges = {z0: 1568, z1: 896}
    index0 = 896*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg607_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg608_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg609_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg610_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf436', get_index_5, relu, None)
        return store


op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op437.unmet_dependencies = []
op437.met_dependencies = [MemoryDep('arg611_1', c0, {c0: 112896}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf437.users = [NodeUser(node=ExternKernelSchedulerNode(name='op438'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (112896, 1)
op437.sizes = ([112, 112, 9], [])
arg611_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op437_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg611_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf437', get_index_1, load, None)
        return store


op438: ExternKernelSchedulerNode(ExternKernelAlloc)
op438.writes = [StarDep(name='buf438', mode=None)]
op438.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf437', mode=None)]
op438.met_dependencies = []
op438.outputs = [
    buf438: ExternKernelAlloc
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf438.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op438.node.kernel = extern_kernels.convolution


op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op439.unmet_dependencies = []
op439.met_dependencies = [MemoryDep('arg616_1', c0, {c0: 112896}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (112896, 1)
op439.sizes = ([112, 112, 9], [])
arg616_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op439_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg616_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf439', get_index_1, load, None)
        return store


op440: ExternKernelSchedulerNode(ExternKernelAlloc)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf439', mode=None)]
op440.met_dependencies = []
op440.outputs = [
    buf440: ExternKernelAlloc
    buf440.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf440.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op440.node.kernel = extern_kernels.convolution


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op441.unmet_dependencies = []
op441.met_dependencies = [MemoryDep('arg621_1', c0, {c0: 112896}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (112896, 1)
op441.sizes = ([112, 112, 9], [])
arg621_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op441_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg621_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf441', get_index_1, load, None)
        return store


op442: ExternKernelSchedulerNode(ExternKernelAlloc)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf441', mode=None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: ExternKernelAlloc
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf442.users = [NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op442.node.kernel = extern_kernels.convolution


op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op443.unmet_dependencies = []
op443.met_dependencies = [MemoryDep('arg626_1', c0, {c0: 112896}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf443.users = [NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False)]
]
op443.group.device = cuda:0
op443.group.iteration = (112896, 1)
op443.sizes = ([112, 112, 9], [])
arg626_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op443_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg626_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf443', get_index_1, load, None)
        return store


op444: ExternKernelSchedulerNode(ExternKernelAlloc)
op444.writes = [StarDep(name='buf444', mode=None)]
op444.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf443', mode=None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ExternKernelAlloc
    buf444.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf444.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op444.node.kernel = extern_kernels.convolution


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op445.unmet_dependencies = []
op445.met_dependencies = [MemoryDep('arg631_1', c0, {c0: 112896}, None)]
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (112896, 1)
op445.sizes = ([112, 112, 9], [])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op445_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg631_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf445', get_index_1, load, None)
        return store


op446: ExternKernelSchedulerNode(ExternKernelAlloc)
op446.writes = [StarDep(name='buf446', mode=None)]
op446.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf445', mode=None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ExternKernelAlloc
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf446.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op446.node.kernel = extern_kernels.convolution


op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op447.unmet_dependencies = []
op447.met_dependencies = [MemoryDep('arg636_1', c0, {c0: 112896}, None)]
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (112896, 1)
op447.sizes = ([112, 112, 9], [])
arg636_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf447_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op447_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg636_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf447', get_index_1, load, None)
        return store


op448: ExternKernelSchedulerNode(ExternKernelAlloc)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf447', mode=None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: ExternKernelAlloc
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf448.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False)]
]
op448.node.kernel = extern_kernels.convolution


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op449.unmet_dependencies = []
op449.met_dependencies = [MemoryDep('arg641_1', c0, {c0: 112896}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf449.users = [NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (112896, 1)
op449.sizes = ([112, 112, 9], [])
arg641_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op449_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg641_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf449', get_index_1, load, None)
        return store


op450: ExternKernelSchedulerNode(ExternKernelAlloc)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf436', mode=None), StarDep(name='buf449', mode=None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ExternKernelAlloc
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf450.users = [NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op450.node.kernel = extern_kernels.convolution


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op451.unmet_dependencies = 
    [   MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 + 12432, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 + 13328, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 + 14224, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 + 1680, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 + 784, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 - 10864, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 - 112, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 - 11760, {c0: 56, c1: 7, c2: 112}, None),
        MemoryDep('buf436', 25088*c0 + 1792*c1 + c2 - 12656, {c0: 56, c1: 7, c2: 112}, None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf451.aliases = ['buf459']
    buf451.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op451.group.device = cuda:0
op451.group.iteration = (43904, 1)
op451.sizes = ([8, 7, 7, 112], [])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 14, 14], stride=[175616, 1, 12544, 896])
buf451_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op451_loop_body:
    var_ranges = {z0: 8, z1: 7, z2: 7, z3: 112}
    index0 = 2*z1 - 1
    index1 = 2*z2 - 1
    index2 = 175616*z0 + 25088*z1 + 1792*z2 + z3 - 12656
    index3 = 2*z2
    index4 = 175616*z0 + 25088*z1 + 1792*z2 + z3 - 11760
    index5 = 2*z2 + 1
    index6 = 175616*z0 + 25088*z1 + 1792*z2 + z3 - 10864
    index7 = 2*z1
    index8 = 175616*z0 + 25088*z1 + 1792*z2 + z3 - 112
    index9 = 175616*z0 + 25088*z1 + 1792*z2 + z3 + 784
    index10 = 175616*z0 + 25088*z1 + 1792*z2 + z3 + 1680
    index11 = 2*z1 + 1
    index12 = 175616*z0 + 25088*z1 + 1792*z2 + z3 + 12432
    index13 = 175616*z0 + 25088*z1 + 1792*z2 + z3 + 13328
    index14 = 175616*z0 + 25088*z1 + 1792*z2 + z3 + 14224
    index15 = 4*z1*z2 - 2*z1*Min(15, 2*z2 + 2) - 2*z1 - 2*z2*Min(15, 2*z1 + 2) - 2*z2 + Min(15, 2*z1 + 2)*Min(15, 2*z2 + 2) + Min(15, 2*z1 + 2) + Min(15, 2*z2 + 2) + 1
    index16 = 43904*z0 + 7*z1 + z2 + 49*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(14, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        get_index_2 = self.get_index('index1')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(0, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index1')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(14, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and__1 = ops.and_(ge_1, lt_1)
        and__2 = ops.and_(and_, and__1)
        masked_subblock1 = self.masked_subblock1(and__2, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(0, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(14, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__3 = ops.and_(ge_2, lt_2)
        get_index_6 = self.get_index('index3')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(0, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index3')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(14, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        and__4 = ops.and_(ge_3, lt_3)
        and__5 = ops.and_(and__3, and__4)
        masked_subblock2 = self.masked_subblock2(and__5, 0.0)
        add = ops.add(masked_subblock2, masked_subblock1)
        get_index_8 = self.get_index('index0')
        index_expr_8 = ops.index_expr(get_index_8, torch.int64)
        constant_8 = ops.constant(0, torch.int64)
        ge_4 = ops.ge(index_expr_8, constant_8)
        get_index_9 = self.get_index('index0')
        index_expr_9 = ops.index_expr(get_index_9, torch.int64)
        constant_9 = ops.constant(14, torch.int64)
        lt_4 = ops.lt(index_expr_9, constant_9)
        and__6 = ops.and_(ge_4, lt_4)
        get_index_10 = self.get_index('index5')
        index_expr_10 = ops.index_expr(get_index_10, torch.int64)
        constant_10 = ops.constant(0, torch.int64)
        ge_5 = ops.ge(index_expr_10, constant_10)
        get_index_11 = self.get_index('index5')
        index_expr_11 = ops.index_expr(get_index_11, torch.int64)
        constant_11 = ops.constant(14, torch.int64)
        lt_5 = ops.lt(index_expr_11, constant_11)
        and__7 = ops.and_(ge_5, lt_5)
        and__8 = ops.and_(and__6, and__7)
        masked_subblock3 = self.masked_subblock3(and__8, 0.0)
        add_1 = ops.add(masked_subblock3, add)
        get_index_12 = self.get_index('index7')
        index_expr_12 = ops.index_expr(get_index_12, torch.int64)
        constant_12 = ops.constant(0, torch.int64)
        ge_6 = ops.ge(index_expr_12, constant_12)
        get_index_13 = self.get_index('index7')
        index_expr_13 = ops.index_expr(get_index_13, torch.int64)
        constant_13 = ops.constant(14, torch.int64)
        lt_6 = ops.lt(index_expr_13, constant_13)
        and__9 = ops.and_(ge_6, lt_6)
        get_index_14 = self.get_index('index1')
        index_expr_14 = ops.index_expr(get_index_14, torch.int64)
        constant_14 = ops.constant(0, torch.int64)
        ge_7 = ops.ge(index_expr_14, constant_14)
        get_index_15 = self.get_index('index1')
        index_expr_15 = ops.index_expr(get_index_15, torch.int64)
        constant_15 = ops.constant(14, torch.int64)
        lt_7 = ops.lt(index_expr_15, constant_15)
        and__10 = ops.and_(ge_7, lt_7)
        and__11 = ops.and_(and__9, and__10)
        masked_subblock4 = self.masked_subblock4(and__11, 0.0)
        add_2 = ops.add(masked_subblock4, add_1)
        get_index_16 = self.get_index('index7')
        index_expr_16 = ops.index_expr(get_index_16, torch.int64)
        constant_16 = ops.constant(0, torch.int64)
        ge_8 = ops.ge(index_expr_16, constant_16)
        get_index_17 = self.get_index('index7')
        index_expr_17 = ops.index_expr(get_index_17, torch.int64)
        constant_17 = ops.constant(14, torch.int64)
        lt_8 = ops.lt(index_expr_17, constant_17)
        and__12 = ops.and_(ge_8, lt_8)
        get_index_18 = self.get_index('index3')
        index_expr_18 = ops.index_expr(get_index_18, torch.int64)
        constant_18 = ops.constant(0, torch.int64)
        ge_9 = ops.ge(index_expr_18, constant_18)
        get_index_19 = self.get_index('index3')
        index_expr_19 = ops.index_expr(get_index_19, torch.int64)
        constant_19 = ops.constant(14, torch.int64)
        lt_9 = ops.lt(index_expr_19, constant_19)
        and__13 = ops.and_(ge_9, lt_9)
        and__14 = ops.and_(and__12, and__13)
        masked_subblock5 = self.masked_subblock5(and__14, 0.0)
        add_3 = ops.add(masked_subblock5, add_2)
        get_index_20 = self.get_index('index7')
        index_expr_20 = ops.index_expr(get_index_20, torch.int64)
        constant_20 = ops.constant(0, torch.int64)
        ge_10 = ops.ge(index_expr_20, constant_20)
        get_index_21 = self.get_index('index7')
        index_expr_21 = ops.index_expr(get_index_21, torch.int64)
        constant_21 = ops.constant(14, torch.int64)
        lt_10 = ops.lt(index_expr_21, constant_21)
        and__15 = ops.and_(ge_10, lt_10)
        get_index_22 = self.get_index('index5')
        index_expr_22 = ops.index_expr(get_index_22, torch.int64)
        constant_22 = ops.constant(0, torch.int64)
        ge_11 = ops.ge(index_expr_22, constant_22)
        get_index_23 = self.get_index('index5')
        index_expr_23 = ops.index_expr(get_index_23, torch.int64)
        constant_23 = ops.constant(14, torch.int64)
        lt_11 = ops.lt(index_expr_23, constant_23)
        and__16 = ops.and_(ge_11, lt_11)
        and__17 = ops.and_(and__15, and__16)
        masked_subblock6 = self.masked_subblock6(and__17, 0.0)
        add_4 = ops.add(masked_subblock6, add_3)
        get_index_24 = self.get_index('index11')
        index_expr_24 = ops.index_expr(get_index_24, torch.int64)
        constant_24 = ops.constant(0, torch.int64)
        ge_12 = ops.ge(index_expr_24, constant_24)
        get_index_25 = self.get_index('index11')
        index_expr_25 = ops.index_expr(get_index_25, torch.int64)
        constant_25 = ops.constant(14, torch.int64)
        lt_12 = ops.lt(index_expr_25, constant_25)
        and__18 = ops.and_(ge_12, lt_12)
        get_index_26 = self.get_index('index1')
        index_expr_26 = ops.index_expr(get_index_26, torch.int64)
        constant_26 = ops.constant(0, torch.int64)
        ge_13 = ops.ge(index_expr_26, constant_26)
        get_index_27 = self.get_index('index1')
        index_expr_27 = ops.index_expr(get_index_27, torch.int64)
        constant_27 = ops.constant(14, torch.int64)
        lt_13 = ops.lt(index_expr_27, constant_27)
        and__19 = ops.and_(ge_13, lt_13)
        and__20 = ops.and_(and__18, and__19)
        masked_subblock7 = self.masked_subblock7(and__20, 0.0)
        add_5 = ops.add(masked_subblock7, add_4)
        get_index_28 = self.get_index('index11')
        index_expr_28 = ops.index_expr(get_index_28, torch.int64)
        constant_28 = ops.constant(0, torch.int64)
        ge_14 = ops.ge(index_expr_28, constant_28)
        get_index_29 = self.get_index('index11')
        index_expr_29 = ops.index_expr(get_index_29, torch.int64)
        constant_29 = ops.constant(14, torch.int64)
        lt_14 = ops.lt(index_expr_29, constant_29)
        and__21 = ops.and_(ge_14, lt_14)
        get_index_30 = self.get_index('index3')
        index_expr_30 = ops.index_expr(get_index_30, torch.int64)
        constant_30 = ops.constant(0, torch.int64)
        ge_15 = ops.ge(index_expr_30, constant_30)
        get_index_31 = self.get_index('index3')
        index_expr_31 = ops.index_expr(get_index_31, torch.int64)
        constant_31 = ops.constant(14, torch.int64)
        lt_15 = ops.lt(index_expr_31, constant_31)
        and__22 = ops.and_(ge_15, lt_15)
        and__23 = ops.and_(and__21, and__22)
        masked_subblock8 = self.masked_subblock8(and__23, 0.0)
        add_6 = ops.add(masked_subblock8, add_5)
        get_index_32 = self.get_index('index11')
        index_expr_32 = ops.index_expr(get_index_32, torch.int64)
        constant_32 = ops.constant(0, torch.int64)
        ge_16 = ops.ge(index_expr_32, constant_32)
        get_index_33 = self.get_index('index11')
        index_expr_33 = ops.index_expr(get_index_33, torch.int64)
        constant_33 = ops.constant(14, torch.int64)
        lt_16 = ops.lt(index_expr_33, constant_33)
        and__24 = ops.and_(ge_16, lt_16)
        get_index_34 = self.get_index('index5')
        index_expr_34 = ops.index_expr(get_index_34, torch.int64)
        constant_34 = ops.constant(0, torch.int64)
        ge_17 = ops.ge(index_expr_34, constant_34)
        get_index_35 = self.get_index('index5')
        index_expr_35 = ops.index_expr(get_index_35, torch.int64)
        constant_35 = ops.constant(14, torch.int64)
        lt_17 = ops.lt(index_expr_35, constant_35)
        and__25 = ops.and_(ge_17, lt_17)
        and__26 = ops.and_(and__24, and__25)
        masked_subblock9 = self.masked_subblock9(and__26, 0.0)
        add_7 = ops.add(masked_subblock9, add_6)
        get_index_36 = self.get_index('index15')
        index_expr_36 = ops.index_expr(get_index_36, torch.int32)
        truediv = ops.truediv(add_7, index_expr_36)
        get_index_37 = self.get_index('index16')
        store = ops.store('buf451', get_index_37, truediv, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index6')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock4(self, ops):
        get_index = self.get_index('index8')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock5(self, ops):
        get_index = self.get_index('index9')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock6(self, ops):
        get_index = self.get_index('index10')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock7(self, ops):
        get_index = self.get_index('index12')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock8(self, ops):
        get_index = self.get_index('index13')
        load = ops.load('buf436', get_index)
        return load
    def masked_subblock9(self, ops):
        get_index = self.get_index('index14')
        load = ops.load('buf436', get_index)
        return load


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op452.unmet_dependencies = [MemoryDep('buf438', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op452.met_dependencies = 
    [   MemoryDep('arg612_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg613_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg614_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg615_1', c1, {c0: 8, c1: 112}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf452.aliases = ['buf459']
    buf452.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op452.group.device = cuda:0
op452.group.iteration = (43904, 1)
op452.sizes = ([8, 112, 49], [])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg612_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg614_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf452_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op452_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf438', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg612_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg613_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg614_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg615_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf452', get_index_5, relu, None)
        return store


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op453.unmet_dependencies = [MemoryDep('buf440', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op453.met_dependencies = 
    [   MemoryDep('arg617_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg618_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg619_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg620_1', c1, {c0: 8, c1: 112}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf453.aliases = ['buf459']
    buf453.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (43904, 1)
op453.sizes = ([8, 112, 49], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg618_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg619_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf453_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op453_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg617_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg618_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg619_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg620_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf453', get_index_5, relu, None)
        return store


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op454.unmet_dependencies = [MemoryDep('buf442', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op454.met_dependencies = 
    [   MemoryDep('arg622_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg623_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg624_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg625_1', c1, {c0: 8, c1: 112}, None)]
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf454.aliases = ['buf459']
    buf454.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op454.group.device = cuda:0
op454.group.iteration = (43904, 1)
op454.sizes = ([8, 112, 49], [])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg622_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg624_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg625_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf454_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op454_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf442', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg622_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg623_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg624_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg625_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf454', get_index_5, relu, None)
        return store


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op455.unmet_dependencies = [MemoryDep('buf444', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op455.met_dependencies = 
    [   MemoryDep('arg627_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg628_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg629_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg630_1', c1, {c0: 8, c1: 112}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf455.aliases = ['buf459']
    buf455.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op455.group.device = cuda:0
op455.group.iteration = (43904, 1)
op455.sizes = ([8, 112, 49], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg629_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg630_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf455_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op455_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg627_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg628_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg629_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg630_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf455', get_index_5, relu, None)
        return store


op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op456.unmet_dependencies = [MemoryDep('buf446', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op456.met_dependencies = 
    [   MemoryDep('arg632_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg633_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg634_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg635_1', c1, {c0: 8, c1: 112}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf456.aliases = ['buf459']
    buf456.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op456.group.device = cuda:0
op456.group.iteration = (43904, 1)
op456.sizes = ([8, 112, 49], [])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg632_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg634_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf456_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op456_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf446', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg632_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg633_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg634_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg635_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf456', get_index_5, relu, None)
        return store


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op457.unmet_dependencies = [MemoryDep('buf448', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op457.met_dependencies = 
    [   MemoryDep('arg637_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg638_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg639_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg640_1', c1, {c0: 8, c1: 112}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf457.aliases = ['buf459']
    buf457.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op457.group.device = cuda:0
op457.group.iteration = (43904, 1)
op457.sizes = ([8, 112, 49], [])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg637_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg639_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg640_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf457_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op457_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf448', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg637_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg638_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg639_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg640_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf457', get_index_5, relu, None)
        return store


op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op458.unmet_dependencies = [MemoryDep('buf450', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op458.met_dependencies = 
    [   MemoryDep('arg642_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg643_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg644_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg645_1', c1, {c0: 8, c1: 112}, None)]
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf458.aliases = ['buf459']
    buf458.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]
op458.group.device = cuda:0
op458.group.iteration = (43904, 1)
op458.sizes = ([8, 112, 49], [])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg642_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg643_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg644_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg645_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf458_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op458_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg642_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg643_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg644_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg645_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf458', get_index_5, relu, None)
        return store


op459: NopKernelSchedulerNode(ConcatKernel)
op459.writes = [StarDep(name='buf459', mode=None)]
op459.unmet_dependencies = 
    [   StarDep(name='buf451', mode=None),
        StarDep(name='buf452', mode=None),
        StarDep(name='buf453', mode=None),
        StarDep(name='buf454', mode=None),
        StarDep(name='buf455', mode=None),
        StarDep(name='buf456', mode=None),
        StarDep(name='buf457', mode=None),
        StarDep(name='buf458', mode=None)]
op459.met_dependencies = []
op459.outputs = [
    buf459: ConcatKernel
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
    buf459.users = [
        NodeUser(node=NopKernelSchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
    ]
]


op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', 43904*c0 + c1 + 896*c2, {c0: 8, c1: 896, c2: 49}, None)]
op460.unmet_dependencies = [MemoryDep('buf459', c0, {c0: 351232}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (351232, 1)
op460.sizes = ([8, 896, 49], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
class op460_loop_body:
    var_ranges = {z0: 8, z1: 896, z2: 49}
    index0 = 43904*z0 + 49*z1 + z2
    index1 = 43904*z0 + z1 + 896*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf460', get_index_1, load, None)
        return store


op461: ExternKernelSchedulerNode(ExternKernelAlloc)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='arg646_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelAlloc
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op461.node.kernel = extern_kernels.convolution


op462: ExternKernelSchedulerNode(ExternKernelAlloc)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op462.met_dependencies = [StarDep(name='arg651_1', mode=None)]
op462.outputs = [
    buf462: ExternKernelAlloc
    buf462.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op462.node.kernel = extern_kernels.convolution


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 802816}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 802816}, None),
        MemoryDep('buf462', c0, {c0: 802816}, None)]
op463.met_dependencies = 
    [   MemoryDep('arg647_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg648_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg649_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg650_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg652_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg653_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg654_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg655_1', c1, {c0: 392, c1: 2048}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf463.users = [NodeUser(node=SchedulerNode(name='op464'), can_inplace=True, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (802816, 1)
op463.sizes = ([392, 2048], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg647_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg648_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg650_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg652_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg653_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg654_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg655_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op463_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg647_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg648_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg649_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg650_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf462', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg652_1', get_index_6)
        sub_1 = ops.sub(load_5, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg653_1', get_index_7)
        constant_2 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(load_7, constant_2)
        sqrt_1 = ops.sqrt(add_2)
        reciprocal_1 = ops.reciprocal(sqrt_1)
        constant_3 = ops.constant(1.0, torch.float32)
        mul_3 = ops.mul(reciprocal_1, constant_3)
        mul_4 = ops.mul(sub_1, mul_3)
        get_index_8 = self.get_index('index1')
        load_8 = ops.load('arg654_1', get_index_8)
        mul_5 = ops.mul(mul_4, load_8)
        get_index_9 = self.get_index('index1')
        load_9 = ops.load('arg655_1', get_index_9)
        add_3 = ops.add(mul_5, load_9)
        add_4 = ops.add(add_1, add_3)
        get_index_10 = self.get_index('index0')
        store = ops.store('buf463', get_index_10, add_4, None)
        return store


op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 802816}, None)]
op464.unmet_dependencies = [MemoryDep('buf463', c0, {c0: 802816}, None)]
op464.met_dependencies = []
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf464.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False),
    ]
]
op464.group.device = cuda:0
op464.group.iteration = (802816, 1)
op464.sizes = ([802816], [])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op464_loop_body:
    var_ranges = {z0: 802816}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf463', get_index)
        relu = ops.relu(load)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf464', get_index_1, relu, None)
        return store


op465: ExternKernelSchedulerNode(ExternKernelAlloc)
op465.writes = [StarDep(name='buf465', mode=None)]
op465.unmet_dependencies = [StarDep(name='buf464', mode=None)]
op465.met_dependencies = [StarDep(name='arg656_1', mode=None)]
op465.outputs = [
    buf465: ExternKernelAlloc
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf465.users = [NodeUser(node=SchedulerNode(name='op466'), can_inplace=True, is_weak=False)]
]
op465.node.kernel = extern_kernels.convolution


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 351232}, None)]
op466.unmet_dependencies = [MemoryDep('buf465', c0, {c0: 351232}, None)]
op466.met_dependencies = 
    [   MemoryDep('arg657_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg658_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg659_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg660_1', c1, {c0: 392, c1: 896}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf466.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
    ]
]
op466.group.device = cuda:0
op466.group.iteration = (351232, 1)
op466.sizes = ([392, 896], [])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
arg657_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg658_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg659_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg660_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
class op466_loop_body:
    var_ranges = {z0: 392, z1: 896}
    index0 = 896*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf465', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg657_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg658_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg659_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg660_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf466', get_index_5, relu, None)
        return store


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op467.unmet_dependencies = []
op467.met_dependencies = [MemoryDep('arg661_1', c0, {c0: 112896}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (112896, 1)
op467.sizes = ([112, 112, 9], [])
arg661_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op467_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg661_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf467', get_index_1, load, None)
        return store


op468: ExternKernelSchedulerNode(ExternKernelAlloc)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf466', mode=None), StarDep(name='buf467', mode=None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ExternKernelAlloc
    buf468.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf468.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False)]
]
op468.node.kernel = extern_kernels.convolution


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op469.met_dependencies = 
    [   MemoryDep('arg662_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg663_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg664_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg665_1', c1, {c0: 8, c1: 112}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf469.aliases = ['buf495']
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op469.group.device = cuda:0
op469.group.iteration = (43904, 1)
op469.sizes = ([8, 112, 49], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg662_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg664_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf469_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op469_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg662_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg663_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg664_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg665_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf469', get_index_5, relu, None)
        return store


op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 43904}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 112, {c0: 392, c1: 112}, None),
        MemoryDep('buf469', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (43904, 1)
op470.sizes = ([8, 49, 112], [])
buf469_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op470_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 112
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf469', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf470', get_index_2, add, None)
        return store


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op471.unmet_dependencies = []
op471.met_dependencies = [MemoryDep('arg666_1', c0, {c0: 112896}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (112896, 1)
op471.sizes = ([112, 112, 9], [])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op471_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg666_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf471', get_index_1, load, None)
        return store


op472: ExternKernelSchedulerNode(ExternKernelAlloc)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf470', mode=None), StarDep(name='buf471', mode=None)]
op472.met_dependencies = []
op472.outputs = [
    buf472: ExternKernelAlloc
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf472.users = [NodeUser(node=SchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.node.kernel = extern_kernels.convolution


op473: SchedulerNode(ComputedBuffer)
op473.writes = [MemoryDep('buf473', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op473.unmet_dependencies = [MemoryDep('buf472', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op473.met_dependencies = 
    [   MemoryDep('arg667_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg668_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg669_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg670_1', c1, {c0: 8, c1: 112}, None)]
op473.outputs = [
    buf473: ComputedBuffer
    buf473.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf473.aliases = ['buf495']
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op473.group.device = cuda:0
op473.group.iteration = (43904, 1)
op473.sizes = ([8, 112, 49], [])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg667_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg668_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg670_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf473_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op473_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf472', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg667_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg668_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg669_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg670_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf473', get_index_5, relu, None)
        return store


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 43904}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 224, {c0: 392, c1: 112}, None),
        MemoryDep('buf473', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (43904, 1)
op474.sizes = ([8, 49, 112], [])
buf473_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op474_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 224
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf474', get_index_2, add, None)
        return store


op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op475.unmet_dependencies = []
op475.met_dependencies = [MemoryDep('arg671_1', c0, {c0: 112896}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf475.users = [NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (112896, 1)
op475.sizes = ([112, 112, 9], [])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op475_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg671_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf475', get_index_1, load, None)
        return store


op476: ExternKernelSchedulerNode(ExternKernelAlloc)
op476.writes = [StarDep(name='buf476', mode=None)]
op476.unmet_dependencies = [StarDep(name='buf474', mode=None), StarDep(name='buf475', mode=None)]
op476.met_dependencies = []
op476.outputs = [
    buf476: ExternKernelAlloc
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf476.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op476.node.kernel = extern_kernels.convolution


op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op477.unmet_dependencies = [MemoryDep('buf476', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op477.met_dependencies = 
    [   MemoryDep('arg672_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg673_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg674_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg675_1', c1, {c0: 8, c1: 112}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf477.aliases = ['buf495']
    buf477.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op477.group.device = cuda:0
op477.group.iteration = (43904, 1)
op477.sizes = ([8, 112, 49], [])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg672_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg674_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg675_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf477_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf476', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg672_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg673_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg674_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg675_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf477', get_index_5, relu, None)
        return store


op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 43904}, None)]
op478.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 336, {c0: 392, c1: 112}, None),
        MemoryDep('buf477', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op478.met_dependencies = []
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf478.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op478.group.device = cuda:0
op478.group.iteration = (43904, 1)
op478.sizes = ([8, 49, 112], [])
buf477_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op478_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 336
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf478', get_index_2, add, None)
        return store


op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op479.unmet_dependencies = []
op479.met_dependencies = [MemoryDep('arg676_1', c0, {c0: 112896}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (112896, 1)
op479.sizes = ([112, 112, 9], [])
arg676_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op479_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg676_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf479', get_index_1, load, None)
        return store


op480: ExternKernelSchedulerNode(ExternKernelAlloc)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf478', mode=None), StarDep(name='buf479', mode=None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ExternKernelAlloc
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False)]
]
op480.node.kernel = extern_kernels.convolution


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op481.unmet_dependencies = [MemoryDep('buf480', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op481.met_dependencies = 
    [   MemoryDep('arg677_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg678_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg679_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg680_1', c1, {c0: 8, c1: 112}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf481.aliases = ['buf495']
    buf481.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op481.group.device = cuda:0
op481.group.iteration = (43904, 1)
op481.sizes = ([8, 112, 49], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg677_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg678_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg679_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg680_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf481_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op481_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg677_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg678_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg679_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg680_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf481', get_index_5, relu, None)
        return store


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 43904}, None)]
op482.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 448, {c0: 392, c1: 112}, None),
        MemoryDep('buf481', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (43904, 1)
op482.sizes = ([8, 49, 112], [])
buf481_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf482_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op482_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 448
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf481', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf482', get_index_2, add, None)
        return store


op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op483.unmet_dependencies = []
op483.met_dependencies = [MemoryDep('arg681_1', c0, {c0: 112896}, None)]
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf483.users = [NodeUser(node=ExternKernelSchedulerNode(name='op484'), can_inplace=False, is_weak=False)]
]
op483.group.device = cuda:0
op483.group.iteration = (112896, 1)
op483.sizes = ([112, 112, 9], [])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op483_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg681_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf483', get_index_1, load, None)
        return store


op484: ExternKernelSchedulerNode(ExternKernelAlloc)
op484.writes = [StarDep(name='buf484', mode=None)]
op484.unmet_dependencies = [StarDep(name='buf482', mode=None), StarDep(name='buf483', mode=None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ExternKernelAlloc
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf484.users = [NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False)]
]
op484.node.kernel = extern_kernels.convolution


op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op485.unmet_dependencies = [MemoryDep('buf484', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op485.met_dependencies = 
    [   MemoryDep('arg682_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg683_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg684_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg685_1', c1, {c0: 8, c1: 112}, None)]
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf485.aliases = ['buf495']
    buf485.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op485.group.device = cuda:0
op485.group.iteration = (43904, 1)
op485.sizes = ([8, 112, 49], [])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg682_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg685_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf485_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op485_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf484', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg682_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg683_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg684_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg685_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf485', get_index_5, relu, None)
        return store


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 43904}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 560, {c0: 392, c1: 112}, None),
        MemoryDep('buf485', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (43904, 1)
op486.sizes = ([8, 49, 112], [])
buf485_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op486_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 560
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf486', get_index_2, add, None)
        return store


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op487.unmet_dependencies = []
op487.met_dependencies = [MemoryDep('arg686_1', c0, {c0: 112896}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (112896, 1)
op487.sizes = ([112, 112, 9], [])
arg686_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op487_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg686_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf487', get_index_1, load, None)
        return store


op488: ExternKernelSchedulerNode(ExternKernelAlloc)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf486', mode=None), StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ExternKernelAlloc
    buf488.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf488.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.node.kernel = extern_kernels.convolution


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op489.unmet_dependencies = [MemoryDep('buf488', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op489.met_dependencies = 
    [   MemoryDep('arg687_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg688_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg689_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg690_1', c1, {c0: 8, c1: 112}, None)]
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf489.aliases = ['buf495']
    buf489.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op489.group.device = cuda:0
op489.group.iteration = (43904, 1)
op489.sizes = ([8, 112, 49], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg687_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg688_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg690_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf489_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op489_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg687_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg688_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg689_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg690_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf489', get_index_5, relu, None)
        return store


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 43904}, None)]
op490.unmet_dependencies = 
    [   MemoryDep('buf466', 896*c0 + c1 + 672, {c0: 392, c1: 112}, None),
        MemoryDep('buf489', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op490.met_dependencies = []
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (43904, 1)
op490.sizes = ([8, 49, 112], [])
buf489_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op490_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 672
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf466', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf490', get_index_2, add, None)
        return store


op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op491.unmet_dependencies = []
op491.met_dependencies = [MemoryDep('arg691_1', c0, {c0: 112896}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf491.users = [NodeUser(node=ExternKernelSchedulerNode(name='op492'), can_inplace=False, is_weak=False)]
]
op491.group.device = cuda:0
op491.group.iteration = (112896, 1)
op491.sizes = ([112, 112, 9], [])
arg691_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op491_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg691_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf491', get_index_1, load, None)
        return store


op492: ExternKernelSchedulerNode(ExternKernelAlloc)
op492.writes = [StarDep(name='buf492', mode=None)]
op492.unmet_dependencies = [StarDep(name='buf490', mode=None), StarDep(name='buf491', mode=None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ExternKernelAlloc
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf492.users = [NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False)]
]
op492.node.kernel = extern_kernels.convolution


op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op493.unmet_dependencies = [MemoryDep('buf492', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op493.met_dependencies = 
    [   MemoryDep('arg692_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg693_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg694_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg695_1', c1, {c0: 8, c1: 112}, None)]
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf493.aliases = ['buf495']
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op493.group.device = cuda:0
op493.group.iteration = (43904, 1)
op493.sizes = ([8, 112, 49], [])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg692_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg693_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg694_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg695_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf493_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op493_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg692_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg693_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg694_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg695_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf493', get_index_5, relu, None)
        return store


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op494.unmet_dependencies = [   MemoryDep('buf466', 43904*c0 + c1 + 896*c2 + 784, {c0: 8, c1: 112, c2: 49}, None)]
op494.met_dependencies = []
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf494.aliases = ['buf495']
    buf494.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op494.group.device = cuda:0
op494.group.iteration = (43904, 1)
op494.sizes = ([8, 112, 49], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf494_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op494_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 43904*z0 + z1 + 896*z2 + 784
    index1 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf494', get_index_1, load, None)
        return store


op495: NopKernelSchedulerNode(ConcatKernel)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = 
    [   StarDep(name='buf469', mode=None),
        StarDep(name='buf473', mode=None),
        StarDep(name='buf477', mode=None),
        StarDep(name='buf481', mode=None),
        StarDep(name='buf485', mode=None),
        StarDep(name='buf489', mode=None),
        StarDep(name='buf493', mode=None),
        StarDep(name='buf494', mode=None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: ConcatKernel
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
    buf495.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op482'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', 43904*c0 + c1 + 896*c2, {c0: 8, c1: 896, c2: 49}, None)]
op496.unmet_dependencies = [MemoryDep('buf495', c0, {c0: 351232}, None)]
op496.met_dependencies = []
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (351232, 1)
op496.sizes = ([8, 896, 49], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
class op496_loop_body:
    var_ranges = {z0: 8, z1: 896, z2: 49}
    index0 = 43904*z0 + 49*z1 + z2
    index1 = 43904*z0 + z1 + 896*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf496', get_index_1, load, None)
        return store


op497: ExternKernelSchedulerNode(ExternKernelAlloc)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf496', mode=None)]
op497.met_dependencies = [StarDep(name='arg696_1', mode=None)]
op497.outputs = [
    buf497: ExternKernelAlloc
    buf497.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf497.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False)]
]
op497.node.kernel = extern_kernels.convolution


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 802816}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf464', c0, {c0: 802816}, None),
        MemoryDep('buf497', c0, {c0: 802816}, None)]
op498.met_dependencies = 
    [   MemoryDep('arg697_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg698_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg699_1', c1, {c0: 392, c1: 2048}, None),
        MemoryDep('arg700_1', c1, {c0: 392, c1: 2048}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf498.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
    ]
]
op498.group.device = cuda:0
op498.group.iteration = (802816, 1)
op498.sizes = ([392, 2048], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg697_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg698_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg699_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg700_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
class op498_loop_body:
    var_ranges = {z0: 392, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg697_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg698_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg699_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg700_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf464', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf498', get_index_6, relu, None)
        return store


op499: ExternKernelSchedulerNode(ExternKernelAlloc)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg701_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelAlloc
    buf499.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf499.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=True, is_weak=False)]
]
op499.node.kernel = extern_kernels.convolution


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 351232}, None)]
op500.unmet_dependencies = [MemoryDep('buf499', c0, {c0: 351232}, None)]
op500.met_dependencies = 
    [   MemoryDep('arg702_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg703_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg704_1', c1, {c0: 392, c1: 896}, None),
        MemoryDep('arg705_1', c1, {c0: 392, c1: 896}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf500.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
    ]
]
op500.group.device = cuda:0
op500.group.iteration = (351232, 1)
op500.sizes = ([392, 896], [])
buf499_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
arg702_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg703_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg704_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
arg705_1_layout = FixedLayout('cuda', torch.float32, size=[896], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
class op500_loop_body:
    var_ranges = {z0: 392, z1: 896}
    index0 = 896*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg702_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg703_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg704_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg705_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf500', get_index_5, relu, None)
        return store


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op501.unmet_dependencies = []
op501.met_dependencies = [MemoryDep('arg706_1', c0, {c0: 112896}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (112896, 1)
op501.sizes = ([112, 112, 9], [])
arg706_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op501_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg706_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf501', get_index_1, load, None)
        return store


op502: ExternKernelSchedulerNode(ExternKernelAlloc)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf500', mode=None), StarDep(name='buf501', mode=None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: ExternKernelAlloc
    buf502.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf502.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op502.node.kernel = extern_kernels.convolution


op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op503.unmet_dependencies = [MemoryDep('buf502', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op503.met_dependencies = 
    [   MemoryDep('arg707_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg708_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg709_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg710_1', c1, {c0: 8, c1: 112}, None)]
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf503.aliases = ['buf529']
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op503.group.device = cuda:0
op503.group.iteration = (43904, 1)
op503.sizes = ([8, 112, 49], [])
buf502_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg707_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg708_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg709_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg710_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf503_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op503_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf502', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg707_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg708_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg709_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg710_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf503', get_index_5, relu, None)
        return store


op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 43904}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 112, {c0: 392, c1: 112}, None),
        MemoryDep('buf503', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op504.met_dependencies = []
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf504.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (43904, 1)
op504.sizes = ([8, 49, 112], [])
buf503_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf504_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op504_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 112
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf503', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf504', get_index_2, add, None)
        return store


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op505.unmet_dependencies = []
op505.met_dependencies = [MemoryDep('arg711_1', c0, {c0: 112896}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (112896, 1)
op505.sizes = ([112, 112, 9], [])
arg711_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op505_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg711_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf505', get_index_1, load, None)
        return store


op506: ExternKernelSchedulerNode(ExternKernelAlloc)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf504', mode=None), StarDep(name='buf505', mode=None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ExternKernelAlloc
    buf506.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf506.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op506.node.kernel = extern_kernels.convolution


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op507.unmet_dependencies = [MemoryDep('buf506', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op507.met_dependencies = 
    [   MemoryDep('arg712_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg713_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg714_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg715_1', c1, {c0: 8, c1: 112}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf507.aliases = ['buf529']
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (43904, 1)
op507.sizes = ([8, 112, 49], [])
buf506_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg712_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg713_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg714_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf507_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op507_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf506', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg712_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg713_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg714_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg715_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf507', get_index_5, relu, None)
        return store


op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 43904}, None)]
op508.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 224, {c0: 392, c1: 112}, None),
        MemoryDep('buf507', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf508.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (43904, 1)
op508.sizes = ([8, 49, 112], [])
buf507_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op508_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 224
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf508', get_index_2, add, None)
        return store


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op509.unmet_dependencies = []
op509.met_dependencies = [MemoryDep('arg716_1', c0, {c0: 112896}, None)]
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (112896, 1)
op509.sizes = ([112, 112, 9], [])
arg716_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op509_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg716_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf509', get_index_1, load, None)
        return store


op510: ExternKernelSchedulerNode(ExternKernelAlloc)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = [StarDep(name='buf508', mode=None), StarDep(name='buf509', mode=None)]
op510.met_dependencies = []
op510.outputs = [
    buf510: ExternKernelAlloc
    buf510.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf510.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op510.node.kernel = extern_kernels.convolution


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op511.unmet_dependencies = [MemoryDep('buf510', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg717_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg718_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg719_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg720_1', c1, {c0: 8, c1: 112}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf511.aliases = ['buf529']
    buf511.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op511.group.device = cuda:0
op511.group.iteration = (43904, 1)
op511.sizes = ([8, 112, 49], [])
buf510_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg717_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg718_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg719_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg720_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf511_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op511_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf510', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg717_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg718_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg719_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg720_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf511', get_index_5, relu, None)
        return store


op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 43904}, None)]
op512.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 336, {c0: 392, c1: 112}, None),
        MemoryDep('buf511', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf512.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (43904, 1)
op512.sizes = ([8, 49, 112], [])
buf511_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf512_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op512_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 336
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf512', get_index_2, add, None)
        return store


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op513.unmet_dependencies = []
op513.met_dependencies = [MemoryDep('arg721_1', c0, {c0: 112896}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (112896, 1)
op513.sizes = ([112, 112, 9], [])
arg721_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op513_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg721_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf513', get_index_1, load, None)
        return store


op514: ExternKernelSchedulerNode(ExternKernelAlloc)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf512', mode=None), StarDep(name='buf513', mode=None)]
op514.met_dependencies = []
op514.outputs = [
    buf514: ExternKernelAlloc
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf514.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.node.kernel = extern_kernels.convolution


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op515.unmet_dependencies = [MemoryDep('buf514', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op515.met_dependencies = 
    [   MemoryDep('arg722_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg723_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg724_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg725_1', c1, {c0: 8, c1: 112}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf515.aliases = ['buf529']
    buf515.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op515.group.device = cuda:0
op515.group.iteration = (43904, 1)
op515.sizes = ([8, 112, 49], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg722_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg723_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg724_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg725_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf515_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op515_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg722_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg723_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg724_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg725_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf515', get_index_5, relu, None)
        return store


op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', c0, {c0: 43904}, None)]
op516.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 448, {c0: 392, c1: 112}, None),
        MemoryDep('buf515', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op516.met_dependencies = []
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf516.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (43904, 1)
op516.sizes = ([8, 49, 112], [])
buf515_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf516_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op516_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 448
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf516', get_index_2, add, None)
        return store


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op517.unmet_dependencies = []
op517.met_dependencies = [MemoryDep('arg726_1', c0, {c0: 112896}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (112896, 1)
op517.sizes = ([112, 112, 9], [])
arg726_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op517_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg726_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf517', get_index_1, load, None)
        return store


op518: ExternKernelSchedulerNode(ExternKernelAlloc)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf516', mode=None), StarDep(name='buf517', mode=None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ExternKernelAlloc
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op518.node.kernel = extern_kernels.convolution


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op519.unmet_dependencies = [MemoryDep('buf518', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op519.met_dependencies = 
    [   MemoryDep('arg727_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg728_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg729_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg730_1', c1, {c0: 8, c1: 112}, None)]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf519.aliases = ['buf529']
    buf519.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op519.group.device = cuda:0
op519.group.iteration = (43904, 1)
op519.sizes = ([8, 112, 49], [])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg727_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg728_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg729_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg730_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf519_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op519_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg727_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg728_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg729_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg730_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf519', get_index_5, relu, None)
        return store


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 43904}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 560, {c0: 392, c1: 112}, None),
        MemoryDep('buf519', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op520.met_dependencies = []
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf520.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (43904, 1)
op520.sizes = ([8, 49, 112], [])
buf519_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op520_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 560
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf519', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf520', get_index_2, add, None)
        return store


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op521.unmet_dependencies = []
op521.met_dependencies = [MemoryDep('arg731_1', c0, {c0: 112896}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (112896, 1)
op521.sizes = ([112, 112, 9], [])
arg731_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op521_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg731_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf521', get_index_1, load, None)
        return store


op522: ExternKernelSchedulerNode(ExternKernelAlloc)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf520', mode=None), StarDep(name='buf521', mode=None)]
op522.met_dependencies = []
op522.outputs = [
    buf522: ExternKernelAlloc
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf522.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.node.kernel = extern_kernels.convolution


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op523.unmet_dependencies = [MemoryDep('buf522', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op523.met_dependencies = 
    [   MemoryDep('arg732_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg733_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg734_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg735_1', c1, {c0: 8, c1: 112}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf523.aliases = ['buf529']
    buf523.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op523.group.device = cuda:0
op523.group.iteration = (43904, 1)
op523.sizes = ([8, 112, 49], [])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg732_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg733_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg734_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg735_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf523_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op523_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf522', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg732_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg733_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg734_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg735_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf523', get_index_5, relu, None)
        return store


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 43904}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf500', 896*c0 + c1 + 672, {c0: 392, c1: 112}, None),
        MemoryDep('buf523', 43904*c0 + c1 + 49*c2, {c0: 8, c1: 49, c2: 112}, None)]
op524.met_dependencies = []
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (43904, 1)
op524.sizes = ([8, 49, 112], [])
buf523_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
class op524_loop_body:
    var_ranges = {z0: 8, z1: 49, z2: 112}
    index0 = 43904*z0 + z1 + 49*z2
    index1 = 43904*z0 + 896*z1 + z2 + 672
    index2 = 5488*z0 + 112*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf500', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf524', get_index_2, add, None)
        return store


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', 1008*c0 + c1 + 112*c2, {c0: 112, c1: 112, c2: 9}, None)]
op525.unmet_dependencies = []
op525.met_dependencies = [MemoryDep('arg736_1', c0, {c0: 112896}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
    buf525.users = [NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (112896, 1)
op525.sizes = ([112, 112, 9], [])
arg736_1_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 9, 3, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[112, 112, 3, 3], stride=[1008, 1, 336, 112])
class op525_loop_body:
    var_ranges = {z0: 112, z1: 112, z2: 9}
    index0 = 1008*z0 + 9*z1 + z2
    index1 = 1008*z0 + z1 + 112*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg736_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf525', get_index_1, load, None)
        return store


op526: ExternKernelSchedulerNode(ExternKernelAlloc)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf524', mode=None), StarDep(name='buf525', mode=None)]
op526.met_dependencies = []
op526.outputs = [
    buf526: ExternKernelAlloc
    buf526.layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
    buf526.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op526.node.kernel = extern_kernels.convolution


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op527.unmet_dependencies = [MemoryDep('buf526', 5488*c0 + c1 + 112*c2, {c0: 8, c1: 112, c2: 49}, None)]
op527.met_dependencies = 
    [   MemoryDep('arg737_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg738_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg739_1', c1, {c0: 8, c1: 112}, None),
        MemoryDep('arg740_1', c1, {c0: 8, c1: 112}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf527.aliases = ['buf529']
    buf527.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op527.group.device = cuda:0
op527.group.iteration = (43904, 1)
op527.sizes = ([8, 112, 49], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[5488, 1, 784, 112])
arg737_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg738_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg739_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
arg740_1_layout = FixedLayout('cuda', torch.float32, size=[112], stride=[1])
buf527_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op527_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 5488*z0 + z1 + 112*z2
    index1 = z1
    index2 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg737_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg738_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg739_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg740_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf527', get_index_5, relu, None)
        return store


op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', 43904*c0 + c1, {c0: 8, c1: 5488}, None)]
op528.unmet_dependencies = [   MemoryDep('buf500', 43904*c0 + c1 + 896*c2 + 784, {c0: 8, c1: 112, c2: 49}, None)]
op528.met_dependencies = []
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
    buf528.aliases = ['buf529']
    buf528.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]
op528.group.device = cuda:0
op528.group.iteration = (43904, 1)
op528.sizes = ([8, 112, 49], [])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
buf528_layout = NonOwningLayout('cuda', torch.float32, size=[8, 112, 7, 7], stride=[43904, 49, 7, 1])
class op528_loop_body:
    var_ranges = {z0: 8, z1: 112, z2: 49}
    index0 = 43904*z0 + z1 + 896*z2 + 784
    index1 = 43904*z0 + 49*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf500', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf528', get_index_1, load, None)
        return store


op529: NopKernelSchedulerNode(ConcatKernel)
op529.writes = [StarDep(name='buf529', mode=None)]
op529.unmet_dependencies = 
    [   StarDep(name='buf503', mode=None),
        StarDep(name='buf507', mode=None),
        StarDep(name='buf511', mode=None),
        StarDep(name='buf515', mode=None),
        StarDep(name='buf519', mode=None),
        StarDep(name='buf523', mode=None),
        StarDep(name='buf527', mode=None),
        StarDep(name='buf528', mode=None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: ConcatKernel
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
    buf529.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=NopKernelSchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
    ]
]


op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', 43904*c0 + c1 + 896*c2, {c0: 8, c1: 896, c2: 49}, None)]
op530.unmet_dependencies = [MemoryDep('buf529', c0, {c0: 351232}, None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
    buf530.users = [NodeUser(node=ExternKernelSchedulerNode(name='op531'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (351232, 1)
op530.sizes = ([8, 896, 49], [])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 49, 7, 1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 896, 7, 7], stride=[43904, 1, 6272, 896])
class op530_loop_body:
    var_ranges = {z0: 8, z1: 896, z2: 49}
    index0 = 43904*z0 + 49*z1 + z2
    index1 = 43904*z0 + z1 + 896*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf529', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf530', get_index_1, load, None)
        return store


op531: ExternKernelSchedulerNode(ExternKernelAlloc)
op531.writes = [StarDep(name='buf531', mode=None)]
op531.unmet_dependencies = [StarDep(name='buf530', mode=None)]
op531.met_dependencies = [StarDep(name='arg741_1', mode=None)]
op531.outputs = [
    buf531: ExternKernelAlloc
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
    buf531.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op531.node.kernel = extern_kernels.convolution


op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 16384}, None)]
op532.unmet_dependencies = 
    [   MemoryDep('buf498', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None),
        MemoryDep('buf531', 100352*c0 + c1 + 2048*c2, {c0: 8, c1: 2048, c2: 49}, None)]
op532.met_dependencies = 
    [   MemoryDep('arg742_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg743_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg744_1', c1, {c0: 8, c1: 2048}, None),
        MemoryDep('arg745_1', c1, {c0: 8, c1: 2048}, None)]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf532.users = [NodeUser(node=SchedulerNode(name='op533'), can_inplace=True, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (16384, 49)
op532.sizes = ([8, 2048], [49])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
arg742_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg743_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg744_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
arg745_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 7, 7], stride=[100352, 1, 14336, 2048])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op532_loop_body:
    var_ranges = {z0: 8, z1: 2048, z2: 49}
    index0 = 100352*z0 + z1 + 2048*z2
    index1 = z1
    index2 = 2048*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg742_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg743_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg744_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg745_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf498', get_index_5)
        add_2 = ops.add(add_1, load_5)
        relu = ops.relu(add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf532', get_index_6, reduction)
        return store_reduction


op533: SchedulerNode(ComputedBuffer)
op533.writes = [MemoryDep('buf533', c0, {c0: 16384}, None)]
op533.unmet_dependencies = [MemoryDep('buf532', c0, {c0: 16384}, None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ComputedBuffer
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
    buf533.users = [NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False)]
]
op533.group.device = cuda:0
op533.group.iteration = (16384, 1)
op533.sizes = ([16384], [])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 2048, 1, 1], stride=[2048, 1, 16384, 16384])
class op533_loop_body:
    var_ranges = {z0: 16384}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf532', get_index)
        constant = ops.constant(49.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf533', get_index_1, truediv, None)
        return store


op534: ExternKernelSchedulerNode(ExternKernelOut)
op534.writes = [StarDep(name='buf534', mode=None)]
op534.unmet_dependencies = [StarDep(name='buf533', mode=None)]
op534.met_dependencies = [StarDep(name='arg746_1', mode=None), StarDep(name='arg747_1', mode=None)]
op534.outputs = [
    buf534: ExternKernelOut
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf534.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op534.node.kernel = extern_kernels.addmm



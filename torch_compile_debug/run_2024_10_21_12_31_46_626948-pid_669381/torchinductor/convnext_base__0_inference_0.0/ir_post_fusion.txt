op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 248832*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 82944}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg2_1', c0, {c0: 1990656}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 288, 288], stride=[248832, 1, 864, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1990656, 1)
op0.sizes = ([8, 3, 82944], [])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 288, 288], stride=[248832, 82944, 288, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 288, 288], stride=[248832, 1, 864, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 82944}
    index0 = 248832*z0 + 82944*z1 + z2
    index1 = 248832*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg2_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 48*c0 + c1 + 3*c2, {c0: 128, c1: 3, c2: 16}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 6144}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[128, 3, 4, 4], stride=[48, 1, 12, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (6144, 1)
op1.sizes = ([128, 3, 16], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[128, 3, 4, 4], stride=[48, 16, 4, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[128, 3, 4, 4], stride=[48, 1, 12, 3])
class op1_loop_body:
    var_ranges = {z0: 128, z1: 3, z2: 16}
    index0 = 48*z0 + 16*z1 + z2
    index1 = 48*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False),
    ]
]
op2.node.kernel = extern_kernels.convolution


op3_op4_op6: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op6.writes = 
    [   MemoryDep('buf3', c0, {c0: 41472}, None),
        MemoryDep('buf4', c0, {c0: 41472}, None),
        MemoryDep('buf6', c0, {c0: 5308416}, None)]
op3_op4_op6.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 5308416}, None)]
op3_op4_op6.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 41472, c1: 128}, None)]
op3_op4_op6.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False),
    ]
]
op3_op4_op6.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 41472}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 5308416}, None)]
op3.met_dependencies = [MemoryDep('arg1_1', c1, {c0: 41472, c1: 128}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf3.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (41472, 128)
op3.sizes = ([41472], [128])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op3_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf3', get_index_2, getitem)
        return store_reduction
op3_op4_op6.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 41472}, None)]
op4.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 5308416}, None)]
op4.met_dependencies = [MemoryDep('arg1_1', c1, {c0: 41472, c1: 128}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf4.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (41472, 128)
op4.sizes = ([41472], [128])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op4_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf4', get_index_2, getitem_1)
        return store_reduction
op3_op4_op6.snodes[2] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 5308416}, None)]
op6.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 5308416}, None),
        MemoryDep('buf3', c0, {c0: 41472}, None),
        MemoryDep('buf4', c0, {c0: 41472}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg1_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg4_1', c1, {c0: 41472, c1: 128}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (5308416, 1)
op6.sizes = ([41472, 128], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
class op6_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf3', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf4', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf6', get_index_6, add_2, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg5_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf7.users = [
        NodeUser(node=SchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
    ]
]
op7.node.kernel = extern_kernels.convolution


op8_op9_op11: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op8_op9_op11.writes = 
    [   MemoryDep('buf11', c0, {c0: 5308416}, None),
        MemoryDep('buf8', c0, {c0: 41472}, None),
        MemoryDep('buf9', c0, {c0: 41472}, None)]
op8_op9_op11.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 5308416}, None)]
op8_op9_op11.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg7_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 41472, c1: 128}, None)]
op8_op9_op11.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf8.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op8_op9_op11.snodes[0] =
op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 41472}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 5308416}, None)]
op8.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 41472, c1: 128}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf8.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (41472, 128)
op8.sizes = ([41472], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op8_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf8', get_index_2, getitem)
        return store_reduction
op8_op9_op11.snodes[1] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 41472}, None)]
op9.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 5308416}, None)]
op9.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 41472, c1: 128}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf9.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (41472, 128)
op9.sizes = ([41472], [128])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op9_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf9', get_index_2, getitem_1)
        return store_reduction
op8_op9_op11.snodes[2] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 5308416}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf7', c0, {c0: 5308416}, None),
        MemoryDep('buf8', c0, {c0: 41472}, None),
        MemoryDep('buf9', c0, {c0: 41472}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg6_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg7_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg8_1', c1, {c0: 41472, c1: 128}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf11.users = [NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (5308416, 1)
op11.sizes = ([41472, 128], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
class op11_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf8', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf9', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg7_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg8_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf11', get_index_6, add_2, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelOut)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg9_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelOut
    buf12.layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.mm


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 21233664}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 21233664}, None)]
op13.met_dependencies = [MemoryDep('arg10_1', c1, {c0: 41472, c1: 512}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (21233664, 1)
op13.sizes = ([41472, 512], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
class op13_loop_body:
    var_ranges = {z0: 41472, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg10_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf12', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg10_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf13', get_index_4, mul_2, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf13', mode=None)]
op14.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.mm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 5308416}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf14', c0, {c0: 5308416}, None),
        MemoryDep('buf6', c0, {c0: 5308416}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg13_1', c1, {c0: 41472, c1: 128}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (5308416, 1)
op15.sizes = ([41472, 128], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
class op15_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf6', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf15', get_index_4, add_1, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
    ]
]
op16.node.kernel = extern_kernels.convolution


op17_op18_op20: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op20.writes = 
    [   MemoryDep('buf17', c0, {c0: 41472}, None),
        MemoryDep('buf18', c0, {c0: 41472}, None),
        MemoryDep('buf20', c0, {c0: 5308416}, None)]
op17_op18_op20.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 5308416}, None)]
op17_op18_op20.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 41472, c1: 128}, None)]
op17_op18_op20.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op17_op18_op20.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 41472}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 5308416}, None)]
op17.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 41472, c1: 128}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf17.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (41472, 128)
op17.sizes = ([41472], [128])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op17_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf17', get_index_2, getitem)
        return store_reduction
op17_op18_op20.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 41472}, None)]
op18.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 5308416}, None)]
op18.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 41472, c1: 128}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf18.users = [NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (41472, 128)
op18.sizes = ([41472], [128])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op18_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf18', get_index_2, getitem_1)
        return store_reduction
op17_op18_op20.snodes[2] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 5308416}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf16', c0, {c0: 5308416}, None),
        MemoryDep('buf17', c0, {c0: 41472}, None),
        MemoryDep('buf18', c0, {c0: 41472}, None)]
op20.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 41472, c1: 128}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf20.users = [NodeUser(node=ExternKernelSchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (5308416, 1)
op20.sizes = ([41472, 128], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
class op20_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf17', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf18', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg16_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg17_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf20', get_index_6, add_2, None)
        return store


op21: ExternKernelSchedulerNode(ExternKernelOut)
op21.writes = [StarDep(name='buf21', mode=None)]
op21.unmet_dependencies = [StarDep(name='buf20', mode=None)]
op21.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op21.outputs = [
    buf21: ExternKernelOut
    buf21.layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
    buf21.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False)]
]
op21.node.kernel = extern_kernels.mm


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 21233664}, None)]
op22.unmet_dependencies = [MemoryDep('buf21', c0, {c0: 21233664}, None)]
op22.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 41472, c1: 512}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (21233664, 1)
op22.sizes = ([41472, 512], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
class op22_loop_body:
    var_ranges = {z0: 41472, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf21', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf21', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf22', get_index_4, mul_2, None)
        return store


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf22', mode=None)]
op23.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=True, is_weak=False)]
]
op23.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 5308416}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 5308416}, None),
        MemoryDep('buf23', c0, {c0: 5308416}, None)]
op24.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg22_1', c1, {c0: 41472, c1: 128}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf24.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op24.group.device = cuda:0
op24.group.iteration = (5308416, 1)
op24.sizes = ([41472, 128], [])
buf23_layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
class op24_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf23', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg22_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf15', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf24', get_index_4, add_1, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg23_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op25.node.kernel = extern_kernels.convolution


op26_op27_op29: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op26_op27_op29.writes = 
    [   MemoryDep('buf26', c0, {c0: 41472}, None),
        MemoryDep('buf27', c0, {c0: 41472}, None),
        MemoryDep('buf29', c0, {c0: 5308416}, None)]
op26_op27_op29.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 5308416}, None)]
op26_op27_op29.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg25_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg26_1', c1, {c0: 41472, c1: 128}, None)]
op26_op27_op29.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op26_op27_op29.snodes[0] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 41472}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 5308416}, None)]
op26.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 41472, c1: 128}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (41472, 128)
op26.sizes = ([41472], [128])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op26_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_2, getitem)
        return store_reduction
op26_op27_op29.snodes[1] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 41472}, None)]
op27.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 5308416}, None)]
op27.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 41472, c1: 128}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (41472, 128)
op27.sizes = ([41472], [128])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op27_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf27', get_index_2, getitem_1)
        return store_reduction
op26_op27_op29.snodes[2] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 5308416}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 5308416}, None),
        MemoryDep('buf26', c0, {c0: 41472}, None),
        MemoryDep('buf27', c0, {c0: 41472}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg24_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg25_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg26_1', c1, {c0: 41472, c1: 128}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (5308416, 1)
op29.sizes = ([41472, 128], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
class op29_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf26', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf27', get_index_3)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg26_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf29', get_index_6, add_2, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg27_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 21233664}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 21233664}, None)]
op31.met_dependencies = [MemoryDep('arg28_1', c1, {c0: 41472, c1: 512}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (21233664, 1)
op31.sizes = ([41472, 512], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[41472, 512], stride=[512, 1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 512], stride=[2654208, 36864, 512, 1])
class op31_loop_body:
    var_ranges = {z0: 41472, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg28_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg28_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf31', get_index_4, mul_2, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg29_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.mm


op33_op34_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op33_op34_op36.writes = 
    [   MemoryDep('buf33', c0, {c0: 41472}, None),
        MemoryDep('buf34', c0, {c0: 41472}, None),
        MemoryDep('buf36', c0, {c0: 5308416}, None)]
op33_op34_op36.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 5308416}, None),
        MemoryDep('buf32', c0, {c0: 5308416}, None)]
op33_op34_op36.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg32_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg33_1', c1, {c0: 41472, c1: 128}, None)]
op33_op34_op36.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op33_op34_op36.snodes[0] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 41472}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 5308416}, None),
        MemoryDep('buf32', c0, {c0: 5308416}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 41472, c1: 128}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (41472, 128)
op33.sizes = ([41472], [128])
buf32_layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op33_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_4, getitem)
        return store_reduction
op33_op34_op36.snodes[1] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 41472}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 5308416}, None),
        MemoryDep('buf32', c0, {c0: 5308416}, None)]
op34.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 41472, c1: 128}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (41472, 128)
op34.sizes = ([41472], [128])
buf32_layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
class op34_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_4, getitem_1)
        return store_reduction
op33_op34_op36.snodes[2] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 5308416}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 5308416}, None),
        MemoryDep('buf32', c0, {c0: 5308416}, None),
        MemoryDep('buf33', c0, {c0: 41472}, None),
        MemoryDep('buf34', c0, {c0: 41472}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg30_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg32_1', c1, {c0: 41472, c1: 128}, None),
        MemoryDep('arg33_1', c1, {c0: 41472, c1: 128}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (5308416, 1)
op36.sizes = ([41472, 128], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[41472, 128], stride=[128, 1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 72, 72], stride=[663552, 1, 9216, 128])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 1], stride=[5184, 72, 1, 41472])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 72, 128], stride=[663552, 9216, 128, 1])
class op36_loop_body:
    var_ranges = {z0: 41472, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg30_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg31_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf24', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf33', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf34', get_index_5)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg32_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg33_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf36', get_index_8, add_3, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', 512*c0 + c1 + 128*c2, {c0: 256, c1: 128, c2: 4}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('arg34_1', c0, {c0: 131072}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2, 2], stride=[512, 1, 256, 128])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (131072, 1)
op37.sizes = ([256, 128, 4], [])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2, 2], stride=[512, 4, 2, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 2, 2], stride=[512, 1, 256, 128])
class op37_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 4}
    index0 = 512*z0 + 4*z1 + z2
    index1 = 512*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg34_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf37', get_index_1, load, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelAlloc)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelAlloc
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=True, is_weak=False)]
]
op38.node.kernel = extern_kernels.convolution


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 2654208}, None)]
op39.unmet_dependencies = [MemoryDep('buf38', c0, {c0: 2654208}, None)]
op39.met_dependencies = [MemoryDep('arg35_1', c1, {c0: 10368, c1: 256}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (2654208, 1)
op39.sizes = ([10368, 256], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
class op39_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg35_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf39', get_index_2, add, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf40.users = [
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=True, is_weak=False),
    ]
]
op40.node.kernel = extern_kernels.convolution


op41_op42_op44: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op41_op42_op44.writes = 
    [   MemoryDep('buf41', c0, {c0: 10368}, None),
        MemoryDep('buf42', 1312*c0 + c1, {c0: 8, c1: 1296}, None),
        MemoryDep('buf44', c0, {c0: 2654208}, None)]
op41_op42_op44.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2654208}, None)]
op41_op42_op44.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 10368, c1: 256}, None)]
op41_op42_op44.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op41_op42_op44.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 10368}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2654208}, None)]
op41.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 10368, c1: 256}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf41.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op41.group.device = cuda:0
op41.group.iteration = (10368, 256)
op41.sizes = ([10368], [256])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
class op41_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf41', get_index_2, getitem)
        return store_reduction
op41_op42_op44.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op42.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 2654208}, None)]
op42.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 10368, c1: 256}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf42.users = [NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (10368, 256)
op42.sizes = ([8, 1296], [256])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf42', get_index_2, getitem_1)
        return store_reduction
op41_op42_op44.snodes[2] =
op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', c0, {c0: 2654208}, None)]
op44.unmet_dependencies = 
    [   MemoryDep('buf40', c0, {c0: 2654208}, None),
        MemoryDep('buf41', c0, {c0: 10368}, None),
        MemoryDep('buf42', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op44.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg38_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 10368, c1: 256}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (2654208, 1)
op44.sizes = ([8, 1296, 256], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
class op44_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1296*z0 + z1
    index3 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf41', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf42', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg38_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg39_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf44', get_index_6, add_2, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf44', mode=None)]
op45.met_dependencies = [StarDep(name='arg40_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.mm


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 10616832}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 10616832}, None)]
op46.met_dependencies = [MemoryDep('arg41_1', c1, {c0: 10368, c1: 1024}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (10616832, 1)
op46.sizes = ([10368, 1024], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
class op46_loop_body:
    var_ranges = {z0: 10368, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg41_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf46', get_index_4, mul_2, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 2654208}, None)]
op48.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 2654208}, None),
        MemoryDep('buf47', c0, {c0: 2654208}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg43_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 10368, c1: 256}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (2654208, 1)
op48.sizes = ([10368, 256], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
class op48_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg44_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf39', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf48', get_index_4, add_1, None)
        return store


op49: ExternKernelSchedulerNode(ExternKernelAlloc)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg45_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelAlloc
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf49.users = [
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False),
    ]
]
op49.node.kernel = extern_kernels.convolution


op50_op51_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op50_op51_op53.writes = 
    [   MemoryDep('buf50', c0, {c0: 10368}, None),
        MemoryDep('buf51', 1312*c0 + c1, {c0: 8, c1: 1296}, None),
        MemoryDep('buf53', c0, {c0: 2654208}, None)]
op50_op51_op53.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 2654208}, None)]
op50_op51_op53.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg47_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg48_1', c1, {c0: 10368, c1: 256}, None)]
op50_op51_op53.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op50_op51_op53.snodes[0] =
op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 10368}, None)]
op50.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 2654208}, None)]
op50.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 10368, c1: 256}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf50.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (10368, 256)
op50.sizes = ([10368], [256])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
class op50_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf50', get_index_2, getitem)
        return store_reduction
op50_op51_op53.snodes[1] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op51.unmet_dependencies = [MemoryDep('buf49', c0, {c0: 2654208}, None)]
op51.met_dependencies = [MemoryDep('arg46_1', c1, {c0: 10368, c1: 256}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf51.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (10368, 256)
op51.sizes = ([8, 1296], [256])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_2, getitem_1)
        return store_reduction
op50_op51_op53.snodes[2] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 2654208}, None)]
op53.unmet_dependencies = 
    [   MemoryDep('buf49', c0, {c0: 2654208}, None),
        MemoryDep('buf50', c0, {c0: 10368}, None),
        MemoryDep('buf51', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg47_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg48_1', c1, {c0: 10368, c1: 256}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (2654208, 1)
op53.sizes = ([8, 1296, 256], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
class op53_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1296*z0 + z1
    index3 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg46_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf50', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf51', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg47_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg48_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf53', get_index_6, add_2, None)
        return store


op54: ExternKernelSchedulerNode(ExternKernelOut)
op54.writes = [StarDep(name='buf54', mode=None)]
op54.unmet_dependencies = [StarDep(name='buf53', mode=None)]
op54.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op54.outputs = [
    buf54: ExternKernelOut
    buf54.layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
    buf54.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=True, is_weak=False)]
]
op54.node.kernel = extern_kernels.mm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 10616832}, None)]
op55.unmet_dependencies = [MemoryDep('buf54', c0, {c0: 10616832}, None)]
op55.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 10368, c1: 1024}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (10616832, 1)
op55.sizes = ([10368, 1024], [])
buf54_layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
class op55_loop_body:
    var_ranges = {z0: 10368, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf54', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf54', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg50_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf55', get_index_4, mul_2, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf55', mode=None)]
op56.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=True, is_weak=False)]
]
op56.node.kernel = extern_kernels.mm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 2654208}, None)]
op57.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 2654208}, None),
        MemoryDep('buf56', c0, {c0: 2654208}, None)]
op57.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg53_1', c1, {c0: 10368, c1: 256}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf57.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (2654208, 1)
op57.sizes = ([10368, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
class op57_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf48', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf57', get_index_4, add_1, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelAlloc)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelAlloc
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.node.kernel = extern_kernels.convolution


op59_op60_op62: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op62.writes = 
    [   MemoryDep('buf59', c0, {c0: 10368}, None),
        MemoryDep('buf60', 1312*c0 + c1, {c0: 8, c1: 1296}, None),
        MemoryDep('buf62', c0, {c0: 2654208}, None)]
op59_op60_op62.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2654208}, None)]
op59_op60_op62.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg57_1', c1, {c0: 10368, c1: 256}, None)]
op59_op60_op62.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op59_op60_op62.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 10368}, None)]
op59.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2654208}, None)]
op59.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 10368, c1: 256}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf59.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (10368, 256)
op59.sizes = ([10368], [256])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
class op59_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_2, getitem)
        return store_reduction
op59_op60_op62.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op60.unmet_dependencies = [MemoryDep('buf58', c0, {c0: 2654208}, None)]
op60.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 10368, c1: 256}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf60.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (10368, 256)
op60.sizes = ([8, 1296], [256])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
class op60_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf60', get_index_2, getitem_1)
        return store_reduction
op59_op60_op62.snodes[2] =
op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 2654208}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2654208}, None),
        MemoryDep('buf59', c0, {c0: 10368}, None),
        MemoryDep('buf60', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg55_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg57_1', c1, {c0: 10368, c1: 256}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (2654208, 1)
op62.sizes = ([8, 1296, 256], [])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
class op62_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1296*z0 + z1
    index3 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf58', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf59', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf60', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg57_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf62', get_index_6, add_2, None)
        return store


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.mm


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 10616832}, None)]
op64.unmet_dependencies = [MemoryDep('buf63', c0, {c0: 10616832}, None)]
op64.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 10368, c1: 1024}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (10616832, 1)
op64.sizes = ([10368, 1024], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[10368, 1024], stride=[1024, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1024], stride=[1327104, 36864, 1024, 1])
class op64_loop_body:
    var_ranges = {z0: 10368, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf63', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg59_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf64', get_index_4, mul_2, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
    buf65.users = [
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=True, is_weak=False),
    ]
]
op65.node.kernel = extern_kernels.mm


op66_op67_op69: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op66_op67_op69.writes = 
    [   MemoryDep('buf66', c0, {c0: 10368}, None),
        MemoryDep('buf67', 1312*c0 + c1, {c0: 8, c1: 1296}, None),
        MemoryDep('buf69', c0, {c0: 2654208}, None)]
op66_op67_op69.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 2654208}, None),
        MemoryDep('buf65', c0, {c0: 2654208}, None)]
op66_op67_op69.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg63_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg64_1', c1, {c0: 10368, c1: 256}, None)]
op66_op67_op69.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op66_op67_op69.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 10368}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 2654208}, None),
        MemoryDep('buf65', c0, {c0: 2654208}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 10368, c1: 256}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
    buf66.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (10368, 256)
op66.sizes = ([10368], [256])
buf65_layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
class op66_loop_body:
    var_ranges = {z0: 10368, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg62_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf57', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_4, getitem)
        return store_reduction
op66_op67_op69.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op67.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 2654208}, None),
        MemoryDep('buf65', c0, {c0: 2654208}, None)]
op67.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 10368, c1: 256}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
    buf67.users = [NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (10368, 256)
op67.sizes = ([8, 1296], [256])
buf65_layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
class op67_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg62_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf57', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf67', get_index_4, getitem_1)
        return store_reduction
op66_op67_op69.snodes[2] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 2654208}, None)]
op69.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 2654208}, None),
        MemoryDep('buf65', c0, {c0: 2654208}, None),
        MemoryDep('buf66', c0, {c0: 10368}, None),
        MemoryDep('buf67', 1312*c0 + c1, {c0: 8, c1: 1296}, None)]
op69.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg62_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg63_1', c1, {c0: 10368, c1: 256}, None),
        MemoryDep('arg64_1', c1, {c0: 10368, c1: 256}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (2654208, 1)
op69.sizes = ([8, 1296, 256], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[10368, 256], stride=[256, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 36, 36], stride=[331776, 1, 9216, 256])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1296, 36, 1, 10368])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 1], stride=[1312, 36, 1, 10496])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 36, 36, 256], stride=[331776, 9216, 256, 1])
class op69_loop_body:
    var_ranges = {z0: 8, z1: 1296, z2: 256}
    index0 = 331776*z0 + 256*z1 + z2
    index1 = z2
    index2 = 1296*z0 + z1
    index3 = 1312*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg62_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf57', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('buf67', get_index_5)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg63_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg64_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf69', get_index_8, add_3, None)
        return store


op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', 1024*c0 + c1 + 256*c2, {c0: 512, c1: 256, c2: 4}, None)]
op70.unmet_dependencies = []
op70.met_dependencies = [MemoryDep('arg65_1', c0, {c0: 524288}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 2, 2], stride=[1024, 1, 512, 256])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (524288, 1)
op70.sizes = ([512, 256, 4], [])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 2, 2], stride=[1024, 4, 2, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 2, 2], stride=[1024, 1, 512, 256])
class op70_loop_body:
    var_ranges = {z0: 512, z1: 256, z2: 4}
    index0 = 1024*z0 + 4*z1 + z2
    index1 = 1024*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg65_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf70', get_index_1, load, None)
        return store


op71: ExternKernelSchedulerNode(ExternKernelAlloc)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf69', mode=None), StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ExternKernelAlloc
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf71.users = [NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False)]
]
op71.node.kernel = extern_kernels.convolution


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 1327104}, None)]
op72.unmet_dependencies = [MemoryDep('buf71', c0, {c0: 1327104}, None)]
op72.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 2592, c1: 512}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op72.group.device = cuda:0
op72.group.iteration = (1327104, 1)
op72.sizes = ([2592, 512], [])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op72_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf71', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf72', get_index_2, add, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelAlloc)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelAlloc
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf73.users = [
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False),
    ]
]
op73.node.kernel = extern_kernels.convolution


op74_op75_op77: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op74_op75_op77.writes = 
    [   MemoryDep('buf74', c0, {c0: 2592}, None),
        MemoryDep('buf75', c0, {c0: 2592}, None),
        MemoryDep('buf77', c0, {c0: 1327104}, None)]
op74_op75_op77.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 1327104}, None)]
op74_op75_op77.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 2592, c1: 512}, None)]
op74_op75_op77.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op74_op75_op77.snodes[0] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 2592}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 1327104}, None)]
op74.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 2592, c1: 512}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf74.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (2592, 512)
op74.sizes = ([2592], [512])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op74_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf74', get_index_2, getitem)
        return store_reduction
op74_op75_op77.snodes[1] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 2592}, None)]
op75.unmet_dependencies = [MemoryDep('buf73', c0, {c0: 1327104}, None)]
op75.met_dependencies = [MemoryDep('arg68_1', c1, {c0: 2592, c1: 512}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (2592, 512)
op75.sizes = ([2592], [512])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op75_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf75', get_index_2, getitem_1)
        return store_reduction
op74_op75_op77.snodes[2] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 1327104}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf73', c0, {c0: 1327104}, None),
        MemoryDep('buf74', c0, {c0: 2592}, None),
        MemoryDep('buf75', c0, {c0: 2592}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg68_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg70_1', c1, {c0: 2592, c1: 512}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (1327104, 1)
op77.sizes = ([2592, 512], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op77_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg68_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf74', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf75', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg69_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg70_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf77', get_index_6, add_2, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 5308416}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 5308416}, None)]
op79.met_dependencies = [MemoryDep('arg72_1', c1, {c0: 2592, c1: 2048}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (5308416, 1)
op79.sizes = ([2592, 2048], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op79_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg72_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf79', get_index_4, mul_2, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg73_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 1327104}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 1327104}, None),
        MemoryDep('buf80', c0, {c0: 1327104}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 2592, c1: 512}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (1327104, 1)
op81.sizes = ([2592, 512], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op81_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg74_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg75_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf72', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf81', get_index_4, add_1, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.convolution


op83_op84_op86: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op83_op84_op86.writes = 
    [   MemoryDep('buf83', c0, {c0: 2592}, None),
        MemoryDep('buf84', c0, {c0: 2592}, None),
        MemoryDep('buf86', c0, {c0: 1327104}, None)]
op83_op84_op86.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1327104}, None)]
op83_op84_op86.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg78_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg79_1', c1, {c0: 2592, c1: 512}, None)]
op83_op84_op86.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf83.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op83_op84_op86.snodes[0] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 2592}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1327104}, None)]
op83.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 2592, c1: 512}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf83.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (2592, 512)
op83.sizes = ([2592], [512])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op83_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_2, getitem)
        return store_reduction
op83_op84_op86.snodes[1] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 2592}, None)]
op84.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 1327104}, None)]
op84.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 2592, c1: 512}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (2592, 512)
op84.sizes = ([2592], [512])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op84_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_2, getitem_1)
        return store_reduction
op83_op84_op86.snodes[2] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1327104}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 1327104}, None),
        MemoryDep('buf83', c0, {c0: 2592}, None),
        MemoryDep('buf84', c0, {c0: 2592}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg78_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg79_1', c1, {c0: 2592, c1: 512}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (1327104, 1)
op86.sizes = ([2592, 512], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op86_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg78_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg79_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf86', get_index_6, add_2, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg80_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.mm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 5308416}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 5308416}, None)]
op88.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 2592, c1: 2048}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (5308416, 1)
op88.sizes = ([2592, 2048], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op88_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf87', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf88', get_index_4, mul_2, None)
        return store


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf89.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False)]
]
op89.node.kernel = extern_kernels.mm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1327104}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 1327104}, None),
        MemoryDep('buf89', c0, {c0: 1327104}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg84_1', c1, {c0: 2592, c1: 512}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf90.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False),
    ]
]
op90.group.device = cuda:0
op90.group.iteration = (1327104, 1)
op90.sizes = ([2592, 512], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op90_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg84_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf81', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf90', get_index_4, add_1, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelAlloc)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelAlloc
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op91.node.kernel = extern_kernels.convolution


op92_op93_op95: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op92_op93_op95.writes = 
    [   MemoryDep('buf92', c0, {c0: 2592}, None),
        MemoryDep('buf93', c0, {c0: 2592}, None),
        MemoryDep('buf95', c0, {c0: 1327104}, None)]
op92_op93_op95.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 1327104}, None)]
op92_op93_op95.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg88_1', c1, {c0: 2592, c1: 512}, None)]
op92_op93_op95.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op92_op93_op95.snodes[0] =
op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 2592}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 1327104}, None)]
op92.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 2592, c1: 512}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf92.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (2592, 512)
op92.sizes = ([2592], [512])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op92_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf92', get_index_2, getitem)
        return store_reduction
op92_op93_op95.snodes[1] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2592}, None)]
op93.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 1327104}, None)]
op93.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 2592, c1: 512}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf93.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2592, 512)
op93.sizes = ([2592], [512])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op93_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf93', get_index_2, getitem_1)
        return store_reduction
op92_op93_op95.snodes[2] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 1327104}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf91', c0, {c0: 1327104}, None),
        MemoryDep('buf92', c0, {c0: 2592}, None),
        MemoryDep('buf93', c0, {c0: 2592}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg88_1', c1, {c0: 2592, c1: 512}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (1327104, 1)
op95.sizes = ([2592, 512], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op95_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf92', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf93', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg87_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg88_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf95', get_index_6, add_2, None)
        return store


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 5308416}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 5308416}, None)]
op97.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 2592, c1: 2048}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (5308416, 1)
op97.sizes = ([2592, 2048], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op97_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg90_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf97', get_index_4, mul_2, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.mm


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1327104}, None)]
op99.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 1327104}, None),
        MemoryDep('buf98', c0, {c0: 1327104}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg93_1', c1, {c0: 2592, c1: 512}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf99.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False),
    ]
]
op99.group.device = cuda:0
op99.group.iteration = (1327104, 1)
op99.sizes = ([2592, 512], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op99_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf90', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf99', get_index_4, add_1, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelAlloc)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf99', mode=None)]
op100.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelAlloc
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf100.users = [
        NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=True, is_weak=False),
    ]
]
op100.node.kernel = extern_kernels.convolution


op101_op102_op104: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op101_op102_op104.writes = 
    [   MemoryDep('buf101', c0, {c0: 2592}, None),
        MemoryDep('buf102', c0, {c0: 2592}, None),
        MemoryDep('buf104', c0, {c0: 1327104}, None)]
op101_op102_op104.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 1327104}, None)]
op101_op102_op104.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg96_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg97_1', c1, {c0: 2592, c1: 512}, None)]
op101_op102_op104.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf101.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op101_op102_op104.snodes[0] =
op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 2592}, None)]
op101.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 1327104}, None)]
op101.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 2592, c1: 512}, None)]
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf101.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (2592, 512)
op101.sizes = ([2592], [512])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op101_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf101', get_index_2, getitem)
        return store_reduction
op101_op102_op104.snodes[1] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 2592}, None)]
op102.unmet_dependencies = [MemoryDep('buf100', c0, {c0: 1327104}, None)]
op102.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 2592, c1: 512}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf102.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (2592, 512)
op102.sizes = ([2592], [512])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op102_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf102', get_index_2, getitem_1)
        return store_reduction
op101_op102_op104.snodes[2] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 1327104}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 1327104}, None),
        MemoryDep('buf101', c0, {c0: 2592}, None),
        MemoryDep('buf102', c0, {c0: 2592}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg95_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg96_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg97_1', c1, {c0: 2592, c1: 512}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf104.users = [NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (1327104, 1)
op104.sizes = ([2592, 512], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op104_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf101', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf102', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg96_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg97_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf104', get_index_6, add_2, None)
        return store


op105: ExternKernelSchedulerNode(ExternKernelOut)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op105.outputs = [
    buf105: ExternKernelOut
    buf105.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False)]
]
op105.node.kernel = extern_kernels.mm


op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 5308416}, None)]
op106.unmet_dependencies = [MemoryDep('buf105', c0, {c0: 5308416}, None)]
op106.met_dependencies = [MemoryDep('arg99_1', c1, {c0: 2592, c1: 2048}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (5308416, 1)
op106.sizes = ([2592, 2048], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op106_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf105', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg99_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf105', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf106', get_index_4, mul_2, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 1327104}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf107', c0, {c0: 1327104}, None),
        MemoryDep('buf99', c0, {c0: 1327104}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg102_1', c1, {c0: 2592, c1: 512}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf108.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (1327104, 1)
op108.sizes = ([2592, 512], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op108_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg102_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf99', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf108', get_index_4, add_1, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelAlloc)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg103_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelAlloc
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf109.users = [
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op109.node.kernel = extern_kernels.convolution


op110_op111_op113: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op110_op111_op113.writes = 
    [   MemoryDep('buf110', c0, {c0: 2592}, None),
        MemoryDep('buf111', c0, {c0: 2592}, None),
        MemoryDep('buf113', c0, {c0: 1327104}, None)]
op110_op111_op113.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 1327104}, None)]
op110_op111_op113.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg106_1', c1, {c0: 2592, c1: 512}, None)]
op110_op111_op113.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf111.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op110_op111_op113.snodes[0] =
op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 2592}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 1327104}, None)]
op110.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 2592, c1: 512}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf110.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (2592, 512)
op110.sizes = ([2592], [512])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op110_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf110', get_index_2, getitem)
        return store_reduction
op110_op111_op113.snodes[1] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 2592}, None)]
op111.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 1327104}, None)]
op111.met_dependencies = [MemoryDep('arg104_1', c1, {c0: 2592, c1: 512}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf111.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (2592, 512)
op111.sizes = ([2592], [512])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op111_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf111', get_index_2, getitem_1)
        return store_reduction
op110_op111_op113.snodes[2] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 1327104}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf109', c0, {c0: 1327104}, None),
        MemoryDep('buf110', c0, {c0: 2592}, None),
        MemoryDep('buf111', c0, {c0: 2592}, None)]
op113.met_dependencies = 
    [   MemoryDep('arg104_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg106_1', c1, {c0: 2592, c1: 512}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (1327104, 1)
op113.sizes = ([2592, 512], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op113_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg104_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf110', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf111', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg106_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf113', get_index_6, add_2, None)
        return store


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf114.users = [NodeUser(node=SchedulerNode(name='op115'), can_inplace=True, is_weak=False)]
]
op114.node.kernel = extern_kernels.mm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 5308416}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 5308416}, None)]
op115.met_dependencies = [MemoryDep('arg108_1', c1, {c0: 2592, c1: 2048}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf115.users = [NodeUser(node=ExternKernelSchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (5308416, 1)
op115.sizes = ([2592, 2048], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op115_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg108_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf114', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf115', get_index_4, mul_2, None)
        return store


op116: ExternKernelSchedulerNode(ExternKernelOut)
op116.writes = [StarDep(name='buf116', mode=None)]
op116.unmet_dependencies = [StarDep(name='buf115', mode=None)]
op116.met_dependencies = [StarDep(name='arg109_1', mode=None)]
op116.outputs = [
    buf116: ExternKernelOut
    buf116.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=True, is_weak=False)]
]
op116.node.kernel = extern_kernels.mm


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 1327104}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 1327104}, None),
        MemoryDep('buf116', c0, {c0: 1327104}, None)]
op117.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg111_1', c1, {c0: 2592, c1: 512}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf117.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (1327104, 1)
op117.sizes = ([2592, 512], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op117_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg110_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg111_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf108', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf117', get_index_4, add_1, None)
        return store


op118: ExternKernelSchedulerNode(ExternKernelAlloc)
op118.writes = [StarDep(name='buf118', mode=None)]
op118.unmet_dependencies = [StarDep(name='buf117', mode=None)]
op118.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op118.outputs = [
    buf118: ExternKernelAlloc
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False),
    ]
]
op118.node.kernel = extern_kernels.convolution


op119_op120_op122: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op119_op120_op122.writes = 
    [   MemoryDep('buf119', c0, {c0: 2592}, None),
        MemoryDep('buf120', c0, {c0: 2592}, None),
        MemoryDep('buf122', c0, {c0: 1327104}, None)]
op119_op120_op122.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 1327104}, None)]
op119_op120_op122.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg114_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg115_1', c1, {c0: 2592, c1: 512}, None)]
op119_op120_op122.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op119_op120_op122.snodes[0] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 2592}, None)]
op119.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 1327104}, None)]
op119.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 2592, c1: 512}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf119.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op119.group.device = cuda:0
op119.group.iteration = (2592, 512)
op119.sizes = ([2592], [512])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op119_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_2, getitem)
        return store_reduction
op119_op120_op122.snodes[1] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2592}, None)]
op120.unmet_dependencies = [MemoryDep('buf118', c0, {c0: 1327104}, None)]
op120.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 2592, c1: 512}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf120.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (2592, 512)
op120.sizes = ([2592], [512])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op120_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_2, getitem_1)
        return store_reduction
op119_op120_op122.snodes[2] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1327104}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 1327104}, None),
        MemoryDep('buf119', c0, {c0: 2592}, None),
        MemoryDep('buf120', c0, {c0: 2592}, None)]
op122.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg114_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg115_1', c1, {c0: 2592, c1: 512}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1327104, 1)
op122.sizes = ([2592, 512], [])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op122_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf119', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf120', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg115_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf122', get_index_6, add_2, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 5308416}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 5308416}, None)]
op124.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 2592, c1: 2048}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (5308416, 1)
op124.sizes = ([2592, 2048], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op124_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf123', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf124', get_index_4, mul_2, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1327104}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 1327104}, None),
        MemoryDep('buf125', c0, {c0: 1327104}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg120_1', c1, {c0: 2592, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (1327104, 1)
op126.sizes = ([2592, 512], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op126_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg120_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf117', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf126', get_index_4, add_1, None)
        return store


op127: ExternKernelSchedulerNode(ExternKernelAlloc)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelAlloc
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf127.users = [
        NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
    ]
]
op127.node.kernel = extern_kernels.convolution


op128_op129_op131: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op128_op129_op131.writes = 
    [   MemoryDep('buf128', c0, {c0: 2592}, None),
        MemoryDep('buf129', c0, {c0: 2592}, None),
        MemoryDep('buf131', c0, {c0: 1327104}, None)]
op128_op129_op131.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1327104}, None)]
op128_op129_op131.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg123_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg124_1', c1, {c0: 2592, c1: 512}, None)]
op128_op129_op131.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op128_op129_op131.snodes[0] =
op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 2592}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1327104}, None)]
op128.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 2592, c1: 512}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf128.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (2592, 512)
op128.sizes = ([2592], [512])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op128_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf128', get_index_2, getitem)
        return store_reduction
op128_op129_op131.snodes[1] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 2592}, None)]
op129.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 1327104}, None)]
op129.met_dependencies = [MemoryDep('arg122_1', c1, {c0: 2592, c1: 512}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf129.users = [NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (2592, 512)
op129.sizes = ([2592], [512])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op129_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_2, getitem_1)
        return store_reduction
op128_op129_op131.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 1327104}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf127', c0, {c0: 1327104}, None),
        MemoryDep('buf128', c0, {c0: 2592}, None),
        MemoryDep('buf129', c0, {c0: 2592}, None)]
op131.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg123_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg124_1', c1, {c0: 2592, c1: 512}, None)]
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (1327104, 1)
op131.sizes = ([2592, 512], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf129_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op131_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf128', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf129', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg124_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf131', get_index_6, add_2, None)
        return store


op132: ExternKernelSchedulerNode(ExternKernelOut)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = [StarDep(name='buf131', mode=None)]
op132.met_dependencies = [StarDep(name='arg125_1', mode=None)]
op132.outputs = [
    buf132: ExternKernelOut
    buf132.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf132.users = [NodeUser(node=SchedulerNode(name='op133'), can_inplace=True, is_weak=False)]
]
op132.node.kernel = extern_kernels.mm


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 5308416}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 5308416}, None)]
op133.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 2592, c1: 2048}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (5308416, 1)
op133.sizes = ([2592, 2048], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op133_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf133', get_index_4, mul_2, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op134.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=True, is_weak=False)]
]
op134.node.kernel = extern_kernels.mm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 1327104}, None)]
op135.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 1327104}, None),
        MemoryDep('buf134', c0, {c0: 1327104}, None)]
op135.met_dependencies = 
    [   MemoryDep('arg128_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg129_1', c1, {c0: 2592, c1: 512}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf135.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False),
    ]
]
op135.group.device = cuda:0
op135.group.iteration = (1327104, 1)
op135.sizes = ([2592, 512], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op135_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg129_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf126', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf135', get_index_4, add_1, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelAlloc)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelAlloc
    buf136.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.convolution


op137_op138_op140: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op140.writes = 
    [   MemoryDep('buf137', c0, {c0: 2592}, None),
        MemoryDep('buf138', c0, {c0: 2592}, None),
        MemoryDep('buf140', c0, {c0: 1327104}, None)]
op137_op138_op140.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 1327104}, None)]
op137_op138_op140.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg132_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg133_1', c1, {c0: 2592, c1: 512}, None)]
op137_op138_op140.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op137_op138_op140.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 2592}, None)]
op137.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 1327104}, None)]
op137.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 2592, c1: 512}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf137.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op137.group.device = cuda:0
op137.group.iteration = (2592, 512)
op137.sizes = ([2592], [512])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op137_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf137', get_index_2, getitem)
        return store_reduction
op137_op138_op140.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2592}, None)]
op138.unmet_dependencies = [MemoryDep('buf136', c0, {c0: 1327104}, None)]
op138.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 2592, c1: 512}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf138.users = [NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2592, 512)
op138.sizes = ([2592], [512])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op138_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf138', get_index_2, getitem_1)
        return store_reduction
op137_op138_op140.snodes[2] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 1327104}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf136', c0, {c0: 1327104}, None),
        MemoryDep('buf137', c0, {c0: 2592}, None),
        MemoryDep('buf138', c0, {c0: 2592}, None)]
op140.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg132_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg133_1', c1, {c0: 2592, c1: 512}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf140.users = [NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1327104, 1)
op140.sizes = ([2592, 512], [])
buf136_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op140_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf136', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf137', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf138', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg133_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf140', get_index_6, add_2, None)
        return store


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf140', mode=None)]
op141.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op142'), can_inplace=True, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 5308416}, None)]
op142.unmet_dependencies = [MemoryDep('buf141', c0, {c0: 5308416}, None)]
op142.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 2592, c1: 2048}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (5308416, 1)
op142.sizes = ([2592, 2048], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op142_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf141', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg135_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf142', get_index_4, mul_2, None)
        return store


op143: ExternKernelSchedulerNode(ExternKernelOut)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelOut
    buf143.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf143.users = [NodeUser(node=SchedulerNode(name='op144'), can_inplace=True, is_weak=False)]
]
op143.node.kernel = extern_kernels.mm


op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 1327104}, None)]
op144.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 1327104}, None),
        MemoryDep('buf143', c0, {c0: 1327104}, None)]
op144.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg138_1', c1, {c0: 2592, c1: 512}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf144.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op145'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False),
    ]
]
op144.group.device = cuda:0
op144.group.iteration = (1327104, 1)
op144.sizes = ([2592, 512], [])
buf143_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op144_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf143', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf135', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf144', get_index_4, add_1, None)
        return store


op145: ExternKernelSchedulerNode(ExternKernelAlloc)
op145.writes = [StarDep(name='buf145', mode=None)]
op145.unmet_dependencies = [StarDep(name='buf144', mode=None)]
op145.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op145.outputs = [
    buf145: ExternKernelAlloc
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf145.users = [
        NodeUser(node=SchedulerNode(name='op146'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False),
    ]
]
op145.node.kernel = extern_kernels.convolution


op146_op147_op149: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op146_op147_op149.writes = 
    [   MemoryDep('buf146', c0, {c0: 2592}, None),
        MemoryDep('buf147', c0, {c0: 2592}, None),
        MemoryDep('buf149', c0, {c0: 1327104}, None)]
op146_op147_op149.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 1327104}, None)]
op146_op147_op149.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg141_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg142_1', c1, {c0: 2592, c1: 512}, None)]
op146_op147_op149.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op146_op147_op149.snodes[0] =
op146: SchedulerNode(ComputedBuffer)
op146.writes = [MemoryDep('buf146', c0, {c0: 2592}, None)]
op146.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 1327104}, None)]
op146.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 2592, c1: 512}, None)]
op146.outputs = [
    buf146: ComputedBuffer
    buf146.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf146.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op146.group.device = cuda:0
op146.group.iteration = (2592, 512)
op146.sizes = ([2592], [512])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op146_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf146', get_index_2, getitem)
        return store_reduction
op146_op147_op149.snodes[1] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2592}, None)]
op147.unmet_dependencies = [MemoryDep('buf145', c0, {c0: 1327104}, None)]
op147.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 2592, c1: 512}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf147.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (2592, 512)
op147.sizes = ([2592], [512])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op147_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_2, getitem_1)
        return store_reduction
op146_op147_op149.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1327104}, None)]
op149.unmet_dependencies = 
    [   MemoryDep('buf145', c0, {c0: 1327104}, None),
        MemoryDep('buf146', c0, {c0: 2592}, None),
        MemoryDep('buf147', c0, {c0: 2592}, None)]
op149.met_dependencies = 
    [   MemoryDep('arg140_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg141_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg142_1', c1, {c0: 2592, c1: 512}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1327104, 1)
op149.sizes = ([2592, 512], [])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op149_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf145', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf146', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf147', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg141_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg142_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf149', get_index_6, add_2, None)
        return store


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 5308416}, None)]
op151.unmet_dependencies = [MemoryDep('buf150', c0, {c0: 5308416}, None)]
op151.met_dependencies = [MemoryDep('arg144_1', c1, {c0: 2592, c1: 2048}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (5308416, 1)
op151.sizes = ([2592, 2048], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op151_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg144_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf150', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf151', get_index_4, mul_2, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg145_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1327104}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 1327104}, None),
        MemoryDep('buf152', c0, {c0: 1327104}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg147_1', c1, {c0: 2592, c1: 512}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf153.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False),
    ]
]
op153.group.device = cuda:0
op153.group.iteration = (1327104, 1)
op153.sizes = ([2592, 512], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op153_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg147_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf144', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf153', get_index_4, add_1, None)
        return store


op154: ExternKernelSchedulerNode(ExternKernelAlloc)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelAlloc
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf154.users = [
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
    ]
]
op154.node.kernel = extern_kernels.convolution


op155_op156_op158: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op155_op156_op158.writes = 
    [   MemoryDep('buf155', c0, {c0: 2592}, None),
        MemoryDep('buf156', c0, {c0: 2592}, None),
        MemoryDep('buf158', c0, {c0: 1327104}, None)]
op155_op156_op158.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1327104}, None)]
op155_op156_op158.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg150_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg151_1', c1, {c0: 2592, c1: 512}, None)]
op155_op156_op158.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op155_op156_op158.snodes[0] =
op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 2592}, None)]
op155.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1327104}, None)]
op155.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 2592, c1: 512}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf155.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (2592, 512)
op155.sizes = ([2592], [512])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op155_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_2, getitem)
        return store_reduction
op155_op156_op158.snodes[1] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 2592}, None)]
op156.unmet_dependencies = [MemoryDep('buf154', c0, {c0: 1327104}, None)]
op156.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 2592, c1: 512}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf156.users = [NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (2592, 512)
op156.sizes = ([2592], [512])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op156_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf156', get_index_2, getitem_1)
        return store_reduction
op155_op156_op158.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 1327104}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf154', c0, {c0: 1327104}, None),
        MemoryDep('buf155', c0, {c0: 2592}, None),
        MemoryDep('buf156', c0, {c0: 2592}, None)]
op158.met_dependencies = 
    [   MemoryDep('arg149_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg150_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg151_1', c1, {c0: 2592, c1: 512}, None)]
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf158.users = [NodeUser(node=ExternKernelSchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (1327104, 1)
op158.sizes = ([2592, 512], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op158_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf155', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf156', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg150_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg151_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf158', get_index_6, add_2, None)
        return store


op159: ExternKernelSchedulerNode(ExternKernelOut)
op159.writes = [StarDep(name='buf159', mode=None)]
op159.unmet_dependencies = [StarDep(name='buf158', mode=None)]
op159.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op159.outputs = [
    buf159: ExternKernelOut
    buf159.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf159.users = [NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False)]
]
op159.node.kernel = extern_kernels.mm


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 5308416}, None)]
op160.unmet_dependencies = [MemoryDep('buf159', c0, {c0: 5308416}, None)]
op160.met_dependencies = [MemoryDep('arg153_1', c1, {c0: 2592, c1: 2048}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (5308416, 1)
op160.sizes = ([2592, 2048], [])
buf159_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op160_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf159', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf159', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg153_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf160', get_index_4, mul_2, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf160', mode=None)]
op161.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=True, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 1327104}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1327104}, None),
        MemoryDep('buf161', c0, {c0: 1327104}, None)]
op162.met_dependencies = 
    [   MemoryDep('arg155_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg156_1', c1, {c0: 2592, c1: 512}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf162.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op162.group.device = cuda:0
op162.group.iteration = (1327104, 1)
op162.sizes = ([2592, 512], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op162_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg156_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf153', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf162', get_index_4, add_1, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelAlloc)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg157_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelAlloc
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
    ]
]
op163.node.kernel = extern_kernels.convolution


op164_op165_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op164_op165_op167.writes = 
    [   MemoryDep('buf164', c0, {c0: 2592}, None),
        MemoryDep('buf165', c0, {c0: 2592}, None),
        MemoryDep('buf167', c0, {c0: 1327104}, None)]
op164_op165_op167.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 1327104}, None)]
op164_op165_op167.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg159_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg160_1', c1, {c0: 2592, c1: 512}, None)]
op164_op165_op167.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op164_op165_op167.snodes[0] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 2592}, None)]
op164.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 1327104}, None)]
op164.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 2592, c1: 512}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (2592, 512)
op164.sizes = ([2592], [512])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op164_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_2, getitem)
        return store_reduction
op164_op165_op167.snodes[1] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 2592}, None)]
op165.unmet_dependencies = [MemoryDep('buf163', c0, {c0: 1327104}, None)]
op165.met_dependencies = [MemoryDep('arg158_1', c1, {c0: 2592, c1: 512}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (2592, 512)
op165.sizes = ([2592], [512])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op165_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf165', get_index_2, getitem_1)
        return store_reduction
op164_op165_op167.snodes[2] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 1327104}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf163', c0, {c0: 1327104}, None),
        MemoryDep('buf164', c0, {c0: 2592}, None),
        MemoryDep('buf165', c0, {c0: 2592}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg159_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg160_1', c1, {c0: 2592, c1: 512}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (1327104, 1)
op167.sizes = ([2592, 512], [])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op167_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf163', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg158_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf164', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf165', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg159_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf167', get_index_6, add_2, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 5308416}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 5308416}, None)]
op169.met_dependencies = [MemoryDep('arg162_1', c1, {c0: 2592, c1: 2048}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (5308416, 1)
op169.sizes = ([2592, 2048], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op169_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf168', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg162_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf169', get_index_4, mul_2, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg163_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1327104}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 1327104}, None),
        MemoryDep('buf170', c0, {c0: 1327104}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg164_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg165_1', c1, {c0: 2592, c1: 512}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf171.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (1327104, 1)
op171.sizes = ([2592, 512], [])
buf170_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op171_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf170', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg164_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg165_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf162', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf171', get_index_4, add_1, None)
        return store


op172: ExternKernelSchedulerNode(ExternKernelAlloc)
op172.writes = [StarDep(name='buf172', mode=None)]
op172.unmet_dependencies = [StarDep(name='buf171', mode=None)]
op172.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op172.outputs = [
    buf172: ExternKernelAlloc
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf172.users = [
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False),
    ]
]
op172.node.kernel = extern_kernels.convolution


op173_op174_op176: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op173_op174_op176.writes = 
    [   MemoryDep('buf173', c0, {c0: 2592}, None),
        MemoryDep('buf174', c0, {c0: 2592}, None),
        MemoryDep('buf176', c0, {c0: 1327104}, None)]
op173_op174_op176.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1327104}, None)]
op173_op174_op176.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg168_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg169_1', c1, {c0: 2592, c1: 512}, None)]
op173_op174_op176.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op173_op174_op176.snodes[0] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 2592}, None)]
op173.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1327104}, None)]
op173.met_dependencies = [MemoryDep('arg167_1', c1, {c0: 2592, c1: 512}, None)]
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf173.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (2592, 512)
op173.sizes = ([2592], [512])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op173_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf173', get_index_2, getitem)
        return store_reduction
op173_op174_op176.snodes[1] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 2592}, None)]
op174.unmet_dependencies = [MemoryDep('buf172', c0, {c0: 1327104}, None)]
op174.met_dependencies = [MemoryDep('arg167_1', c1, {c0: 2592, c1: 512}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf174.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (2592, 512)
op174.sizes = ([2592], [512])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op174_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf174', get_index_2, getitem_1)
        return store_reduction
op173_op174_op176.snodes[2] =
op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 1327104}, None)]
op176.unmet_dependencies = 
    [   MemoryDep('buf172', c0, {c0: 1327104}, None),
        MemoryDep('buf173', c0, {c0: 2592}, None),
        MemoryDep('buf174', c0, {c0: 2592}, None)]
op176.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg168_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg169_1', c1, {c0: 2592, c1: 512}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (1327104, 1)
op176.sizes = ([2592, 512], [])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op176_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf172', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf173', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf174', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg168_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg169_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf176', get_index_6, add_2, None)
        return store


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 5308416}, None)]
op178.unmet_dependencies = [MemoryDep('buf177', c0, {c0: 5308416}, None)]
op178.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 2592, c1: 2048}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (5308416, 1)
op178.sizes = ([2592, 2048], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op178_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf177', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg171_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf178', get_index_4, mul_2, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 1327104}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 1327104}, None),
        MemoryDep('buf179', c0, {c0: 1327104}, None)]
op180.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg174_1', c1, {c0: 2592, c1: 512}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf180.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op180.group.device = cuda:0
op180.group.iteration = (1327104, 1)
op180.sizes = ([2592, 512], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op180_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg174_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf171', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf180', get_index_4, add_1, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelAlloc)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelAlloc
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op185'), can_inplace=True, is_weak=False),
    ]
]
op181.node.kernel = extern_kernels.convolution


op182_op183_op185: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op182_op183_op185.writes = 
    [   MemoryDep('buf182', c0, {c0: 2592}, None),
        MemoryDep('buf183', c0, {c0: 2592}, None),
        MemoryDep('buf185', c0, {c0: 1327104}, None)]
op182_op183_op185.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 1327104}, None)]
op182_op183_op185.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg177_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg178_1', c1, {c0: 2592, c1: 512}, None)]
op182_op183_op185.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op182_op183_op185.snodes[0] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 2592}, None)]
op182.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 1327104}, None)]
op182.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 2592, c1: 512}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf182.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (2592, 512)
op182.sizes = ([2592], [512])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op182_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf182', get_index_2, getitem)
        return store_reduction
op182_op183_op185.snodes[1] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 2592}, None)]
op183.unmet_dependencies = [MemoryDep('buf181', c0, {c0: 1327104}, None)]
op183.met_dependencies = [MemoryDep('arg176_1', c1, {c0: 2592, c1: 512}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf183.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (2592, 512)
op183.sizes = ([2592], [512])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op183_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf183', get_index_2, getitem_1)
        return store_reduction
op182_op183_op185.snodes[2] =
op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 1327104}, None)]
op185.unmet_dependencies = 
    [   MemoryDep('buf181', c0, {c0: 1327104}, None),
        MemoryDep('buf182', c0, {c0: 2592}, None),
        MemoryDep('buf183', c0, {c0: 2592}, None)]
op185.met_dependencies = 
    [   MemoryDep('arg176_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg177_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg178_1', c1, {c0: 2592, c1: 512}, None)]
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (1327104, 1)
op185.sizes = ([2592, 512], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op185_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg176_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf182', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf183', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg177_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg178_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf185', get_index_6, add_2, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 5308416}, None)]
op187.unmet_dependencies = [MemoryDep('buf186', c0, {c0: 5308416}, None)]
op187.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 2592, c1: 2048}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (5308416, 1)
op187.sizes = ([2592, 2048], [])
buf186_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op187_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf186', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf186', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg180_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf187', get_index_4, mul_2, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelOut)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf187', mode=None)]
op188.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op188.outputs = [
    buf188: ExternKernelOut
    buf188.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.mm


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1327104}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf180', c0, {c0: 1327104}, None),
        MemoryDep('buf188', c0, {c0: 1327104}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg183_1', c1, {c0: 2592, c1: 512}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (1327104, 1)
op189.sizes = ([2592, 512], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op189_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf180', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf189', get_index_4, add_1, None)
        return store


op190: ExternKernelSchedulerNode(ExternKernelAlloc)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelAlloc
    buf190.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf190.users = [
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op192'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=True, is_weak=False),
    ]
]
op190.node.kernel = extern_kernels.convolution


op191_op192_op194: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op191_op192_op194.writes = 
    [   MemoryDep('buf191', c0, {c0: 2592}, None),
        MemoryDep('buf192', c0, {c0: 2592}, None),
        MemoryDep('buf194', c0, {c0: 1327104}, None)]
op191_op192_op194.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 1327104}, None)]
op191_op192_op194.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg186_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg187_1', c1, {c0: 2592, c1: 512}, None)]
op191_op192_op194.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op191_op192_op194.snodes[0] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 2592}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 1327104}, None)]
op191.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2592, c1: 512}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf191.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (2592, 512)
op191.sizes = ([2592], [512])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op191_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf191', get_index_2, getitem)
        return store_reduction
op191_op192_op194.snodes[1] =
op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 2592}, None)]
op192.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 1327104}, None)]
op192.met_dependencies = [MemoryDep('arg185_1', c1, {c0: 2592, c1: 512}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf192.users = [NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (2592, 512)
op192.sizes = ([2592], [512])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op192_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf192', get_index_2, getitem_1)
        return store_reduction
op191_op192_op194.snodes[2] =
op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 1327104}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf190', c0, {c0: 1327104}, None),
        MemoryDep('buf191', c0, {c0: 2592}, None),
        MemoryDep('buf192', c0, {c0: 2592}, None)]
op194.met_dependencies = 
    [   MemoryDep('arg185_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg186_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg187_1', c1, {c0: 2592, c1: 512}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf194.users = [NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (1327104, 1)
op194.sizes = ([2592, 512], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op194_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf191', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf192', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg186_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg187_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf194', get_index_6, add_2, None)
        return store


op195: ExternKernelSchedulerNode(ExternKernelOut)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op195.outputs = [
    buf195: ExternKernelOut
    buf195.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.node.kernel = extern_kernels.mm


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 5308416}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 5308416}, None)]
op196.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 2592, c1: 2048}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (5308416, 1)
op196.sizes = ([2592, 2048], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op196_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf195', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf196', get_index_4, mul_2, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.mm


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 1327104}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 1327104}, None),
        MemoryDep('buf197', c0, {c0: 1327104}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg192_1', c1, {c0: 2592, c1: 512}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf198.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False),
    ]
]
op198.group.device = cuda:0
op198.group.iteration = (1327104, 1)
op198.sizes = ([2592, 512], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op198_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg192_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf189', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf198', get_index_4, add_1, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg193_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf199.users = [
        NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False),
    ]
]
op199.node.kernel = extern_kernels.convolution


op200_op201_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op200_op201_op203.writes = 
    [   MemoryDep('buf200', c0, {c0: 2592}, None),
        MemoryDep('buf201', c0, {c0: 2592}, None),
        MemoryDep('buf203', c0, {c0: 1327104}, None)]
op200_op201_op203.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 1327104}, None)]
op200_op201_op203.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg196_1', c1, {c0: 2592, c1: 512}, None)]
op200_op201_op203.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op200_op201_op203.snodes[0] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 2592}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 1327104}, None)]
op200.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 2592, c1: 512}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf200.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (2592, 512)
op200.sizes = ([2592], [512])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op200_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf200', get_index_2, getitem)
        return store_reduction
op200_op201_op203.snodes[1] =
op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2592}, None)]
op201.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 1327104}, None)]
op201.met_dependencies = [MemoryDep('arg194_1', c1, {c0: 2592, c1: 512}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf201.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (2592, 512)
op201.sizes = ([2592], [512])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op201_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf201', get_index_2, getitem_1)
        return store_reduction
op200_op201_op203.snodes[2] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 1327104}, None)]
op203.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 1327104}, None),
        MemoryDep('buf200', c0, {c0: 2592}, None),
        MemoryDep('buf201', c0, {c0: 2592}, None)]
op203.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg196_1', c1, {c0: 2592, c1: 512}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (1327104, 1)
op203.sizes = ([2592, 512], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op203_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg194_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf200', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf201', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg196_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf203', get_index_6, add_2, None)
        return store


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg197_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 5308416}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 5308416}, None)]
op205.met_dependencies = [MemoryDep('arg198_1', c1, {c0: 2592, c1: 2048}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf205.users = [NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (5308416, 1)
op205.sizes = ([2592, 2048], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op205_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg198_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf204', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg198_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf205', get_index_4, mul_2, None)
        return store


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False)]
]
op206.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 1327104}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf198', c0, {c0: 1327104}, None),
        MemoryDep('buf206', c0, {c0: 1327104}, None)]
op207.met_dependencies = 
    [   MemoryDep('arg200_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg201_1', c1, {c0: 2592, c1: 512}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf207.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False),
    ]
]
op207.group.device = cuda:0
op207.group.iteration = (1327104, 1)
op207.sizes = ([2592, 512], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op207_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg201_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf198', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf207', get_index_4, add_1, None)
        return store


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf208.users = [
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
    ]
]
op208.node.kernel = extern_kernels.convolution


op209_op210_op212: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op209_op210_op212.writes = 
    [   MemoryDep('buf209', c0, {c0: 2592}, None),
        MemoryDep('buf210', c0, {c0: 2592}, None),
        MemoryDep('buf212', c0, {c0: 1327104}, None)]
op209_op210_op212.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 1327104}, None)]
op209_op210_op212.met_dependencies = 
    [   MemoryDep('arg203_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg204_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 2592, c1: 512}, None)]
op209_op210_op212.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf209.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op209_op210_op212.snodes[0] =
op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 2592}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 1327104}, None)]
op209.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 2592, c1: 512}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf209.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (2592, 512)
op209.sizes = ([2592], [512])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op209_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf209', get_index_2, getitem)
        return store_reduction
op209_op210_op212.snodes[1] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 2592}, None)]
op210.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 1327104}, None)]
op210.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 2592, c1: 512}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf210.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (2592, 512)
op210.sizes = ([2592], [512])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op210_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf210', get_index_2, getitem_1)
        return store_reduction
op209_op210_op212.snodes[2] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 1327104}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf208', c0, {c0: 1327104}, None),
        MemoryDep('buf209', c0, {c0: 2592}, None),
        MemoryDep('buf210', c0, {c0: 2592}, None)]
op212.met_dependencies = 
    [   MemoryDep('arg203_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg204_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 2592, c1: 512}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (1327104, 1)
op212.sizes = ([2592, 512], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op212_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf209', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf210', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg204_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg205_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf212', get_index_6, add_2, None)
        return store


op213: ExternKernelSchedulerNode(ExternKernelOut)
op213.writes = [StarDep(name='buf213', mode=None)]
op213.unmet_dependencies = [StarDep(name='buf212', mode=None)]
op213.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op213.outputs = [
    buf213: ExternKernelOut
    buf213.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf213.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False)]
]
op213.node.kernel = extern_kernels.mm


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 5308416}, None)]
op214.unmet_dependencies = [MemoryDep('buf213', c0, {c0: 5308416}, None)]
op214.met_dependencies = [MemoryDep('arg207_1', c1, {c0: 2592, c1: 2048}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (5308416, 1)
op214.sizes = ([2592, 2048], [])
buf213_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op214_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf213', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg207_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg207_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf214', get_index_4, mul_2, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf214', mode=None)]
op215.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 1327104}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf207', c0, {c0: 1327104}, None),
        MemoryDep('buf215', c0, {c0: 1327104}, None)]
op216.met_dependencies = 
    [   MemoryDep('arg209_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg210_1', c1, {c0: 2592, c1: 512}, None)]
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf216.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False),
    ]
]
op216.group.device = cuda:0
op216.group.iteration = (1327104, 1)
op216.sizes = ([2592, 512], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op216_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg210_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf207', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf216', get_index_4, add_1, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelAlloc)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelAlloc
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.convolution


op218_op219_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op218_op219_op221.writes = 
    [   MemoryDep('buf218', c0, {c0: 2592}, None),
        MemoryDep('buf219', c0, {c0: 2592}, None),
        MemoryDep('buf221', c0, {c0: 1327104}, None)]
op218_op219_op221.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1327104}, None)]
op218_op219_op221.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg214_1', c1, {c0: 2592, c1: 512}, None)]
op218_op219_op221.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op218_op219_op221.snodes[0] =
op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 2592}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1327104}, None)]
op218.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 2592, c1: 512}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (2592, 512)
op218.sizes = ([2592], [512])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op218_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_2, getitem)
        return store_reduction
op218_op219_op221.snodes[1] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 2592}, None)]
op219.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 1327104}, None)]
op219.met_dependencies = [MemoryDep('arg212_1', c1, {c0: 2592, c1: 512}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (2592, 512)
op219.sizes = ([2592], [512])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op219_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf219', get_index_2, getitem_1)
        return store_reduction
op218_op219_op221.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1327104}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf217', c0, {c0: 1327104}, None),
        MemoryDep('buf218', c0, {c0: 2592}, None),
        MemoryDep('buf219', c0, {c0: 2592}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg212_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg214_1', c1, {c0: 2592, c1: 512}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1327104, 1)
op221.sizes = ([2592, 512], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op221_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg212_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf218', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf219', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg213_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg214_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf221', get_index_6, add_2, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg215_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 5308416}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 5308416}, None)]
op223.met_dependencies = [MemoryDep('arg216_1', c1, {c0: 2592, c1: 2048}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (5308416, 1)
op223.sizes = ([2592, 2048], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op223_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg216_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg217_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf224.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=True, is_weak=False)]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 1327104}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf216', c0, {c0: 1327104}, None),
        MemoryDep('buf224', c0, {c0: 1327104}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg219_1', c1, {c0: 2592, c1: 512}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf225.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False),
    ]
]
op225.group.device = cuda:0
op225.group.iteration = (1327104, 1)
op225.sizes = ([2592, 512], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op225_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg218_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf216', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf225', get_index_4, add_1, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelAlloc)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op226.outputs = [
    buf226: ExternKernelAlloc
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf226.users = [
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
    ]
]
op226.node.kernel = extern_kernels.convolution


op227_op228_op230: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op227_op228_op230.writes = 
    [   MemoryDep('buf227', c0, {c0: 2592}, None),
        MemoryDep('buf228', c0, {c0: 2592}, None),
        MemoryDep('buf230', c0, {c0: 1327104}, None)]
op227_op228_op230.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1327104}, None)]
op227_op228_op230.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg222_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg223_1', c1, {c0: 2592, c1: 512}, None)]
op227_op228_op230.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf227.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op227_op228_op230.snodes[0] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 2592}, None)]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1327104}, None)]
op227.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 2592, c1: 512}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf227.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (2592, 512)
op227.sizes = ([2592], [512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op227_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf227', get_index_2, getitem)
        return store_reduction
op227_op228_op230.snodes[1] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 2592}, None)]
op228.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 1327104}, None)]
op228.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 2592, c1: 512}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf228.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (2592, 512)
op228.sizes = ([2592], [512])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op228_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf228', get_index_2, getitem_1)
        return store_reduction
op227_op228_op230.snodes[2] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 1327104}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf226', c0, {c0: 1327104}, None),
        MemoryDep('buf227', c0, {c0: 2592}, None),
        MemoryDep('buf228', c0, {c0: 2592}, None)]
op230.met_dependencies = 
    [   MemoryDep('arg221_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg222_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg223_1', c1, {c0: 2592, c1: 512}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (1327104, 1)
op230.sizes = ([2592, 512], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf228_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op230_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf227', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf228', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg222_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg223_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf230', get_index_6, add_2, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf230', mode=None)]
op231.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 5308416}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 5308416}, None)]
op232.met_dependencies = [MemoryDep('arg225_1', c1, {c0: 2592, c1: 2048}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (5308416, 1)
op232.sizes = ([2592, 2048], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op232_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf231', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg225_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf232', get_index_4, mul_2, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 1327104}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf225', c0, {c0: 1327104}, None),
        MemoryDep('buf233', c0, {c0: 1327104}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg227_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg228_1', c1, {c0: 2592, c1: 512}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf234.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op234.group.device = cuda:0
op234.group.iteration = (1327104, 1)
op234.sizes = ([2592, 512], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op234_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg228_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf225', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf234', get_index_4, add_1, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg229_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.convolution


op236_op237_op239: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op236_op237_op239.writes = 
    [   MemoryDep('buf236', c0, {c0: 2592}, None),
        MemoryDep('buf237', c0, {c0: 2592}, None),
        MemoryDep('buf239', c0, {c0: 1327104}, None)]
op236_op237_op239.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 1327104}, None)]
op236_op237_op239.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg231_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg232_1', c1, {c0: 2592, c1: 512}, None)]
op236_op237_op239.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op236_op237_op239.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 2592}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 1327104}, None)]
op236.met_dependencies = [MemoryDep('arg230_1', c1, {c0: 2592, c1: 512}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (2592, 512)
op236.sizes = ([2592], [512])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op236_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_2, getitem)
        return store_reduction
op236_op237_op239.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 2592}, None)]
op237.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 1327104}, None)]
op237.met_dependencies = [MemoryDep('arg230_1', c1, {c0: 2592, c1: 512}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (2592, 512)
op237.sizes = ([2592], [512])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op237_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_2, getitem_1)
        return store_reduction
op236_op237_op239.snodes[2] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 1327104}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf235', c0, {c0: 1327104}, None),
        MemoryDep('buf236', c0, {c0: 2592}, None),
        MemoryDep('buf237', c0, {c0: 2592}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg231_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg232_1', c1, {c0: 2592, c1: 512}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (1327104, 1)
op239.sizes = ([2592, 512], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op239_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg230_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf236', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf237', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg231_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg232_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf239', get_index_6, add_2, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 5308416}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 5308416}, None)]
op241.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 2592, c1: 2048}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (5308416, 1)
op241.sizes = ([2592, 2048], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op241_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg234_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf241', get_index_4, mul_2, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg235_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 1327104}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf234', c0, {c0: 1327104}, None),
        MemoryDep('buf242', c0, {c0: 1327104}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg236_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg237_1', c1, {c0: 2592, c1: 512}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf243.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (1327104, 1)
op243.sizes = ([2592, 512], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op243_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg236_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg237_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf234', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, add_1, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf243', mode=None)]
op244.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf244.users = [
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op244.node.kernel = extern_kernels.convolution


op245_op246_op248: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op245_op246_op248.writes = 
    [   MemoryDep('buf245', c0, {c0: 2592}, None),
        MemoryDep('buf246', c0, {c0: 2592}, None),
        MemoryDep('buf248', c0, {c0: 1327104}, None)]
op245_op246_op248.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 1327104}, None)]
op245_op246_op248.met_dependencies = 
    [   MemoryDep('arg239_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg240_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg241_1', c1, {c0: 2592, c1: 512}, None)]
op245_op246_op248.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op245_op246_op248.snodes[0] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 2592}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 1327104}, None)]
op245.met_dependencies = [MemoryDep('arg239_1', c1, {c0: 2592, c1: 512}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf245.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (2592, 512)
op245.sizes = ([2592], [512])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op245_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf245', get_index_2, getitem)
        return store_reduction
op245_op246_op248.snodes[1] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 2592}, None)]
op246.unmet_dependencies = [MemoryDep('buf244', c0, {c0: 1327104}, None)]
op246.met_dependencies = [MemoryDep('arg239_1', c1, {c0: 2592, c1: 512}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf246.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (2592, 512)
op246.sizes = ([2592], [512])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op246_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf246', get_index_2, getitem_1)
        return store_reduction
op245_op246_op248.snodes[2] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 1327104}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf244', c0, {c0: 1327104}, None),
        MemoryDep('buf245', c0, {c0: 2592}, None),
        MemoryDep('buf246', c0, {c0: 2592}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg239_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg240_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg241_1', c1, {c0: 2592, c1: 512}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1327104, 1)
op248.sizes = ([2592, 512], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf246_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg240_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op248_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf245', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf246', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg240_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg241_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf248', get_index_6, add_2, None)
        return store


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg242_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 5308416}, None)]
op250.unmet_dependencies = [MemoryDep('buf249', c0, {c0: 5308416}, None)]
op250.met_dependencies = [MemoryDep('arg243_1', c1, {c0: 2592, c1: 2048}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (5308416, 1)
op250.sizes = ([2592, 2048], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op250_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf249', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg243_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf250', get_index_4, mul_2, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1327104}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 1327104}, None),
        MemoryDep('buf251', c0, {c0: 1327104}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg246_1', c1, {c0: 2592, c1: 512}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (1327104, 1)
op252.sizes = ([2592, 512], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op252_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg246_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf243', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf252', get_index_4, add_1, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg247_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False),
    ]
]
op253.node.kernel = extern_kernels.convolution


op254_op255_op257: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op254_op255_op257.writes = 
    [   MemoryDep('buf254', c0, {c0: 2592}, None),
        MemoryDep('buf255', c0, {c0: 2592}, None),
        MemoryDep('buf257', c0, {c0: 1327104}, None)]
op254_op255_op257.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 1327104}, None)]
op254_op255_op257.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg249_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg250_1', c1, {c0: 2592, c1: 512}, None)]
op254_op255_op257.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op254_op255_op257.snodes[0] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 2592}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 1327104}, None)]
op254.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 2592, c1: 512}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf254.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (2592, 512)
op254.sizes = ([2592], [512])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op254_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_2, getitem)
        return store_reduction
op254_op255_op257.snodes[1] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 2592}, None)]
op255.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 1327104}, None)]
op255.met_dependencies = [MemoryDep('arg248_1', c1, {c0: 2592, c1: 512}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf255.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (2592, 512)
op255.sizes = ([2592], [512])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op255_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf255', get_index_2, getitem_1)
        return store_reduction
op254_op255_op257.snodes[2] =
op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 1327104}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 1327104}, None),
        MemoryDep('buf254', c0, {c0: 2592}, None),
        MemoryDep('buf255', c0, {c0: 2592}, None)]
op257.met_dependencies = 
    [   MemoryDep('arg248_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg249_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg250_1', c1, {c0: 2592, c1: 512}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (1327104, 1)
op257.sizes = ([2592, 512], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg250_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op257_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg248_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf254', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf255', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg249_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg250_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf257', get_index_6, add_2, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelOut)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg251_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelOut
    buf258.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf258.users = [NodeUser(node=SchedulerNode(name='op259'), can_inplace=True, is_weak=False)]
]
op258.node.kernel = extern_kernels.mm


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 5308416}, None)]
op259.unmet_dependencies = [MemoryDep('buf258', c0, {c0: 5308416}, None)]
op259.met_dependencies = [MemoryDep('arg252_1', c1, {c0: 2592, c1: 2048}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (5308416, 1)
op259.sizes = ([2592, 2048], [])
buf258_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op259_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf258', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg252_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf258', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg252_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf259', get_index_4, mul_2, None)
        return store


op260: ExternKernelSchedulerNode(ExternKernelOut)
op260.writes = [StarDep(name='buf260', mode=None)]
op260.unmet_dependencies = [StarDep(name='buf259', mode=None)]
op260.met_dependencies = [StarDep(name='arg253_1', mode=None)]
op260.outputs = [
    buf260: ExternKernelOut
    buf260.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf260.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=True, is_weak=False)]
]
op260.node.kernel = extern_kernels.mm


op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 1327104}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf252', c0, {c0: 1327104}, None),
        MemoryDep('buf260', c0, {c0: 1327104}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg255_1', c1, {c0: 2592, c1: 512}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False),
    ]
]
op261.group.device = cuda:0
op261.group.iteration = (1327104, 1)
op261.sizes = ([2592, 512], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op261_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg254_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg255_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf252', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf261', get_index_4, add_1, None)
        return store


op262: ExternKernelSchedulerNode(ExternKernelAlloc)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf261', mode=None)]
op262.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelAlloc
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False),
    ]
]
op262.node.kernel = extern_kernels.convolution


op263_op264_op266: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op263_op264_op266.writes = 
    [   MemoryDep('buf263', c0, {c0: 2592}, None),
        MemoryDep('buf264', c0, {c0: 2592}, None),
        MemoryDep('buf266', c0, {c0: 1327104}, None)]
op263_op264_op266.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1327104}, None)]
op263_op264_op266.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg258_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg259_1', c1, {c0: 2592, c1: 512}, None)]
op263_op264_op266.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op263_op264_op266.snodes[0] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 2592}, None)]
op263.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1327104}, None)]
op263.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 2592, c1: 512}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf263.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (2592, 512)
op263.sizes = ([2592], [512])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op263_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf263', get_index_2, getitem)
        return store_reduction
op263_op264_op266.snodes[1] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 2592}, None)]
op264.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 1327104}, None)]
op264.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 2592, c1: 512}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf264.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (2592, 512)
op264.sizes = ([2592], [512])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op264_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf264', get_index_2, getitem_1)
        return store_reduction
op263_op264_op266.snodes[2] =
op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 1327104}, None)]
op266.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 1327104}, None),
        MemoryDep('buf263', c0, {c0: 2592}, None),
        MemoryDep('buf264', c0, {c0: 2592}, None)]
op266.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg258_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg259_1', c1, {c0: 2592, c1: 512}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (1327104, 1)
op266.sizes = ([2592, 512], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op266_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf263', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf264', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg258_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg259_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf266', get_index_6, add_2, None)
        return store


op267: ExternKernelSchedulerNode(ExternKernelOut)
op267.writes = [StarDep(name='buf267', mode=None)]
op267.unmet_dependencies = [StarDep(name='buf266', mode=None)]
op267.met_dependencies = [StarDep(name='arg260_1', mode=None)]
op267.outputs = [
    buf267: ExternKernelOut
    buf267.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf267.users = [NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False)]
]
op267.node.kernel = extern_kernels.mm


op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 5308416}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 5308416}, None)]
op268.met_dependencies = [MemoryDep('arg261_1', c1, {c0: 2592, c1: 2048}, None)]
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf268.users = [NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (5308416, 1)
op268.sizes = ([2592, 2048], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op268_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg261_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg261_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf268', get_index_4, mul_2, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf268', mode=None)]
op269.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=True, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 1327104}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 1327104}, None),
        MemoryDep('buf269', c0, {c0: 1327104}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg264_1', c1, {c0: 2592, c1: 512}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf270.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op270.group.device = cuda:0
op270.group.iteration = (1327104, 1)
op270.sizes = ([2592, 512], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op270_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg264_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf261', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf270', get_index_4, add_1, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg265_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf271.users = [
        NodeUser(node=SchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op271.node.kernel = extern_kernels.convolution


op272_op273_op275: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op272_op273_op275.writes = 
    [   MemoryDep('buf272', c0, {c0: 2592}, None),
        MemoryDep('buf273', c0, {c0: 2592}, None),
        MemoryDep('buf275', c0, {c0: 1327104}, None)]
op272_op273_op275.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 1327104}, None)]
op272_op273_op275.met_dependencies = 
    [   MemoryDep('arg266_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg267_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg268_1', c1, {c0: 2592, c1: 512}, None)]
op272_op273_op275.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf272.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf273.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op272_op273_op275.snodes[0] =
op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 2592}, None)]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 1327104}, None)]
op272.met_dependencies = [MemoryDep('arg266_1', c1, {c0: 2592, c1: 512}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf272.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (2592, 512)
op272.sizes = ([2592], [512])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op272_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf272', get_index_2, getitem)
        return store_reduction
op272_op273_op275.snodes[1] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 2592}, None)]
op273.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 1327104}, None)]
op273.met_dependencies = [MemoryDep('arg266_1', c1, {c0: 2592, c1: 512}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf273.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (2592, 512)
op273.sizes = ([2592], [512])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op273_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf273', get_index_2, getitem_1)
        return store_reduction
op272_op273_op275.snodes[2] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 1327104}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 1327104}, None),
        MemoryDep('buf272', c0, {c0: 2592}, None),
        MemoryDep('buf273', c0, {c0: 2592}, None)]
op275.met_dependencies = 
    [   MemoryDep('arg266_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg267_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg268_1', c1, {c0: 2592, c1: 512}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf275.users = [NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (1327104, 1)
op275.sizes = ([2592, 512], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg268_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op275_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf272', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf273', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg267_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg268_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf275', get_index_6, add_2, None)
        return store


op276: ExternKernelSchedulerNode(ExternKernelOut)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op276.outputs = [
    buf276: ExternKernelOut
    buf276.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False)]
]
op276.node.kernel = extern_kernels.mm


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 5308416}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 5308416}, None)]
op277.met_dependencies = [MemoryDep('arg270_1', c1, {c0: 2592, c1: 2048}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (5308416, 1)
op277.sizes = ([2592, 2048], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op277_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf276', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg270_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf277', get_index_4, mul_2, None)
        return store


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 1327104}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf270', c0, {c0: 1327104}, None),
        MemoryDep('buf278', c0, {c0: 1327104}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg272_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg273_1', c1, {c0: 2592, c1: 512}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf279.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
    ]
]
op279.group.device = cuda:0
op279.group.iteration = (1327104, 1)
op279.sizes = ([2592, 512], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op279_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg272_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg273_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf270', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf279', get_index_4, add_1, None)
        return store


op280: ExternKernelSchedulerNode(ExternKernelAlloc)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelAlloc
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False),
    ]
]
op280.node.kernel = extern_kernels.convolution


op281_op282_op284: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op281_op282_op284.writes = 
    [   MemoryDep('buf281', c0, {c0: 2592}, None),
        MemoryDep('buf282', c0, {c0: 2592}, None),
        MemoryDep('buf284', c0, {c0: 1327104}, None)]
op281_op282_op284.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 1327104}, None)]
op281_op282_op284.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg276_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg277_1', c1, {c0: 2592, c1: 512}, None)]
op281_op282_op284.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op281_op282_op284.snodes[0] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 2592}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 1327104}, None)]
op281.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 2592, c1: 512}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf281.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (2592, 512)
op281.sizes = ([2592], [512])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op281_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf281', get_index_2, getitem)
        return store_reduction
op281_op282_op284.snodes[1] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 2592}, None)]
op282.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 1327104}, None)]
op282.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 2592, c1: 512}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf282.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (2592, 512)
op282.sizes = ([2592], [512])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op282_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf282', get_index_2, getitem_1)
        return store_reduction
op281_op282_op284.snodes[2] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1327104}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf280', c0, {c0: 1327104}, None),
        MemoryDep('buf281', c0, {c0: 2592}, None),
        MemoryDep('buf282', c0, {c0: 2592}, None)]
op284.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg276_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg277_1', c1, {c0: 2592, c1: 512}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1327104, 1)
op284.sizes = ([2592, 512], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op284_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf281', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf282', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg276_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg277_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf284', get_index_6, add_2, None)
        return store


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf284', mode=None)]
op285.met_dependencies = [StarDep(name='arg278_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf285.users = [NodeUser(node=SchedulerNode(name='op286'), can_inplace=True, is_weak=False)]
]
op285.node.kernel = extern_kernels.mm


op286: SchedulerNode(ComputedBuffer)
op286.writes = [MemoryDep('buf286', c0, {c0: 5308416}, None)]
op286.unmet_dependencies = [MemoryDep('buf285', c0, {c0: 5308416}, None)]
op286.met_dependencies = [MemoryDep('arg279_1', c1, {c0: 2592, c1: 2048}, None)]
op286.outputs = [
    buf286: ComputedBuffer
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.group.device = cuda:0
op286.group.iteration = (5308416, 1)
op286.sizes = ([2592, 2048], [])
buf285_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op286_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf285', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg279_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg279_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf286', get_index_4, mul_2, None)
        return store


op287: ExternKernelSchedulerNode(ExternKernelOut)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = [StarDep(name='buf286', mode=None)]
op287.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op287.outputs = [
    buf287: ExternKernelOut
    buf287.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf287.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False)]
]
op287.node.kernel = extern_kernels.mm


op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 1327104}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf279', c0, {c0: 1327104}, None),
        MemoryDep('buf287', c0, {c0: 1327104}, None)]
op288.met_dependencies = 
    [   MemoryDep('arg281_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg282_1', c1, {c0: 2592, c1: 512}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf288.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False),
    ]
]
op288.group.device = cuda:0
op288.group.iteration = (1327104, 1)
op288.sizes = ([2592, 512], [])
buf287_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op288_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf287', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg282_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf279', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf288', get_index_4, add_1, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelAlloc)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op289.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelAlloc
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf289.users = [
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=True, is_weak=False),
    ]
]
op289.node.kernel = extern_kernels.convolution


op290_op291_op293: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op290_op291_op293.writes = 
    [   MemoryDep('buf290', c0, {c0: 2592}, None),
        MemoryDep('buf291', c0, {c0: 2592}, None),
        MemoryDep('buf293', c0, {c0: 1327104}, None)]
op290_op291_op293.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 1327104}, None)]
op290_op291_op293.met_dependencies = 
    [   MemoryDep('arg284_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg285_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg286_1', c1, {c0: 2592, c1: 512}, None)]
op290_op291_op293.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op290_op291_op293.snodes[0] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 2592}, None)]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 1327104}, None)]
op290.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 2592, c1: 512}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf290.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (2592, 512)
op290.sizes = ([2592], [512])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op290_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_2, getitem)
        return store_reduction
op290_op291_op293.snodes[1] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 2592}, None)]
op291.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 1327104}, None)]
op291.met_dependencies = [MemoryDep('arg284_1', c1, {c0: 2592, c1: 512}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf291.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (2592, 512)
op291.sizes = ([2592], [512])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op291_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf291', get_index_2, getitem_1)
        return store_reduction
op290_op291_op293.snodes[2] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 1327104}, None)]
op293.unmet_dependencies = 
    [   MemoryDep('buf289', c0, {c0: 1327104}, None),
        MemoryDep('buf290', c0, {c0: 2592}, None),
        MemoryDep('buf291', c0, {c0: 2592}, None)]
op293.met_dependencies = 
    [   MemoryDep('arg284_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg285_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg286_1', c1, {c0: 2592, c1: 512}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (1327104, 1)
op293.sizes = ([2592, 512], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op293_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg284_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf290', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf291', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg285_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg286_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf293', get_index_6, add_2, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg287_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 5308416}, None)]
op295.unmet_dependencies = [MemoryDep('buf294', c0, {c0: 5308416}, None)]
op295.met_dependencies = [MemoryDep('arg288_1', c1, {c0: 2592, c1: 2048}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (5308416, 1)
op295.sizes = ([2592, 2048], [])
buf294_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op295_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf294', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg288_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg288_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf295', get_index_4, mul_2, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg289_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf296.users = [NodeUser(node=SchedulerNode(name='op297'), can_inplace=True, is_weak=False)]
]
op296.node.kernel = extern_kernels.mm


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 1327104}, None)]
op297.unmet_dependencies = 
    [   MemoryDep('buf288', c0, {c0: 1327104}, None),
        MemoryDep('buf296', c0, {c0: 1327104}, None)]
op297.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg291_1', c1, {c0: 2592, c1: 512}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf297.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op297.group.device = cuda:0
op297.group.iteration = (1327104, 1)
op297.sizes = ([2592, 512], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op297_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg290_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg291_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf288', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf297', get_index_4, add_1, None)
        return store


op298: ExternKernelSchedulerNode(ExternKernelAlloc)
op298.writes = [StarDep(name='buf298', mode=None)]
op298.unmet_dependencies = [StarDep(name='buf297', mode=None)]
op298.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op298.outputs = [
    buf298: ExternKernelAlloc
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op298.node.kernel = extern_kernels.convolution


op299_op300_op302: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op299_op300_op302.writes = 
    [   MemoryDep('buf299', c0, {c0: 2592}, None),
        MemoryDep('buf300', c0, {c0: 2592}, None),
        MemoryDep('buf302', c0, {c0: 1327104}, None)]
op299_op300_op302.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1327104}, None)]
op299_op300_op302.met_dependencies = 
    [   MemoryDep('arg293_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg294_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg295_1', c1, {c0: 2592, c1: 512}, None)]
op299_op300_op302.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op299_op300_op302.snodes[0] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 2592}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1327104}, None)]
op299.met_dependencies = [MemoryDep('arg293_1', c1, {c0: 2592, c1: 512}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf299.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (2592, 512)
op299.sizes = ([2592], [512])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op299_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf299', get_index_2, getitem)
        return store_reduction
op299_op300_op302.snodes[1] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 2592}, None)]
op300.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 1327104}, None)]
op300.met_dependencies = [MemoryDep('arg293_1', c1, {c0: 2592, c1: 512}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf300.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (2592, 512)
op300.sizes = ([2592], [512])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op300_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf300', get_index_2, getitem_1)
        return store_reduction
op299_op300_op302.snodes[2] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1327104}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 1327104}, None),
        MemoryDep('buf299', c0, {c0: 2592}, None),
        MemoryDep('buf300', c0, {c0: 2592}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg293_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg294_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg295_1', c1, {c0: 2592, c1: 512}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1327104, 1)
op302.sizes = ([2592, 512], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf300_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg294_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op302_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf299', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf300', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg294_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg295_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf302', get_index_6, add_2, None)
        return store


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg296_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False)]
]
op303.node.kernel = extern_kernels.mm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 5308416}, None)]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 5308416}, None)]
op304.met_dependencies = [MemoryDep('arg297_1', c1, {c0: 2592, c1: 2048}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (5308416, 1)
op304.sizes = ([2592, 2048], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op304_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf303', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg297_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf304', get_index_4, mul_2, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 1327104}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf297', c0, {c0: 1327104}, None),
        MemoryDep('buf305', c0, {c0: 1327104}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg299_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg300_1', c1, {c0: 2592, c1: 512}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (1327104, 1)
op306.sizes = ([2592, 512], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg300_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
class op306_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg299_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg300_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf297', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf306', get_index_4, add_1, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg301_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
    ]
]
op307.node.kernel = extern_kernels.convolution


op308_op309_op311: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op308_op309_op311.writes = 
    [   MemoryDep('buf308', c0, {c0: 2592}, None),
        MemoryDep('buf309', c0, {c0: 2592}, None),
        MemoryDep('buf311', c0, {c0: 1327104}, None)]
op308_op309_op311.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 1327104}, None)]
op308_op309_op311.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg303_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg304_1', c1, {c0: 2592, c1: 512}, None)]
op308_op309_op311.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf308.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op308_op309_op311.snodes[0] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 2592}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 1327104}, None)]
op308.met_dependencies = [MemoryDep('arg302_1', c1, {c0: 2592, c1: 512}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf308.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (2592, 512)
op308.sizes = ([2592], [512])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op308_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf308', get_index_2, getitem)
        return store_reduction
op308_op309_op311.snodes[1] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 2592}, None)]
op309.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 1327104}, None)]
op309.met_dependencies = [MemoryDep('arg302_1', c1, {c0: 2592, c1: 512}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (2592, 512)
op309.sizes = ([2592], [512])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op309_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf309', get_index_2, getitem_1)
        return store_reduction
op308_op309_op311.snodes[2] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 1327104}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf307', c0, {c0: 1327104}, None),
        MemoryDep('buf308', c0, {c0: 2592}, None),
        MemoryDep('buf309', c0, {c0: 2592}, None)]
op311.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg303_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg304_1', c1, {c0: 2592, c1: 512}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (1327104, 1)
op311.sizes = ([2592, 512], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op311_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg302_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf308', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf309', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg303_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg304_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf311', get_index_6, add_2, None)
        return store


op312: ExternKernelSchedulerNode(ExternKernelOut)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf311', mode=None)]
op312.met_dependencies = [StarDep(name='arg305_1', mode=None)]
op312.outputs = [
    buf312: ExternKernelOut
    buf312.layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op312.node.kernel = extern_kernels.mm


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 5308416}, None)]
op313.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 5308416}, None)]
op313.met_dependencies = [MemoryDep('arg306_1', c1, {c0: 2592, c1: 2048}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (5308416, 1)
op313.sizes = ([2592, 2048], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[2592, 2048], stride=[2048, 1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 2048], stride=[663552, 36864, 2048, 1])
class op313_loop_body:
    var_ranges = {z0: 2592, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg306_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg306_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf313', get_index_4, mul_2, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg307_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
    buf314.users = [
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=True, is_weak=False),
    ]
]
op314.node.kernel = extern_kernels.mm


op315_op316_op318: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op315_op316_op318.writes = 
    [   MemoryDep('buf315', c0, {c0: 2592}, None),
        MemoryDep('buf316', c0, {c0: 2592}, None),
        MemoryDep('buf318', c0, {c0: 1327104}, None)]
op315_op316_op318.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 1327104}, None),
        MemoryDep('buf314', c0, {c0: 1327104}, None)]
op315_op316_op318.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg309_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg310_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg311_1', c1, {c0: 2592, c1: 512}, None)]
op315_op316_op318.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf315.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf316.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op315_op316_op318.snodes[0] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 2592}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 1327104}, None),
        MemoryDep('buf314', c0, {c0: 1327104}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg309_1', c1, {c0: 2592, c1: 512}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf315.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (2592, 512)
op315.sizes = ([2592], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op315_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf306', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf315', get_index_4, getitem)
        return store_reduction
op315_op316_op318.snodes[1] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 2592}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 1327104}, None),
        MemoryDep('buf314', c0, {c0: 1327104}, None)]
op316.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg309_1', c1, {c0: 2592, c1: 512}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
    buf316.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (2592, 512)
op316.sizes = ([2592], [512])
buf314_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
class op316_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf306', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf316', get_index_4, getitem_1)
        return store_reduction
op315_op316_op318.snodes[2] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1327104}, None)]
op318.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 1327104}, None),
        MemoryDep('buf314', c0, {c0: 1327104}, None),
        MemoryDep('buf315', c0, {c0: 2592}, None),
        MemoryDep('buf316', c0, {c0: 2592}, None)]
op318.met_dependencies = 
    [   MemoryDep('arg308_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg309_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg310_1', c1, {c0: 2592, c1: 512}, None),
        MemoryDep('arg311_1', c1, {c0: 2592, c1: 512}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1327104, 1)
op318.sizes = ([2592, 512], [])
buf314_layout = FixedLayout('cuda', torch.float32, size=[2592, 512], stride=[512, 1])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 18, 18], stride=[165888, 1, 9216, 512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 1], stride=[324, 18, 1, 2592])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 18, 18, 512], stride=[165888, 9216, 512, 1])
class op318_loop_body:
    var_ranges = {z0: 2592, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf314', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg308_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg309_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf306', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf315', get_index_4)
        sub = ops.sub(add_1, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf316', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul_1 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg310_1', get_index_6)
        mul_2 = ops.mul(mul_1, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg311_1', get_index_7)
        add_3 = ops.add(mul_2, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf318', get_index_8, add_3, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', 2048*c0 + c1 + 512*c2, {c0: 1024, c1: 512, c2: 4}, None)]
op319.unmet_dependencies = []
op319.met_dependencies = [MemoryDep('arg312_1', c0, {c0: 2097152}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 2, 2], stride=[2048, 1, 1024, 512])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (2097152, 1)
op319.sizes = ([1024, 512, 4], [])
arg312_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 2, 2], stride=[2048, 4, 2, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[1024, 512, 2, 2], stride=[2048, 1, 1024, 512])
class op319_loop_body:
    var_ranges = {z0: 1024, z1: 512, z2: 4}
    index0 = 2048*z0 + 4*z1 + z2
    index1 = 2048*z0 + z1 + 512*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg312_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf319', get_index_1, load, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelAlloc)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf318', mode=None), StarDep(name='buf319', mode=None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ExternKernelAlloc
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf320.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=True, is_weak=False)]
]
op320.node.kernel = extern_kernels.convolution


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 663552}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 663552}, None)]
op321.met_dependencies = [MemoryDep('arg313_1', c1, {c0: 648, c1: 1024}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf321.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (663552, 1)
op321.sizes = ([648, 1024], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
class op321_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg313_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf321', get_index_2, add, None)
        return store


op322: ExternKernelSchedulerNode(ExternKernelAlloc)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf321', mode=None)]
op322.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op322.outputs = [
    buf322: ExternKernelAlloc
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf322.users = [
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
    ]
]
op322.node.kernel = extern_kernels.convolution


op323_op324_op326: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op323_op324_op326.writes = 
    [   MemoryDep('buf323', c0, {c0: 648}, None),
        MemoryDep('buf324', c0, {c0: 648}, None),
        MemoryDep('buf326', c0, {c0: 663552}, None)]
op323_op324_op326.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 663552}, None)]
op323_op324_op326.met_dependencies = 
    [   MemoryDep('arg315_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg316_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg317_1', c1, {c0: 648, c1: 1024}, None)]
op323_op324_op326.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op323_op324_op326.snodes[0] =
op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 648}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 663552}, None)]
op323.met_dependencies = [MemoryDep('arg315_1', c1, {c0: 648, c1: 1024}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf323.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (648, 1024)
op323.sizes = ([648], [1024])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op323_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf323', get_index_2, getitem)
        return store_reduction
op323_op324_op326.snodes[1] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 648}, None)]
op324.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 663552}, None)]
op324.met_dependencies = [MemoryDep('arg315_1', c1, {c0: 648, c1: 1024}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf324.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (648, 1024)
op324.sizes = ([648], [1024])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op324_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf324', get_index_2, getitem_1)
        return store_reduction
op323_op324_op326.snodes[2] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 663552}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf322', c0, {c0: 663552}, None),
        MemoryDep('buf323', c0, {c0: 648}, None),
        MemoryDep('buf324', c0, {c0: 648}, None)]
op326.met_dependencies = 
    [   MemoryDep('arg315_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg316_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg317_1', c1, {c0: 648, c1: 1024}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (663552, 1)
op326.sizes = ([648, 1024], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
class op326_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf323', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf324', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg316_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg317_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf326', get_index_6, add_2, None)
        return store


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf326', mode=None)]
op327.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
    buf327.users = [NodeUser(node=SchedulerNode(name='op328'), can_inplace=True, is_weak=False)]
]
op327.node.kernel = extern_kernels.mm


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 2654208}, None)]
op328.unmet_dependencies = [MemoryDep('buf327', c0, {c0: 2654208}, None)]
op328.met_dependencies = [MemoryDep('arg319_1', c1, {c0: 648, c1: 4096}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (2654208, 1)
op328.sizes = ([648, 4096], [])
buf327_layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
class op328_loop_body:
    var_ranges = {z0: 648, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf327', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg319_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf327', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg319_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf328', get_index_4, mul_2, None)
        return store


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = [StarDep(name='arg320_1', mode=None)]
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op329.node.kernel = extern_kernels.mm


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 663552}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf321', c0, {c0: 663552}, None),
        MemoryDep('buf329', c0, {c0: 663552}, None)]
op330.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg322_1', c1, {c0: 648, c1: 1024}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf330.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op330.group.device = cuda:0
op330.group.iteration = (663552, 1)
op330.sizes = ([648, 1024], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
class op330_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg322_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf321', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf330', get_index_4, add_1, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelAlloc)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelAlloc
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
    ]
]
op331.node.kernel = extern_kernels.convolution


op332_op333_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op332_op333_op335.writes = 
    [   MemoryDep('buf332', c0, {c0: 648}, None),
        MemoryDep('buf333', c0, {c0: 648}, None),
        MemoryDep('buf335', c0, {c0: 663552}, None)]
op332_op333_op335.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 663552}, None)]
op332_op333_op335.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg325_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg326_1', c1, {c0: 648, c1: 1024}, None)]
op332_op333_op335.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op332_op333_op335.snodes[0] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 648}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 663552}, None)]
op332.met_dependencies = [MemoryDep('arg324_1', c1, {c0: 648, c1: 1024}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (648, 1024)
op332.sizes = ([648], [1024])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op332_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf332', get_index_2, getitem)
        return store_reduction
op332_op333_op335.snodes[1] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 648}, None)]
op333.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 663552}, None)]
op333.met_dependencies = [MemoryDep('arg324_1', c1, {c0: 648, c1: 1024}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (648, 1024)
op333.sizes = ([648], [1024])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op333_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf333', get_index_2, getitem_1)
        return store_reduction
op332_op333_op335.snodes[2] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 663552}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf331', c0, {c0: 663552}, None),
        MemoryDep('buf332', c0, {c0: 648}, None),
        MemoryDep('buf333', c0, {c0: 648}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg324_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg325_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg326_1', c1, {c0: 648, c1: 1024}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (663552, 1)
op335.sizes = ([648, 1024], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg324_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
class op335_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg324_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf332', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf333', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg326_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf335', get_index_6, add_2, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg327_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2654208}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', c0, {c0: 2654208}, None)]
op337.met_dependencies = [MemoryDep('arg328_1', c1, {c0: 648, c1: 4096}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (2654208, 1)
op337.sizes = ([648, 4096], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
class op337_loop_body:
    var_ranges = {z0: 648, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg328_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg328_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf337', get_index_4, mul_2, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg329_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False)]
]
op338.node.kernel = extern_kernels.mm


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 663552}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf330', c0, {c0: 663552}, None),
        MemoryDep('buf338', c0, {c0: 663552}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg330_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg331_1', c1, {c0: 648, c1: 1024}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf339.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (663552, 1)
op339.sizes = ([648, 1024], [])
buf338_layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
arg330_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
class op339_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg330_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg331_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf330', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf339', get_index_4, add_1, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg332_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False),
    ]
]
op340.node.kernel = extern_kernels.convolution


op341_op342_op344: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op341_op342_op344.writes = 
    [   MemoryDep('buf341', c0, {c0: 648}, None),
        MemoryDep('buf342', c0, {c0: 648}, None),
        MemoryDep('buf344', c0, {c0: 663552}, None)]
op341_op342_op344.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 663552}, None)]
op341_op342_op344.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg334_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg335_1', c1, {c0: 648, c1: 1024}, None)]
op341_op342_op344.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf341.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op341_op342_op344.snodes[0] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 648}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 663552}, None)]
op341.met_dependencies = [MemoryDep('arg333_1', c1, {c0: 648, c1: 1024}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf341.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (648, 1024)
op341.sizes = ([648], [1024])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op341_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf341', get_index_2, getitem)
        return store_reduction
op341_op342_op344.snodes[1] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 648}, None)]
op342.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 663552}, None)]
op342.met_dependencies = [MemoryDep('arg333_1', c1, {c0: 648, c1: 1024}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (648, 1024)
op342.sizes = ([648], [1024])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
class op342_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf342', get_index_2, getitem_1)
        return store_reduction
op341_op342_op344.snodes[2] =
op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 663552}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf340', c0, {c0: 663552}, None),
        MemoryDep('buf341', c0, {c0: 648}, None),
        MemoryDep('buf342', c0, {c0: 648}, None)]
op344.met_dependencies = 
    [   MemoryDep('arg333_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg334_1', c1, {c0: 648, c1: 1024}, None),
        MemoryDep('arg335_1', c1, {c0: 648, c1: 1024}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (663552, 1)
op344.sizes = ([648, 1024], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
buf342_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1], stride=[81, 9, 1, 648])
arg334_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 1024], stride=[82944, 9216, 1024, 1])
class op344_loop_body:
    var_ranges = {z0: 648, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg333_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf341', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf342', get_index_3)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg334_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg335_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf344', get_index_6, add_2, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
    buf345.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=True, is_weak=False)]
]
op345.node.kernel = extern_kernels.mm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 2654208}, None)]
op346.unmet_dependencies = [MemoryDep('buf345', c0, {c0: 2654208}, None)]
op346.met_dependencies = [MemoryDep('arg337_1', c1, {c0: 648, c1: 4096}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (2654208, 1)
op346.sizes = ([648, 4096], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[648, 4096], stride=[4096, 1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[4096], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 9, 9, 4096], stride=[331776, 36864, 4096, 1])
class op346_loop_body:
    var_ranges = {z0: 648, z1: 4096}
    index0 = 4096*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf345', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg337_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf346', get_index_4, mul_2, None)
        return store


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op347.met_dependencies = [StarDep(name='arg338_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
    buf347.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = extern_kernels.mm


op348_op349: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op348_op349.writes = 
    [   MemoryDep('buf348', c0, {c0: 8192}, None),
        MemoryDep('buf349', c0, {c0: 8192}, None)]
op348_op349.unmet_dependencies = 
    [   MemoryDep('buf339', 82944*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 81}, None),
        MemoryDep('buf347', 82944*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 81}, None)]
op348_op349.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 1024}, None)]
op348_op349.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
    ]
]
op348_op349.snodes[0] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 8192}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf339', 82944*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 81}, None),
        MemoryDep('buf347', 82944*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 81}, None)]
op348.met_dependencies = 
    [   MemoryDep('arg339_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg340_1', c1, {c0: 8, c1: 1024}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf348.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (8192, 81)
op348.sizes = ([8, 1024], [81])
buf347_layout = FixedLayout('cuda', torch.float32, size=[648, 1024], stride=[1024, 1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg340_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 9, 9], stride=[82944, 1, 9216, 1024])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
class op348_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 81}
    index0 = 82944*z0 + z1 + 1024*z2
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg339_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg340_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf339', get_index_3)
        add_1 = ops.add(mul, load_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf348', get_index_4, reduction)
        return store_reduction
op348_op349.snodes[1] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 8192}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 8192}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (8192, 1)
op349.sizes = ([8192], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
class op349_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        constant = ops.constant(81.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf349', get_index_1, truediv, None)
        return store


op350_op351_op353: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op350_op351_op353.writes = 
    [   MemoryDep('buf350', c0, {c0: 8}, None),
        MemoryDep('buf351', c0, {c0: 8}, None),
        MemoryDep('buf353', c0, {c0: 8192}, None)]
op350_op351_op353.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 8192}, None)]
op350_op351_op353.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg342_1', c1, {c0: 8, c1: 1024}, None)]
op350_op351_op353.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1024], stride=[1024, 1, 8192, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op350_op351_op353.snodes[0] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 8}, None)]
op350.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 8192}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf350.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (8, 1024)
op350.sizes = ([8], [1024])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf350', get_index_1, getitem)
        return store_reduction
op350_op351_op353.snodes[1] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 8}, None)]
op351.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 8192}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
    buf351.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (8, 1024)
op351.sizes = ([8], [1024])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf351', get_index_1, getitem_1)
        return store_reduction
op350_op351_op353.snodes[2] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 8192}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf349', c0, {c0: 8192}, None),
        MemoryDep('buf350', c0, {c0: 8}, None),
        MemoryDep('buf351', c0, {c0: 8}, None)]
op353.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg342_1', c1, {c0: 8, c1: 1024}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1024], stride=[1024, 1, 8192, 1])
    buf353.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (8192, 1)
op353.sizes = ([8, 1024], [])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 1, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1], stride=[1, 8, 8, 8])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 1, 1024], stride=[1024, 1, 8192, 1])
class op353_loop_body:
    var_ranges = {z0: 8, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf350', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf351', get_index_2)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg341_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg342_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf353', get_index_5, add_1, None)
        return store


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf353', mode=None)]
op354.met_dependencies = [StarDep(name='arg343_1', mode=None), StarDep(name='arg344_1', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf354.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op354.node.kernel = extern_kernels.addmm



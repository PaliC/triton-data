op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg1_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 3136, 56, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1_op2_op4: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op4.writes = 
    [   MemoryDep('buf1', c0, {c0: 25088}, None),
        MemoryDep('buf2', c0, {c0: 25088}, None),
        MemoryDep('buf4', c0, {c0: 3211264}, None)]
op1_op2_op4.unmet_dependencies = [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None)]
op1_op2_op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg5_1', c1, {c0: 25088, c1: 128}, None)]
op1_op2_op4.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op1_op2_op4.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 25088}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (25088, 128)
op1.sizes = ([8, 16, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 3136, 56, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 128}
    index0 = 401408*z0 + 3136*z3 + 784*((z1//4)) + 56*((z2//14)) + 14*ModularIndexing(z1, 1, 4) + ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 25088*z1 + 128*z2 + z3
    index3 = 3136*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf1', get_index_3, getitem)
        return store_reduction
op1_op2_op4.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 25088}, None)]
op2.unmet_dependencies = [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (25088, 128)
op2.sizes = ([8, 16, 196], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 3136, 56, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 128}
    index0 = 401408*z0 + 3136*z3 + 784*((z1//4)) + 56*((z2//14)) + 14*ModularIndexing(z1, 1, 4) + ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 25088*z1 + 128*z2 + z3
    index3 = 3136*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf2', get_index_3, getitem_1)
        return store_reduction
op1_op2_op4.snodes[2] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 3211264}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None),
        MemoryDep('buf1', c0, {c0: 25088}, None),
        MemoryDep('buf2', c0, {c0: 25088}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None),
        MemoryDep('arg4_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg5_1', c1, {c0: 25088, c1: 128}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (3211264, 1)
op4.sizes = ([8, 16, 196, 128], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 3136, 56, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op4_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 128}
    index0 = 401408*z0 + 3136*z3 + 784*((z1//4)) + 56*((z2//14)) + 14*ModularIndexing(z1, 1, 4) + ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 25088*z1 + 128*z2 + z3
    index3 = 3136*z0 + 196*z1 + z2
    index4 = 401408*z0 + 25088*z1 + 128*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf1', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('buf2', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg4_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg5_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index4')
        store = ops.store('buf4', get_index_7, add_3, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg6_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
    buf5.users = [
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.mm


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 3211264}, None)]
op6.unmet_dependencies = [   MemoryDep('buf5', 1204224*c0 + 32*c1 + 384*c2 + c3, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op6.met_dependencies = [MemoryDep('arg7_1', 32*c1 + c3, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (3211264, 1)
op6.sizes = ([8, 4, 3136, 32], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
class op6_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 3136, z3: 32}
    index0 = 1204224*z0 + 32*z1 + 384*z2 + z3
    index1 = 32*z1 + z3
    index2 = 401408*z0 + 100352*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf6', get_index_2, mul, None)
        return store


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 3211264}, None)]
op7.unmet_dependencies = [   MemoryDep('buf5', 1204224*c0 + 32*c1 + 75264*c2 + c3 + 384*c4 + 128, {c0: 8, c1: 4, c2: 16, c3: 32, c4: 196}, None)]
op7.met_dependencies = [MemoryDep('arg7_1', 32*c1 + c3 + 128, {c0: 8, c1: 4, c2: 16, c3: 32}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 32, 196], stride=[401408, 100352, 6272, 196, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (3211264, 1)
op7.sizes = ([8, 4, 16, 32, 196], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 32, 196], stride=[401408, 100352, 6272, 196, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 32, z4: 196}
    index0 = 1204224*z0 + 32*z1 + 75264*z2 + z3 + 384*z4 + 128
    index1 = 32*z1 + z3 + 128
    index2 = 401408*z0 + 100352*z1 + 6272*z2 + 196*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf7', get_index_2, mul, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf6', mode=None), StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=True, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.bmm


op9_op10_op11_op12: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op11_op12.writes = 
    [   MemoryDep('buf10', c0, {c0: 100352}, None),
        MemoryDep('buf11', c0, {c0: 100352}, None),
        MemoryDep('buf12', c0, {c0: 19668992}, None),
        MemoryDep('buf9', 3200*c0 + c1, {c0: 32, c1: 3136}, None)]
op9_op10_op11_op12.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 19668992}, None)]
op9_op10_op11_op12.met_dependencies = []
op9_op10_op11_op12.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op9_op10_op11_op12.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 3200*c0 + c1, {c0: 32, c1: 3136}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 19668992}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
    buf9.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (100352, 196)
op9.sizes = ([32, 3136], [196])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf9_layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
class op9_loop_body:
    var_ranges = {z0: 32, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_1, reduction)
        return store_reduction
op9_op10_op11_op12.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 100352}, None)]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 19668992}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf10.users = [
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op10.group.device = cuda:0
op10.group.iteration = (100352, 196)
op10.sizes = ([100352], [196])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
class op10_loop_body:
    var_ranges = {z0: 100352, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_1, reduction)
        return store_reduction
op9_op10_op11_op12.snodes[2] =
op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 100352}, None)]
op11.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 100352}, None),
        MemoryDep('buf8', c0, {c0: 19668992}, None)]
op11.met_dependencies = []
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf11.users = [NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False)]
]
op11.group.device = cuda:0
op11.group.iteration = (100352, 196)
op11.sizes = ([100352], [196])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
class op11_loop_body:
    var_ranges = {z0: 100352, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf10', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf11', get_index_2, reduction)
        return store_reduction
op9_op10_op11_op12.snodes[3] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 19668992}, None)]
op12.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 100352}, None),
        MemoryDep('buf11', c0, {c0: 100352}, None),
        MemoryDep('buf8', c0, {c0: 19668992}, None),
        MemoryDep('buf9', 3200*c0 + c1, {c0: 32, c1: 3136}, None)]
op12.met_dependencies = []
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
    buf12.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (19668992, 1)
op12.sizes = ([32, 3136, 196], [])
buf9_layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
buf8_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
class op12_loop_body:
    var_ranges = {z0: 32, z1: 3136, z2: 196}
    index0 = 3200*z0 + z1
    index1 = 614656*z0 + 196*z1 + z2
    index2 = 3136*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf9', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf8', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf10', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf11', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf12', get_index_4, where, None)
        return store


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 3211264}, None)]
op13.unmet_dependencies = [   MemoryDep('buf5', 1204224*c0 + 32*c1 + 384*c2 + c3 + 256, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op13.met_dependencies = [MemoryDep('arg7_1', 32*c1 + c3 + 256, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (3211264, 1)
op13.sizes = ([8, 4, 3136, 32], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
class op13_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 3136, z3: 32}
    index0 = 1204224*z0 + 32*z1 + 384*z2 + z3 + 256
    index1 = 32*z1 + z3 + 256
    index2 = 401408*z0 + 100352*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf13', get_index_2, add, None)
        return store


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf12', mode=None), StarDep(name='buf13', mode=None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[512, 196, 32], stride=[6272, 32, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.node.kernel = extern_kernels.bmm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 3211264}, None)]
op15.unmet_dependencies = [   MemoryDep('buf14', 401408*c0 + c1 + 100352*c2, {c0: 8, c1: 100352, c2: 4}, None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 32, 4], stride=[401408, 25088, 128, 4, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (3211264, 1)
op15.sizes = ([8, 100352, 4], [])
buf14_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 32], stride=[6272, 32, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 32, 4], stride=[401408, 25088, 128, 4, 1])
class op15_loop_body:
    var_ranges = {z0: 8, z1: 100352, z2: 4}
    index0 = 401408*z0 + z1 + 100352*z2
    index1 = 401408*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf14', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf15', get_index_1, load, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg8_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17_op18_op19_op21: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op17_op18_op19_op21.writes = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf18', c0, {c0: 25088}, None),
        MemoryDep('buf19', c0, {c0: 25088}, None),
        MemoryDep('buf21', c0, {c0: 3211264}, None)]
op17_op18_op19_op21.unmet_dependencies = 
    [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None),
        MemoryDep('buf16', c0, {c0: 3211264}, None)]
op17_op18_op19_op21.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg11_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 128}, None)]
op17_op18_op19_op21.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op17_op18_op19_op21.snodes[0] =
op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 3211264}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf0', 401408*c0 + 3136*c3 + 784*((c1//4)) + 56*((c2//14)) + 14*ModularIndexing(c1, 1, 4) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 16, c2: 196, c3: 128}, None),
        MemoryDep('buf16', c0, {c0: 3211264}, None)]
op17.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg3_1', c1, {c0: 8, c1: 401408}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 128}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf17.users = [
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
]
op17.group.device = cuda:0
op17.group.iteration = (3211264, 1)
op17.sizes = ([8, 16, 196, 128], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 3136, 56, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op17_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 128}
    index0 = 401408*z0 + 3136*z3 + 784*((z1//4)) + 56*((z2//14)) + 14*ModularIndexing(z1, 1, 4) + ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 25088*z1 + 128*z2 + z3
    index3 = 401408*z0 + 25088*z1 + 128*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg3_1', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf16', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg9_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf17', get_index_5, add_3, None)
        return store
op17_op18_op19_op21.snodes[1] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 25088}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 3211264}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf18.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (25088, 128)
op18.sizes = ([25088], [128])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op18_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op17_op18_op19_op21.snodes[2] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 25088}, None)]
op19.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 3211264}, None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf19.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (25088, 128)
op19.sizes = ([25088], [128])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op19_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op17_op18_op19_op21.snodes[3] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 3211264}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf18', c0, {c0: 25088}, None),
        MemoryDep('buf19', c0, {c0: 25088}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg11_1', c1, {c0: 25088, c1: 128}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (3211264, 1)
op21.sizes = ([25088, 128], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf19_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op21_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg10_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg11_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, add_1, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg12_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 12845056}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 12845056}, None)]
op23.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 25088, c1: 512}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 512], stride=[1605632, 100352, 512, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (12845056, 1)
op23.sizes = ([25088, 512], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 512], stride=[1605632, 100352, 512, 1])
class op23_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf22', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg13_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf23', get_index_4, mul_2, None)
        return store


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
    buf24.users = [
        NodeUser(node=SchedulerNode(name='op25'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False),
    ]
]
op24.node.kernel = extern_kernels.mm


op25_op26_op28: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op25_op26_op28.writes = 
    [   MemoryDep('buf25', c0, {c0: 25088}, None),
        MemoryDep('buf26', c0, {c0: 25088}, None),
        MemoryDep('buf28', c0, {c0: 3211264}, None)]
op25_op26_op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None)]
op25_op26_op28.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 25088, c1: 128}, None)]
op25_op26_op28.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op25_op26_op28.snodes[0] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 25088}, None)]
op25.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None)]
op25.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf25.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (25088, 128)
op25.sizes = ([25088], [128])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op25_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf25', get_index_3, getitem)
        return store_reduction
op25_op26_op28.snodes[1] =
op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 25088}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None)]
op26.met_dependencies = [MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf26.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (25088, 128)
op26.sizes = ([25088], [128])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op26_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem_1)
        return store_reduction
op25_op26_op28.snodes[2] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 3211264}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None),
        MemoryDep('buf25', c0, {c0: 25088}, None),
        MemoryDep('buf26', c0, {c0: 25088}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 25088, c1: 128}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (3211264, 1)
op28.sizes = ([25088, 128], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op28_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf25', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf26', get_index_4)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg16_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf28', get_index_7, add_3, None)
        return store


op29: ExternKernelSchedulerNode(ExternKernelOut)
op29.writes = [StarDep(name='buf29', mode=None)]
op29.unmet_dependencies = [StarDep(name='buf28', mode=None)]
op29.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op29.outputs = [
    buf29: ExternKernelOut
    buf29.layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
    buf29.users = [
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op29.node.kernel = extern_kernels.mm


op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 3211264}, None)]
op30.unmet_dependencies = [   MemoryDep('buf29', 1204224*c0 + 32*c1 + 384*c2 + c3, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op30.met_dependencies = [MemoryDep('arg19_1', 32*c1 + c3, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
    buf30.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (3211264, 1)
op30.sizes = ([8, 4, 3136, 32], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
class op30_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 3136, z3: 32}
    index0 = 1204224*z0 + 32*z1 + 384*z2 + z3
    index1 = 32*z1 + z3
    index2 = 401408*z0 + 100352*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf30', get_index_2, mul, None)
        return store


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 3211264}, None)]
op31.unmet_dependencies = [   MemoryDep('buf29', 1204224*c0 + 32*c1 + 75264*c2 + c3 + 384*c4 + 128, {c0: 8, c1: 4, c2: 16, c3: 32, c4: 196}, None)]
op31.met_dependencies = [MemoryDep('arg19_1', 32*c1 + c3 + 128, {c0: 8, c1: 4, c2: 16, c3: 32}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 32, 196], stride=[401408, 100352, 6272, 196, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (3211264, 1)
op31.sizes = ([8, 4, 16, 32, 196], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 32, 196], stride=[401408, 100352, 6272, 196, 1])
class op31_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 16, z3: 32, z4: 196}
    index0 = 1204224*z0 + 32*z1 + 75264*z2 + z3 + 384*z4 + 128
    index1 = 32*z1 + z3 + 128
    index2 = 401408*z0 + 100352*z1 + 6272*z2 + 196*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf31', get_index_2, mul, None)
        return store


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf30', mode=None), StarDep(name='buf31', mode=None)]
op32.met_dependencies = []
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.bmm


op33_op34_op35_op36: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op33_op34_op35_op36.writes = 
    [   MemoryDep('buf33', 3200*c0 + c1, {c0: 32, c1: 3136}, None),
        MemoryDep('buf34', c0, {c0: 100352}, None),
        MemoryDep('buf35', c0, {c0: 100352}, None),
        MemoryDep('buf36', c0, {c0: 19668992}, None)]
op33_op34_op35_op36.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 19668992}, None)]
op33_op34_op35_op36.met_dependencies = []
op33_op34_op35_op36.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op33_op34_op35_op36.snodes[0] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', 3200*c0 + c1, {c0: 32, c1: 3136}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 19668992}, None)]
op33.met_dependencies = []
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (100352, 196)
op33.sizes = ([32, 3136], [196])
buf32_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf33_layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
class op33_loop_body:
    var_ranges = {z0: 32, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, reduction)
        return store_reduction
op33_op34_op35_op36.snodes[1] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 100352}, None)]
op34.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 19668992}, None)]
op34.met_dependencies = []
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf34.users = [
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
    ]
]
op34.group.device = cuda:0
op34.group.iteration = (100352, 196)
op34.sizes = ([100352], [196])
buf32_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
class op34_loop_body:
    var_ranges = {z0: 100352, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_1, reduction)
        return store_reduction
op33_op34_op35_op36.snodes[2] =
op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 100352}, None)]
op35.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 19668992}, None),
        MemoryDep('buf34', c0, {c0: 100352}, None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op35.group.device = cuda:0
op35.group.iteration = (100352, 196)
op35.sizes = ([100352], [196])
buf32_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
class op35_loop_body:
    var_ranges = {z0: 100352, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf34', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf35', get_index_2, reduction)
        return store_reduction
op33_op34_op35_op36.snodes[3] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 19668992}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf32', c0, {c0: 19668992}, None),
        MemoryDep('buf33', 3200*c0 + c1, {c0: 32, c1: 3136}, None),
        MemoryDep('buf34', c0, {c0: 100352}, None),
        MemoryDep('buf35', c0, {c0: 100352}, None)]
op36.met_dependencies = []
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (19668992, 1)
op36.sizes = ([32, 3136, 196], [])
buf33_layout = FixedLayout('cuda', torch.bool, size=[8, 4, 16, 196, 1], stride=[12800, 3200, 196, 1, 102400])
buf32_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 196], stride=[38416, 196, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 1], stride=[12544, 3136, 196, 1, 100352])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 196], stride=[2458624, 614656, 38416, 196, 1])
class op36_loop_body:
    var_ranges = {z0: 32, z1: 3136, z2: 196}
    index0 = 3200*z0 + z1
    index1 = 614656*z0 + 196*z1 + z2
    index2 = 3136*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf32', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf34', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf35', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf36', get_index_4, where, None)
        return store


op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 3211264}, None)]
op37.unmet_dependencies = [   MemoryDep('buf29', 1204224*c0 + 32*c1 + 384*c2 + c3 + 256, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op37.met_dependencies = [MemoryDep('arg19_1', 32*c1 + c3 + 256, {c0: 8, c1: 4, c2: 3136, c3: 32}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (3211264, 1)
op37.sizes = ([8, 4, 3136, 32], [])
buf29_layout = FixedLayout('cuda', torch.float32, size=[25088, 384], stride=[384, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 16, 196, 32], stride=[401408, 100352, 6272, 32, 1])
class op37_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 3136, z3: 32}
    index0 = 1204224*z0 + 32*z1 + 384*z2 + z3 + 256
    index1 = 32*z1 + z3 + 256
    index2 = 401408*z0 + 100352*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf29', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf37', get_index_2, add, None)
        return store


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None), StarDep(name='buf37', mode=None)]
op38.met_dependencies = []
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[512, 196, 32], stride=[6272, 32, 1])
    buf38.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.bmm


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 3211264}, None)]
op39.unmet_dependencies = [   MemoryDep('buf38', 401408*c0 + c1 + 100352*c2, {c0: 8, c1: 100352, c2: 4}, None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 32, 4], stride=[401408, 25088, 128, 4, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (3211264, 1)
op39.sizes = ([8, 100352, 4], [])
buf38_layout = FixedLayout('cuda', torch.float32, size=[512, 196, 32], stride=[6272, 32, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 32, 4], stride=[401408, 25088, 128, 4, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 100352, z2: 4}
    index0 = 401408*z0 + z1 + 100352*z2
    index1 = 401408*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf38', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelOut)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op40.outputs = [
    buf40: ExternKernelOut
    buf40.layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.mm


op41_op42_op43_op45: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op41_op42_op43_op45.writes = 
    [   MemoryDep('buf41', c0, {c0: 3211264}, None),
        MemoryDep('buf42', c0, {c0: 25088}, None),
        MemoryDep('buf43', c0, {c0: 25088}, None),
        MemoryDep('buf45', c0, {c0: 3211264}, None)]
op41_op42_op43_op45.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None),
        MemoryDep('buf40', c0, {c0: 3211264}, None)]
op41_op42_op43_op45.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg21_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg22_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 128}, None)]
op41_op42_op43_op45.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op41_op42_op43_op45.snodes[0] =
op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 3211264}, None)]
op41.unmet_dependencies = 
    [   MemoryDep('buf17', c0, {c0: 3211264}, None),
        MemoryDep('buf24', c0, {c0: 3211264}, None),
        MemoryDep('buf40', c0, {c0: 3211264}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg21_1', c1, {c0: 25088, c1: 128}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (3211264, 1)
op41.sizes = ([25088, 128], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op41_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf24', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg15_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf40', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg21_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, add_3, None)
        return store
op41_op42_op43_op45.snodes[1] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 25088}, None)]
op42.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 3211264}, None)]
op42.met_dependencies = []
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (25088, 128)
op42.sizes = ([25088], [128])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op42_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf42', get_index_1, getitem)
        return store_reduction
op41_op42_op43_op45.snodes[2] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 25088}, None)]
op43.unmet_dependencies = [MemoryDep('buf41', c0, {c0: 3211264}, None)]
op43.met_dependencies = []
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (25088, 128)
op43.sizes = ([25088], [128])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
class op43_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem_1)
        return store_reduction
op41_op42_op43_op45.snodes[3] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 3211264}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf41', c0, {c0: 3211264}, None),
        MemoryDep('buf42', c0, {c0: 25088}, None),
        MemoryDep('buf43', c0, {c0: 25088}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 128}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
    buf45.users = [NodeUser(node=ExternKernelSchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (3211264, 1)
op45.sizes = ([25088, 128], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 1], stride=[3136, 196, 1, 25088])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
class op45_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf43', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg22_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg23_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf45', get_index_5, add_1, None)
        return store


op46: ExternKernelSchedulerNode(ExternKernelOut)
op46.writes = [StarDep(name='buf46', mode=None)]
op46.unmet_dependencies = [StarDep(name='buf45', mode=None)]
op46.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op46.outputs = [
    buf46: ExternKernelOut
    buf46.layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
    buf46.users = [NodeUser(node=SchedulerNode(name='op47'), can_inplace=True, is_weak=False)]
]
op46.node.kernel = extern_kernels.mm


op47: SchedulerNode(ComputedBuffer)
op47.writes = [MemoryDep('buf47', c0, {c0: 12845056}, None)]
op47.unmet_dependencies = [MemoryDep('buf46', c0, {c0: 12845056}, None)]
op47.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 25088, c1: 512}, None)]
op47.outputs = [
    buf47: ComputedBuffer
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 512], stride=[1605632, 100352, 512, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.group.device = cuda:0
op47.group.iteration = (12845056, 1)
op47.sizes = ([25088, 512], [])
buf46_layout = FixedLayout('cuda', torch.float32, size=[25088, 512], stride=[512, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 512], stride=[1605632, 100352, 512, 1])
class op47_loop_body:
    var_ranges = {z0: 25088, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf46', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg25_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf47', get_index_4, mul_2, None)
        return store


op48: ExternKernelSchedulerNode(ExternKernelOut)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelOut
    buf48.layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.mm


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 3211264}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf41', 401408*c0 + c3 + 100352*((c1//14)) + 25088*((c2//14)) + 1792*ModularIndexing(c1, 1, 14) + 128*ModularIndexing(c2, 1, 14), {c0: 8, c1: 56, c2: 56, c3: 128}, None),
        MemoryDep('buf48', 401408*c0 + c3 + 100352*((c1//14)) + 25088*((c2//14)) + 1792*ModularIndexing(c1, 1, 14) + 128*ModularIndexing(c2, 1, 14), {c0: 8, c1: 56, c2: 56, c3: 128}, None)]
op49.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 25088, c1: 128}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (3211264, 1)
op49.sizes = ([8, 56, 56, 128], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 196, 128], stride=[401408, 25088, 128, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[25088, 128], stride=[128, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 56, z2: 56, z3: 128}
    index0 = 401408*z0 + z3 + 100352*((z1//14)) + 25088*((z2//14)) + 1792*ModularIndexing(z1, 1, 14) + 128*ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 401408*z0 + 7168*z1 + 128*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf41', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf48', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg27_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf49', get_index_3, add_1, None)
        return store


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', 1152*c0 + c1 + 128*c2, {c0: 256, c1: 128, c2: 9}, None)]
op50.unmet_dependencies = []
op50.met_dependencies = [MemoryDep('arg28_1', c0, {c0: 294912}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf50.users = [NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False)]
]
op50.group.device = cuda:0
op50.group.iteration = (294912, 1)
op50.sizes = ([256, 128, 9], [])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 1, 384, 128])
class op50_loop_body:
    var_ranges = {z0: 256, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg28_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf50', get_index_1, load, None)
        return store


op51: ExternKernelSchedulerNode(ExternKernelAlloc)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf49', mode=None), StarDep(name='buf50', mode=None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ExternKernelAlloc
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False),
    ]
]
op51.node.kernel = extern_kernels.convolution


op52_op53: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op52_op53.writes = 
    [   MemoryDep('buf52', c0, {c0: 25088}, None),
        MemoryDep('buf53', c0, {c0: 25088}, None)]
op52_op53.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 6422528}, None)]
op52_op53.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 25088, c1: 256}, None)]
op52_op53.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op52_op53.snodes[0] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 25088}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 6422528}, None)]
op52.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 25088, c1: 256}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
    buf52.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (25088, 256)
op52.sizes = ([25088], [256])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
class op52_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf52', get_index_2, getitem)
        return store_reduction
op52_op53.snodes[1] =
op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 25088}, None)]
op53.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 6422528}, None)]
op53.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 25088, c1: 256}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (25088, 256)
op53.sizes = ([25088], [256])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
class op53_loop_body:
    var_ranges = {z0: 25088, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf53', get_index_2, getitem_1)
        return store_reduction


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 6653952}, None)]
op55.unmet_dependencies = 
    [   MemoryDep('buf51', 802816*c0 + 14336*c1 + c2, {c0: 8, c1: 57, c2: 14592}, None),
        MemoryDep('buf52', 3136*c0 + 56*c1 + c2, {c0: 8, c1: 57, c2: 57}, None),
        MemoryDep('buf53', 3136*c0 + 56*c1 + c2, {c0: 8, c1: 57, c2: 57}, None)]
op55.met_dependencies = 
    [   MemoryDep('arg29_1', c1, {c0: 25992, c1: 256}, None),
        MemoryDep('arg30_1', c1, {c0: 25992, c1: 256}, None),
        MemoryDep('arg31_1', c1, {c0: 25992, c1: 256}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (6653952, 1)
op55.sizes = ([8, 57, 57, 256], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 56, 56], stride=[802816, 1, 14336, 256])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 56, 56, 1], stride=[3136, 56, 1, 25088])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 57, z2: 57, z3: 256}
    index0 = z1
    index1 = z2
    index2 = 802816*z0 + 14336*z1 + 256*z2 + z3
    index3 = z3
    index4 = 3136*z0 + 56*z1 + z2
    index5 = 831744*z0 + 14592*z1 + 256*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(56, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(56, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, -inf)
        get_index_2 = self.get_index('index5')
        store = ops.store('buf55', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf52', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf53', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg30_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg31_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        return add_2


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', 200704*c0 + c1 + 784*c2, {c0: 8, c1: 784, c2: 256}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 14592, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 14848, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 15104, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 256, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 29184, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 29440, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 29696, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3 + 512, {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf55', 831744*c0 + 29184*c1 + 512*c2 + c3, {c0: 8, c1: 28, c2: 28, c3: 256}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
    buf56.users = [
        NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (1605632, 1)
op56.sizes = ([8, 28, 28, 256], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 57, 57], stride=[831744, 1, 14592, 256])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
class op56_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 256}
    index0 = 831744*z0 + 29184*z1 + 512*z2 + z3
    index1 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 256
    index2 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 512
    index3 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 14592
    index4 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 14848
    index5 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 15104
    index6 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 29184
    index7 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 29440
    index8 = 831744*z0 + 29184*z1 + 512*z2 + z3 + 29696
    index9 = 200704*z0 + 28*z1 + z2 + 784*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf55', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf55', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf55', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf55', get_index_4)
        maximum_3 = ops.maximum(load_4, maximum_2)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('buf55', get_index_5)
        maximum_4 = ops.maximum(load_5, maximum_3)
        get_index_6 = self.get_index('index6')
        load_6 = ops.load('buf55', get_index_6)
        maximum_5 = ops.maximum(load_6, maximum_4)
        get_index_7 = self.get_index('index7')
        load_7 = ops.load('buf55', get_index_7)
        maximum_6 = ops.maximum(load_7, maximum_5)
        get_index_8 = self.get_index('index8')
        load_8 = ops.load('buf55', get_index_8)
        maximum_7 = ops.maximum(load_8, maximum_6)
        get_index_9 = self.get_index('index9')
        store = ops.store('buf56', get_index_9, maximum_7, None)
        return store


op57_op58_op59: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op57_op58_op59.writes = 
    [   MemoryDep('buf57', c0, {c0: 12544}, None),
        MemoryDep('buf58', c0, {c0: 12544}, None),
        MemoryDep('buf59', c0, {c0: 12544}, None)]
op57_op58_op59.unmet_dependencies = [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None)]
op57_op58_op59.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None)]
op57_op58_op59.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op57_op58_op59.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 12544}, None)]
op57.unmet_dependencies = [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None)]
op57.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op57.group.device = cuda:0
op57.group.iteration = (12544, 128)
op57.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf57', get_index_2, getitem)
        return store_reduction
op57_op58_op59.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 12544}, None)]
op58.unmet_dependencies = [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None)]
op58.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf58.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (12544, 128)
op58.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op58_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_2, getitem_1)
        return store_reduction
op57_op58_op59.snodes[2] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 12544}, None)]
op59.unmet_dependencies = [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None)]
op59.met_dependencies = [MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (12544, 128)
op59.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_2, getitem_2)
        return store_reduction


op60_op61: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op60_op61.writes = 
    [   MemoryDep('buf60', c0, {c0: 6272}, None),
        MemoryDep('buf61', c0, {c0: 6272}, None)]
op60_op61.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 12544}, None),
        MemoryDep('buf58', c0, {c0: 12544}, None),
        MemoryDep('buf59', c0, {c0: 12544}, None)]
op60_op61.met_dependencies = []
op60_op61.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60_op61.snodes[0] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 6272}, None)]
op60.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 12544}, None),
        MemoryDep('buf58', c0, {c0: 12544}, None),
        MemoryDep('buf59', c0, {c0: 12544}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf60.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (6272, 2)
op60.sizes = ([6272], [2])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op60_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf58', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf60', get_index_3, getitem)
        return store_reduction
op60_op61.snodes[1] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 6272}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 12544}, None),
        MemoryDep('buf58', c0, {c0: 12544}, None),
        MemoryDep('buf59', c0, {c0: 12544}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf61.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (6272, 2)
op61.sizes = ([6272], [2])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op61_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf58', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf59', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_3, getitem_1)
        return store_reduction


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1605632}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf60', c0, {c0: 6272}, None),
        MemoryDep('buf61', c0, {c0: 6272}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg33_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg34_1', c1, {c0: 6272, c1: 256}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1605632, 1)
op63.sizes = ([8, 4, 196, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
class op63_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 256}
    index0 = 200704*z0 + 784*z3 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + z3
    index2 = 784*z0 + 196*z1 + z2
    index3 = z3
    index4 = 200704*z0 + 50176*z1 + 256*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf60', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf61', get_index_3)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg33_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg34_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf63', get_index_6, add_2, None)
        return store


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg35_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 1605632}, None)]
op65.unmet_dependencies = [   MemoryDep('buf64', 602112*c0 + 32*c1 + 768*c2 + c3, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op65.met_dependencies = [MemoryDep('arg36_1', 32*c1 + c3, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
    buf65.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (1605632, 1)
op65.sizes = ([8, 8, 784, 32], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
class op65_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 784, z3: 32}
    index0 = 602112*z0 + 32*z1 + 768*z2 + z3
    index1 = 32*z1 + z3
    index2 = 200704*z0 + 25088*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf65', get_index_2, mul, None)
        return store


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1605632}, None)]
op66.unmet_dependencies = [   MemoryDep('buf64', 602112*c0 + 32*c1 + 150528*c2 + c3 + 768*c4 + 256, {c0: 8, c1: 8, c2: 4, c3: 32, c4: 196}, None)]
op66.met_dependencies = [MemoryDep('arg36_1', 32*c1 + c3 + 256, {c0: 8, c1: 8, c2: 4, c3: 32}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 32, 196], stride=[200704, 25088, 6272, 196, 1])
    buf66.users = [NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (1605632, 1)
op66.sizes = ([8, 8, 4, 32, 196], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 32, 196], stride=[200704, 25088, 6272, 196, 1])
class op66_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 4, z3: 32, z4: 196}
    index0 = 602112*z0 + 32*z1 + 150528*z2 + z3 + 768*z4 + 256
    index1 = 32*z1 + z3 + 256
    index2 = 200704*z0 + 25088*z1 + 6272*z2 + 196*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf66', get_index_2, mul, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf65', mode=None), StarDep(name='buf66', mode=None)]
op67.met_dependencies = []
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False),
    ]
]
op67.node.kernel = extern_kernels.bmm


op68_op69_op70_op71: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op68_op69_op70_op71.writes = 
    [   MemoryDep('buf68', c0, {c0: 50176}, None),
        MemoryDep('buf69', c0, {c0: 50176}, None),
        MemoryDep('buf70', c0, {c0: 50176}, None),
        MemoryDep('buf71', c0, {c0: 9834496}, None)]
op68_op69_op70_op71.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 9834496}, None)]
op68_op69_op70_op71.met_dependencies = []
op68_op69_op70_op71.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op68_op69_op70_op71.snodes[0] =
op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 50176}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 9834496}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf68.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (50176, 196)
op68.sizes = ([50176], [196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf68_layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op68_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf68', get_index_1, reduction)
        return store_reduction
op68_op69_op70_op71.snodes[1] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 50176}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 9834496}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf69.users = [
        NodeUser(node=SchedulerNode(name='op70'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
    ]
]
op69.group.device = cuda:0
op69.group.iteration = (50176, 196)
op69.sizes = ([50176], [196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op69_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, reduction)
        return store_reduction
op68_op69_op70_op71.snodes[2] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 50176}, None)]
op70.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 9834496}, None),
        MemoryDep('buf69', c0, {c0: 50176}, None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (50176, 196)
op70.sizes = ([50176], [196])
buf67_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op70_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf69', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_2, reduction)
        return store_reduction
op68_op69_op70_op71.snodes[3] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 9834496}, None)]
op71.unmet_dependencies = 
    [   MemoryDep('buf67', c0, {c0: 9834496}, None),
        MemoryDep('buf68', c0, {c0: 50176}, None),
        MemoryDep('buf69', c0, {c0: 50176}, None),
        MemoryDep('buf70', c0, {c0: 50176}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op71.group.device = cuda:0
op71.group.iteration = (9834496, 1)
op71.sizes = ([50176, 196], [])
buf68_layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf67_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
class op71_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = z0
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf67', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf69', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf70', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf71', get_index_4, where, None)
        return store


op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 1605632}, None)]
op72.unmet_dependencies = [   MemoryDep('buf64', 602112*c0 + 32*c1 + 768*c2 + c3 + 512, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op72.met_dependencies = [MemoryDep('arg36_1', 32*c1 + c3 + 512, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
    buf72.users = [NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (1605632, 1)
op72.sizes = ([8, 8, 784, 32], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
class op72_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 784, z3: 32}
    index0 = 602112*z0 + 32*z1 + 768*z2 + z3 + 512
    index1 = 32*z1 + z3 + 512
    index2 = 200704*z0 + 25088*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf72', get_index_2, add, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf71', mode=None), StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[256, 196, 32], stride=[6272, 32, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.bmm


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1605632}, None)]
op74.unmet_dependencies = [MemoryDep('buf73', 200704*c0 + c1 + 25088*c2, {c0: 8, c1: 25088, c2: 8}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32, 8], stride=[200704, 50176, 256, 8, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1605632, 1)
op74.sizes = ([8, 25088, 8], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 32], stride=[6272, 32, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32, 8], stride=[200704, 50176, 256, 8, 1])
class op74_loop_body:
    var_ranges = {z0: 8, z1: 25088, z2: 8}
    index0 = 200704*z0 + z1 + 25088*z2
    index1 = 200704*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf74', mode=None)]
op75.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
    buf75.users = [
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op75.node.kernel = extern_kernels.mm


op76_op77_op78: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op76_op77_op78.writes = 
    [   MemoryDep('buf76', c0, {c0: 12544}, None),
        MemoryDep('buf77', c0, {c0: 12544}, None),
        MemoryDep('buf78', c0, {c0: 12544}, None)]
op76_op77_op78.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None)]
op76_op77_op78.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None)]
op76_op77_op78.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op76_op77_op78.snodes[0] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 12544}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf76.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op76.group.device = cuda:0
op76.group.iteration = (12544, 128)
op76.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op76_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 200704*z0 + 50176*z1 + 256*z2 + 128*z3 + z4
    index3 = 128*z3 + z4
    index4 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf76', get_index_4, getitem)
        return store_reduction
op76_op77_op78.snodes[1] =
op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 12544}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf77.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (12544, 128)
op77.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op77_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 200704*z0 + 50176*z1 + 256*z2 + 128*z3 + z4
    index3 = 128*z3 + z4
    index4 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf77', get_index_4, getitem_1)
        return store_reduction
op76_op77_op78.snodes[2] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 12544}, None)]
op78.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
    buf78.users = [
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (12544, 128)
op78.sizes = ([8, 4, 196, 2], [128])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
class op78_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 2, z4: 128}
    index0 = 200704*z0 + 100352*z3 + 784*z4 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + 128*z3 + z4
    index2 = 200704*z0 + 50176*z1 + 256*z2 + 128*z3 + z4
    index3 = 128*z3 + z4
    index4 = 1568*z0 + 392*z1 + 2*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf78', get_index_4, getitem_2)
        return store_reduction


op79_op80: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op79_op80.writes = 
    [   MemoryDep('buf79', c0, {c0: 6272}, None),
        MemoryDep('buf80', c0, {c0: 6272}, None)]
op79_op80.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 12544}, None),
        MemoryDep('buf77', c0, {c0: 12544}, None),
        MemoryDep('buf78', c0, {c0: 12544}, None)]
op79_op80.met_dependencies = []
op79_op80.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79_op80.snodes[0] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 6272}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 12544}, None),
        MemoryDep('buf77', c0, {c0: 12544}, None),
        MemoryDep('buf78', c0, {c0: 12544}, None)]
op79.met_dependencies = []
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf79.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (6272, 2)
op79.sizes = ([6272], [2])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op79_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_3, getitem)
        return store_reduction
op79_op80.snodes[1] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 6272}, None)]
op80.unmet_dependencies = 
    [   MemoryDep('buf76', c0, {c0: 12544}, None),
        MemoryDep('buf77', c0, {c0: 12544}, None),
        MemoryDep('buf78', c0, {c0: 12544}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf80.users = [NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (6272, 2)
op80.sizes = ([6272], [2])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1, 2], stride=[1568, 392, 2, 12544, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op80_loop_body:
    var_ranges = {z0: 6272, z1: 2}
    index0 = 2*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf77', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf78', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_3, getitem_1)
        return store_reduction


op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 1605632}, None)]
op82.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None),
        MemoryDep('buf79', c0, {c0: 6272}, None),
        MemoryDep('buf80', c0, {c0: 6272}, None)]
op82.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg39_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg40_1', c1, {c0: 6272, c1: 256}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf82.users = [NodeUser(node=ExternKernelSchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (1605632, 1)
op82.sizes = ([8, 4, 196, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
class op82_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 256}
    index0 = 200704*z0 + 784*z3 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + z3
    index2 = 200704*z0 + 50176*z1 + 256*z2 + z3
    index3 = z3
    index4 = 784*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf79', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf80', get_index_5)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg39_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg40_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf82', get_index_8, add_4, None)
        return store


op83: ExternKernelSchedulerNode(ExternKernelOut)
op83.writes = [StarDep(name='buf83', mode=None)]
op83.unmet_dependencies = [StarDep(name='buf82', mode=None)]
op83.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op83.outputs = [
    buf83: ExternKernelOut
    buf83.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf83.users = [NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False)]
]
op83.node.kernel = extern_kernels.mm


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 6422528}, None)]
op84.unmet_dependencies = [MemoryDep('buf83', c0, {c0: 6422528}, None)]
op84.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 6272, c1: 1024}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1024], stride=[802816, 200704, 1024, 1])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (6422528, 1)
op84.sizes = ([6272, 1024], [])
buf83_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1024], stride=[802816, 200704, 1024, 1])
class op84_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf83', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf83', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg42_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf84', get_index_4, mul_2, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelOut)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf84', mode=None)]
op85.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op85.outputs = [
    buf85: ExternKernelOut
    buf85.layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.node.kernel = extern_kernels.mm


op86_op87_op88_op90: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op86_op87_op88_op90.writes = 
    [   MemoryDep('buf86', c0, {c0: 1605632}, None),
        MemoryDep('buf87', c0, {c0: 6272}, None),
        MemoryDep('buf88', c0, {c0: 6272}, None),
        MemoryDep('buf90', c0, {c0: 1605632}, None)]
op86_op87_op88_op90.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None),
        MemoryDep('buf85', c0, {c0: 1605632}, None)]
op86_op87_op88_op90.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg45_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg46_1', c1, {c0: 6272, c1: 256}, None)]
op86_op87_op88_op90.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op86_op87_op88_op90.snodes[0] =
op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 1605632}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf56', 200704*c0 + 784*c3 + 392*((c1//2)) + 28*((c2//14)) + 14*ModularIndexing(c1, 1, 2) + ModularIndexing(c2, 1, 14), {c0: 8, c1: 4, c2: 196, c3: 256}, None),
        MemoryDep('buf75', c0, {c0: 1605632}, None),
        MemoryDep('buf85', c0, {c0: 1605632}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 8, c1: 200704}, None),
        MemoryDep('arg38_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg44_1', c1, {c0: 6272, c1: 256}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (1605632, 1)
op86.sizes = ([8, 4, 196, 256], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 784, 28, 1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[1, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
class op86_loop_body:
    var_ranges = {z0: 8, z1: 4, z2: 196, z3: 256}
    index0 = 200704*z0 + 784*z3 + 392*((z1//2)) + 28*((z2//14)) + 14*ModularIndexing(z1, 1, 2) + ModularIndexing(z2, 1, 14)
    index1 = 50176*z1 + 256*z2 + z3
    index2 = 200704*z0 + 50176*z1 + 256*z2 + z3
    index3 = z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf75', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf85', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg44_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf86', get_index_6, add_4, None)
        return store
op86_op87_op88_op90.snodes[1] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 6272}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 1605632}, None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf87.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (6272, 256)
op87.sizes = ([6272], [256])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op87_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, getitem)
        return store_reduction
op86_op87_op88_op90.snodes[2] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 6272}, None)]
op88.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 1605632}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf88.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (6272, 256)
op88.sizes = ([6272], [256])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op88_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_1, getitem_1)
        return store_reduction
op86_op87_op88_op90.snodes[3] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1605632}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf86', c0, {c0: 1605632}, None),
        MemoryDep('buf87', c0, {c0: 6272}, None),
        MemoryDep('buf88', c0, {c0: 6272}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg46_1', c1, {c0: 6272, c1: 256}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1605632, 1)
op90.sizes = ([6272, 256], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
class op90_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf88', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg45_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg46_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, add_1, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
    buf91.users = [
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 1605632}, None)]
op92.unmet_dependencies = [   MemoryDep('buf91', 602112*c0 + 32*c1 + 768*c2 + c3, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op92.met_dependencies = [MemoryDep('arg48_1', 32*c1 + c3, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (1605632, 1)
op92.sizes = ([8, 8, 784, 32], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
class op92_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 784, z3: 32}
    index0 = 602112*z0 + 32*z1 + 768*z2 + z3
    index1 = 32*z1 + z3
    index2 = 200704*z0 + 25088*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf92', get_index_2, mul, None)
        return store


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 1605632}, None)]
op93.unmet_dependencies = [   MemoryDep('buf91', 602112*c0 + 32*c1 + 150528*c2 + c3 + 768*c4 + 256, {c0: 8, c1: 8, c2: 4, c3: 32, c4: 196}, None)]
op93.met_dependencies = [MemoryDep('arg48_1', 32*c1 + c3 + 256, {c0: 8, c1: 8, c2: 4, c3: 32}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 32, 196], stride=[200704, 25088, 6272, 196, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (1605632, 1)
op93.sizes = ([8, 8, 4, 32, 196], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 32, 196], stride=[200704, 25088, 6272, 196, 1])
class op93_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 4, z3: 32, z4: 196}
    index0 = 602112*z0 + 32*z1 + 150528*z2 + z3 + 768*z4 + 256
    index1 = 32*z1 + z3 + 256
    index2 = 200704*z0 + 25088*z1 + 6272*z2 + 196*z3 + z4
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf93', get_index_2, mul, None)
        return store


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf92', mode=None), StarDep(name='buf93', mode=None)]
op94.met_dependencies = []
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
    buf94.users = [
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=True, is_weak=False),
    ]
]
op94.node.kernel = extern_kernels.bmm


op95_op96_op97_op98: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op95_op96_op97_op98.writes = 
    [   MemoryDep('buf95', c0, {c0: 50176}, None),
        MemoryDep('buf96', c0, {c0: 50176}, None),
        MemoryDep('buf97', c0, {c0: 50176}, None),
        MemoryDep('buf98', c0, {c0: 9834496}, None)]
op95_op96_op97_op98.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 9834496}, None)]
op95_op96_op97_op98.met_dependencies = []
op95_op96_op97_op98.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op95_op96_op97_op98.snodes[0] =
op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 50176}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 9834496}, None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf95.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (50176, 196)
op95.sizes = ([50176], [196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf95_layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op95_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf95', get_index_1, reduction)
        return store_reduction
op95_op96_op97_op98.snodes[1] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 50176}, None)]
op96.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 9834496}, None)]
op96.met_dependencies = []
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (50176, 196)
op96.sizes = ([50176], [196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op96_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_1, reduction)
        return store_reduction
op95_op96_op97_op98.snodes[2] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 50176}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 9834496}, None),
        MemoryDep('buf96', c0, {c0: 50176}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
    buf97.users = [NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (50176, 196)
op97.sizes = ([50176], [196])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
class op97_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf96', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_2, reduction)
        return store_reduction
op95_op96_op97_op98.snodes[3] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 9834496}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf94', c0, {c0: 9834496}, None),
        MemoryDep('buf95', c0, {c0: 50176}, None),
        MemoryDep('buf96', c0, {c0: 50176}, None),
        MemoryDep('buf97', c0, {c0: 50176}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (9834496, 1)
op98.sizes = ([50176, 196], [])
buf95_layout = FixedLayout('cuda', torch.bool, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf94_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 196], stride=[38416, 196, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 1], stride=[6272, 784, 196, 1, 50176])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 196], stride=[1229312, 153664, 38416, 196, 1])
class op98_loop_body:
    var_ranges = {z0: 50176, z1: 196}
    index0 = z0
    index1 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf94', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf96', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf97', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index1')
        store = ops.store('buf98', get_index_4, where, None)
        return store


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 1605632}, None)]
op99.unmet_dependencies = [   MemoryDep('buf91', 602112*c0 + 32*c1 + 768*c2 + c3 + 512, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op99.met_dependencies = [MemoryDep('arg48_1', 32*c1 + c3 + 512, {c0: 8, c1: 8, c2: 784, c3: 32}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (1605632, 1)
op99.sizes = ([8, 8, 784, 32], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[6272, 768], stride=[768, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 8, 4, 196, 32], stride=[200704, 25088, 6272, 32, 1])
class op99_loop_body:
    var_ranges = {z0: 8, z1: 8, z2: 784, z3: 32}
    index0 = 602112*z0 + 32*z1 + 768*z2 + z3 + 512
    index1 = 32*z1 + z3 + 512
    index2 = 200704*z0 + 25088*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf99', get_index_2, add, None)
        return store


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf98', mode=None), StarDep(name='buf99', mode=None)]
op100.met_dependencies = []
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[256, 196, 32], stride=[6272, 32, 1])
    buf100.users = [NodeUser(node=SchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.bmm


op101: SchedulerNode(ComputedBuffer)
op101.writes = [MemoryDep('buf101', c0, {c0: 1605632}, None)]
op101.unmet_dependencies = [   MemoryDep('buf100', 200704*c0 + c1 + 25088*c2, {c0: 8, c1: 25088, c2: 8}, None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ComputedBuffer
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32, 8], stride=[200704, 50176, 256, 8, 1])
    buf101.users = [NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False)]
]
op101.group.device = cuda:0
op101.group.iteration = (1605632, 1)
op101.sizes = ([8, 25088, 8], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[256, 196, 32], stride=[6272, 32, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 32, 8], stride=[200704, 50176, 256, 8, 1])
class op101_loop_body:
    var_ranges = {z0: 8, z1: 25088, z2: 8}
    index0 = 200704*z0 + z1 + 25088*z2
    index1 = 200704*z0 + 8*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf101', get_index_1, load, None)
        return store


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
    buf102.users = [
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
    ]
]
op102.node.kernel = extern_kernels.mm


op103_op104_op106: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op103_op104_op106.writes = 
    [   MemoryDep('buf103', c0, {c0: 6272}, None),
        MemoryDep('buf104', c0, {c0: 6272}, None),
        MemoryDep('buf106', c0, {c0: 1605632}, None)]
op103_op104_op106.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1605632}, None),
        MemoryDep('buf86', c0, {c0: 1605632}, None)]
op103_op104_op106.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg51_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 6272, c1: 256}, None)]
op103_op104_op106.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf103.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op103_op104_op106.snodes[0] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 6272}, None)]
op103.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1605632}, None),
        MemoryDep('buf86', c0, {c0: 1605632}, None)]
op103.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 6272, c1: 256}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf103.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (6272, 256)
op103.sizes = ([6272], [256])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op103_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf103', get_index_3, getitem)
        return store_reduction
op103_op104_op106.snodes[1] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 6272}, None)]
op104.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1605632}, None),
        MemoryDep('buf86', c0, {c0: 1605632}, None)]
op104.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 6272, c1: 256}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
    buf104.users = [NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (6272, 256)
op104.sizes = ([6272], [256])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
class op104_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_3, getitem_1)
        return store_reduction
op103_op104_op106.snodes[2] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 1605632}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1605632}, None),
        MemoryDep('buf103', c0, {c0: 6272}, None),
        MemoryDep('buf104', c0, {c0: 6272}, None),
        MemoryDep('buf86', c0, {c0: 1605632}, None)]
op106.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg51_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg52_1', c1, {c0: 6272, c1: 256}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
    buf106.users = [NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (1605632, 1)
op106.sizes = ([6272, 256], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1], stride=[784, 196, 1, 6272])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
class op106_loop_body:
    var_ranges = {z0: 6272, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf103', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf104', get_index_4)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf106', get_index_7, add_3, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf106', mode=None)]
op107.met_dependencies = [StarDep(name='arg53_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 6422528}, None)]
op108.unmet_dependencies = [MemoryDep('buf107', c0, {c0: 6422528}, None)]
op108.met_dependencies = [MemoryDep('arg54_1', c1, {c0: 6272, c1: 1024}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1024], stride=[802816, 200704, 1024, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (6422528, 1)
op108.sizes = ([6272, 1024], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[6272, 1024], stride=[1024, 1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 1024], stride=[802816, 200704, 1024, 1])
class op108_loop_body:
    var_ranges = {z0: 6272, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg54_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf108', get_index_4, mul_2, None)
        return store


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg55_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 1605632}, None)]
op110.unmet_dependencies = 
    [   MemoryDep('buf102', 200704*c0 + c3 + 100352*((c1//14)) + 50176*((c2//14)) + 3584*ModularIndexing(c1, 1, 14) + 256*ModularIndexing(c2, 1, 14), {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf109', 200704*c0 + c3 + 100352*((c1//14)) + 50176*((c2//14)) + 3584*ModularIndexing(c1, 1, 14) + 256*ModularIndexing(c2, 1, 14), {c0: 8, c1: 28, c2: 28, c3: 256}, None),
        MemoryDep('buf86', 200704*c0 + c3 + 100352*((c1//14)) + 50176*((c2//14)) + 3584*ModularIndexing(c1, 1, 14) + 256*ModularIndexing(c2, 1, 14), {c0: 8, c1: 28, c2: 28, c3: 256}, None)]
op110.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 6272, c1: 256}, None),
        MemoryDep('arg56_1', c1, {c0: 6272, c1: 256}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (1605632, 1)
op110.sizes = ([8, 28, 28, 256], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 4, 196, 256], stride=[200704, 50176, 256, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[6272, 256], stride=[256, 1])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 28, 28], stride=[200704, 1, 7168, 256])
class op110_loop_body:
    var_ranges = {z0: 8, z1: 28, z2: 28, z3: 256}
    index0 = 200704*z0 + z3 + 100352*((z1//14)) + 50176*((z2//14)) + 3584*ModularIndexing(z1, 1, 14) + 256*ModularIndexing(z2, 1, 14)
    index1 = z3
    index2 = 200704*z0 + 7168*z1 + 256*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf102', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg50_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf109', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg56_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index2')
        store = ops.store('buf110', get_index_5, add_3, None)
        return store


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', 2304*c0 + c1 + 256*c2, {c0: 512, c1: 256, c2: 9}, None)]
op111.unmet_dependencies = []
op111.met_dependencies = [MemoryDep('arg57_1', c0, {c0: 1179648}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (1179648, 1)
op111.sizes = ([512, 256, 9], [])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 9, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 3, 3], stride=[2304, 1, 768, 256])
class op111_loop_body:
    var_ranges = {z0: 512, z1: 256, z2: 9}
    index0 = 2304*z0 + 9*z1 + z2
    index1 = 2304*z0 + z1 + 256*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg57_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf110', mode=None), StarDep(name='buf111', mode=None)]
op112.met_dependencies = []
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.convolution


op113_op114: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op113_op114.writes = 
    [   MemoryDep('buf113', c0, {c0: 6272}, None),
        MemoryDep('buf114', c0, {c0: 6272}, None)]
op113_op114.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 3211264}, None)]
op113_op114.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 6272, c1: 512}, None)]
op113_op114.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113_op114.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 6272}, None)]
op113.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 3211264}, None)]
op113.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 6272, c1: 512}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf113.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (6272, 512)
op113.sizes = ([6272], [512])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op113_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_2, getitem)
        return store_reduction
op113_op114.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 6272}, None)]
op114.unmet_dependencies = [MemoryDep('buf112', c0, {c0: 3211264}, None)]
op114.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 6272, c1: 512}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
    buf114.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (6272, 512)
op114.sizes = ([6272], [512])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
class op114_loop_body:
    var_ranges = {z0: 6272, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_2, getitem_1)
        return store_reduction


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 3444736}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', 401408*c0 + 14336*c1 + c2, {c0: 8, c1: 29, c2: 14848}, None),
        MemoryDep('buf113', 784*c0 + 28*c1 + c2, {c0: 8, c1: 29, c2: 29}, None),
        MemoryDep('buf114', 784*c0 + 28*c1 + c2, {c0: 8, c1: 29, c2: 29}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg58_1', c1, {c0: 6728, c1: 512}, None),
        MemoryDep('arg59_1', c1, {c0: 6728, c1: 512}, None),
        MemoryDep('arg60_1', c1, {c0: 6728, c1: 512}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
    buf116.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (3444736, 1)
op116.sizes = ([8, 29, 29, 512], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 28, 28], stride=[401408, 1, 14336, 512])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 28, 28, 1], stride=[784, 28, 1, 6272])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
class op116_loop_body:
    var_ranges = {z0: 8, z1: 29, z2: 29, z3: 512}
    index0 = z1
    index1 = z2
    index2 = 401408*z0 + 14336*z1 + 512*z2 + z3
    index3 = z3
    index4 = 784*z0 + 28*z1 + z2
    index5 = 430592*z0 + 14848*z1 + 512*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(28, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(28, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, -inf)
        get_index_2 = self.get_index('index5')
        store = ops.store('buf116', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('buf113', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf114', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg59_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg60_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        return add_2


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 1024, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 14848, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 15360, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 15872, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 29696, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 30208, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 30720, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3 + 512, {c0: 8, c1: 14, c2: 14, c3: 512}, None),
        MemoryDep('buf116', 430592*c0 + 29696*c1 + 1024*c2 + c3, {c0: 8, c1: 14, c2: 14, c3: 512}, None)]
op117.met_dependencies = []
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
    buf117.users = [
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
    ]
]
op117.group.device = cuda:0
op117.group.iteration = (802816, 1)
op117.sizes = ([8, 14, 14, 512], [])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf116_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 29, 29], stride=[430592, 1, 14848, 512])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
class op117_loop_body:
    var_ranges = {z0: 8, z1: 14, z2: 14, z3: 512}
    index0 = 430592*z0 + 29696*z1 + 1024*z2 + z3
    index1 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 512
    index2 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 1024
    index3 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 14848
    index4 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 15360
    index5 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 15872
    index6 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 29696
    index7 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 30208
    index8 = 430592*z0 + 29696*z1 + 1024*z2 + z3 + 30720
    index9 = 100352*z0 + 14*z1 + z2 + 196*z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf116', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf116', get_index_1)
        maximum = ops.maximum(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf116', get_index_2)
        maximum_1 = ops.maximum(load_2, maximum)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf116', get_index_3)
        maximum_2 = ops.maximum(load_3, maximum_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf116', get_index_4)
        maximum_3 = ops.maximum(load_4, maximum_2)
        get_index_5 = self.get_index('index5')
        load_5 = ops.load('buf116', get_index_5)
        maximum_4 = ops.maximum(load_5, maximum_3)
        get_index_6 = self.get_index('index6')
        load_6 = ops.load('buf116', get_index_6)
        maximum_5 = ops.maximum(load_6, maximum_4)
        get_index_7 = self.get_index('index7')
        load_7 = ops.load('buf116', get_index_7)
        maximum_6 = ops.maximum(load_7, maximum_5)
        get_index_8 = self.get_index('index8')
        load_8 = ops.load('buf116', get_index_8)
        maximum_7 = ops.maximum(load_8, maximum_6)
        get_index_9 = self.get_index('index9')
        store = ops.store('buf117', get_index_9, maximum_7, None)
        return store


op118_op119_op120: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op118_op119_op120.writes = 
    [   MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf120', c0, {c0: 6272}, None)]
op118_op119_op120.unmet_dependencies = [MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None)]
op118_op119_op120.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None)]
op118_op119_op120.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
]
op118_op119_op120.snodes[0] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 6272}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None)]
op118.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf118.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
]
op118.group.device = cuda:0
op118.group.iteration = (6272, 128)
op118.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op118_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf118', get_index_2, getitem)
        return store_reduction
op118_op119_op120.snodes[1] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 6272}, None)]
op119.unmet_dependencies = [MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None)]
op119.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf119.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (6272, 128)
op119.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op119_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf119', get_index_2, getitem_1)
        return store_reduction
op118_op119_op120.snodes[2] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 6272}, None)]
op120.unmet_dependencies = [MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None)]
op120.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (6272, 128)
op120.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op120_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf120', get_index_2, getitem_2)
        return store_reduction


op121_op122: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op121_op122.writes = 
    [   MemoryDep('buf121', c0, {c0: 1568}, None),
        MemoryDep('buf122', c0, {c0: 1568}, None)]
op121_op122.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf120', c0, {c0: 6272}, None)]
op121_op122.met_dependencies = []
op121_op122.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op121_op122.snodes[0] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 1568}, None)]
op121.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf120', c0, {c0: 6272}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf121.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (1568, 4)
op121.sizes = ([1568], [4])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op121_loop_body:
    var_ranges = {z0: 1568, z1: 4}
    index0 = 4*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf119', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_3, getitem)
        return store_reduction
op121_op122.snodes[1] =
op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 1568}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf118', c0, {c0: 6272}, None),
        MemoryDep('buf119', c0, {c0: 6272}, None),
        MemoryDep('buf120', c0, {c0: 6272}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf122.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (1568, 4)
op122.sizes = ([1568], [4])
buf118_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op122_loop_body:
    var_ranges = {z0: 1568, z1: 4}
    index0 = 4*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf118', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf119', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem_1)
        return store_reduction


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 802816}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf121', c0, {c0: 1568}, None),
        MemoryDep('buf122', c0, {c0: 1568}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg62_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg63_1', c1, {c0: 1568, c1: 512}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (802816, 1)
op124.sizes = ([8, 196, 512], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf122_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op124_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 512}
    index0 = 100352*z0 + z1 + 196*z2
    index1 = 512*z1 + z2
    index2 = 196*z0 + z1
    index3 = z2
    index4 = 100352*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf121', get_index_2)
        sub = ops.sub(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf122', get_index_3)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_3, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_1 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_1)
        mul = ops.mul(sub, rsqrt)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg62_1', get_index_4)
        mul_1 = ops.mul(mul, load_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg63_1', get_index_5)
        add_2 = ops.add(mul_1, load_5)
        get_index_6 = self.get_index('index4')
        store = ops.store('buf124', get_index_6, add_2, None)
        return store


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf125.users = [
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
    ]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 802816}, None)]
op126.unmet_dependencies = [   MemoryDep('buf125', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op126.met_dependencies = [MemoryDep('arg65_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf126.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (802816, 1)
op126.sizes = ([8, 16, 196, 32], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op126_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf126', get_index_2, mul, None)
        return store


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 802816}, None)]
op127.unmet_dependencies = [   MemoryDep('buf125', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op127.met_dependencies = [MemoryDep('arg65_1', c1 + 512, {c0: 8, c1: 512}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (802816, 1)
op127.sizes = ([8, 512, 196], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op127_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf127', get_index_2, mul, None)
        return store


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf126', mode=None), StarDep(name='buf127', mode=None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op128.node.kernel = extern_kernels.bmm


op129_op130_op131_op132: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op129_op130_op131_op132.writes = 
    [   MemoryDep('buf129', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf130', c0, {c0: 25088}, None),
        MemoryDep('buf131', c0, {c0: 25088}, None),
        MemoryDep('buf132', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op129_op130_op131_op132.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4917248}, None)]
op129_op130_op131_op132.met_dependencies = []
op129_op130_op131_op132.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op129_op130_op131_op132.snodes[0] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op129.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4917248}, None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (25088, 196)
op129.sizes = ([8, 3136], [196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf129_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op129_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, reduction)
        return store_reduction
op129_op130_op131_op132.snodes[1] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 25088}, None)]
op130.unmet_dependencies = [MemoryDep('buf128', c0, {c0: 4917248}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf130.users = [
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False),
    ]
]
op130.group.device = cuda:0
op130.group.iteration = (25088, 196)
op130.sizes = ([25088], [196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op130_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_1, reduction)
        return store_reduction
op129_op130_op131_op132.snodes[2] =
op131: SchedulerNode(ComputedBuffer)
op131.writes = [MemoryDep('buf131', c0, {c0: 25088}, None)]
op131.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 4917248}, None),
        MemoryDep('buf130', c0, {c0: 25088}, None)]
op131.met_dependencies = []
op131.outputs = [
    buf131: ComputedBuffer
    buf131.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.group.device = cuda:0
op131.group.iteration = (25088, 196)
op131.sizes = ([25088], [196])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op131_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf130', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf131', get_index_2, reduction)
        return store_reduction
op129_op130_op131_op132.snodes[3] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf128', c0, {c0: 4917248}, None),
        MemoryDep('buf129', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf130', c0, {c0: 25088}, None),
        MemoryDep('buf131', c0, {c0: 25088}, None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf132.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (4917248, 1)
op132.sizes = ([8, 16, 196, 196], [])
buf129_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf131_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf132_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op132_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf128', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf130', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf131', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf132', get_index_4, where, None)
        return store


op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 802816}, None)]
op133.unmet_dependencies = [   MemoryDep('buf125', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op133.met_dependencies = [   MemoryDep('arg65_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (802816, 1)
op133.sizes = ([8, 16, 196, 32], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op133_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf133', get_index_2, add, None)
        return store


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None), StarDep(name='buf133', mode=None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf134.users = [NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.bmm


op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 802816}, None)]
op135.unmet_dependencies = [MemoryDep('buf134', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op135.met_dependencies = []
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (802816, 1)
op135.sizes = ([8, 6272, 16], [])
buf134_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op135_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf134', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf135', get_index_1, load, None)
        return store


op136: ExternKernelSchedulerNode(ExternKernelOut)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = [StarDep(name='buf135', mode=None)]
op136.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op136.outputs = [
    buf136: ExternKernelOut
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf136.users = [
        NodeUser(node=SchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op136.node.kernel = extern_kernels.mm


op137_op138_op139: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op137_op138_op139.writes = 
    [   MemoryDep('buf137', c0, {c0: 6272}, None),
        MemoryDep('buf138', c0, {c0: 6272}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None)]
op137_op138_op139.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None)]
op137_op138_op139.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None)]
op137_op138_op139.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137_op138_op139.snodes[0] =
op137: SchedulerNode(ComputedBuffer)
op137.writes = [MemoryDep('buf137', c0, {c0: 6272}, None)]
op137.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None)]
op137.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None)]
op137.outputs = [
    buf137: ComputedBuffer
    buf137.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf137.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op137.group.device = cuda:0
op137.group.iteration = (6272, 128)
op137.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op137_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 100352*z0 + 512*z1 + 128*z2 + z3
    index3 = 128*z2 + z3
    index4 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf137', get_index_4, getitem)
        return store_reduction
op137_op138_op139.snodes[1] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 6272}, None)]
op138.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None)]
op138.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf138.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op138.group.device = cuda:0
op138.group.iteration = (6272, 128)
op138.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op138_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 100352*z0 + 512*z1 + 128*z2 + z3
    index3 = 128*z2 + z3
    index4 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf138', get_index_4, getitem_1)
        return store_reduction
op137_op138_op139.snodes[2] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 6272}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None)]
op139.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (6272, 128)
op139.sizes = ([8, 196, 4], [128])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
class op139_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 4, z3: 128}
    index0 = 100352*z0 + z1 + 25088*z2 + 196*z3
    index1 = 512*z1 + 128*z2 + z3
    index2 = 100352*z0 + 512*z1 + 128*z2 + z3
    index3 = 128*z2 + z3
    index4 = 784*z0 + 4*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index4')
        store_reduction = ops.store_reduction('buf139', get_index_4, getitem_2)
        return store_reduction


op140_op141: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op140_op141.writes = 
    [   MemoryDep('buf140', c0, {c0: 1568}, None),
        MemoryDep('buf141', c0, {c0: 1568}, None)]
op140_op141.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6272}, None),
        MemoryDep('buf138', c0, {c0: 6272}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None)]
op140_op141.met_dependencies = []
op140_op141.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op140_op141.snodes[0] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 1568}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6272}, None),
        MemoryDep('buf138', c0, {c0: 6272}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None)]
op140.met_dependencies = []
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf140.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (1568, 4)
op140.sizes = ([1568], [4])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op140_loop_body:
    var_ranges = {z0: 1568, z1: 4}
    index0 = 4*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem)
        return store_reduction
op140_op141.snodes[1] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1568}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 6272}, None),
        MemoryDep('buf138', c0, {c0: 6272}, None),
        MemoryDep('buf139', c0, {c0: 6272}, None)]
op141.met_dependencies = []
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf141.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1568, 4)
op141.sizes = ([1568], [4])
buf137_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1, 4], stride=[784, 6272, 4, 6272, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op141_loop_body:
    var_ranges = {z0: 1568, z1: 4}
    index0 = 4*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf138', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem_1)
        return store_reduction


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 802816}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None),
        MemoryDep('buf140', c0, {c0: 1568}, None),
        MemoryDep('buf141', c0, {c0: 1568}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg69_1', c1, {c0: 1568, c1: 512}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (802816, 1)
op143.sizes = ([8, 196, 512], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf141_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op143_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 512}
    index0 = 100352*z0 + z1 + 196*z2
    index1 = 512*z1 + z2
    index2 = 100352*z0 + 512*z1 + z2
    index3 = z2
    index4 = 196*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('buf140', get_index_4)
        sub = ops.sub(add_2, load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('buf141', get_index_5)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_5, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_3 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_3)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index3')
        load_6 = ops.load('arg68_1', get_index_6)
        mul_1 = ops.mul(mul, load_6)
        get_index_7 = self.get_index('index3')
        load_7 = ops.load('arg69_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index2')
        store = ops.store('buf143', get_index_8, add_4, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 3211264}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 3211264}, None)]
op145.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 1568, c1: 2048}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (3211264, 1)
op145.sizes = ([1568, 2048], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op145_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf145', get_index_4, mul_2, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147_op148_op149_op151: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op147_op148_op149_op151.writes = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf148', c0, {c0: 1568}, None),
        MemoryDep('buf149', c0, {c0: 1568}, None),
        MemoryDep('buf151', c0, {c0: 802816}, None)]
op147_op148_op149_op151.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None),
        MemoryDep('buf146', c0, {c0: 802816}, None)]
op147_op148_op149_op151.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg74_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 1568, c1: 512}, None)]
op147_op148_op149_op151.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf148.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op147_op148_op149_op151.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 802816}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf117', 100352*c0 + c1 + 196*c2, {c0: 8, c1: 196, c2: 512}, None),
        MemoryDep('buf136', c0, {c0: 802816}, None),
        MemoryDep('buf146', c0, {c0: 802816}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 8, c1: 100352}, None),
        MemoryDep('arg67_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 1568, c1: 512}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (802816, 1)
op147.sizes = ([8, 196, 512], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 14, 14], stride=[100352, 196, 14, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 196, 512], stride=[100352, 100352, 512, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op147_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 512}
    index0 = 100352*z0 + z1 + 196*z2
    index1 = 512*z1 + z2
    index2 = 100352*z0 + 512*z1 + z2
    index3 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf136', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg67_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        add_2 = ops.add(add, add_1)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf146', get_index_4)
        get_index_5 = self.get_index('index3')
        load_5 = ops.load('arg73_1', get_index_5)
        add_3 = ops.add(load_4, load_5)
        add_4 = ops.add(add_2, add_3)
        get_index_6 = self.get_index('index2')
        store = ops.store('buf147', get_index_6, add_4, None)
        return store
op147_op148_op149_op151.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 1568}, None)]
op148.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 802816}, None)]
op148.met_dependencies = []
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf148.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (1568, 512)
op148.sizes = ([1568], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op148_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, getitem)
        return store_reduction
op147_op148_op149_op151.snodes[2] =
op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 1568}, None)]
op149.unmet_dependencies = [MemoryDep('buf147', c0, {c0: 802816}, None)]
op149.met_dependencies = []
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf149.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (1568, 512)
op149.sizes = ([1568], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op149_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf149', get_index_1, getitem_1)
        return store_reduction
op147_op148_op149_op151.snodes[3] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 802816}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf148', c0, {c0: 1568}, None),
        MemoryDep('buf149', c0, {c0: 1568}, None)]
op151.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg75_1', c1, {c0: 1568, c1: 512}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf151.users = [NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (802816, 1)
op151.sizes = ([1568, 512], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf149_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op151_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf148', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf149', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, add_1, None)
        return store


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf152.users = [
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
    ]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 802816}, None)]
op153.unmet_dependencies = [   MemoryDep('buf152', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op153.met_dependencies = [MemoryDep('arg77_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (802816, 1)
op153.sizes = ([8, 16, 196, 32], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf153', get_index_2, mul, None)
        return store


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 802816}, None)]
op154.unmet_dependencies = [   MemoryDep('buf152', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op154.met_dependencies = [MemoryDep('arg77_1', c1 + 512, {c0: 8, c1: 512}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf154.users = [NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (802816, 1)
op154.sizes = ([8, 512, 196], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op154_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf154', get_index_2, mul, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf153', mode=None), StarDep(name='buf154', mode=None)]
op155.met_dependencies = []
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.bmm


op156_op157_op158_op159: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op156_op157_op158_op159.writes = 
    [   MemoryDep('buf156', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf157', c0, {c0: 25088}, None),
        MemoryDep('buf158', c0, {c0: 25088}, None),
        MemoryDep('buf159', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op156_op157_op158_op159.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 4917248}, None)]
op156_op157_op158_op159.met_dependencies = []
op156_op157_op158_op159.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op156_op157_op158_op159.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op156.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 4917248}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf156.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (25088, 196)
op156.sizes = ([8, 3136], [196])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf156_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_1, reduction)
        return store_reduction
op156_op157_op158_op159.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 25088}, None)]
op157.unmet_dependencies = [MemoryDep('buf155', c0, {c0: 4917248}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf157.users = [
        NodeUser(node=SchedulerNode(name='op158'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (25088, 196)
op157.sizes = ([25088], [196])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op157_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, reduction)
        return store_reduction
op156_op157_op158_op159.snodes[2] =
op158: SchedulerNode(ComputedBuffer)
op158.writes = [MemoryDep('buf158', c0, {c0: 25088}, None)]
op158.unmet_dependencies = 
    [   MemoryDep('buf155', c0, {c0: 4917248}, None),
        MemoryDep('buf157', c0, {c0: 25088}, None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ComputedBuffer
    buf158.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False)]
]
op158.group.device = cuda:0
op158.group.iteration = (25088, 196)
op158.sizes = ([25088], [196])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op158_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf157', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf158', get_index_2, reduction)
        return store_reduction
op156_op157_op158_op159.snodes[3] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op159.unmet_dependencies = 
    [   MemoryDep('buf155', c0, {c0: 4917248}, None),
        MemoryDep('buf156', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf157', c0, {c0: 25088}, None),
        MemoryDep('buf158', c0, {c0: 25088}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (4917248, 1)
op159.sizes = ([8, 16, 196, 196], [])
buf156_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf158_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf155', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf157', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf158', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf159', get_index_4, where, None)
        return store


op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 802816}, None)]
op160.unmet_dependencies = [   MemoryDep('buf152', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op160.met_dependencies = [   MemoryDep('arg77_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (802816, 1)
op160.sizes = ([8, 16, 196, 32], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf160', get_index_2, add, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf159', mode=None), StarDep(name='buf160', mode=None)]
op161.met_dependencies = []
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.bmm


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 802816}, None)]
op162.unmet_dependencies = [MemoryDep('buf161', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (802816, 1)
op162.sizes = ([8, 6272, 16], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf162', get_index_1, load, None)
        return store


op163: ExternKernelSchedulerNode(ExternKernelOut)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = [StarDep(name='buf162', mode=None)]
op163.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op163.outputs = [
    buf163: ExternKernelOut
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf163.users = [
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False),
    ]
]
op163.node.kernel = extern_kernels.mm


op164_op165_op167: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op164_op165_op167.writes = 
    [   MemoryDep('buf164', c0, {c0: 1568}, None),
        MemoryDep('buf165', c0, {c0: 1568}, None),
        MemoryDep('buf167', c0, {c0: 802816}, None)]
op164_op165_op167.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None)]
op164_op165_op167.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg80_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg81_1', c1, {c0: 1568, c1: 512}, None)]
op164_op165_op167.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op164_op165_op167.snodes[0] =
op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 1568}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None)]
op164.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf164.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op164.group.device = cuda:0
op164.group.iteration = (1568, 512)
op164.sizes = ([1568], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op164_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf164', get_index_3, getitem)
        return store_reduction
op164_op165_op167.snodes[1] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1568}, None)]
op165.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None)]
op165.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf165.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1568, 512)
op165.sizes = ([1568], [512])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op165_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf165', get_index_3, getitem_1)
        return store_reduction
op164_op165_op167.snodes[2] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 802816}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None),
        MemoryDep('buf164', c0, {c0: 1568}, None),
        MemoryDep('buf165', c0, {c0: 1568}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg80_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg81_1', c1, {c0: 1568, c1: 512}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.group.device = cuda:0
op167.group.iteration = (802816, 1)
op167.sizes = ([1568, 512], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op167_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf164', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf165', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf167', get_index_7, add_3, None)
        return store


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf167', mode=None)]
op168.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op169'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 3211264}, None)]
op169.unmet_dependencies = [MemoryDep('buf168', c0, {c0: 3211264}, None)]
op169.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1568, c1: 2048}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf169.users = [NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (3211264, 1)
op169.sizes = ([1568, 2048], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op169_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf168', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf169', get_index_4, mul_2, None)
        return store


op170: ExternKernelSchedulerNode(ExternKernelOut)
op170.writes = [StarDep(name='buf170', mode=None)]
op170.unmet_dependencies = [StarDep(name='buf169', mode=None)]
op170.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op170.outputs = [
    buf170: ExternKernelOut
    buf170.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf170.users = [NodeUser(node=SchedulerNode(name='op171'), can_inplace=True, is_weak=False)]
]
op170.node.kernel = extern_kernels.mm


op171_op172_op173_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op171_op172_op173_op175.writes = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf172', c0, {c0: 1568}, None),
        MemoryDep('buf173', c0, {c0: 1568}, None),
        MemoryDep('buf175', c0, {c0: 802816}, None)]
op171_op172_op173_op175.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None),
        MemoryDep('buf170', c0, {c0: 802816}, None)]
op171_op172_op173_op175.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg85_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg86_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 1568, c1: 512}, None)]
op171_op172_op173_op175.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op171_op172_op173_op175.snodes[0] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 802816}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 802816}, None),
        MemoryDep('buf163', c0, {c0: 802816}, None),
        MemoryDep('buf170', c0, {c0: 802816}, None)]
op171.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg85_1', c1, {c0: 1568, c1: 512}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf171.users = [
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op175'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op171.group.device = cuda:0
op171.group.iteration = (802816, 1)
op171.sizes = ([1568, 512], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op171_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf163', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf170', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf171', get_index_5, add_3, None)
        return store
op171_op172_op173_op175.snodes[1] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 1568}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 802816}, None)]
op172.met_dependencies = []
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf172.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (1568, 512)
op172.sizes = ([1568], [512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op172_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf172', get_index_1, getitem)
        return store_reduction
op171_op172_op173_op175.snodes[2] =
op173: SchedulerNode(ComputedBuffer)
op173.writes = [MemoryDep('buf173', c0, {c0: 1568}, None)]
op173.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 802816}, None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ComputedBuffer
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf173.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op173.group.device = cuda:0
op173.group.iteration = (1568, 512)
op173.sizes = ([1568], [512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op173_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf173', get_index_1, getitem_1)
        return store_reduction
op171_op172_op173_op175.snodes[3] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 802816}, None)]
op175.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf172', c0, {c0: 1568}, None),
        MemoryDep('buf173', c0, {c0: 1568}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg86_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg87_1', c1, {c0: 1568, c1: 512}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (802816, 1)
op175.sizes = ([1568, 512], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op175_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf172', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf173', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg86_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg87_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf175', get_index_5, add_1, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelOut)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelOut
    buf176.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf176.users = [
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False),
    ]
]
op176.node.kernel = extern_kernels.mm


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 802816}, None)]
op177.unmet_dependencies = [   MemoryDep('buf176', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op177.met_dependencies = [MemoryDep('arg89_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (802816, 1)
op177.sizes = ([8, 16, 196, 32], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf177', get_index_2, mul, None)
        return store


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 802816}, None)]
op178.unmet_dependencies = [   MemoryDep('buf176', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op178.met_dependencies = [MemoryDep('arg89_1', c1 + 512, {c0: 8, c1: 512}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (802816, 1)
op178.sizes = ([8, 512, 196], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op178_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf178', get_index_2, mul, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf177', mode=None), StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op179.node.kernel = extern_kernels.bmm


op180_op181_op182_op183: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op180_op181_op182_op183.writes = 
    [   MemoryDep('buf180', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf181', c0, {c0: 25088}, None),
        MemoryDep('buf182', c0, {c0: 25088}, None),
        MemoryDep('buf183', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op180_op181_op182_op183.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 4917248}, None)]
op180_op181_op182_op183.met_dependencies = []
op180_op181_op182_op183.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op180_op181_op182_op183.snodes[0] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 4917248}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf180.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (25088, 196)
op180.sizes = ([8, 3136], [196])
buf179_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf180_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_1, reduction)
        return store_reduction
op180_op181_op182_op183.snodes[1] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 25088}, None)]
op181.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 4917248}, None)]
op181.met_dependencies = []
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf181.users = [
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False),
    ]
]
op181.group.device = cuda:0
op181.group.iteration = (25088, 196)
op181.sizes = ([25088], [196])
buf179_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op181_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf181', get_index_1, reduction)
        return store_reduction
op180_op181_op182_op183.snodes[2] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 25088}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 4917248}, None),
        MemoryDep('buf181', c0, {c0: 25088}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (25088, 196)
op182.sizes = ([25088], [196])
buf179_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op182_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf181', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf182', get_index_2, reduction)
        return store_reduction
op180_op181_op182_op183.snodes[3] =
op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op183.unmet_dependencies = 
    [   MemoryDep('buf179', c0, {c0: 4917248}, None),
        MemoryDep('buf180', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf181', c0, {c0: 25088}, None),
        MemoryDep('buf182', c0, {c0: 25088}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (4917248, 1)
op183.sizes = ([8, 16, 196, 196], [])
buf180_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf179_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf180', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf181', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf182', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf183', get_index_4, where, None)
        return store


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 802816}, None)]
op184.unmet_dependencies = [   MemoryDep('buf176', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op184.met_dependencies = [   MemoryDep('arg89_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (802816, 1)
op184.sizes = ([8, 16, 196, 32], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op184_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf184', get_index_2, add, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf183', mode=None), StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.node.kernel = extern_kernels.bmm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 802816}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op186.met_dependencies = []
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (802816, 1)
op186.sizes = ([8, 6272, 16], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf186', get_index_1, load, None)
        return store


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False),
    ]
]
op187.node.kernel = extern_kernels.mm


op188_op189_op191: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op188_op189_op191.writes = 
    [   MemoryDep('buf188', c0, {c0: 1568}, None),
        MemoryDep('buf189', c0, {c0: 1568}, None),
        MemoryDep('buf191', c0, {c0: 802816}, None)]
op188_op189_op191.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None)]
op188_op189_op191.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg92_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg93_1', c1, {c0: 1568, c1: 512}, None)]
op188_op189_op191.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op188_op189_op191.snodes[0] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 1568}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None)]
op188.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (1568, 512)
op188.sizes = ([1568], [512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op188_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg91_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf188', get_index_3, getitem)
        return store_reduction
op188_op189_op191.snodes[1] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 1568}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None)]
op189.met_dependencies = [MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (1568, 512)
op189.sizes = ([1568], [512])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op189_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg91_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf189', get_index_3, getitem_1)
        return store_reduction
op188_op189_op191.snodes[2] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 802816}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None),
        MemoryDep('buf188', c0, {c0: 1568}, None),
        MemoryDep('buf189', c0, {c0: 1568}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg92_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg93_1', c1, {c0: 1568, c1: 512}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (802816, 1)
op191.sizes = ([1568, 512], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op191_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg91_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf188', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf189', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg92_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg93_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf191', get_index_7, add_3, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 3211264}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 3211264}, None)]
op193.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 1568, c1: 2048}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (3211264, 1)
op193.sizes = ([1568, 2048], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op193_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg95_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, mul_2, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf194.users = [NodeUser(node=SchedulerNode(name='op195'), can_inplace=True, is_weak=False)]
]
op194.node.kernel = extern_kernels.mm


op195_op196_op197_op199: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op195_op196_op197_op199.writes = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf196', c0, {c0: 1568}, None),
        MemoryDep('buf197', c0, {c0: 1568}, None),
        MemoryDep('buf199', c0, {c0: 802816}, None)]
op195_op196_op197_op199.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None),
        MemoryDep('buf194', c0, {c0: 802816}, None)]
op195_op196_op197_op199.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg97_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg98_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg99_1', c1, {c0: 1568, c1: 512}, None)]
op195_op196_op197_op199.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op195_op196_op197_op199.snodes[0] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 802816}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf171', c0, {c0: 802816}, None),
        MemoryDep('buf187', c0, {c0: 802816}, None),
        MemoryDep('buf194', c0, {c0: 802816}, None)]
op195.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg97_1', c1, {c0: 1568, c1: 512}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf195.users = [
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op199'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op195.group.device = cuda:0
op195.group.iteration = (802816, 1)
op195.sizes = ([1568, 512], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op195_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf187', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg91_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf194', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg97_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf195', get_index_5, add_3, None)
        return store
op195_op196_op197_op199.snodes[1] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 1568}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 802816}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf196.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (1568, 512)
op196.sizes = ([1568], [512])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op196_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf196', get_index_1, getitem)
        return store_reduction
op195_op196_op197_op199.snodes[2] =
op197: SchedulerNode(ComputedBuffer)
op197.writes = [MemoryDep('buf197', c0, {c0: 1568}, None)]
op197.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 802816}, None)]
op197.met_dependencies = []
op197.outputs = [
    buf197: ComputedBuffer
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf197.users = [NodeUser(node=SchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op197.group.device = cuda:0
op197.group.iteration = (1568, 512)
op197.sizes = ([1568], [512])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op197_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf197', get_index_1, getitem_1)
        return store_reduction
op195_op196_op197_op199.snodes[3] =
op199: SchedulerNode(ComputedBuffer)
op199.writes = [MemoryDep('buf199', c0, {c0: 802816}, None)]
op199.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf196', c0, {c0: 1568}, None),
        MemoryDep('buf197', c0, {c0: 1568}, None)]
op199.met_dependencies = 
    [   MemoryDep('arg98_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg99_1', c1, {c0: 1568, c1: 512}, None)]
op199.outputs = [
    buf199: ComputedBuffer
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.group.device = cuda:0
op199.group.iteration = (802816, 1)
op199.sizes = ([1568, 512], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op199_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf196', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf197', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg98_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg99_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf199', get_index_5, add_1, None)
        return store


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf199', mode=None)]
op200.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf200.users = [
        NodeUser(node=SchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False),
    ]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 802816}, None)]
op201.unmet_dependencies = [   MemoryDep('buf200', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op201.met_dependencies = [MemoryDep('arg101_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf201.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op201.group.device = cuda:0
op201.group.iteration = (802816, 1)
op201.sizes = ([8, 16, 196, 32], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op201_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf201', get_index_2, mul, None)
        return store


op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 802816}, None)]
op202.unmet_dependencies = [   MemoryDep('buf200', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op202.met_dependencies = [MemoryDep('arg101_1', c1 + 512, {c0: 8, c1: 512}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (802816, 1)
op202.sizes = ([8, 512, 196], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf202', get_index_2, mul, None)
        return store


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf201', mode=None), StarDep(name='buf202', mode=None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf203.users = [
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
    ]
]
op203.node.kernel = extern_kernels.bmm


op204_op205_op206_op207: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op204_op205_op206_op207.writes = 
    [   MemoryDep('buf204', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf205', c0, {c0: 25088}, None),
        MemoryDep('buf206', c0, {c0: 25088}, None),
        MemoryDep('buf207', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op204_op205_op206_op207.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 4917248}, None)]
op204_op205_op206_op207.met_dependencies = []
op204_op205_op206_op207.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
    ]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op204_op205_op206_op207.snodes[0] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op204.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 4917248}, None)]
op204.met_dependencies = []
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf204.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (25088, 196)
op204.sizes = ([8, 3136], [196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf204_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf204', get_index_1, reduction)
        return store_reduction
op204_op205_op206_op207.snodes[1] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 25088}, None)]
op205.unmet_dependencies = [MemoryDep('buf203', c0, {c0: 4917248}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf205.users = [
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (25088, 196)
op205.sizes = ([25088], [196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op205_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_1, reduction)
        return store_reduction
op204_op205_op206_op207.snodes[2] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 25088}, None)]
op206.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 4917248}, None),
        MemoryDep('buf205', c0, {c0: 25088}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (25088, 196)
op206.sizes = ([25088], [196])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op206_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf206', get_index_2, reduction)
        return store_reduction
op204_op205_op206_op207.snodes[3] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf203', c0, {c0: 4917248}, None),
        MemoryDep('buf204', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf205', c0, {c0: 25088}, None),
        MemoryDep('buf206', c0, {c0: 25088}, None)]
op207.met_dependencies = []
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (4917248, 1)
op207.sizes = ([8, 16, 196, 196], [])
buf204_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf207_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op207_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf205', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf206', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf207', get_index_4, where, None)
        return store


op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 802816}, None)]
op208.unmet_dependencies = [   MemoryDep('buf200', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op208.met_dependencies = [   MemoryDep('arg101_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf208.users = [NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.group.device = cuda:0
op208.group.iteration = (802816, 1)
op208.sizes = ([8, 16, 196, 32], [])
buf200_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op208_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf200', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf208', get_index_2, add, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf207', mode=None), StarDep(name='buf208', mode=None)]
op209.met_dependencies = []
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf209.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.node.kernel = extern_kernels.bmm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 802816}, None)]
op210.unmet_dependencies = [MemoryDep('buf209', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (802816, 1)
op210.sizes = ([8, 6272, 16], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf210', get_index_1, load, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelOut)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf210', mode=None)]
op211.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op211.outputs = [
    buf211: ExternKernelOut
    buf211.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op211.node.kernel = extern_kernels.mm


op212_op213_op215: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op212_op213_op215.writes = 
    [   MemoryDep('buf212', c0, {c0: 1568}, None),
        MemoryDep('buf213', c0, {c0: 1568}, None),
        MemoryDep('buf215', c0, {c0: 802816}, None)]
op212_op213_op215.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None)]
op212_op213_op215.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg104_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 1568, c1: 512}, None)]
op212_op213_op215.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op212_op213_op215.snodes[0] =
op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 1568}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None)]
op212.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf212.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (1568, 512)
op212.sizes = ([1568], [512])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op212_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, getitem)
        return store_reduction
op212_op213_op215.snodes[1] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 1568}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None)]
op213.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf213.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (1568, 512)
op213.sizes = ([1568], [512])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op213_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf213', get_index_3, getitem_1)
        return store_reduction
op212_op213_op215.snodes[2] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 802816}, None)]
op215.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None),
        MemoryDep('buf212', c0, {c0: 1568}, None),
        MemoryDep('buf213', c0, {c0: 1568}, None)]
op215.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg104_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg105_1', c1, {c0: 1568, c1: 512}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (802816, 1)
op215.sizes = ([1568, 512], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op215_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf213', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg104_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg105_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf215', get_index_7, add_3, None)
        return store


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 3211264}, None)]
op217.unmet_dependencies = [MemoryDep('buf216', c0, {c0: 3211264}, None)]
op217.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 1568, c1: 2048}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (3211264, 1)
op217.sizes = ([1568, 2048], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op217_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf216', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg107_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf217', get_index_4, mul_2, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219_op220_op221_op223: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op219_op220_op221_op223.writes = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf220', c0, {c0: 1568}, None),
        MemoryDep('buf221', c0, {c0: 1568}, None),
        MemoryDep('buf223', c0, {c0: 802816}, None)]
op219_op220_op221_op223.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None),
        MemoryDep('buf218', c0, {c0: 802816}, None)]
op219_op220_op221_op223.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg109_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg110_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg111_1', c1, {c0: 1568, c1: 512}, None)]
op219_op220_op221_op223.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op219_op220_op221_op223.snodes[0] =
op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 802816}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf195', c0, {c0: 802816}, None),
        MemoryDep('buf211', c0, {c0: 802816}, None),
        MemoryDep('buf218', c0, {c0: 802816}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg103_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg109_1', c1, {c0: 1568, c1: 512}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf219.users = [
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (802816, 1)
op219.sizes = ([1568, 512], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op219_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf211', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf218', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg109_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf219', get_index_5, add_3, None)
        return store
op219_op220_op221_op223.snodes[1] =
op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 1568}, None)]
op220.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 802816}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf220.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (1568, 512)
op220.sizes = ([1568], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op220_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf220', get_index_1, getitem)
        return store_reduction
op219_op220_op221_op223.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1568}, None)]
op221.unmet_dependencies = [MemoryDep('buf219', c0, {c0: 802816}, None)]
op221.met_dependencies = []
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf221.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1568, 512)
op221.sizes = ([1568], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op221_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf221', get_index_1, getitem_1)
        return store_reduction
op219_op220_op221_op223.snodes[3] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 802816}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf220', c0, {c0: 1568}, None),
        MemoryDep('buf221', c0, {c0: 1568}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg110_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg111_1', c1, {c0: 1568, c1: 512}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (802816, 1)
op223.sizes = ([1568, 512], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op223_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf220', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf221', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg110_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg111_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf223', get_index_5, add_1, None)
        return store


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 802816}, None)]
op225.unmet_dependencies = [   MemoryDep('buf224', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op225.met_dependencies = [MemoryDep('arg113_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (802816, 1)
op225.sizes = ([8, 16, 196, 32], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op225_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf225', get_index_2, mul, None)
        return store


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 802816}, None)]
op226.unmet_dependencies = [   MemoryDep('buf224', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op226.met_dependencies = [MemoryDep('arg113_1', c1 + 512, {c0: 8, c1: 512}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (802816, 1)
op226.sizes = ([8, 512, 196], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op226_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf226', get_index_2, mul, None)
        return store


op227: ExternKernelSchedulerNode(ExternKernelOut)
op227.writes = [StarDep(name='buf227', mode=None)]
op227.unmet_dependencies = [StarDep(name='buf225', mode=None), StarDep(name='buf226', mode=None)]
op227.met_dependencies = []
op227.outputs = [
    buf227: ExternKernelOut
    buf227.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf227.users = [
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op227.node.kernel = extern_kernels.bmm


op228_op229_op230_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op228_op229_op230_op231.writes = 
    [   MemoryDep('buf228', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf229', c0, {c0: 25088}, None),
        MemoryDep('buf230', c0, {c0: 25088}, None),
        MemoryDep('buf231', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op228_op229_op230_op231.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 4917248}, None)]
op228_op229_op230_op231.met_dependencies = []
op228_op229_op230_op231.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf228.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op228_op229_op230_op231.snodes[0] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op228.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 4917248}, None)]
op228.met_dependencies = []
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf228.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (25088, 196)
op228.sizes = ([8, 3136], [196])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf228_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op228_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf228', get_index_1, reduction)
        return store_reduction
op228_op229_op230_op231.snodes[1] =
op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 25088}, None)]
op229.unmet_dependencies = [MemoryDep('buf227', c0, {c0: 4917248}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf229.users = [
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False),
    ]
]
op229.group.device = cuda:0
op229.group.iteration = (25088, 196)
op229.sizes = ([25088], [196])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op229_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf229', get_index_1, reduction)
        return store_reduction
op228_op229_op230_op231.snodes[2] =
op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 25088}, None)]
op230.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 4917248}, None),
        MemoryDep('buf229', c0, {c0: 25088}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf230.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (25088, 196)
op230.sizes = ([25088], [196])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op230_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf227', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf229', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf230', get_index_2, reduction)
        return store_reduction
op228_op229_op230_op231.snodes[3] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf227', c0, {c0: 4917248}, None),
        MemoryDep('buf228', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf229', c0, {c0: 25088}, None),
        MemoryDep('buf230', c0, {c0: 25088}, None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (4917248, 1)
op231.sizes = ([8, 16, 196, 196], [])
buf228_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf227_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf231_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op231_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf227', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf229', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf230', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf231', get_index_4, where, None)
        return store


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 802816}, None)]
op232.unmet_dependencies = [   MemoryDep('buf224', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op232.met_dependencies = [   MemoryDep('arg113_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf232.users = [NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False)]
]
op232.group.device = cuda:0
op232.group.iteration = (802816, 1)
op232.sizes = ([8, 16, 196, 32], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op232_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf232', get_index_2, add, None)
        return store


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf231', mode=None), StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = extern_kernels.bmm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 802816}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op234.met_dependencies = []
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (802816, 1)
op234.sizes = ([8, 6272, 16], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op234_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf234', get_index_1, load, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.mm


op236_op237_op239: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op236_op237_op239.writes = 
    [   MemoryDep('buf236', c0, {c0: 1568}, None),
        MemoryDep('buf237', c0, {c0: 1568}, None),
        MemoryDep('buf239', c0, {c0: 802816}, None)]
op236_op237_op239.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None)]
op236_op237_op239.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg116_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 512}, None)]
op236_op237_op239.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op236_op237_op239.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 1568}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None)]
op236.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf236.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (1568, 512)
op236.sizes = ([1568], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op236_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_3, getitem)
        return store_reduction
op236_op237_op239.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 1568}, None)]
op237.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None)]
op237.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None)]
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf237.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (1568, 512)
op237.sizes = ([1568], [512])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op237_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf237', get_index_3, getitem_1)
        return store_reduction
op236_op237_op239.snodes[2] =
op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 802816}, None)]
op239.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None),
        MemoryDep('buf236', c0, {c0: 1568}, None),
        MemoryDep('buf237', c0, {c0: 1568}, None)]
op239.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg116_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg117_1', c1, {c0: 1568, c1: 512}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (802816, 1)
op239.sizes = ([1568, 512], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op239_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf236', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf237', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg116_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg117_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf239', get_index_7, add_3, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelOut)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelOut
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False)]
]
op240.node.kernel = extern_kernels.mm


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 3211264}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 3211264}, None)]
op241.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 1568, c1: 2048}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (3211264, 1)
op241.sizes = ([1568, 2048], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op241_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf241', get_index_4, mul_2, None)
        return store


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf242.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=True, is_weak=False)]
]
op242.node.kernel = extern_kernels.mm


op243_op244_op245_op247: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op243_op244_op245_op247.writes = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None),
        MemoryDep('buf247', c0, {c0: 802816}, None)]
op243_op244_op245_op247.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None),
        MemoryDep('buf242', c0, {c0: 802816}, None)]
op243_op244_op245_op247.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg121_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg122_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 512}, None)]
op243_op244_op245_op247.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op243_op244_op245_op247.snodes[0] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 802816}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 802816}, None),
        MemoryDep('buf235', c0, {c0: 802816}, None),
        MemoryDep('buf242', c0, {c0: 802816}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg115_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg121_1', c1, {c0: 1568, c1: 512}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op247'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (802816, 1)
op243.sizes = ([1568, 512], [])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op243_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf219', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf235', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg115_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf242', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg121_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf243', get_index_5, add_3, None)
        return store
op243_op244_op245_op247.snodes[1] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 1568}, None)]
op244.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 802816}, None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf244.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (1568, 512)
op244.sizes = ([1568], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op244_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf244', get_index_1, getitem)
        return store_reduction
op243_op244_op245_op247.snodes[2] =
op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 1568}, None)]
op245.unmet_dependencies = [MemoryDep('buf243', c0, {c0: 802816}, None)]
op245.met_dependencies = []
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf245.users = [NodeUser(node=SchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (1568, 512)
op245.sizes = ([1568], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op245_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf245', get_index_1, getitem_1)
        return store_reduction
op243_op244_op245_op247.snodes[3] =
op247: SchedulerNode(ComputedBuffer)
op247.writes = [MemoryDep('buf247', c0, {c0: 802816}, None)]
op247.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf244', c0, {c0: 1568}, None),
        MemoryDep('buf245', c0, {c0: 1568}, None)]
op247.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg123_1', c1, {c0: 1568, c1: 512}, None)]
op247.outputs = [
    buf247: ComputedBuffer
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf247.users = [NodeUser(node=ExternKernelSchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.group.device = cuda:0
op247.group.iteration = (802816, 1)
op247.sizes = ([1568, 512], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op247_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf244', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf245', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg122_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg123_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf247', get_index_5, add_1, None)
        return store


op248: ExternKernelSchedulerNode(ExternKernelOut)
op248.writes = [StarDep(name='buf248', mode=None)]
op248.unmet_dependencies = [StarDep(name='buf247', mode=None)]
op248.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op248.outputs = [
    buf248: ExternKernelOut
    buf248.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf248.users = [
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False),
    ]
]
op248.node.kernel = extern_kernels.mm


op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 802816}, None)]
op249.unmet_dependencies = [   MemoryDep('buf248', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op249.met_dependencies = [MemoryDep('arg125_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (802816, 1)
op249.sizes = ([8, 16, 196, 32], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op249_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf249', get_index_2, mul, None)
        return store


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 802816}, None)]
op250.unmet_dependencies = [   MemoryDep('buf248', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op250.met_dependencies = [MemoryDep('arg125_1', c1 + 512, {c0: 8, c1: 512}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf250.users = [NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (802816, 1)
op250.sizes = ([8, 512, 196], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op250_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf250', get_index_2, mul, None)
        return store


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf249', mode=None), StarDep(name='buf250', mode=None)]
op251.met_dependencies = []
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf251.users = [
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
]
op251.node.kernel = extern_kernels.bmm


op252_op253_op254_op255: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op252_op253_op254_op255.writes = 
    [   MemoryDep('buf252', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf253', c0, {c0: 25088}, None),
        MemoryDep('buf254', c0, {c0: 25088}, None),
        MemoryDep('buf255', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op252_op253_op254_op255.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 4917248}, None)]
op252_op253_op254_op255.met_dependencies = []
op252_op253_op254_op255.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op252_op253_op254_op255.snodes[0] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 4917248}, None)]
op252.met_dependencies = []
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf252.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (25088, 196)
op252.sizes = ([8, 3136], [196])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf252_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op252_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf252', get_index_1, reduction)
        return store_reduction
op252_op253_op254_op255.snodes[1] =
op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 25088}, None)]
op253.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 4917248}, None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (25088, 196)
op253.sizes = ([25088], [196])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op253_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf253', get_index_1, reduction)
        return store_reduction
op252_op253_op254_op255.snodes[2] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 25088}, None)]
op254.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 4917248}, None),
        MemoryDep('buf253', c0, {c0: 25088}, None)]
op254.met_dependencies = []
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=False, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (25088, 196)
op254.sizes = ([25088], [196])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op254_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf253', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf254', get_index_2, reduction)
        return store_reduction
op252_op253_op254_op255.snodes[3] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf251', c0, {c0: 4917248}, None),
        MemoryDep('buf252', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf253', c0, {c0: 25088}, None),
        MemoryDep('buf254', c0, {c0: 25088}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (4917248, 1)
op255.sizes = ([8, 16, 196, 196], [])
buf252_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf251_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op255_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf251', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf253', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf254', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf255', get_index_4, where, None)
        return store


op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 802816}, None)]
op256.unmet_dependencies = [   MemoryDep('buf248', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op256.met_dependencies = [   MemoryDep('arg125_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (802816, 1)
op256.sizes = ([8, 16, 196, 32], [])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op256_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf248', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf256', get_index_2, add, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf255', mode=None), StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf257.users = [NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.node.kernel = extern_kernels.bmm


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 802816}, None)]
op258.unmet_dependencies = [MemoryDep('buf257', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op258.met_dependencies = []
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf258.users = [NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (802816, 1)
op258.sizes = ([8, 6272, 16], [])
buf257_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf257', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf258', get_index_1, load, None)
        return store


op259: ExternKernelSchedulerNode(ExternKernelOut)
op259.writes = [StarDep(name='buf259', mode=None)]
op259.unmet_dependencies = [StarDep(name='buf258', mode=None)]
op259.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op259.outputs = [
    buf259: ExternKernelOut
    buf259.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf259.users = [
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op259.node.kernel = extern_kernels.mm


op260_op261_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op260_op261_op263.writes = 
    [   MemoryDep('buf260', c0, {c0: 1568}, None),
        MemoryDep('buf261', c0, {c0: 1568}, None),
        MemoryDep('buf263', c0, {c0: 802816}, None)]
op260_op261_op263.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None)]
op260_op261_op263.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 512}, None)]
op260_op261_op263.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op260_op261_op263.snodes[0] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 1568}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None)]
op260.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf260.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (1568, 512)
op260.sizes = ([1568], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op260_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf260', get_index_3, getitem)
        return store_reduction
op260_op261_op263.snodes[1] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 1568}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None)]
op261.met_dependencies = [MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=False, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (1568, 512)
op261.sizes = ([1568], [512])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op261_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf261', get_index_3, getitem_1)
        return store_reduction
op260_op261_op263.snodes[2] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 802816}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None),
        MemoryDep('buf260', c0, {c0: 1568}, None),
        MemoryDep('buf261', c0, {c0: 1568}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 512}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (802816, 1)
op263.sizes = ([1568, 512], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op263_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf260', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf261', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg128_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg129_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf263', get_index_7, add_3, None)
        return store


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 3211264}, None)]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 3211264}, None)]
op265.met_dependencies = [MemoryDep('arg131_1', c1, {c0: 1568, c1: 2048}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (3211264, 1)
op265.sizes = ([1568, 2048], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op265_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf264', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf265', get_index_4, mul_2, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267_op268_op269_op271: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op269_op271.writes = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf268', c0, {c0: 1568}, None),
        MemoryDep('buf269', c0, {c0: 1568}, None),
        MemoryDep('buf271', c0, {c0: 802816}, None)]
op267_op268_op269_op271.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None),
        MemoryDep('buf266', c0, {c0: 802816}, None)]
op267_op268_op269_op271.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 512}, None)]
op267_op268_op269_op271.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op267_op268_op269_op271.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 802816}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf243', c0, {c0: 802816}, None),
        MemoryDep('buf259', c0, {c0: 802816}, None),
        MemoryDep('buf266', c0, {c0: 802816}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 512}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (802816, 1)
op267.sizes = ([1568, 512], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op267_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf259', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf266', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg133_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_3, None)
        return store
op267_op268_op269_op271.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', c0, {c0: 1568}, None)]
op268.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 802816}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf268.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (1568, 512)
op268.sizes = ([1568], [512])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op268_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_1, getitem)
        return store_reduction
op267_op268_op269_op271.snodes[2] =
op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 1568}, None)]
op269.unmet_dependencies = [MemoryDep('buf267', c0, {c0: 802816}, None)]
op269.met_dependencies = []
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (1568, 512)
op269.sizes = ([1568], [512])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op269_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf269', get_index_1, getitem_1)
        return store_reduction
op267_op268_op269_op271.snodes[3] =
op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 802816}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf268', c0, {c0: 1568}, None),
        MemoryDep('buf269', c0, {c0: 1568}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg134_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 512}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (802816, 1)
op271.sizes = ([1568, 512], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op271_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf268', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf269', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_1, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf272.users = [
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op274'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
    ]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 802816}, None)]
op273.unmet_dependencies = [   MemoryDep('buf272', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op273.met_dependencies = [MemoryDep('arg137_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (802816, 1)
op273.sizes = ([8, 16, 196, 32], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf273', get_index_2, mul, None)
        return store


op274: SchedulerNode(ComputedBuffer)
op274.writes = [MemoryDep('buf274', c0, {c0: 802816}, None)]
op274.unmet_dependencies = [   MemoryDep('buf272', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op274.met_dependencies = [MemoryDep('arg137_1', c1 + 512, {c0: 8, c1: 512}, None)]
op274.outputs = [
    buf274: ComputedBuffer
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf274.users = [NodeUser(node=ExternKernelSchedulerNode(name='op275'), can_inplace=False, is_weak=False)]
]
op274.group.device = cuda:0
op274.group.iteration = (802816, 1)
op274.sizes = ([8, 512, 196], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op274_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf274', get_index_2, mul, None)
        return store


op275: ExternKernelSchedulerNode(ExternKernelOut)
op275.writes = [StarDep(name='buf275', mode=None)]
op275.unmet_dependencies = [StarDep(name='buf273', mode=None), StarDep(name='buf274', mode=None)]
op275.met_dependencies = []
op275.outputs = [
    buf275: ExternKernelOut
    buf275.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op275.node.kernel = extern_kernels.bmm


op276_op277_op278_op279: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op276_op277_op278_op279.writes = 
    [   MemoryDep('buf276', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf277', c0, {c0: 25088}, None),
        MemoryDep('buf278', c0, {c0: 25088}, None),
        MemoryDep('buf279', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op276_op277_op278_op279.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 4917248}, None)]
op276_op277_op278_op279.met_dependencies = []
op276_op277_op278_op279.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op276_op277_op278_op279.snodes[0] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 4917248}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf276.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (25088, 196)
op276.sizes = ([8, 3136], [196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf276_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op276_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_1, reduction)
        return store_reduction
op276_op277_op278_op279.snodes[1] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 25088}, None)]
op277.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 4917248}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf277.users = [
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
    ]
]
op277.group.device = cuda:0
op277.group.iteration = (25088, 196)
op277.sizes = ([25088], [196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op277_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, reduction)
        return store_reduction
op276_op277_op278_op279.snodes[2] =
op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 25088}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 4917248}, None),
        MemoryDep('buf277', c0, {c0: 25088}, None)]
op278.met_dependencies = []
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (25088, 196)
op278.sizes = ([25088], [196])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op278_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf277', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf278', get_index_2, reduction)
        return store_reduction
op276_op277_op278_op279.snodes[3] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 4917248}, None),
        MemoryDep('buf276', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf277', c0, {c0: 25088}, None),
        MemoryDep('buf278', c0, {c0: 25088}, None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (4917248, 1)
op279.sizes = ([8, 16, 196, 196], [])
buf276_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op279_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf275', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf277', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf278', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf279', get_index_4, where, None)
        return store


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 802816}, None)]
op280.unmet_dependencies = [   MemoryDep('buf272', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op280.met_dependencies = [   MemoryDep('arg137_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (802816, 1)
op280.sizes = ([8, 16, 196, 32], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf280', get_index_2, add, None)
        return store


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf279', mode=None), StarDep(name='buf280', mode=None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf281.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op281.node.kernel = extern_kernels.bmm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 802816}, None)]
op282.unmet_dependencies = [MemoryDep('buf281', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op282.met_dependencies = []
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (802816, 1)
op282.sizes = ([8, 6272, 16], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op282_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf282', get_index_1, load, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284_op285_op287: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op284_op285_op287.writes = 
    [   MemoryDep('buf284', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 1568}, None),
        MemoryDep('buf287', c0, {c0: 802816}, None)]
op284_op285_op287.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None)]
op284_op285_op287.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 512}, None)]
op284_op285_op287.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op284_op285_op287.snodes[0] =
op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1568}, None)]
op284.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None)]
op284.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf284.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1568, 512)
op284.sizes = ([1568], [512])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op284_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf284', get_index_3, getitem)
        return store_reduction
op284_op285_op287.snodes[1] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 1568}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None)]
op285.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf285.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (1568, 512)
op285.sizes = ([1568], [512])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf285', get_index_3, getitem_1)
        return store_reduction
op284_op285_op287.snodes[2] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 802816}, None)]
op287.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None),
        MemoryDep('buf284', c0, {c0: 1568}, None),
        MemoryDep('buf285', c0, {c0: 1568}, None)]
op287.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg141_1', c1, {c0: 1568, c1: 512}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (802816, 1)
op287.sizes = ([1568, 512], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf285_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op287_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf284', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf285', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg140_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg141_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf287', get_index_7, add_3, None)
        return store


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf288.users = [NodeUser(node=SchedulerNode(name='op289'), can_inplace=True, is_weak=False)]
]
op288.node.kernel = extern_kernels.mm


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 3211264}, None)]
op289.unmet_dependencies = [MemoryDep('buf288', c0, {c0: 3211264}, None)]
op289.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 1568, c1: 2048}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf289.users = [NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (3211264, 1)
op289.sizes = ([1568, 2048], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op289_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf288', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg143_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf289', get_index_4, mul_2, None)
        return store


op290: ExternKernelSchedulerNode(ExternKernelOut)
op290.writes = [StarDep(name='buf290', mode=None)]
op290.unmet_dependencies = [StarDep(name='buf289', mode=None)]
op290.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op290.outputs = [
    buf290: ExternKernelOut
    buf290.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf290.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=True, is_weak=False)]
]
op290.node.kernel = extern_kernels.mm


op291_op292_op293_op295: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op291_op292_op293_op295.writes = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf292', c0, {c0: 1568}, None),
        MemoryDep('buf293', c0, {c0: 1568}, None),
        MemoryDep('buf295', c0, {c0: 802816}, None)]
op291_op292_op293_op295.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None),
        MemoryDep('buf290', c0, {c0: 802816}, None)]
op291_op292_op293_op295.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg146_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 512}, None)]
op291_op292_op293_op295.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf292.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf293.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op291_op292_op293_op295.snodes[0] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 802816}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 802816}, None),
        MemoryDep('buf283', c0, {c0: 802816}, None),
        MemoryDep('buf290', c0, {c0: 802816}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 512}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf291.users = [
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op291.group.device = cuda:0
op291.group.iteration = (802816, 1)
op291.sizes = ([1568, 512], [])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op291_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf267', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf283', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf290', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf291', get_index_5, add_3, None)
        return store
op291_op292_op293_op295.snodes[1] =
op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 1568}, None)]
op292.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 802816}, None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf292.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op292.group.device = cuda:0
op292.group.iteration = (1568, 512)
op292.sizes = ([1568], [512])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op292_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf292', get_index_1, getitem)
        return store_reduction
op291_op292_op293_op295.snodes[2] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 1568}, None)]
op293.unmet_dependencies = [MemoryDep('buf291', c0, {c0: 802816}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf293.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (1568, 512)
op293.sizes = ([1568], [512])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op293_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf293', get_index_1, getitem_1)
        return store_reduction
op291_op292_op293_op295.snodes[3] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 802816}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf292', c0, {c0: 1568}, None),
        MemoryDep('buf293', c0, {c0: 1568}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg147_1', c1, {c0: 1568, c1: 512}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.group.device = cuda:0
op295.group.iteration = (802816, 1)
op295.sizes = ([1568, 512], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op295_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf292', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf293', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, add_1, None)
        return store


op296: ExternKernelSchedulerNode(ExternKernelOut)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = [StarDep(name='buf295', mode=None)]
op296.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op296.outputs = [
    buf296: ExternKernelOut
    buf296.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf296.users = [
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
    ]
]
op296.node.kernel = extern_kernels.mm


op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 802816}, None)]
op297.unmet_dependencies = [   MemoryDep('buf296', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op297.met_dependencies = [MemoryDep('arg149_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf297.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (802816, 1)
op297.sizes = ([8, 16, 196, 32], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op297_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf297', get_index_2, mul, None)
        return store


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 802816}, None)]
op298.unmet_dependencies = [   MemoryDep('buf296', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op298.met_dependencies = [MemoryDep('arg149_1', c1 + 512, {c0: 8, c1: 512}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf298.users = [NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op298.group.device = cuda:0
op298.group.iteration = (802816, 1)
op298.sizes = ([8, 512, 196], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf298', get_index_2, mul, None)
        return store


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf297', mode=None), StarDep(name='buf298', mode=None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf299.users = [
        NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op299.node.kernel = extern_kernels.bmm


op300_op301_op302_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op300_op301_op302_op303.writes = 
    [   MemoryDep('buf300', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf301', c0, {c0: 25088}, None),
        MemoryDep('buf302', c0, {c0: 25088}, None),
        MemoryDep('buf303', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op300_op301_op302_op303.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 4917248}, None)]
op300_op301_op302_op303.met_dependencies = []
op300_op301_op302_op303.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op300_op301_op302_op303.snodes[0] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op300.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 4917248}, None)]
op300.met_dependencies = []
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf300.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (25088, 196)
op300.sizes = ([8, 3136], [196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf300_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op300_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf300', get_index_1, reduction)
        return store_reduction
op300_op301_op302_op303.snodes[1] =
op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 25088}, None)]
op301.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 4917248}, None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf301.users = [
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
    ]
]
op301.group.device = cuda:0
op301.group.iteration = (25088, 196)
op301.sizes = ([25088], [196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op301_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf301', get_index_1, reduction)
        return store_reduction
op300_op301_op302_op303.snodes[2] =
op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 25088}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 4917248}, None),
        MemoryDep('buf301', c0, {c0: 25088}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf302.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (25088, 196)
op302.sizes = ([25088], [196])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op302_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf301', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf302', get_index_2, reduction)
        return store_reduction
op300_op301_op302_op303.snodes[3] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf299', c0, {c0: 4917248}, None),
        MemoryDep('buf300', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf301', c0, {c0: 25088}, None),
        MemoryDep('buf302', c0, {c0: 25088}, None)]
op303.met_dependencies = []
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (4917248, 1)
op303.sizes = ([8, 16, 196, 196], [])
buf300_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf299_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf303_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op303_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf299', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf301', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf302', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf303', get_index_4, where, None)
        return store


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 802816}, None)]
op304.unmet_dependencies = [   MemoryDep('buf296', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op304.met_dependencies = [   MemoryDep('arg149_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (802816, 1)
op304.sizes = ([8, 16, 196, 32], [])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op304_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf296', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf304', get_index_2, add, None)
        return store


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf303', mode=None), StarDep(name='buf304', mode=None)]
op305.met_dependencies = []
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.node.kernel = extern_kernels.bmm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 802816}, None)]
op306.unmet_dependencies = [MemoryDep('buf305', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op306.met_dependencies = []
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (802816, 1)
op306.sizes = ([8, 6272, 16], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op306_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf306', get_index_1, load, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False),
    ]
]
op307.node.kernel = extern_kernels.mm


op308_op309_op311: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op308_op309_op311.writes = 
    [   MemoryDep('buf308', c0, {c0: 1568}, None),
        MemoryDep('buf309', c0, {c0: 1568}, None),
        MemoryDep('buf311', c0, {c0: 802816}, None)]
op308_op309_op311.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None)]
op308_op309_op311.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg152_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 512}, None)]
op308_op309_op311.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf308.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op308_op309_op311.snodes[0] =
op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1568}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None)]
op308.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf308.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1568, 512)
op308.sizes = ([1568], [512])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op308_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf308', get_index_3, getitem)
        return store_reduction
op308_op309_op311.snodes[1] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 1568}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None)]
op309.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf309.users = [NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (1568, 512)
op309.sizes = ([1568], [512])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op309_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf309', get_index_3, getitem_1)
        return store_reduction
op308_op309_op311.snodes[2] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 802816}, None)]
op311.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None),
        MemoryDep('buf308', c0, {c0: 1568}, None),
        MemoryDep('buf309', c0, {c0: 1568}, None)]
op311.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg152_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 512}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf311.users = [NodeUser(node=ExternKernelSchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (802816, 1)
op311.sizes = ([1568, 512], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf309_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op311_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf308', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf309', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg152_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg153_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf311', get_index_7, add_3, None)
        return store


op312: ExternKernelSchedulerNode(ExternKernelOut)
op312.writes = [StarDep(name='buf312', mode=None)]
op312.unmet_dependencies = [StarDep(name='buf311', mode=None)]
op312.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op312.outputs = [
    buf312: ExternKernelOut
    buf312.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf312.users = [NodeUser(node=SchedulerNode(name='op313'), can_inplace=True, is_weak=False)]
]
op312.node.kernel = extern_kernels.mm


op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 3211264}, None)]
op313.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 3211264}, None)]
op313.met_dependencies = [MemoryDep('arg155_1', c1, {c0: 1568, c1: 2048}, None)]
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf313.users = [NodeUser(node=ExternKernelSchedulerNode(name='op314'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (3211264, 1)
op313.sizes = ([1568, 2048], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op313_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg155_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf313', get_index_4, mul_2, None)
        return store


op314: ExternKernelSchedulerNode(ExternKernelOut)
op314.writes = [StarDep(name='buf314', mode=None)]
op314.unmet_dependencies = [StarDep(name='buf313', mode=None)]
op314.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op314.outputs = [
    buf314: ExternKernelOut
    buf314.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf314.users = [NodeUser(node=SchedulerNode(name='op315'), can_inplace=True, is_weak=False)]
]
op314.node.kernel = extern_kernels.mm


op315_op316_op317_op319: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op315_op316_op317_op319.writes = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf316', c0, {c0: 1568}, None),
        MemoryDep('buf317', c0, {c0: 1568}, None),
        MemoryDep('buf319', c0, {c0: 802816}, None)]
op315_op316_op317_op319.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None),
        MemoryDep('buf314', c0, {c0: 802816}, None)]
op315_op316_op317_op319.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 512}, None)]
op315_op316_op317_op319.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf316.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op315_op316_op317_op319.snodes[0] =
op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 802816}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf291', c0, {c0: 802816}, None),
        MemoryDep('buf307', c0, {c0: 802816}, None),
        MemoryDep('buf314', c0, {c0: 802816}, None)]
op315.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg157_1', c1, {c0: 1568, c1: 512}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf315.users = [
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op315.group.device = cuda:0
op315.group.iteration = (802816, 1)
op315.sizes = ([1568, 512], [])
buf291_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op315_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf291', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf307', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf314', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf315', get_index_5, add_3, None)
        return store
op315_op316_op317_op319.snodes[1] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 1568}, None)]
op316.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 802816}, None)]
op316.met_dependencies = []
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf316.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op316.group.device = cuda:0
op316.group.iteration = (1568, 512)
op316.sizes = ([1568], [512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op316_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf316', get_index_1, getitem)
        return store_reduction
op315_op316_op317_op319.snodes[2] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 1568}, None)]
op317.unmet_dependencies = [MemoryDep('buf315', c0, {c0: 802816}, None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf317.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (1568, 512)
op317.sizes = ([1568], [512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op317_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf317', get_index_1, getitem_1)
        return store_reduction
op315_op316_op317_op319.snodes[3] =
op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 802816}, None)]
op319.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf316', c0, {c0: 1568}, None),
        MemoryDep('buf317', c0, {c0: 1568}, None)]
op319.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 512}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (802816, 1)
op319.sizes = ([1568, 512], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op319_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf316', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf317', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg158_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg159_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf319', get_index_5, add_1, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf319', mode=None)]
op320.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op328'), can_inplace=False, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.mm


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 802816}, None)]
op321.unmet_dependencies = [   MemoryDep('buf320', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op321.met_dependencies = [MemoryDep('arg161_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (802816, 1)
op321.sizes = ([8, 16, 196, 32], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op321_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf321', get_index_2, mul, None)
        return store


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 802816}, None)]
op322.unmet_dependencies = [   MemoryDep('buf320', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op322.met_dependencies = [MemoryDep('arg161_1', c1 + 512, {c0: 8, c1: 512}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf322.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (802816, 1)
op322.sizes = ([8, 512, 196], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op322_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf322', get_index_2, mul, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf321', mode=None), StarDep(name='buf322', mode=None)]
op323.met_dependencies = []
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf323.users = [
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
    ]
]
op323.node.kernel = extern_kernels.bmm


op324_op325_op326_op327: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op324_op325_op326_op327.writes = 
    [   MemoryDep('buf324', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf325', c0, {c0: 25088}, None),
        MemoryDep('buf326', c0, {c0: 25088}, None),
        MemoryDep('buf327', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op324_op325_op326_op327.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 4917248}, None)]
op324_op325_op326_op327.met_dependencies = []
op324_op325_op326_op327.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
    ]
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op324_op325_op326_op327.snodes[0] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op324.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 4917248}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf324.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (25088, 196)
op324.sizes = ([8, 3136], [196])
buf323_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf324_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf324', get_index_1, reduction)
        return store_reduction
op324_op325_op326_op327.snodes[1] =
op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 25088}, None)]
op325.unmet_dependencies = [MemoryDep('buf323', c0, {c0: 4917248}, None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf325.users = [
        NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False),
    ]
]
op325.group.device = cuda:0
op325.group.iteration = (25088, 196)
op325.sizes = ([25088], [196])
buf323_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op325_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf325', get_index_1, reduction)
        return store_reduction
op324_op325_op326_op327.snodes[2] =
op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 25088}, None)]
op326.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 4917248}, None),
        MemoryDep('buf325', c0, {c0: 25088}, None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (25088, 196)
op326.sizes = ([25088], [196])
buf323_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op326_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf325', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf326', get_index_2, reduction)
        return store_reduction
op324_op325_op326_op327.snodes[3] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 4917248}, None),
        MemoryDep('buf324', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf325', c0, {c0: 25088}, None),
        MemoryDep('buf326', c0, {c0: 25088}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (4917248, 1)
op327.sizes = ([8, 16, 196, 196], [])
buf324_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf323_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf323', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf325', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf326', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf327', get_index_4, where, None)
        return store


op328: SchedulerNode(ComputedBuffer)
op328.writes = [MemoryDep('buf328', c0, {c0: 802816}, None)]
op328.unmet_dependencies = [   MemoryDep('buf320', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op328.met_dependencies = [   MemoryDep('arg161_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op328.outputs = [
    buf328: ComputedBuffer
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf328.users = [NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False)]
]
op328.group.device = cuda:0
op328.group.iteration = (802816, 1)
op328.sizes = ([8, 16, 196, 32], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op328_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf328', get_index_2, add, None)
        return store


op329: ExternKernelSchedulerNode(ExternKernelOut)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf327', mode=None), StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: ExternKernelOut
    buf329.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = extern_kernels.bmm


op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 802816}, None)]
op330.unmet_dependencies = [MemoryDep('buf329', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (802816, 1)
op330.sizes = ([8, 6272, 16], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op330_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf330', get_index_1, load, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelOut)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelOut
    buf331.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf331.users = [
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False),
    ]
]
op331.node.kernel = extern_kernels.mm


op332_op333_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op332_op333_op335.writes = 
    [   MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None),
        MemoryDep('buf335', c0, {c0: 802816}, None)]
op332_op333_op335.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None)]
op332_op333_op335.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 512}, None)]
op332_op333_op335.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op332_op333_op335.snodes[0] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 1568}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None)]
op332.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (1568, 512)
op332.sizes = ([1568], [512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op332_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf331', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf332', get_index_3, getitem)
        return store_reduction
op332_op333_op335.snodes[1] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 1568}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None)]
op333.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (1568, 512)
op333.sizes = ([1568], [512])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op333_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf331', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf333', get_index_3, getitem_1)
        return store_reduction
op332_op333_op335.snodes[2] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 802816}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None),
        MemoryDep('buf332', c0, {c0: 1568}, None),
        MemoryDep('buf333', c0, {c0: 1568}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 512}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (802816, 1)
op335.sizes = ([1568, 512], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op335_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf331', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf332', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf333', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg164_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg165_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf335', get_index_7, add_3, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 3211264}, None)]
op337.unmet_dependencies = [MemoryDep('buf336', c0, {c0: 3211264}, None)]
op337.met_dependencies = [MemoryDep('arg167_1', c1, {c0: 1568, c1: 2048}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (3211264, 1)
op337.sizes = ([1568, 2048], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf336', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg167_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf337', get_index_4, mul_2, None)
        return store


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg168_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False)]
]
op338.node.kernel = extern_kernels.mm


op339_op340_op341_op343: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op339_op340_op341_op343.writes = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf340', c0, {c0: 1568}, None),
        MemoryDep('buf341', c0, {c0: 1568}, None),
        MemoryDep('buf343', c0, {c0: 802816}, None)]
op339_op340_op341_op343.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None),
        MemoryDep('buf338', c0, {c0: 802816}, None)]
op339_op340_op341_op343.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg171_1', c1, {c0: 1568, c1: 512}, None)]
op339_op340_op341_op343.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op339_op340_op341_op343.snodes[0] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 802816}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf315', c0, {c0: 802816}, None),
        MemoryDep('buf331', c0, {c0: 802816}, None),
        MemoryDep('buf338', c0, {c0: 802816}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 512}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (802816, 1)
op339.sizes = ([1568, 512], [])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op339_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf315', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf331', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf338', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg169_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf339', get_index_5, add_3, None)
        return store
op339_op340_op341_op343.snodes[1] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 1568}, None)]
op340.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 802816}, None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf340.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (1568, 512)
op340.sizes = ([1568], [512])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op340_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf340', get_index_1, getitem)
        return store_reduction
op339_op340_op341_op343.snodes[2] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 1568}, None)]
op341.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 802816}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (1568, 512)
op341.sizes = ([1568], [512])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op341_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf341', get_index_1, getitem_1)
        return store_reduction
op339_op340_op341_op343.snodes[3] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 802816}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf340', c0, {c0: 1568}, None),
        MemoryDep('buf341', c0, {c0: 1568}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg170_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg171_1', c1, {c0: 1568, c1: 512}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (802816, 1)
op343.sizes = ([1568, 512], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op343_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf341', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg170_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg171_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, add_1, None)
        return store


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf344.users = [
        NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False),
    ]
]
op344.node.kernel = extern_kernels.mm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 802816}, None)]
op345.unmet_dependencies = [   MemoryDep('buf344', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op345.met_dependencies = [MemoryDep('arg173_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (802816, 1)
op345.sizes = ([8, 16, 196, 32], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op345_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf345', get_index_2, mul, None)
        return store


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 802816}, None)]
op346.unmet_dependencies = [   MemoryDep('buf344', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op346.met_dependencies = [MemoryDep('arg173_1', c1 + 512, {c0: 8, c1: 512}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (802816, 1)
op346.sizes = ([8, 512, 196], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op346_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf346', get_index_2, mul, None)
        return store


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf345', mode=None), StarDep(name='buf346', mode=None)]
op347.met_dependencies = []
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf347.users = [
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
    ]
]
op347.node.kernel = extern_kernels.bmm


op348_op349_op350_op351: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op348_op349_op350_op351.writes = 
    [   MemoryDep('buf348', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf349', c0, {c0: 25088}, None),
        MemoryDep('buf350', c0, {c0: 25088}, None),
        MemoryDep('buf351', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op348_op349_op350_op351.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 4917248}, None)]
op348_op349_op350_op351.met_dependencies = []
op348_op349_op350_op351.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
    ]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op348_op349_op350_op351.snodes[0] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op348.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 4917248}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf348.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (25088, 196)
op348.sizes = ([8, 3136], [196])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf348_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op348_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf348', get_index_1, reduction)
        return store_reduction
op348_op349_op350_op351.snodes[1] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 25088}, None)]
op349.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 4917248}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf349.users = [
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (25088, 196)
op349.sizes = ([25088], [196])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op349_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_1, reduction)
        return store_reduction
op348_op349_op350_op351.snodes[2] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 25088}, None)]
op350.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 4917248}, None),
        MemoryDep('buf349', c0, {c0: 25088}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (25088, 196)
op350.sizes = ([25088], [196])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op350_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf349', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf350', get_index_2, reduction)
        return store_reduction
op348_op349_op350_op351.snodes[3] =
op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op351.unmet_dependencies = 
    [   MemoryDep('buf347', c0, {c0: 4917248}, None),
        MemoryDep('buf348', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf349', c0, {c0: 25088}, None),
        MemoryDep('buf350', c0, {c0: 25088}, None)]
op351.met_dependencies = []
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (4917248, 1)
op351.sizes = ([8, 16, 196, 196], [])
buf348_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf347_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op351_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf347', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf349', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf350', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf351', get_index_4, where, None)
        return store


op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 802816}, None)]
op352.unmet_dependencies = [   MemoryDep('buf344', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op352.met_dependencies = [   MemoryDep('arg173_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (802816, 1)
op352.sizes = ([8, 16, 196, 32], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg173_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf352', get_index_2, add, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf351', mode=None), StarDep(name='buf352', mode=None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op353.node.kernel = extern_kernels.bmm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 802816}, None)]
op354.unmet_dependencies = [MemoryDep('buf353', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op354.met_dependencies = []
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (802816, 1)
op354.sizes = ([8, 6272, 16], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op354_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf354', get_index_1, load, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.mm


op356_op357_op359: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op356_op357_op359.writes = 
    [   MemoryDep('buf356', c0, {c0: 1568}, None),
        MemoryDep('buf357', c0, {c0: 1568}, None),
        MemoryDep('buf359', c0, {c0: 802816}, None)]
op356_op357_op359.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None)]
op356_op357_op359.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 512}, None)]
op356_op357_op359.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf356.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op356_op357_op359.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 1568}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None)]
op356.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf356.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (1568, 512)
op356.sizes = ([1568], [512])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op356_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_3, getitem)
        return store_reduction
op356_op357_op359.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 1568}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None)]
op357.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf357.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (1568, 512)
op357.sizes = ([1568], [512])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op357_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf357', get_index_3, getitem_1)
        return store_reduction
op356_op357_op359.snodes[2] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 802816}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None),
        MemoryDep('buf356', c0, {c0: 1568}, None),
        MemoryDep('buf357', c0, {c0: 1568}, None)]
op359.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg176_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg177_1', c1, {c0: 1568, c1: 512}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (802816, 1)
op359.sizes = ([1568, 512], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf357_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op359_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf356', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf357', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg176_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf359', get_index_7, add_3, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op360.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False)]
]
op360.node.kernel = extern_kernels.mm


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 3211264}, None)]
op361.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 3211264}, None)]
op361.met_dependencies = [MemoryDep('arg179_1', c1, {c0: 1568, c1: 2048}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (3211264, 1)
op361.sizes = ([1568, 2048], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op361_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg179_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf361', get_index_4, mul_2, None)
        return store


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363_op364_op365_op367: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op363_op364_op365_op367.writes = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf364', c0, {c0: 1568}, None),
        MemoryDep('buf365', c0, {c0: 1568}, None),
        MemoryDep('buf367', c0, {c0: 802816}, None)]
op363_op364_op365_op367.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None),
        MemoryDep('buf362', c0, {c0: 802816}, None)]
op363_op364_op365_op367.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg182_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 512}, None)]
op363_op364_op365_op367.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
    ]
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf364.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op363_op364_op365_op367.snodes[0] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 802816}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 802816}, None),
        MemoryDep('buf355', c0, {c0: 802816}, None),
        MemoryDep('buf362', c0, {c0: 802816}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg175_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg181_1', c1, {c0: 1568, c1: 512}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (802816, 1)
op363.sizes = ([1568, 512], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op363_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg175_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf362', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg181_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, add_3, None)
        return store
op363_op364_op365_op367.snodes[1] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 1568}, None)]
op364.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 802816}, None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf364.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (1568, 512)
op364.sizes = ([1568], [512])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op364_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf364', get_index_1, getitem)
        return store_reduction
op363_op364_op365_op367.snodes[2] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 1568}, None)]
op365.unmet_dependencies = [MemoryDep('buf363', c0, {c0: 802816}, None)]
op365.met_dependencies = []
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf365.users = [NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (1568, 512)
op365.sizes = ([1568], [512])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op365_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf365', get_index_1, getitem_1)
        return store_reduction
op363_op364_op365_op367.snodes[3] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 802816}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf364', c0, {c0: 1568}, None),
        MemoryDep('buf365', c0, {c0: 1568}, None)]
op367.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 512}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (802816, 1)
op367.sizes = ([1568, 512], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op367_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf364', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf365', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg182_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg183_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf367', get_index_5, add_1, None)
        return store


op368: ExternKernelSchedulerNode(ExternKernelOut)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelOut
    buf368.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf368.users = [
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
    ]
]
op368.node.kernel = extern_kernels.mm


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 802816}, None)]
op369.unmet_dependencies = [   MemoryDep('buf368', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op369.met_dependencies = [MemoryDep('arg185_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (802816, 1)
op369.sizes = ([8, 16, 196, 32], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op369_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf369', get_index_2, mul, None)
        return store


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 802816}, None)]
op370.unmet_dependencies = [   MemoryDep('buf368', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op370.met_dependencies = [MemoryDep('arg185_1', c1 + 512, {c0: 8, c1: 512}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (802816, 1)
op370.sizes = ([8, 512, 196], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op370_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf370', get_index_2, mul, None)
        return store


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf369', mode=None), StarDep(name='buf370', mode=None)]
op371.met_dependencies = []
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
    ]
]
op371.node.kernel = extern_kernels.bmm


op372_op373_op374_op375: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op372_op373_op374_op375.writes = 
    [   MemoryDep('buf372', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf373', c0, {c0: 25088}, None),
        MemoryDep('buf374', c0, {c0: 25088}, None),
        MemoryDep('buf375', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op372_op373_op374_op375.unmet_dependencies = [MemoryDep('buf371', c0, {c0: 4917248}, None)]
op372_op373_op374_op375.met_dependencies = []
op372_op373_op374_op375.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf372.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
    ]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op372_op373_op374_op375.snodes[0] =
op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op372.unmet_dependencies = [MemoryDep('buf371', c0, {c0: 4917248}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf372.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (25088, 196)
op372.sizes = ([8, 3136], [196])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf372_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf372', get_index_1, reduction)
        return store_reduction
op372_op373_op374_op375.snodes[1] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 25088}, None)]
op373.unmet_dependencies = [MemoryDep('buf371', c0, {c0: 4917248}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (25088, 196)
op373.sizes = ([25088], [196])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op373_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf373', get_index_1, reduction)
        return store_reduction
op372_op373_op374_op375.snodes[2] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 25088}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf371', c0, {c0: 4917248}, None),
        MemoryDep('buf373', c0, {c0: 25088}, None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf374.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (25088, 196)
op374.sizes = ([25088], [196])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op374_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf373', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf374', get_index_2, reduction)
        return store_reduction
op372_op373_op374_op375.snodes[3] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op375.unmet_dependencies = 
    [   MemoryDep('buf371', c0, {c0: 4917248}, None),
        MemoryDep('buf372', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf373', c0, {c0: 25088}, None),
        MemoryDep('buf374', c0, {c0: 25088}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (4917248, 1)
op375.sizes = ([8, 16, 196, 196], [])
buf372_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf371_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf372', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf371', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf373', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf374', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf375', get_index_4, where, None)
        return store


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 802816}, None)]
op376.unmet_dependencies = [   MemoryDep('buf368', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op376.met_dependencies = [   MemoryDep('arg185_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (802816, 1)
op376.sizes = ([8, 16, 196, 32], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op376_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg185_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf376', get_index_2, add, None)
        return store


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf375', mode=None), StarDep(name='buf376', mode=None)]
op377.met_dependencies = []
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op377.node.kernel = extern_kernels.bmm


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 802816}, None)]
op378.unmet_dependencies = [MemoryDep('buf377', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (802816, 1)
op378.sizes = ([8, 6272, 16], [])
buf377_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf378', get_index_1, load, None)
        return store


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf378', mode=None)]
op379.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf379.users = [
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False),
    ]
]
op379.node.kernel = extern_kernels.mm


op380_op381_op383: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op380_op381_op383.writes = 
    [   MemoryDep('buf380', c0, {c0: 1568}, None),
        MemoryDep('buf381', c0, {c0: 1568}, None),
        MemoryDep('buf383', c0, {c0: 802816}, None)]
op380_op381_op383.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None)]
op380_op381_op383.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 512}, None)]
op380_op381_op383.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf380.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf381.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op380_op381_op383.snodes[0] =
op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 1568}, None)]
op380.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None)]
op380.met_dependencies = [MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf380.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (1568, 512)
op380.sizes = ([1568], [512])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op380_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf379', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg187_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf380', get_index_3, getitem)
        return store_reduction
op380_op381_op383.snodes[1] =
op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 1568}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None)]
op381.met_dependencies = [MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf381.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (1568, 512)
op381.sizes = ([1568], [512])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op381_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf379', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg187_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf381', get_index_3, getitem_1)
        return store_reduction
op380_op381_op383.snodes[2] =
op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 802816}, None)]
op383.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None),
        MemoryDep('buf380', c0, {c0: 1568}, None),
        MemoryDep('buf381', c0, {c0: 1568}, None)]
op383.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg188_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg189_1', c1, {c0: 1568, c1: 512}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (802816, 1)
op383.sizes = ([1568, 512], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op383_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf379', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg187_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf380', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf381', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg188_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg189_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf383', get_index_7, add_3, None)
        return store


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf383', mode=None)]
op384.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf384.users = [NodeUser(node=SchedulerNode(name='op385'), can_inplace=True, is_weak=False)]
]
op384.node.kernel = extern_kernels.mm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 3211264}, None)]
op385.unmet_dependencies = [MemoryDep('buf384', c0, {c0: 3211264}, None)]
op385.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 1568, c1: 2048}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf385.users = [NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (3211264, 1)
op385.sizes = ([1568, 2048], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op385_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf384', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg191_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf385', get_index_4, mul_2, None)
        return store


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf385', mode=None)]
op386.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387_op388_op389_op391: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op387_op388_op389_op391.writes = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf388', c0, {c0: 1568}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None),
        MemoryDep('buf391', c0, {c0: 802816}, None)]
op387_op388_op389_op391.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None),
        MemoryDep('buf386', c0, {c0: 802816}, None)]
op387_op388_op389_op391.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg194_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 512}, None)]
op387_op388_op389_op391.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf388.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op387_op388_op389_op391.snodes[0] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 802816}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf363', c0, {c0: 802816}, None),
        MemoryDep('buf379', c0, {c0: 802816}, None),
        MemoryDep('buf386', c0, {c0: 802816}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg193_1', c1, {c0: 1568, c1: 512}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf387.users = [
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (802816, 1)
op387.sizes = ([1568, 512], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op387_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf379', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg187_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf386', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg193_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf387', get_index_5, add_3, None)
        return store
op387_op388_op389_op391.snodes[1] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 1568}, None)]
op388.unmet_dependencies = [MemoryDep('buf387', c0, {c0: 802816}, None)]
op388.met_dependencies = []
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf388.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (1568, 512)
op388.sizes = ([1568], [512])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op388_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf388', get_index_1, getitem)
        return store_reduction
op387_op388_op389_op391.snodes[2] =
op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 1568}, None)]
op389.unmet_dependencies = [MemoryDep('buf387', c0, {c0: 802816}, None)]
op389.met_dependencies = []
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf389.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (1568, 512)
op389.sizes = ([1568], [512])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op389_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf389', get_index_1, getitem_1)
        return store_reduction
op387_op388_op389_op391.snodes[3] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 802816}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf388', c0, {c0: 1568}, None),
        MemoryDep('buf389', c0, {c0: 1568}, None)]
op391.met_dependencies = 
    [   MemoryDep('arg194_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg195_1', c1, {c0: 1568, c1: 512}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf391.users = [NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (802816, 1)
op391.sizes = ([1568, 512], [])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op391_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf388', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf389', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf391', get_index_5, add_1, None)
        return store


op392: ExternKernelSchedulerNode(ExternKernelOut)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op392.met_dependencies = [StarDep(name='arg196_1', mode=None)]
op392.outputs = [
    buf392: ExternKernelOut
    buf392.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf392.users = [
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op394'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False),
    ]
]
op392.node.kernel = extern_kernels.mm


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 802816}, None)]
op393.unmet_dependencies = [   MemoryDep('buf392', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op393.met_dependencies = [MemoryDep('arg197_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (802816, 1)
op393.sizes = ([8, 16, 196, 32], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op393_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf393', get_index_2, mul, None)
        return store


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', c0, {c0: 802816}, None)]
op394.unmet_dependencies = [   MemoryDep('buf392', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op394.met_dependencies = [MemoryDep('arg197_1', c1 + 512, {c0: 8, c1: 512}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op395'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (802816, 1)
op394.sizes = ([8, 512, 196], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op394_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf394', get_index_2, mul, None)
        return store


op395: ExternKernelSchedulerNode(ExternKernelOut)
op395.writes = [StarDep(name='buf395', mode=None)]
op395.unmet_dependencies = [StarDep(name='buf393', mode=None), StarDep(name='buf394', mode=None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ExternKernelOut
    buf395.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
]
op395.node.kernel = extern_kernels.bmm


op396_op397_op398_op399: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op396_op397_op398_op399.writes = 
    [   MemoryDep('buf396', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf397', c0, {c0: 25088}, None),
        MemoryDep('buf398', c0, {c0: 25088}, None),
        MemoryDep('buf399', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op396_op397_op398_op399.unmet_dependencies = [MemoryDep('buf395', c0, {c0: 4917248}, None)]
op396_op397_op398_op399.met_dependencies = []
op396_op397_op398_op399.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op396_op397_op398_op399.snodes[0] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op396.unmet_dependencies = [MemoryDep('buf395', c0, {c0: 4917248}, None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf396.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (25088, 196)
op396.sizes = ([8, 3136], [196])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf396_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op396_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf396', get_index_1, reduction)
        return store_reduction
op396_op397_op398_op399.snodes[1] =
op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 25088}, None)]
op397.unmet_dependencies = [MemoryDep('buf395', c0, {c0: 4917248}, None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (25088, 196)
op397.sizes = ([25088], [196])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op397_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf397', get_index_1, reduction)
        return store_reduction
op396_op397_op398_op399.snodes[2] =
op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 25088}, None)]
op398.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 4917248}, None),
        MemoryDep('buf397', c0, {c0: 25088}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (25088, 196)
op398.sizes = ([25088], [196])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op398_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf395', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf397', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf398', get_index_2, reduction)
        return store_reduction
op396_op397_op398_op399.snodes[3] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 4917248}, None),
        MemoryDep('buf396', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf397', c0, {c0: 25088}, None),
        MemoryDep('buf398', c0, {c0: 25088}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (4917248, 1)
op399.sizes = ([8, 16, 196, 196], [])
buf396_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf399_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op399_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf395', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf397', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf398', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf399', get_index_4, where, None)
        return store


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', c0, {c0: 802816}, None)]
op400.unmet_dependencies = [   MemoryDep('buf392', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op400.met_dependencies = [   MemoryDep('arg197_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf400.users = [NodeUser(node=ExternKernelSchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (802816, 1)
op400.sizes = ([8, 16, 196, 32], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op400_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf400', get_index_2, add, None)
        return store


op401: ExternKernelSchedulerNode(ExternKernelOut)
op401.writes = [StarDep(name='buf401', mode=None)]
op401.unmet_dependencies = [StarDep(name='buf399', mode=None), StarDep(name='buf400', mode=None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ExternKernelOut
    buf401.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.node.kernel = extern_kernels.bmm


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 802816}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf402.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (802816, 1)
op402.sizes = ([8, 6272, 16], [])
buf401_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op402_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf402', get_index_1, load, None)
        return store


op403: ExternKernelSchedulerNode(ExternKernelOut)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf402', mode=None)]
op403.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op403.outputs = [
    buf403: ExternKernelOut
    buf403.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf403.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False),
    ]
]
op403.node.kernel = extern_kernels.mm


op404_op405_op407: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op404_op405_op407.writes = 
    [   MemoryDep('buf404', c0, {c0: 1568}, None),
        MemoryDep('buf405', c0, {c0: 1568}, None),
        MemoryDep('buf407', c0, {c0: 802816}, None)]
op404_op405_op407.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None)]
op404_op405_op407.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg201_1', c1, {c0: 1568, c1: 512}, None)]
op404_op405_op407.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf404.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf405.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op404_op405_op407.snodes[0] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 1568}, None)]
op404.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None)]
op404.met_dependencies = [MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None)]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf404.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (1568, 512)
op404.sizes = ([1568], [512])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op404_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf403', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg199_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf404', get_index_3, getitem)
        return store_reduction
op404_op405_op407.snodes[1] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 1568}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None)]
op405.met_dependencies = [MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf405.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (1568, 512)
op405.sizes = ([1568], [512])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op405_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf403', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg199_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf405', get_index_3, getitem_1)
        return store_reduction
op404_op405_op407.snodes[2] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 802816}, None)]
op407.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None),
        MemoryDep('buf404', c0, {c0: 1568}, None),
        MemoryDep('buf405', c0, {c0: 1568}, None)]
op407.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg200_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg201_1', c1, {c0: 1568, c1: 512}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (802816, 1)
op407.sizes = ([1568, 512], [])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op407_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf403', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg199_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf404', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf405', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg200_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg201_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf407', get_index_7, add_3, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False)]
]
op408.node.kernel = extern_kernels.mm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 3211264}, None)]
op409.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 3211264}, None)]
op409.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 1568, c1: 2048}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (3211264, 1)
op409.sizes = ([1568, 2048], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op409_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg203_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf409', get_index_4, mul_2, None)
        return store


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op410.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf410.users = [NodeUser(node=SchedulerNode(name='op411'), can_inplace=True, is_weak=False)]
]
op410.node.kernel = extern_kernels.mm


op411_op412_op413_op415: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op411_op412_op413_op415.writes = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf412', c0, {c0: 1568}, None),
        MemoryDep('buf413', c0, {c0: 1568}, None),
        MemoryDep('buf415', c0, {c0: 802816}, None)]
op411_op412_op413_op415.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None),
        MemoryDep('buf410', c0, {c0: 802816}, None)]
op411_op412_op413_op415.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg206_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 512}, None)]
op411_op412_op413_op415.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf412.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf413.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op411_op412_op413_op415.snodes[0] =
op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 802816}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 802816}, None),
        MemoryDep('buf403', c0, {c0: 802816}, None),
        MemoryDep('buf410', c0, {c0: 802816}, None)]
op411.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg205_1', c1, {c0: 1568, c1: 512}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf411.users = [
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op415'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
]
op411.group.device = cuda:0
op411.group.iteration = (802816, 1)
op411.sizes = ([1568, 512], [])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op411_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf387', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf403', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg199_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf410', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf411', get_index_5, add_3, None)
        return store
op411_op412_op413_op415.snodes[1] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 1568}, None)]
op412.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 802816}, None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf412.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (1568, 512)
op412.sizes = ([1568], [512])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op412_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf412', get_index_1, getitem)
        return store_reduction
op411_op412_op413_op415.snodes[2] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 1568}, None)]
op413.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 802816}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf413.users = [NodeUser(node=SchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (1568, 512)
op413.sizes = ([1568], [512])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op413_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf413', get_index_1, getitem_1)
        return store_reduction
op411_op412_op413_op415.snodes[3] =
op415: SchedulerNode(ComputedBuffer)
op415.writes = [MemoryDep('buf415', c0, {c0: 802816}, None)]
op415.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf412', c0, {c0: 1568}, None),
        MemoryDep('buf413', c0, {c0: 1568}, None)]
op415.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg207_1', c1, {c0: 1568, c1: 512}, None)]
op415.outputs = [
    buf415: ComputedBuffer
    buf415.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf415.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op415.group.device = cuda:0
op415.group.iteration = (802816, 1)
op415.sizes = ([1568, 512], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf415_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op415_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf412', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf413', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg206_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg207_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf415', get_index_5, add_1, None)
        return store


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf415', mode=None)]
op416.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf416.users = [
        NodeUser(node=SchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False),
    ]
]
op416.node.kernel = extern_kernels.mm


op417: SchedulerNode(ComputedBuffer)
op417.writes = [MemoryDep('buf417', c0, {c0: 802816}, None)]
op417.unmet_dependencies = [   MemoryDep('buf416', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op417.met_dependencies = [MemoryDep('arg209_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op417.outputs = [
    buf417: ComputedBuffer
    buf417.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf417.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op417.group.device = cuda:0
op417.group.iteration = (802816, 1)
op417.sizes = ([8, 16, 196, 32], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op417_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf417', get_index_2, mul, None)
        return store


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 802816}, None)]
op418.unmet_dependencies = [   MemoryDep('buf416', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op418.met_dependencies = [MemoryDep('arg209_1', c1 + 512, {c0: 8, c1: 512}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (802816, 1)
op418.sizes = ([8, 512, 196], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op418_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf418', get_index_2, mul, None)
        return store


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf417', mode=None), StarDep(name='buf418', mode=None)]
op419.met_dependencies = []
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf419.users = [
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
    ]
]
op419.node.kernel = extern_kernels.bmm


op420_op421_op422_op423: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op420_op421_op422_op423.writes = 
    [   MemoryDep('buf420', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf421', c0, {c0: 25088}, None),
        MemoryDep('buf422', c0, {c0: 25088}, None),
        MemoryDep('buf423', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op420_op421_op422_op423.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 4917248}, None)]
op420_op421_op422_op423.met_dependencies = []
op420_op421_op422_op423.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
    ]
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op420_op421_op422_op423.snodes[0] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op420.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 4917248}, None)]
op420.met_dependencies = []
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf420.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (25088, 196)
op420.sizes = ([8, 3136], [196])
buf419_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf420_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op420_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf420', get_index_1, reduction)
        return store_reduction
op420_op421_op422_op423.snodes[1] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 25088}, None)]
op421.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 4917248}, None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf421.users = [
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
    ]
]
op421.group.device = cuda:0
op421.group.iteration = (25088, 196)
op421.sizes = ([25088], [196])
buf419_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op421_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf421', get_index_1, reduction)
        return store_reduction
op420_op421_op422_op423.snodes[2] =
op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 25088}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf419', c0, {c0: 4917248}, None),
        MemoryDep('buf421', c0, {c0: 25088}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf422.users = [NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (25088, 196)
op422.sizes = ([25088], [196])
buf419_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op422_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf421', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf422', get_index_2, reduction)
        return store_reduction
op420_op421_op422_op423.snodes[3] =
op423: SchedulerNode(ComputedBuffer)
op423.writes = [MemoryDep('buf423', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op423.unmet_dependencies = 
    [   MemoryDep('buf419', c0, {c0: 4917248}, None),
        MemoryDep('buf420', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf421', c0, {c0: 25088}, None),
        MemoryDep('buf422', c0, {c0: 25088}, None)]
op423.met_dependencies = []
op423.outputs = [
    buf423: ComputedBuffer
    buf423.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf423.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op423.group.device = cuda:0
op423.group.iteration = (4917248, 1)
op423.sizes = ([8, 16, 196, 196], [])
buf420_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf419_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf423_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op423_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf419', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf421', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf422', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf423', get_index_4, where, None)
        return store


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 802816}, None)]
op424.unmet_dependencies = [   MemoryDep('buf416', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op424.met_dependencies = [   MemoryDep('arg209_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (802816, 1)
op424.sizes = ([8, 16, 196, 32], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op424_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf424', get_index_2, add, None)
        return store


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf423', mode=None), StarDep(name='buf424', mode=None)]
op425.met_dependencies = []
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False)]
]
op425.node.kernel = extern_kernels.bmm


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 802816}, None)]
op426.unmet_dependencies = [MemoryDep('buf425', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (802816, 1)
op426.sizes = ([8, 6272, 16], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op426_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf427.users = [
        NodeUser(node=SchedulerNode(name='op428'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op431'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False),
    ]
]
op427.node.kernel = extern_kernels.mm


op428_op429_op431: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op428_op429_op431.writes = 
    [   MemoryDep('buf428', c0, {c0: 1568}, None),
        MemoryDep('buf429', c0, {c0: 1568}, None),
        MemoryDep('buf431', c0, {c0: 802816}, None)]
op428_op429_op431.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None)]
op428_op429_op431.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 512}, None)]
op428_op429_op431.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf428.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf429.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op428_op429_op431.snodes[0] =
op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 1568}, None)]
op428.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None)]
op428.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf428.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (1568, 512)
op428.sizes = ([1568], [512])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op428_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf427', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf428', get_index_3, getitem)
        return store_reduction
op428_op429_op431.snodes[1] =
op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', c0, {c0: 1568}, None)]
op429.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None)]
op429.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None)]
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf429.users = [NodeUser(node=SchedulerNode(name='op431'), can_inplace=False, is_weak=False)]
]
op429.group.device = cuda:0
op429.group.iteration = (1568, 512)
op429.sizes = ([1568], [512])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op429_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf427', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf429', get_index_3, getitem_1)
        return store_reduction
op428_op429_op431.snodes[2] =
op431: SchedulerNode(ComputedBuffer)
op431.writes = [MemoryDep('buf431', c0, {c0: 802816}, None)]
op431.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None),
        MemoryDep('buf428', c0, {c0: 1568}, None),
        MemoryDep('buf429', c0, {c0: 1568}, None)]
op431.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg212_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg213_1', c1, {c0: 1568, c1: 512}, None)]
op431.outputs = [
    buf431: ComputedBuffer
    buf431.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf431.users = [NodeUser(node=ExternKernelSchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op431.group.device = cuda:0
op431.group.iteration = (802816, 1)
op431.sizes = ([1568, 512], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf431_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op431_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf427', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf428', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf429', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg212_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg213_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf431', get_index_7, add_3, None)
        return store


op432: ExternKernelSchedulerNode(ExternKernelOut)
op432.writes = [StarDep(name='buf432', mode=None)]
op432.unmet_dependencies = [StarDep(name='buf431', mode=None)]
op432.met_dependencies = [StarDep(name='arg214_1', mode=None)]
op432.outputs = [
    buf432: ExternKernelOut
    buf432.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf432.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=True, is_weak=False)]
]
op432.node.kernel = extern_kernels.mm


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 3211264}, None)]
op433.unmet_dependencies = [MemoryDep('buf432', c0, {c0: 3211264}, None)]
op433.met_dependencies = [MemoryDep('arg215_1', c1, {c0: 1568, c1: 2048}, None)]
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf433.users = [NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (3211264, 1)
op433.sizes = ([1568, 2048], [])
buf432_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op433_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf432', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg215_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf432', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg215_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf433', get_index_4, mul_2, None)
        return store


op434: ExternKernelSchedulerNode(ExternKernelOut)
op434.writes = [StarDep(name='buf434', mode=None)]
op434.unmet_dependencies = [StarDep(name='buf433', mode=None)]
op434.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op434.outputs = [
    buf434: ExternKernelOut
    buf434.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf434.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=True, is_weak=False)]
]
op434.node.kernel = extern_kernels.mm


op435_op436_op437_op439: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op435_op436_op437_op439.writes = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf436', c0, {c0: 1568}, None),
        MemoryDep('buf437', c0, {c0: 1568}, None),
        MemoryDep('buf439', c0, {c0: 802816}, None)]
op435_op436_op437_op439.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None),
        MemoryDep('buf434', c0, {c0: 802816}, None)]
op435_op436_op437_op439.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg218_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg219_1', c1, {c0: 1568, c1: 512}, None)]
op435_op436_op437_op439.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf435.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
    ]
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf436.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op435_op436_op437_op439.snodes[0] =
op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 802816}, None)]
op435.unmet_dependencies = 
    [   MemoryDep('buf411', c0, {c0: 802816}, None),
        MemoryDep('buf427', c0, {c0: 802816}, None),
        MemoryDep('buf434', c0, {c0: 802816}, None)]
op435.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg217_1', c1, {c0: 1568, c1: 512}, None)]
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf435.users = [
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
    ]
]
op435.group.device = cuda:0
op435.group.iteration = (802816, 1)
op435.sizes = ([1568, 512], [])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op435_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf427', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg211_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf434', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg217_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf435', get_index_5, add_3, None)
        return store
op435_op436_op437_op439.snodes[1] =
op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 1568}, None)]
op436.unmet_dependencies = [MemoryDep('buf435', c0, {c0: 802816}, None)]
op436.met_dependencies = []
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf436.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op436.group.device = cuda:0
op436.group.iteration = (1568, 512)
op436.sizes = ([1568], [512])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op436_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf436', get_index_1, getitem)
        return store_reduction
op435_op436_op437_op439.snodes[2] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 1568}, None)]
op437.unmet_dependencies = [MemoryDep('buf435', c0, {c0: 802816}, None)]
op437.met_dependencies = []
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf437.users = [NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (1568, 512)
op437.sizes = ([1568], [512])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op437_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf437', get_index_1, getitem_1)
        return store_reduction
op435_op436_op437_op439.snodes[3] =
op439: SchedulerNode(ComputedBuffer)
op439.writes = [MemoryDep('buf439', c0, {c0: 802816}, None)]
op439.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf436', c0, {c0: 1568}, None),
        MemoryDep('buf437', c0, {c0: 1568}, None)]
op439.met_dependencies = 
    [   MemoryDep('arg218_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg219_1', c1, {c0: 1568, c1: 512}, None)]
op439.outputs = [
    buf439: ComputedBuffer
    buf439.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False)]
]
op439.group.device = cuda:0
op439.group.iteration = (802816, 1)
op439.sizes = ([1568, 512], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf439_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op439_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf436', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf437', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg218_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg219_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf439', get_index_5, add_1, None)
        return store


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf439', mode=None)]
op440.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf440.users = [
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
    ]
]
op440.node.kernel = extern_kernels.mm


op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 802816}, None)]
op441.unmet_dependencies = [   MemoryDep('buf440', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op441.met_dependencies = [MemoryDep('arg221_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (802816, 1)
op441.sizes = ([8, 16, 196, 32], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op441_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf441', get_index_2, mul, None)
        return store


op442: SchedulerNode(ComputedBuffer)
op442.writes = [MemoryDep('buf442', c0, {c0: 802816}, None)]
op442.unmet_dependencies = [   MemoryDep('buf440', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op442.met_dependencies = [MemoryDep('arg221_1', c1 + 512, {c0: 8, c1: 512}, None)]
op442.outputs = [
    buf442: ComputedBuffer
    buf442.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf442.users = [NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op442.group.device = cuda:0
op442.group.iteration = (802816, 1)
op442.sizes = ([8, 512, 196], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf442_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op442_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf442', get_index_2, mul, None)
        return store


op443: ExternKernelSchedulerNode(ExternKernelOut)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf441', mode=None), StarDep(name='buf442', mode=None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: ExternKernelOut
    buf443.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf443.users = [
        NodeUser(node=SchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op443.node.kernel = extern_kernels.bmm


op444_op445_op446_op447: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op444_op445_op446_op447.writes = 
    [   MemoryDep('buf444', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf445', c0, {c0: 25088}, None),
        MemoryDep('buf446', c0, {c0: 25088}, None),
        MemoryDep('buf447', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op444_op445_op446_op447.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 4917248}, None)]
op444_op445_op446_op447.met_dependencies = []
op444_op445_op446_op447.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf444.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op444_op445_op446_op447.snodes[0] =
op444: SchedulerNode(ComputedBuffer)
op444.writes = [MemoryDep('buf444', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op444.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 4917248}, None)]
op444.met_dependencies = []
op444.outputs = [
    buf444: ComputedBuffer
    buf444.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf444.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op444.group.device = cuda:0
op444.group.iteration = (25088, 196)
op444.sizes = ([8, 3136], [196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf444_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op444_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf444', get_index_1, reduction)
        return store_reduction
op444_op445_op446_op447.snodes[1] =
op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 25088}, None)]
op445.unmet_dependencies = [MemoryDep('buf443', c0, {c0: 4917248}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf445.users = [
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False),
    ]
]
op445.group.device = cuda:0
op445.group.iteration = (25088, 196)
op445.sizes = ([25088], [196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op445_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf445', get_index_1, reduction)
        return store_reduction
op444_op445_op446_op447.snodes[2] =
op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 25088}, None)]
op446.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 4917248}, None),
        MemoryDep('buf445', c0, {c0: 25088}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf446.users = [NodeUser(node=SchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (25088, 196)
op446.sizes = ([25088], [196])
buf443_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op446_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf443', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf445', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf446', get_index_2, reduction)
        return store_reduction
op444_op445_op446_op447.snodes[3] =
op447: SchedulerNode(ComputedBuffer)
op447.writes = [MemoryDep('buf447', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op447.unmet_dependencies = 
    [   MemoryDep('buf443', c0, {c0: 4917248}, None),
        MemoryDep('buf444', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf445', c0, {c0: 25088}, None),
        MemoryDep('buf446', c0, {c0: 25088}, None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ComputedBuffer
    buf447.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf447.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op447.group.device = cuda:0
op447.group.iteration = (4917248, 1)
op447.sizes = ([8, 16, 196, 196], [])
buf444_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf443_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf446_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf447_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op447_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf443', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf445', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf446', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf447', get_index_4, where, None)
        return store


op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 802816}, None)]
op448.unmet_dependencies = [   MemoryDep('buf440', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op448.met_dependencies = [   MemoryDep('arg221_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf448.users = [NodeUser(node=ExternKernelSchedulerNode(name='op449'), can_inplace=False, is_weak=False)]
]
op448.group.device = cuda:0
op448.group.iteration = (802816, 1)
op448.sizes = ([8, 16, 196, 32], [])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op448_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf440', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf448', get_index_2, add, None)
        return store


op449: ExternKernelSchedulerNode(ExternKernelOut)
op449.writes = [StarDep(name='buf449', mode=None)]
op449.unmet_dependencies = [StarDep(name='buf447', mode=None), StarDep(name='buf448', mode=None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ExternKernelOut
    buf449.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf449.users = [NodeUser(node=SchedulerNode(name='op450'), can_inplace=False, is_weak=False)]
]
op449.node.kernel = extern_kernels.bmm


op450: SchedulerNode(ComputedBuffer)
op450.writes = [MemoryDep('buf450', c0, {c0: 802816}, None)]
op450.unmet_dependencies = [MemoryDep('buf449', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op450.met_dependencies = []
op450.outputs = [
    buf450: ComputedBuffer
    buf450.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf450.users = [NodeUser(node=ExternKernelSchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op450.group.device = cuda:0
op450.group.iteration = (802816, 1)
op450.sizes = ([8, 6272, 16], [])
buf449_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf450_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op450_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf449', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf450', get_index_1, load, None)
        return store


op451: ExternKernelSchedulerNode(ExternKernelOut)
op451.writes = [StarDep(name='buf451', mode=None)]
op451.unmet_dependencies = [StarDep(name='buf450', mode=None)]
op451.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op451.outputs = [
    buf451: ExternKernelOut
    buf451.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf451.users = [
        NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False),
    ]
]
op451.node.kernel = extern_kernels.mm


op452_op453_op455: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op452_op453_op455.writes = 
    [   MemoryDep('buf452', c0, {c0: 1568}, None),
        MemoryDep('buf453', c0, {c0: 1568}, None),
        MemoryDep('buf455', c0, {c0: 802816}, None)]
op452_op453_op455.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None)]
op452_op453_op455.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg225_1', c1, {c0: 1568, c1: 512}, None)]
op452_op453_op455.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf452.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf453.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf455.users = [NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op452_op453_op455.snodes[0] =
op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 1568}, None)]
op452.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None)]
op452.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None)]
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf452.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (1568, 512)
op452.sizes = ([1568], [512])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op452_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf452', get_index_3, getitem)
        return store_reduction
op452_op453_op455.snodes[1] =
op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 1568}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None)]
op453.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf453.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op453.group.device = cuda:0
op453.group.iteration = (1568, 512)
op453.sizes = ([1568], [512])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op453_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf453', get_index_3, getitem_1)
        return store_reduction
op452_op453_op455.snodes[2] =
op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 802816}, None)]
op455.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None),
        MemoryDep('buf452', c0, {c0: 1568}, None),
        MemoryDep('buf453', c0, {c0: 1568}, None)]
op455.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg224_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg225_1', c1, {c0: 1568, c1: 512}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf455.users = [NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (802816, 1)
op455.sizes = ([1568, 512], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf453_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op455_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf452', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf453', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg224_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg225_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf455', get_index_7, add_3, None)
        return store


op456: ExternKernelSchedulerNode(ExternKernelOut)
op456.writes = [StarDep(name='buf456', mode=None)]
op456.unmet_dependencies = [StarDep(name='buf455', mode=None)]
op456.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op456.outputs = [
    buf456: ExternKernelOut
    buf456.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf456.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False)]
]
op456.node.kernel = extern_kernels.mm


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 3211264}, None)]
op457.unmet_dependencies = [MemoryDep('buf456', c0, {c0: 3211264}, None)]
op457.met_dependencies = [MemoryDep('arg227_1', c1, {c0: 1568, c1: 2048}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf457.users = [NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (3211264, 1)
op457.sizes = ([1568, 2048], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op457_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf456', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg227_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf457', get_index_4, mul_2, None)
        return store


op458: ExternKernelSchedulerNode(ExternKernelOut)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf457', mode=None)]
op458.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op458.outputs = [
    buf458: ExternKernelOut
    buf458.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf458.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False)]
]
op458.node.kernel = extern_kernels.mm


op459_op460_op461_op463: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op459_op460_op461_op463.writes = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf460', c0, {c0: 1568}, None),
        MemoryDep('buf461', c0, {c0: 1568}, None),
        MemoryDep('buf463', c0, {c0: 802816}, None)]
op459_op460_op461_op463.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None),
        MemoryDep('buf458', c0, {c0: 802816}, None)]
op459_op460_op461_op463.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg230_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg231_1', c1, {c0: 1568, c1: 512}, None)]
op459_op460_op461_op463.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op459_op460_op461_op463.snodes[0] =
op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 802816}, None)]
op459.unmet_dependencies = 
    [   MemoryDep('buf435', c0, {c0: 802816}, None),
        MemoryDep('buf451', c0, {c0: 802816}, None),
        MemoryDep('buf458', c0, {c0: 802816}, None)]
op459.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg229_1', c1, {c0: 1568, c1: 512}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf459.users = [
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op459.group.device = cuda:0
op459.group.iteration = (802816, 1)
op459.sizes = ([1568, 512], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op459_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf451', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg223_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf458', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg229_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf459', get_index_5, add_3, None)
        return store
op459_op460_op461_op463.snodes[1] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 1568}, None)]
op460.unmet_dependencies = [MemoryDep('buf459', c0, {c0: 802816}, None)]
op460.met_dependencies = []
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf460.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (1568, 512)
op460.sizes = ([1568], [512])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op460_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf460', get_index_1, getitem)
        return store_reduction
op459_op460_op461_op463.snodes[2] =
op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 1568}, None)]
op461.unmet_dependencies = [MemoryDep('buf459', c0, {c0: 802816}, None)]
op461.met_dependencies = []
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf461.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op461.group.device = cuda:0
op461.group.iteration = (1568, 512)
op461.sizes = ([1568], [512])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op461_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf461', get_index_1, getitem_1)
        return store_reduction
op459_op460_op461_op463.snodes[3] =
op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 802816}, None)]
op463.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf460', c0, {c0: 1568}, None),
        MemoryDep('buf461', c0, {c0: 1568}, None)]
op463.met_dependencies = 
    [   MemoryDep('arg230_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg231_1', c1, {c0: 1568, c1: 512}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (802816, 1)
op463.sizes = ([1568, 512], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf461_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op463_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf460', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf461', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg230_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg231_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf463', get_index_5, add_1, None)
        return store


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf464.users = [
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False),
    ]
]
op464.node.kernel = extern_kernels.mm


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 802816}, None)]
op465.unmet_dependencies = [   MemoryDep('buf464', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op465.met_dependencies = [MemoryDep('arg233_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (802816, 1)
op465.sizes = ([8, 16, 196, 32], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op465_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf465', get_index_2, mul, None)
        return store


op466: SchedulerNode(ComputedBuffer)
op466.writes = [MemoryDep('buf466', c0, {c0: 802816}, None)]
op466.unmet_dependencies = [   MemoryDep('buf464', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op466.met_dependencies = [MemoryDep('arg233_1', c1 + 512, {c0: 8, c1: 512}, None)]
op466.outputs = [
    buf466: ComputedBuffer
    buf466.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf466.users = [NodeUser(node=ExternKernelSchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op466.group.device = cuda:0
op466.group.iteration = (802816, 1)
op466.sizes = ([8, 512, 196], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf466_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op466_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf466', get_index_2, mul, None)
        return store


op467: ExternKernelSchedulerNode(ExternKernelOut)
op467.writes = [StarDep(name='buf467', mode=None)]
op467.unmet_dependencies = [StarDep(name='buf465', mode=None), StarDep(name='buf466', mode=None)]
op467.met_dependencies = []
op467.outputs = [
    buf467: ExternKernelOut
    buf467.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf467.users = [
        NodeUser(node=SchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op469'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
    ]
]
op467.node.kernel = extern_kernels.bmm


op468_op469_op470_op471: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op468_op469_op470_op471.writes = 
    [   MemoryDep('buf468', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf469', c0, {c0: 25088}, None),
        MemoryDep('buf470', c0, {c0: 25088}, None),
        MemoryDep('buf471', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op468_op469_op470_op471.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 4917248}, None)]
op468_op469_op470_op471.met_dependencies = []
op468_op469_op470_op471.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
    ]
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op468_op469_op470_op471.snodes[0] =
op468: SchedulerNode(ComputedBuffer)
op468.writes = [MemoryDep('buf468', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op468.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 4917248}, None)]
op468.met_dependencies = []
op468.outputs = [
    buf468: ComputedBuffer
    buf468.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf468.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op468.group.device = cuda:0
op468.group.iteration = (25088, 196)
op468.sizes = ([8, 3136], [196])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf468_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op468_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf468', get_index_1, reduction)
        return store_reduction
op468_op469_op470_op471.snodes[1] =
op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 25088}, None)]
op469.unmet_dependencies = [MemoryDep('buf467', c0, {c0: 4917248}, None)]
op469.met_dependencies = []
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf469.users = [
        NodeUser(node=SchedulerNode(name='op470'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False),
    ]
]
op469.group.device = cuda:0
op469.group.iteration = (25088, 196)
op469.sizes = ([25088], [196])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op469_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf469', get_index_1, reduction)
        return store_reduction
op468_op469_op470_op471.snodes[2] =
op470: SchedulerNode(ComputedBuffer)
op470.writes = [MemoryDep('buf470', c0, {c0: 25088}, None)]
op470.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 4917248}, None),
        MemoryDep('buf469', c0, {c0: 25088}, None)]
op470.met_dependencies = []
op470.outputs = [
    buf470: ComputedBuffer
    buf470.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=False, is_weak=False)]
]
op470.group.device = cuda:0
op470.group.iteration = (25088, 196)
op470.sizes = ([25088], [196])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op470_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf467', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf469', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf470', get_index_2, reduction)
        return store_reduction
op468_op469_op470_op471.snodes[3] =
op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 4917248}, None),
        MemoryDep('buf468', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf469', c0, {c0: 25088}, None),
        MemoryDep('buf470', c0, {c0: 25088}, None)]
op471.met_dependencies = []
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op471.group.device = cuda:0
op471.group.iteration = (4917248, 1)
op471.sizes = ([8, 16, 196, 196], [])
buf468_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf470_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op471_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf467', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf469', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf470', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf471', get_index_4, where, None)
        return store


op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 802816}, None)]
op472.unmet_dependencies = [   MemoryDep('buf464', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op472.met_dependencies = [   MemoryDep('arg233_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (802816, 1)
op472.sizes = ([8, 16, 196, 32], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op472_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf472', get_index_2, add, None)
        return store


op473: ExternKernelSchedulerNode(ExternKernelOut)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf471', mode=None), StarDep(name='buf472', mode=None)]
op473.met_dependencies = []
op473.outputs = [
    buf473: ExternKernelOut
    buf473.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf473.users = [NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False)]
]
op473.node.kernel = extern_kernels.bmm


op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 802816}, None)]
op474.unmet_dependencies = [MemoryDep('buf473', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (802816, 1)
op474.sizes = ([8, 6272, 16], [])
buf473_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op474_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf473', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf474', get_index_1, load, None)
        return store


op475: ExternKernelSchedulerNode(ExternKernelOut)
op475.writes = [StarDep(name='buf475', mode=None)]
op475.unmet_dependencies = [StarDep(name='buf474', mode=None)]
op475.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op475.outputs = [
    buf475: ExternKernelOut
    buf475.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf475.users = [
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op478'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op479'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False),
    ]
]
op475.node.kernel = extern_kernels.mm


op476_op477_op479: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op476_op477_op479.writes = 
    [   MemoryDep('buf476', c0, {c0: 1568}, None),
        MemoryDep('buf477', c0, {c0: 1568}, None),
        MemoryDep('buf479', c0, {c0: 802816}, None)]
op476_op477_op479.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None)]
op476_op477_op479.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 512}, None)]
op476_op477_op479.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf476.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op476_op477_op479.snodes[0] =
op476: SchedulerNode(ComputedBuffer)
op476.writes = [MemoryDep('buf476', c0, {c0: 1568}, None)]
op476.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None)]
op476.met_dependencies = [MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None)]
op476.outputs = [
    buf476: ComputedBuffer
    buf476.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf476.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op476.group.device = cuda:0
op476.group.iteration = (1568, 512)
op476.sizes = ([1568], [512])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op476_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf476', get_index_3, getitem)
        return store_reduction
op476_op477_op479.snodes[1] =
op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 1568}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None)]
op477.met_dependencies = [MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf477.users = [NodeUser(node=SchedulerNode(name='op479'), can_inplace=False, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (1568, 512)
op477.sizes = ([1568], [512])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op477_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf477', get_index_3, getitem_1)
        return store_reduction
op476_op477_op479.snodes[2] =
op479: SchedulerNode(ComputedBuffer)
op479.writes = [MemoryDep('buf479', c0, {c0: 802816}, None)]
op479.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None),
        MemoryDep('buf476', c0, {c0: 1568}, None),
        MemoryDep('buf477', c0, {c0: 1568}, None)]
op479.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg236_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg237_1', c1, {c0: 1568, c1: 512}, None)]
op479.outputs = [
    buf479: ComputedBuffer
    buf479.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf479.users = [NodeUser(node=ExternKernelSchedulerNode(name='op480'), can_inplace=False, is_weak=False)]
]
op479.group.device = cuda:0
op479.group.iteration = (802816, 1)
op479.sizes = ([1568, 512], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf476_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op479_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf476', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf477', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg236_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg237_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf479', get_index_7, add_3, None)
        return store


op480: ExternKernelSchedulerNode(ExternKernelOut)
op480.writes = [StarDep(name='buf480', mode=None)]
op480.unmet_dependencies = [StarDep(name='buf479', mode=None)]
op480.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op480.outputs = [
    buf480: ExternKernelOut
    buf480.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf480.users = [NodeUser(node=SchedulerNode(name='op481'), can_inplace=True, is_weak=False)]
]
op480.node.kernel = extern_kernels.mm


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 3211264}, None)]
op481.unmet_dependencies = [MemoryDep('buf480', c0, {c0: 3211264}, None)]
op481.met_dependencies = [MemoryDep('arg239_1', c1, {c0: 1568, c1: 2048}, None)]
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf481.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (3211264, 1)
op481.sizes = ([1568, 2048], [])
buf480_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg239_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op481_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf480', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg239_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf480', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg239_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf481', get_index_4, mul_2, None)
        return store


op482: ExternKernelSchedulerNode(ExternKernelOut)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf481', mode=None)]
op482.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op482.outputs = [
    buf482: ExternKernelOut
    buf482.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf482.users = [NodeUser(node=SchedulerNode(name='op483'), can_inplace=True, is_weak=False)]
]
op482.node.kernel = extern_kernels.mm


op483_op484_op485_op487: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op483_op484_op485_op487.writes = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf484', c0, {c0: 1568}, None),
        MemoryDep('buf485', c0, {c0: 1568}, None),
        MemoryDep('buf487', c0, {c0: 802816}, None)]
op483_op484_op485_op487.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None),
        MemoryDep('buf482', c0, {c0: 802816}, None)]
op483_op484_op485_op487.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg241_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg242_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 512}, None)]
op483_op484_op485_op487.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False),
    ]
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf484.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf485.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op483_op484_op485_op487.snodes[0] =
op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', c0, {c0: 802816}, None)]
op483.unmet_dependencies = 
    [   MemoryDep('buf459', c0, {c0: 802816}, None),
        MemoryDep('buf475', c0, {c0: 802816}, None),
        MemoryDep('buf482', c0, {c0: 802816}, None)]
op483.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg241_1', c1, {c0: 1568, c1: 512}, None)]
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op487'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (802816, 1)
op483.sizes = ([1568, 512], [])
buf459_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op483_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf459', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf475', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg235_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf482', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg241_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf483', get_index_5, add_3, None)
        return store
op483_op484_op485_op487.snodes[1] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 1568}, None)]
op484.unmet_dependencies = [MemoryDep('buf483', c0, {c0: 802816}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf484.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (1568, 512)
op484.sizes = ([1568], [512])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op484_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_1, getitem)
        return store_reduction
op483_op484_op485_op487.snodes[2] =
op485: SchedulerNode(ComputedBuffer)
op485.writes = [MemoryDep('buf485', c0, {c0: 1568}, None)]
op485.unmet_dependencies = [MemoryDep('buf483', c0, {c0: 802816}, None)]
op485.met_dependencies = []
op485.outputs = [
    buf485: ComputedBuffer
    buf485.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf485.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op485.group.device = cuda:0
op485.group.iteration = (1568, 512)
op485.sizes = ([1568], [512])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op485_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf485', get_index_1, getitem_1)
        return store_reduction
op483_op484_op485_op487.snodes[3] =
op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 802816}, None)]
op487.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf484', c0, {c0: 1568}, None),
        MemoryDep('buf485', c0, {c0: 1568}, None)]
op487.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg243_1', c1, {c0: 1568, c1: 512}, None)]
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (802816, 1)
op487.sizes = ([1568, 512], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf485_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op487_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf484', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf485', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg242_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg243_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf487', get_index_5, add_1, None)
        return store


op488: ExternKernelSchedulerNode(ExternKernelOut)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf487', mode=None)]
op488.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op488.outputs = [
    buf488: ExternKernelOut
    buf488.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf488.users = [
        NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op490'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
    ]
]
op488.node.kernel = extern_kernels.mm


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 802816}, None)]
op489.unmet_dependencies = [   MemoryDep('buf488', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op489.met_dependencies = [MemoryDep('arg245_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (802816, 1)
op489.sizes = ([8, 16, 196, 32], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op489_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf489', get_index_2, mul, None)
        return store


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 802816}, None)]
op490.unmet_dependencies = [   MemoryDep('buf488', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op490.met_dependencies = [MemoryDep('arg245_1', c1 + 512, {c0: 8, c1: 512}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (802816, 1)
op490.sizes = ([8, 512, 196], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op490_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf490', get_index_2, mul, None)
        return store


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf489', mode=None), StarDep(name='buf490', mode=None)]
op491.met_dependencies = []
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
    ]
]
op491.node.kernel = extern_kernels.bmm


op492_op493_op494_op495: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op492_op493_op494_op495.writes = 
    [   MemoryDep('buf492', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf493', c0, {c0: 25088}, None),
        MemoryDep('buf494', c0, {c0: 25088}, None),
        MemoryDep('buf495', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op492_op493_op494_op495.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 4917248}, None)]
op492_op493_op494_op495.met_dependencies = []
op492_op493_op494_op495.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf492.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
    ]
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf494.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf495.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op492_op493_op494_op495.snodes[0] =
op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op492.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 4917248}, None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf492.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (25088, 196)
op492.sizes = ([8, 3136], [196])
buf491_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf492_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op492_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf492', get_index_1, reduction)
        return store_reduction
op492_op493_op494_op495.snodes[1] =
op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 25088}, None)]
op493.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 4917248}, None)]
op493.met_dependencies = []
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf493.users = [
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
    ]
]
op493.group.device = cuda:0
op493.group.iteration = (25088, 196)
op493.sizes = ([25088], [196])
buf491_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op493_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf493', get_index_1, reduction)
        return store_reduction
op492_op493_op494_op495.snodes[2] =
op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 25088}, None)]
op494.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4917248}, None),
        MemoryDep('buf493', c0, {c0: 25088}, None)]
op494.met_dependencies = []
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf494.users = [NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (25088, 196)
op494.sizes = ([25088], [196])
buf491_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op494_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf493', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf494', get_index_2, reduction)
        return store_reduction
op492_op493_op494_op495.snodes[3] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 4917248}, None),
        MemoryDep('buf492', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf493', c0, {c0: 25088}, None),
        MemoryDep('buf494', c0, {c0: 25088}, None)]
op495.met_dependencies = []
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf495.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (4917248, 1)
op495.sizes = ([8, 16, 196, 196], [])
buf492_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf491_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf494_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf495_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op495_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf492', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf491', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf493', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf494', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf495', get_index_4, where, None)
        return store


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 802816}, None)]
op496.unmet_dependencies = [   MemoryDep('buf488', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op496.met_dependencies = [   MemoryDep('arg245_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (802816, 1)
op496.sizes = ([8, 16, 196, 32], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op496_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf496', get_index_2, add, None)
        return store


op497: ExternKernelSchedulerNode(ExternKernelOut)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf495', mode=None), StarDep(name='buf496', mode=None)]
op497.met_dependencies = []
op497.outputs = [
    buf497: ExternKernelOut
    buf497.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf497.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op497.node.kernel = extern_kernels.bmm


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 802816}, None)]
op498.unmet_dependencies = [MemoryDep('buf497', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op498.met_dependencies = []
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf498.users = [NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False)]
]
op498.group.device = cuda:0
op498.group.iteration = (802816, 1)
op498.sizes = ([8, 6272, 16], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op498_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf498', get_index_1, load, None)
        return store


op499: ExternKernelSchedulerNode(ExternKernelOut)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelOut
    buf499.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf499.users = [
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op502'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False),
    ]
]
op499.node.kernel = extern_kernels.mm


op500_op501_op503: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op500_op501_op503.writes = 
    [   MemoryDep('buf500', c0, {c0: 1568}, None),
        MemoryDep('buf501', c0, {c0: 1568}, None),
        MemoryDep('buf503', c0, {c0: 802816}, None)]
op500_op501_op503.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None)]
op500_op501_op503.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg249_1', c1, {c0: 1568, c1: 512}, None)]
op500_op501_op503.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf500.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf501.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf503.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op500_op501_op503.snodes[0] =
op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 1568}, None)]
op500.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None)]
op500.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf500.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (1568, 512)
op500.sizes = ([1568], [512])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op500_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf500', get_index_3, getitem)
        return store_reduction
op500_op501_op503.snodes[1] =
op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 1568}, None)]
op501.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None)]
op501.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None)]
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf501.users = [NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (1568, 512)
op501.sizes = ([1568], [512])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op501_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf501', get_index_3, getitem_1)
        return store_reduction
op500_op501_op503.snodes[2] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 802816}, None)]
op503.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None),
        MemoryDep('buf500', c0, {c0: 1568}, None),
        MemoryDep('buf501', c0, {c0: 1568}, None)]
op503.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg248_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg249_1', c1, {c0: 1568, c1: 512}, None)]
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf503.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.group.device = cuda:0
op503.group.iteration = (802816, 1)
op503.sizes = ([1568, 512], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf501_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op503_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf500', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf501', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg248_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg249_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf503', get_index_7, add_3, None)
        return store


op504: ExternKernelSchedulerNode(ExternKernelOut)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = [StarDep(name='buf503', mode=None)]
op504.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op504.outputs = [
    buf504: ExternKernelOut
    buf504.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf504.users = [NodeUser(node=SchedulerNode(name='op505'), can_inplace=True, is_weak=False)]
]
op504.node.kernel = extern_kernels.mm


op505: SchedulerNode(ComputedBuffer)
op505.writes = [MemoryDep('buf505', c0, {c0: 3211264}, None)]
op505.unmet_dependencies = [MemoryDep('buf504', c0, {c0: 3211264}, None)]
op505.met_dependencies = [MemoryDep('arg251_1', c1, {c0: 1568, c1: 2048}, None)]
op505.outputs = [
    buf505: ComputedBuffer
    buf505.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op505.group.device = cuda:0
op505.group.iteration = (3211264, 1)
op505.sizes = ([1568, 2048], [])
buf504_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf505_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op505_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf504', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf504', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg251_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf505', get_index_4, mul_2, None)
        return store


op506: ExternKernelSchedulerNode(ExternKernelOut)
op506.writes = [StarDep(name='buf506', mode=None)]
op506.unmet_dependencies = [StarDep(name='buf505', mode=None)]
op506.met_dependencies = [StarDep(name='arg252_1', mode=None)]
op506.outputs = [
    buf506: ExternKernelOut
    buf506.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf506.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=True, is_weak=False)]
]
op506.node.kernel = extern_kernels.mm


op507_op508_op509_op511: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op507_op508_op509_op511.writes = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf508', c0, {c0: 1568}, None),
        MemoryDep('buf509', c0, {c0: 1568}, None),
        MemoryDep('buf511', c0, {c0: 802816}, None)]
op507_op508_op509_op511.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None),
        MemoryDep('buf506', c0, {c0: 802816}, None)]
op507_op508_op509_op511.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg254_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg255_1', c1, {c0: 1568, c1: 512}, None)]
op507_op508_op509_op511.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf508.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf511.users = [NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op507_op508_op509_op511.snodes[0] =
op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 802816}, None)]
op507.unmet_dependencies = 
    [   MemoryDep('buf483', c0, {c0: 802816}, None),
        MemoryDep('buf499', c0, {c0: 802816}, None),
        MemoryDep('buf506', c0, {c0: 802816}, None)]
op507.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg253_1', c1, {c0: 1568, c1: 512}, None)]
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf507.users = [
        NodeUser(node=SchedulerNode(name='op508'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op507.group.device = cuda:0
op507.group.iteration = (802816, 1)
op507.sizes = ([1568, 512], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf499_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf506_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op507_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf499', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf506', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg253_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf507', get_index_5, add_3, None)
        return store
op507_op508_op509_op511.snodes[1] =
op508: SchedulerNode(ComputedBuffer)
op508.writes = [MemoryDep('buf508', c0, {c0: 1568}, None)]
op508.unmet_dependencies = [MemoryDep('buf507', c0, {c0: 802816}, None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ComputedBuffer
    buf508.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf508.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op508.group.device = cuda:0
op508.group.iteration = (1568, 512)
op508.sizes = ([1568], [512])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op508_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf508', get_index_1, getitem)
        return store_reduction
op507_op508_op509_op511.snodes[2] =
op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 1568}, None)]
op509.unmet_dependencies = [MemoryDep('buf507', c0, {c0: 802816}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (1568, 512)
op509.sizes = ([1568], [512])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op509_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf509', get_index_1, getitem_1)
        return store_reduction
op507_op508_op509_op511.snodes[3] =
op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 802816}, None)]
op511.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf508', c0, {c0: 1568}, None),
        MemoryDep('buf509', c0, {c0: 1568}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg254_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg255_1', c1, {c0: 1568, c1: 512}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf511.users = [NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False)]
]
op511.group.device = cuda:0
op511.group.iteration = (802816, 1)
op511.sizes = ([1568, 512], [])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf508_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf509_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg254_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op511_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf508', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf509', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg254_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg255_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf511', get_index_5, add_1, None)
        return store


op512: ExternKernelSchedulerNode(ExternKernelOut)
op512.writes = [StarDep(name='buf512', mode=None)]
op512.unmet_dependencies = [StarDep(name='buf511', mode=None)]
op512.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op512.outputs = [
    buf512: ExternKernelOut
    buf512.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf512.users = [
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
    ]
]
op512.node.kernel = extern_kernels.mm


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 802816}, None)]
op513.unmet_dependencies = [   MemoryDep('buf512', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op513.met_dependencies = [MemoryDep('arg257_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (802816, 1)
op513.sizes = ([8, 16, 196, 32], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op513_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf513', get_index_2, mul, None)
        return store


op514: SchedulerNode(ComputedBuffer)
op514.writes = [MemoryDep('buf514', c0, {c0: 802816}, None)]
op514.unmet_dependencies = [   MemoryDep('buf512', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op514.met_dependencies = [MemoryDep('arg257_1', c1 + 512, {c0: 8, c1: 512}, None)]
op514.outputs = [
    buf514: ComputedBuffer
    buf514.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf514.users = [NodeUser(node=ExternKernelSchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op514.group.device = cuda:0
op514.group.iteration = (802816, 1)
op514.sizes = ([8, 512, 196], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf514_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op514_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf514', get_index_2, mul, None)
        return store


op515: ExternKernelSchedulerNode(ExternKernelOut)
op515.writes = [StarDep(name='buf515', mode=None)]
op515.unmet_dependencies = [StarDep(name='buf513', mode=None), StarDep(name='buf514', mode=None)]
op515.met_dependencies = []
op515.outputs = [
    buf515: ExternKernelOut
    buf515.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf515.users = [
        NodeUser(node=SchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op517'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
    ]
]
op515.node.kernel = extern_kernels.bmm


op516_op517_op518_op519: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op516_op517_op518_op519.writes = 
    [   MemoryDep('buf516', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf517', c0, {c0: 25088}, None),
        MemoryDep('buf518', c0, {c0: 25088}, None),
        MemoryDep('buf519', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op516_op517_op518_op519.unmet_dependencies = [MemoryDep('buf515', c0, {c0: 4917248}, None)]
op516_op517_op518_op519.met_dependencies = []
op516_op517_op518_op519.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf516.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
    ]
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op516_op517_op518_op519.snodes[0] =
op516: SchedulerNode(ComputedBuffer)
op516.writes = [MemoryDep('buf516', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op516.unmet_dependencies = [MemoryDep('buf515', c0, {c0: 4917248}, None)]
op516.met_dependencies = []
op516.outputs = [
    buf516: ComputedBuffer
    buf516.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf516.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op516.group.device = cuda:0
op516.group.iteration = (25088, 196)
op516.sizes = ([8, 3136], [196])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf516_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op516_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf516', get_index_1, reduction)
        return store_reduction
op516_op517_op518_op519.snodes[1] =
op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 25088}, None)]
op517.unmet_dependencies = [MemoryDep('buf515', c0, {c0: 4917248}, None)]
op517.met_dependencies = []
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf517.users = [
        NodeUser(node=SchedulerNode(name='op518'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
    ]
]
op517.group.device = cuda:0
op517.group.iteration = (25088, 196)
op517.sizes = ([25088], [196])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op517_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf517', get_index_1, reduction)
        return store_reduction
op516_op517_op518_op519.snodes[2] =
op518: SchedulerNode(ComputedBuffer)
op518.writes = [MemoryDep('buf518', c0, {c0: 25088}, None)]
op518.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4917248}, None),
        MemoryDep('buf517', c0, {c0: 25088}, None)]
op518.met_dependencies = []
op518.outputs = [
    buf518: ComputedBuffer
    buf518.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False)]
]
op518.group.device = cuda:0
op518.group.iteration = (25088, 196)
op518.sizes = ([25088], [196])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op518_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf515', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf517', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf518', get_index_2, reduction)
        return store_reduction
op516_op517_op518_op519.snodes[3] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 4917248}, None),
        MemoryDep('buf516', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf517', c0, {c0: 25088}, None),
        MemoryDep('buf518', c0, {c0: 25088}, None)]
op519.met_dependencies = []
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf519.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (4917248, 1)
op519.sizes = ([8, 16, 196, 196], [])
buf516_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf518_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf519_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op519_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf515', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf517', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf518', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf519', get_index_4, where, None)
        return store


op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 802816}, None)]
op520.unmet_dependencies = [   MemoryDep('buf512', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op520.met_dependencies = [   MemoryDep('arg257_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf520.users = [NodeUser(node=ExternKernelSchedulerNode(name='op521'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (802816, 1)
op520.sizes = ([8, 16, 196, 32], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op520_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf520', get_index_2, add, None)
        return store


op521: ExternKernelSchedulerNode(ExternKernelOut)
op521.writes = [StarDep(name='buf521', mode=None)]
op521.unmet_dependencies = [StarDep(name='buf519', mode=None), StarDep(name='buf520', mode=None)]
op521.met_dependencies = []
op521.outputs = [
    buf521: ExternKernelOut
    buf521.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf521.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op521.node.kernel = extern_kernels.bmm


op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 802816}, None)]
op522.unmet_dependencies = [MemoryDep('buf521', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op522.met_dependencies = []
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (802816, 1)
op522.sizes = ([8, 6272, 16], [])
buf521_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op522_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf521', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf522', get_index_1, load, None)
        return store


op523: ExternKernelSchedulerNode(ExternKernelOut)
op523.writes = [StarDep(name='buf523', mode=None)]
op523.unmet_dependencies = [StarDep(name='buf522', mode=None)]
op523.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op523.outputs = [
    buf523: ExternKernelOut
    buf523.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf523.users = [
        NodeUser(node=SchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op525'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False),
    ]
]
op523.node.kernel = extern_kernels.mm


op524_op525_op527: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op524_op525_op527.writes = 
    [   MemoryDep('buf524', c0, {c0: 1568}, None),
        MemoryDep('buf525', c0, {c0: 1568}, None),
        MemoryDep('buf527', c0, {c0: 802816}, None)]
op524_op525_op527.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None)]
op524_op525_op527.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg260_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg261_1', c1, {c0: 1568, c1: 512}, None)]
op524_op525_op527.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf524.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf525.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op524_op525_op527.snodes[0] =
op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 1568}, None)]
op524.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None)]
op524.met_dependencies = [MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf524.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (1568, 512)
op524.sizes = ([1568], [512])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op524_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg259_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf524', get_index_3, getitem)
        return store_reduction
op524_op525_op527.snodes[1] =
op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 1568}, None)]
op525.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None)]
op525.met_dependencies = [MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf525.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (1568, 512)
op525.sizes = ([1568], [512])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op525_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg259_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf525', get_index_3, getitem_1)
        return store_reduction
op524_op525_op527.snodes[2] =
op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 802816}, None)]
op527.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None),
        MemoryDep('buf524', c0, {c0: 1568}, None),
        MemoryDep('buf525', c0, {c0: 1568}, None)]
op527.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg260_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg261_1', c1, {c0: 1568, c1: 512}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (802816, 1)
op527.sizes = ([1568, 512], [])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf525_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op527_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg259_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf524', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf525', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg260_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg261_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf527', get_index_7, add_3, None)
        return store


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf527', mode=None)]
op528.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf528.users = [NodeUser(node=SchedulerNode(name='op529'), can_inplace=True, is_weak=False)]
]
op528.node.kernel = extern_kernels.mm


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 3211264}, None)]
op529.unmet_dependencies = [MemoryDep('buf528', c0, {c0: 3211264}, None)]
op529.met_dependencies = [MemoryDep('arg263_1', c1, {c0: 1568, c1: 2048}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf529.users = [NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (3211264, 1)
op529.sizes = ([1568, 2048], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op529_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf528', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg263_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf529', get_index_4, mul_2, None)
        return store


op530: ExternKernelSchedulerNode(ExternKernelOut)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op530.met_dependencies = [StarDep(name='arg264_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelOut
    buf530.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False)]
]
op530.node.kernel = extern_kernels.mm


op531_op532_op533_op535: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op531_op532_op533_op535.writes = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf532', c0, {c0: 1568}, None),
        MemoryDep('buf533', c0, {c0: 1568}, None),
        MemoryDep('buf535', c0, {c0: 802816}, None)]
op531_op532_op533_op535.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None),
        MemoryDep('buf530', c0, {c0: 802816}, None)]
op531_op532_op533_op535.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg266_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg267_1', c1, {c0: 1568, c1: 512}, None)]
op531_op532_op533_op535.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf531.users = [
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
    ]
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf532.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
    buf533: ComputedBuffer
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf533.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op531_op532_op533_op535.snodes[0] =
op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 802816}, None)]
op531.unmet_dependencies = 
    [   MemoryDep('buf507', c0, {c0: 802816}, None),
        MemoryDep('buf523', c0, {c0: 802816}, None),
        MemoryDep('buf530', c0, {c0: 802816}, None)]
op531.met_dependencies = 
    [   MemoryDep('arg259_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg265_1', c1, {c0: 1568, c1: 512}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf531.users = [
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
    ]
]
op531.group.device = cuda:0
op531.group.iteration = (802816, 1)
op531.sizes = ([1568, 512], [])
buf507_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op531_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf507', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf523', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg259_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf530', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg265_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf531', get_index_5, add_3, None)
        return store
op531_op532_op533_op535.snodes[1] =
op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 1568}, None)]
op532.unmet_dependencies = [MemoryDep('buf531', c0, {c0: 802816}, None)]
op532.met_dependencies = []
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf532.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op532.group.device = cuda:0
op532.group.iteration = (1568, 512)
op532.sizes = ([1568], [512])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op532_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf532', get_index_1, getitem)
        return store_reduction
op531_op532_op533_op535.snodes[2] =
op533: SchedulerNode(ComputedBuffer)
op533.writes = [MemoryDep('buf533', c0, {c0: 1568}, None)]
op533.unmet_dependencies = [MemoryDep('buf531', c0, {c0: 802816}, None)]
op533.met_dependencies = []
op533.outputs = [
    buf533: ComputedBuffer
    buf533.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf533.users = [NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op533.group.device = cuda:0
op533.group.iteration = (1568, 512)
op533.sizes = ([1568], [512])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op533_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf533', get_index_1, getitem_1)
        return store_reduction
op531_op532_op533_op535.snodes[3] =
op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 802816}, None)]
op535.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf532', c0, {c0: 1568}, None),
        MemoryDep('buf533', c0, {c0: 1568}, None)]
op535.met_dependencies = 
    [   MemoryDep('arg266_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg267_1', c1, {c0: 1568, c1: 512}, None)]
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (802816, 1)
op535.sizes = ([1568, 512], [])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf533_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op535_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf532', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf533', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg266_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg267_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf535', get_index_5, add_1, None)
        return store


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf535', mode=None)]
op536.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op544'), can_inplace=False, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.mm


op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', c0, {c0: 802816}, None)]
op537.unmet_dependencies = [   MemoryDep('buf536', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op537.met_dependencies = [MemoryDep('arg269_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf537.users = [NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op537.group.device = cuda:0
op537.group.iteration = (802816, 1)
op537.sizes = ([8, 16, 196, 32], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op537_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf537', get_index_2, mul, None)
        return store


op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', c0, {c0: 802816}, None)]
op538.unmet_dependencies = [   MemoryDep('buf536', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op538.met_dependencies = [MemoryDep('arg269_1', c1 + 512, {c0: 8, c1: 512}, None)]
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf538.users = [NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (802816, 1)
op538.sizes = ([8, 512, 196], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op538_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf538', get_index_2, mul, None)
        return store


op539: ExternKernelSchedulerNode(ExternKernelOut)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf537', mode=None), StarDep(name='buf538', mode=None)]
op539.met_dependencies = []
op539.outputs = [
    buf539: ExternKernelOut
    buf539.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf539.users = [
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
    ]
]
op539.node.kernel = extern_kernels.bmm


op540_op541_op542_op543: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op540_op541_op542_op543.writes = 
    [   MemoryDep('buf540', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf541', c0, {c0: 25088}, None),
        MemoryDep('buf542', c0, {c0: 25088}, None),
        MemoryDep('buf543', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op540_op541_op542_op543.unmet_dependencies = [MemoryDep('buf539', c0, {c0: 4917248}, None)]
op540_op541_op542_op543.met_dependencies = []
op540_op541_op542_op543.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf540.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf541.users = [
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
    ]
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op540_op541_op542_op543.snodes[0] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op540.unmet_dependencies = [MemoryDep('buf539', c0, {c0: 4917248}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf540.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (25088, 196)
op540.sizes = ([8, 3136], [196])
buf539_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf540_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op540_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf540', get_index_1, reduction)
        return store_reduction
op540_op541_op542_op543.snodes[1] =
op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 25088}, None)]
op541.unmet_dependencies = [MemoryDep('buf539', c0, {c0: 4917248}, None)]
op541.met_dependencies = []
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf541.users = [
        NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False),
    ]
]
op541.group.device = cuda:0
op541.group.iteration = (25088, 196)
op541.sizes = ([25088], [196])
buf539_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op541_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf541', get_index_1, reduction)
        return store_reduction
op540_op541_op542_op543.snodes[2] =
op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 25088}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf539', c0, {c0: 4917248}, None),
        MemoryDep('buf541', c0, {c0: 25088}, None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.group.device = cuda:0
op542.group.iteration = (25088, 196)
op542.sizes = ([25088], [196])
buf539_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op542_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf541', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf542', get_index_2, reduction)
        return store_reduction
op540_op541_op542_op543.snodes[3] =
op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op543.unmet_dependencies = 
    [   MemoryDep('buf539', c0, {c0: 4917248}, None),
        MemoryDep('buf540', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf541', c0, {c0: 25088}, None),
        MemoryDep('buf542', c0, {c0: 25088}, None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (4917248, 1)
op543.sizes = ([8, 16, 196, 196], [])
buf540_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf539_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf542_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op543_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf539', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf541', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf542', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf543', get_index_4, where, None)
        return store


op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 802816}, None)]
op544.unmet_dependencies = [   MemoryDep('buf536', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op544.met_dependencies = [   MemoryDep('arg269_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf544.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (802816, 1)
op544.sizes = ([8, 16, 196, 32], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op544_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf544', get_index_2, add, None)
        return store


op545: ExternKernelSchedulerNode(ExternKernelOut)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf543', mode=None), StarDep(name='buf544', mode=None)]
op545.met_dependencies = []
op545.outputs = [
    buf545: ExternKernelOut
    buf545.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf545.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False)]
]
op545.node.kernel = extern_kernels.bmm


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 802816}, None)]
op546.unmet_dependencies = [MemoryDep('buf545', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op546.met_dependencies = []
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf546.users = [NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (802816, 1)
op546.sizes = ([8, 6272, 16], [])
buf545_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op546_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf546', get_index_1, load, None)
        return store


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf546', mode=None)]
op547.met_dependencies = [StarDep(name='arg270_1', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf547.users = [
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False),
    ]
]
op547.node.kernel = extern_kernels.mm


op548_op549_op551: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op548_op549_op551.writes = 
    [   MemoryDep('buf548', c0, {c0: 1568}, None),
        MemoryDep('buf549', c0, {c0: 1568}, None),
        MemoryDep('buf551', c0, {c0: 802816}, None)]
op548_op549_op551.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None)]
op548_op549_op551.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg272_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 512}, None)]
op548_op549_op551.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf549.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf551.users = [NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False)]
]
op548_op549_op551.snodes[0] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 1568}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None)]
op548.met_dependencies = [MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (1568, 512)
op548.sizes = ([1568], [512])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op548_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf547', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg271_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf548', get_index_3, getitem)
        return store_reduction
op548_op549_op551.snodes[1] =
op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 1568}, None)]
op549.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None)]
op549.met_dependencies = [MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None)]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf549.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (1568, 512)
op549.sizes = ([1568], [512])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op549_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf547', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg271_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf549', get_index_3, getitem_1)
        return store_reduction
op548_op549_op551.snodes[2] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 802816}, None)]
op551.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None),
        MemoryDep('buf548', c0, {c0: 1568}, None),
        MemoryDep('buf549', c0, {c0: 1568}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg272_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg273_1', c1, {c0: 1568, c1: 512}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf551.users = [NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False)]
]
op551.group.device = cuda:0
op551.group.iteration = (802816, 1)
op551.sizes = ([1568, 512], [])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf549_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op551_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf547', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg271_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf548', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf549', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg272_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg273_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf551', get_index_7, add_3, None)
        return store


op552: ExternKernelSchedulerNode(ExternKernelOut)
op552.writes = [StarDep(name='buf552', mode=None)]
op552.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op552.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op552.outputs = [
    buf552: ExternKernelOut
    buf552.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf552.users = [NodeUser(node=SchedulerNode(name='op553'), can_inplace=True, is_weak=False)]
]
op552.node.kernel = extern_kernels.mm


op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 3211264}, None)]
op553.unmet_dependencies = [MemoryDep('buf552', c0, {c0: 3211264}, None)]
op553.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 1568, c1: 2048}, None)]
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op554'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (3211264, 1)
op553.sizes = ([1568, 2048], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op553_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf552', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg275_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf553', get_index_4, mul_2, None)
        return store


op554: ExternKernelSchedulerNode(ExternKernelOut)
op554.writes = [StarDep(name='buf554', mode=None)]
op554.unmet_dependencies = [StarDep(name='buf553', mode=None)]
op554.met_dependencies = [StarDep(name='arg276_1', mode=None)]
op554.outputs = [
    buf554: ExternKernelOut
    buf554.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf554.users = [NodeUser(node=SchedulerNode(name='op555'), can_inplace=True, is_weak=False)]
]
op554.node.kernel = extern_kernels.mm


op555_op556_op557_op559: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op555_op556_op557_op559.writes = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf556', c0, {c0: 1568}, None),
        MemoryDep('buf557', c0, {c0: 1568}, None),
        MemoryDep('buf559', c0, {c0: 802816}, None)]
op555_op556_op557_op559.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None),
        MemoryDep('buf554', c0, {c0: 802816}, None)]
op555_op556_op557_op559.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg277_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg278_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg279_1', c1, {c0: 1568, c1: 512}, None)]
op555_op556_op557_op559.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf555.users = [
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf556.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf557.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op555_op556_op557_op559.snodes[0] =
op555: SchedulerNode(ComputedBuffer)
op555.writes = [MemoryDep('buf555', c0, {c0: 802816}, None)]
op555.unmet_dependencies = 
    [   MemoryDep('buf531', c0, {c0: 802816}, None),
        MemoryDep('buf547', c0, {c0: 802816}, None),
        MemoryDep('buf554', c0, {c0: 802816}, None)]
op555.met_dependencies = 
    [   MemoryDep('arg271_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg277_1', c1, {c0: 1568, c1: 512}, None)]
op555.outputs = [
    buf555: ComputedBuffer
    buf555.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf555.users = [
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op558'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op555.group.device = cuda:0
op555.group.iteration = (802816, 1)
op555.sizes = ([1568, 512], [])
buf531_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf547_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op555_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf531', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf547', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg271_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf554', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg277_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf555', get_index_5, add_3, None)
        return store
op555_op556_op557_op559.snodes[1] =
op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 1568}, None)]
op556.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 802816}, None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf556.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op556.group.device = cuda:0
op556.group.iteration = (1568, 512)
op556.sizes = ([1568], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op556_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf556', get_index_1, getitem)
        return store_reduction
op555_op556_op557_op559.snodes[2] =
op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 1568}, None)]
op557.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 802816}, None)]
op557.met_dependencies = []
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf557.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (1568, 512)
op557.sizes = ([1568], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf557_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op557_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf557', get_index_1, getitem_1)
        return store_reduction
op555_op556_op557_op559.snodes[3] =
op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 802816}, None)]
op559.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf556', c0, {c0: 1568}, None),
        MemoryDep('buf557', c0, {c0: 1568}, None)]
op559.met_dependencies = 
    [   MemoryDep('arg278_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg279_1', c1, {c0: 1568, c1: 512}, None)]
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (802816, 1)
op559.sizes = ([1568, 512], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf557_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf559_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op559_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf556', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf557', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg278_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg279_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf559', get_index_5, add_1, None)
        return store


op560: ExternKernelSchedulerNode(ExternKernelOut)
op560.writes = [StarDep(name='buf560', mode=None)]
op560.unmet_dependencies = [StarDep(name='buf559', mode=None)]
op560.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op560.outputs = [
    buf560: ExternKernelOut
    buf560.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf560.users = [
        NodeUser(node=SchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False),
    ]
]
op560.node.kernel = extern_kernels.mm


op561: SchedulerNode(ComputedBuffer)
op561.writes = [MemoryDep('buf561', c0, {c0: 802816}, None)]
op561.unmet_dependencies = [   MemoryDep('buf560', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op561.met_dependencies = [MemoryDep('arg281_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op561.outputs = [
    buf561: ComputedBuffer
    buf561.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf561.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op561.group.device = cuda:0
op561.group.iteration = (802816, 1)
op561.sizes = ([8, 16, 196, 32], [])
buf560_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf561_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op561_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf561', get_index_2, mul, None)
        return store


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 802816}, None)]
op562.unmet_dependencies = [   MemoryDep('buf560', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op562.met_dependencies = [MemoryDep('arg281_1', c1 + 512, {c0: 8, c1: 512}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf562.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (802816, 1)
op562.sizes = ([8, 512, 196], [])
buf560_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op562_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf562', get_index_2, mul, None)
        return store


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf561', mode=None), StarDep(name='buf562', mode=None)]
op563.met_dependencies = []
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf563.users = [
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op563.node.kernel = extern_kernels.bmm


op564_op565_op566_op567: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op564_op565_op566_op567.writes = 
    [   MemoryDep('buf564', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf565', c0, {c0: 25088}, None),
        MemoryDep('buf566', c0, {c0: 25088}, None),
        MemoryDep('buf567', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op564_op565_op566_op567.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 4917248}, None)]
op564_op565_op566_op567.met_dependencies = []
op564_op565_op566_op567.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf564.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf565.users = [
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf566.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf567.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op564_op565_op566_op567.snodes[0] =
op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op564.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 4917248}, None)]
op564.met_dependencies = []
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf564.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op564.group.device = cuda:0
op564.group.iteration = (25088, 196)
op564.sizes = ([8, 3136], [196])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf564_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op564_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf564', get_index_1, reduction)
        return store_reduction
op564_op565_op566_op567.snodes[1] =
op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 25088}, None)]
op565.unmet_dependencies = [MemoryDep('buf563', c0, {c0: 4917248}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf565.users = [
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
    ]
]
op565.group.device = cuda:0
op565.group.iteration = (25088, 196)
op565.sizes = ([25088], [196])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op565_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf565', get_index_1, reduction)
        return store_reduction
op564_op565_op566_op567.snodes[2] =
op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 25088}, None)]
op566.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 4917248}, None),
        MemoryDep('buf565', c0, {c0: 25088}, None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf566.users = [NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (25088, 196)
op566.sizes = ([25088], [196])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op566_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf563', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf565', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf566', get_index_2, reduction)
        return store_reduction
op564_op565_op566_op567.snodes[3] =
op567: SchedulerNode(ComputedBuffer)
op567.writes = [MemoryDep('buf567', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op567.unmet_dependencies = 
    [   MemoryDep('buf563', c0, {c0: 4917248}, None),
        MemoryDep('buf564', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf565', c0, {c0: 25088}, None),
        MemoryDep('buf566', c0, {c0: 25088}, None)]
op567.met_dependencies = []
op567.outputs = [
    buf567: ComputedBuffer
    buf567.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf567.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op567.group.device = cuda:0
op567.group.iteration = (4917248, 1)
op567.sizes = ([8, 16, 196, 196], [])
buf564_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf563_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf566_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf567_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op567_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf563', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf565', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf566', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf567', get_index_4, where, None)
        return store


op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 802816}, None)]
op568.unmet_dependencies = [   MemoryDep('buf560', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op568.met_dependencies = [   MemoryDep('arg281_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (802816, 1)
op568.sizes = ([8, 16, 196, 32], [])
buf560_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op568_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf560', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf568', get_index_2, add, None)
        return store


op569: ExternKernelSchedulerNode(ExternKernelOut)
op569.writes = [StarDep(name='buf569', mode=None)]
op569.unmet_dependencies = [StarDep(name='buf567', mode=None), StarDep(name='buf568', mode=None)]
op569.met_dependencies = []
op569.outputs = [
    buf569: ExternKernelOut
    buf569.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf569.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=False, is_weak=False)]
]
op569.node.kernel = extern_kernels.bmm


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 802816}, None)]
op570.unmet_dependencies = [MemoryDep('buf569', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op570.met_dependencies = []
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf570.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (802816, 1)
op570.sizes = ([8, 6272, 16], [])
buf569_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op570_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf569', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf570', get_index_1, load, None)
        return store


op571: ExternKernelSchedulerNode(ExternKernelOut)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf570', mode=None)]
op571.met_dependencies = [StarDep(name='arg282_1', mode=None)]
op571.outputs = [
    buf571: ExternKernelOut
    buf571.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf571.users = [
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op571.node.kernel = extern_kernels.mm


op572_op573_op575: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op572_op573_op575.writes = 
    [   MemoryDep('buf572', c0, {c0: 1568}, None),
        MemoryDep('buf573', c0, {c0: 1568}, None),
        MemoryDep('buf575', c0, {c0: 802816}, None)]
op572_op573_op575.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None)]
op572_op573_op575.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg285_1', c1, {c0: 1568, c1: 512}, None)]
op572_op573_op575.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf572.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf573.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op572_op573_op575.snodes[0] =
op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 1568}, None)]
op572.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None)]
op572.met_dependencies = [MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf572.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (1568, 512)
op572.sizes = ([1568], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op572_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf572', get_index_3, getitem)
        return store_reduction
op572_op573_op575.snodes[1] =
op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 1568}, None)]
op573.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None)]
op573.met_dependencies = [MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf573.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op573.group.device = cuda:0
op573.group.iteration = (1568, 512)
op573.sizes = ([1568], [512])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op573_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf573', get_index_3, getitem_1)
        return store_reduction
op572_op573_op575.snodes[2] =
op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 802816}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None),
        MemoryDep('buf572', c0, {c0: 1568}, None),
        MemoryDep('buf573', c0, {c0: 1568}, None)]
op575.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg284_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg285_1', c1, {c0: 1568, c1: 512}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (802816, 1)
op575.sizes = ([1568, 512], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf573_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg284_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op575_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf572', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf573', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg284_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg285_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf575', get_index_7, add_3, None)
        return store


op576: ExternKernelSchedulerNode(ExternKernelOut)
op576.writes = [StarDep(name='buf576', mode=None)]
op576.unmet_dependencies = [StarDep(name='buf575', mode=None)]
op576.met_dependencies = [StarDep(name='arg286_1', mode=None)]
op576.outputs = [
    buf576: ExternKernelOut
    buf576.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False)]
]
op576.node.kernel = extern_kernels.mm


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 3211264}, None)]
op577.unmet_dependencies = [MemoryDep('buf576', c0, {c0: 3211264}, None)]
op577.met_dependencies = [MemoryDep('arg287_1', c1, {c0: 1568, c1: 2048}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf577.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (3211264, 1)
op577.sizes = ([1568, 2048], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op577_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg287_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf576', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg287_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf577', get_index_4, mul_2, None)
        return store


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op578.met_dependencies = [StarDep(name='arg288_1', mode=None)]
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf578.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False)]
]
op578.node.kernel = extern_kernels.mm


op579_op580_op581_op583: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op579_op580_op581_op583.writes = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf580', c0, {c0: 1568}, None),
        MemoryDep('buf581', c0, {c0: 1568}, None),
        MemoryDep('buf583', c0, {c0: 802816}, None)]
op579_op580_op581_op583.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None),
        MemoryDep('buf578', c0, {c0: 802816}, None)]
op579_op580_op581_op583.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg290_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg291_1', c1, {c0: 1568, c1: 512}, None)]
op579_op580_op581_op583.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf579.users = [
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf580.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf581.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op579_op580_op581_op583.snodes[0] =
op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 802816}, None)]
op579.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 802816}, None),
        MemoryDep('buf571', c0, {c0: 802816}, None),
        MemoryDep('buf578', c0, {c0: 802816}, None)]
op579.met_dependencies = 
    [   MemoryDep('arg283_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg289_1', c1, {c0: 1568, c1: 512}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf579.users = [
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op579.group.device = cuda:0
op579.group.iteration = (802816, 1)
op579.sizes = ([1568, 512], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op579_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg283_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf578', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg289_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf579', get_index_5, add_3, None)
        return store
op579_op580_op581_op583.snodes[1] =
op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 1568}, None)]
op580.unmet_dependencies = [MemoryDep('buf579', c0, {c0: 802816}, None)]
op580.met_dependencies = []
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf580.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (1568, 512)
op580.sizes = ([1568], [512])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op580_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf580', get_index_1, getitem)
        return store_reduction
op579_op580_op581_op583.snodes[2] =
op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 1568}, None)]
op581.unmet_dependencies = [MemoryDep('buf579', c0, {c0: 802816}, None)]
op581.met_dependencies = []
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf581.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False)]
]
op581.group.device = cuda:0
op581.group.iteration = (1568, 512)
op581.sizes = ([1568], [512])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op581_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf581', get_index_1, getitem_1)
        return store_reduction
op579_op580_op581_op583.snodes[3] =
op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 802816}, None)]
op583.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf580', c0, {c0: 1568}, None),
        MemoryDep('buf581', c0, {c0: 1568}, None)]
op583.met_dependencies = 
    [   MemoryDep('arg290_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg291_1', c1, {c0: 1568, c1: 512}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (802816, 1)
op583.sizes = ([1568, 512], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf581_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg290_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op583_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf580', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf581', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg290_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg291_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf583', get_index_5, add_1, None)
        return store


op584: ExternKernelSchedulerNode(ExternKernelOut)
op584.writes = [StarDep(name='buf584', mode=None)]
op584.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op584.met_dependencies = [StarDep(name='arg292_1', mode=None)]
op584.outputs = [
    buf584: ExternKernelOut
    buf584.layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
    buf584.users = [
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
    ]
]
op584.node.kernel = extern_kernels.mm


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 802816}, None)]
op585.unmet_dependencies = [   MemoryDep('buf584', 301056*c0 + 32*c1 + 1536*c2 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op585.met_dependencies = [MemoryDep('arg293_1', 32*c1 + c3, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf585.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (802816, 1)
op585.sizes = ([8, 16, 196, 32], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op585_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3
    index1 = 32*z1 + z3
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf585', get_index_2, mul, None)
        return store


op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 802816}, None)]
op586.unmet_dependencies = [   MemoryDep('buf584', 301056*c0 + c1 + 1536*c2 + 512, {c0: 8, c1: 512, c2: 196}, None)]
op586.met_dependencies = [MemoryDep('arg293_1', c1 + 512, {c0: 8, c1: 512}, None)]
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
    buf586.users = [NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False)]
]
op586.group.device = cuda:0
op586.group.iteration = (802816, 1)
op586.sizes = ([8, 512, 196], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 32, 196], stride=[100352, 6272, 6272, 196, 1])
class op586_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 196}
    index0 = 301056*z0 + z1 + 1536*z2 + 512
    index1 = z1 + 512
    index2 = 100352*z0 + 196*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.42044820762685725, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf586', get_index_2, mul, None)
        return store


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf585', mode=None), StarDep(name='buf586', mode=None)]
op587.met_dependencies = []
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
    buf587.users = [
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
    ]
]
op587.node.kernel = extern_kernels.bmm


op588_op589_op590_op591: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op588_op589_op590_op591.writes = 
    [   MemoryDep('buf588', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf589', c0, {c0: 25088}, None),
        MemoryDep('buf590', c0, {c0: 25088}, None),
        MemoryDep('buf591', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op588_op589_op590_op591.unmet_dependencies = [MemoryDep('buf587', c0, {c0: 4917248}, None)]
op588_op589_op590_op591.met_dependencies = []
op588_op589_op590_op591.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf588.users = [NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf589.users = [
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
    ]
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf590.users = [NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op588_op589_op590_op591.snodes[0] =
op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', 3200*c0 + c1, {c0: 8, c1: 3136}, None)]
op588.unmet_dependencies = [MemoryDep('buf587', c0, {c0: 4917248}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
    buf588.users = [NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (25088, 196)
op588.sizes = ([8, 3136], [196])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf588_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
class op588_loop_body:
    var_ranges = {z0: 8, z1: 3136, z2: 196}
    index0 = 614656*z0 + 196*z1 + z2
    index1 = 3200*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        constant = ops.constant(-inf, torch.float32)
        eq = ops.eq(load, constant)
        logical_not = ops.logical_not(eq)
        to_dtype = ops.to_dtype(logical_not, torch.int64, src_dtype = torch.bool)
        to_dtype_1 = ops.to_dtype(to_dtype, torch.bool, src_dtype = torch.int64)
        reduction = ops.reduction(torch.bool, torch.bool, 'any', to_dtype_1)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf588', get_index_1, reduction)
        return store_reduction
op588_op589_op590_op591.snodes[1] =
op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 25088}, None)]
op589.unmet_dependencies = [MemoryDep('buf587', c0, {c0: 4917248}, None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf589.users = [
        NodeUser(node=SchedulerNode(name='op590'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
    ]
]
op589.group.device = cuda:0
op589.group.iteration = (25088, 196)
op589.sizes = ([25088], [196])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op589_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf589', get_index_1, reduction)
        return store_reduction
op588_op589_op590_op591.snodes[2] =
op590: SchedulerNode(ComputedBuffer)
op590.writes = [MemoryDep('buf590', c0, {c0: 25088}, None)]
op590.unmet_dependencies = 
    [   MemoryDep('buf587', c0, {c0: 4917248}, None),
        MemoryDep('buf589', c0, {c0: 25088}, None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ComputedBuffer
    buf590.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
    buf590.users = [NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False)]
]
op590.group.device = cuda:0
op590.group.iteration = (25088, 196)
op590.sizes = ([25088], [196])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
class op590_loop_body:
    var_ranges = {z0: 25088, z1: 196}
    index0 = 196*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf589', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf590', get_index_2, reduction)
        return store_reduction
op588_op589_op590_op591.snodes[3] =
op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', 38432*c0 + c1, {c0: 128, c1: 38416}, None)]
op591.unmet_dependencies = 
    [   MemoryDep('buf587', c0, {c0: 4917248}, None),
        MemoryDep('buf588', 3200*c0 + c1, {c0: 8, c1: 3136}, None),
        MemoryDep('buf589', c0, {c0: 25088}, None),
        MemoryDep('buf590', c0, {c0: 25088}, None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
    buf591.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op591.group.device = cuda:0
op591.group.iteration = (4917248, 1)
op591.sizes = ([8, 16, 196, 196], [])
buf588_layout = FixedLayout('cuda', torch.bool, size=[8, 16, 1, 196, 1], stride=[3200, 196, 25600, 1, 25600])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 196], stride=[38416, 196, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf590_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 1], stride=[3136, 196, 25088, 1, 25088])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 196], stride=[614912, 38432, 38432, 196, 1])
class op591_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 196}
    index0 = 3200*z0 + 196*z1 + z2
    index1 = 614656*z0 + 38416*z1 + 196*z2 + z3
    index2 = 3136*z0 + 196*z1 + z2
    index3 = 614912*z0 + 38432*z1 + 196*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        logical_not = ops.logical_not(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf587', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf589', get_index_2)
        sub = ops.sub(load_1, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf590', get_index_3)
        truediv = ops.truediv(exp, load_3)
        constant = ops.constant(0.0, torch.float32)
        where = ops.where(logical_not, constant, truediv)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf591', get_index_4, where, None)
        return store


op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', c0, {c0: 802816}, None)]
op592.unmet_dependencies = [   MemoryDep('buf584', 301056*c0 + 32*c1 + 1536*c2 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op592.met_dependencies = [   MemoryDep('arg293_1', 32*c1 + c3 + 1024, {c0: 8, c1: 16, c2: 196, c3: 32}, None)]
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
    buf592.users = [NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (802816, 1)
op592.sizes = ([8, 16, 196, 32], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[1568, 1536], stride=[1536, 1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 1, 196, 32], stride=[100352, 6272, 6272, 32, 1])
class op592_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 196, z3: 32}
    index0 = 301056*z0 + 32*z1 + 1536*z2 + z3 + 1024
    index1 = 32*z1 + z3 + 1024
    index2 = 100352*z0 + 6272*z1 + 32*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg293_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf592', get_index_2, add, None)
        return store


op593: ExternKernelSchedulerNode(ExternKernelOut)
op593.writes = [StarDep(name='buf593', mode=None)]
op593.unmet_dependencies = [StarDep(name='buf591', mode=None), StarDep(name='buf592', mode=None)]
op593.met_dependencies = []
op593.outputs = [
    buf593: ExternKernelOut
    buf593.layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
    buf593.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
]
op593.node.kernel = extern_kernels.bmm


op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', c0, {c0: 802816}, None)]
op594.unmet_dependencies = [MemoryDep('buf593', 100352*c0 + c1 + 6272*c2, {c0: 8, c1: 6272, c2: 16}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (802816, 1)
op594.sizes = ([8, 6272, 16], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[128, 196, 32], stride=[6272, 32, 1])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 32, 16], stride=[100352, 1, 512, 16, 1])
class op594_loop_body:
    var_ranges = {z0: 8, z1: 6272, z2: 16}
    index0 = 100352*z0 + z1 + 6272*z2
    index1 = 100352*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf594', get_index_1, load, None)
        return store


op595: ExternKernelSchedulerNode(ExternKernelOut)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf594', mode=None)]
op595.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op595.outputs = [
    buf595: ExternKernelOut
    buf595.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf595.users = [
        NodeUser(node=SchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False),
    ]
]
op595.node.kernel = extern_kernels.mm


op596_op597_op599: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op596_op597_op599.writes = 
    [   MemoryDep('buf596', c0, {c0: 1568}, None),
        MemoryDep('buf597', c0, {c0: 1568}, None),
        MemoryDep('buf599', c0, {c0: 802816}, None)]
op596_op597_op599.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None)]
op596_op597_op599.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg296_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg297_1', c1, {c0: 1568, c1: 512}, None)]
op596_op597_op599.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf599.users = [NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op596_op597_op599.snodes[0] =
op596: SchedulerNode(ComputedBuffer)
op596.writes = [MemoryDep('buf596', c0, {c0: 1568}, None)]
op596.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None)]
op596.met_dependencies = [MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None)]
op596.outputs = [
    buf596: ComputedBuffer
    buf596.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf596.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op596.group.device = cuda:0
op596.group.iteration = (1568, 512)
op596.sizes = ([1568], [512])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op596_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf596', get_index_3, getitem)
        return store_reduction
op596_op597_op599.snodes[1] =
op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 1568}, None)]
op597.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None)]
op597.met_dependencies = [MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None)]
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
    buf597.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (1568, 512)
op597.sizes = ([1568], [512])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
class op597_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf597', get_index_3, getitem_1)
        return store_reduction
op596_op597_op599.snodes[2] =
op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 802816}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None),
        MemoryDep('buf596', c0, {c0: 1568}, None),
        MemoryDep('buf597', c0, {c0: 1568}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg296_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg297_1', c1, {c0: 1568, c1: 512}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
    buf599.users = [NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False)]
]
op599.group.device = cuda:0
op599.group.iteration = (802816, 1)
op599.sizes = ([1568, 512], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf596_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 1], stride=[196, 1568, 1, 1568])
arg296_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 1, 512, 1])
class op599_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf596', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf597', get_index_4)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg296_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg297_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf599', get_index_7, add_3, None)
        return store


op600: ExternKernelSchedulerNode(ExternKernelOut)
op600.writes = [StarDep(name='buf600', mode=None)]
op600.unmet_dependencies = [StarDep(name='buf599', mode=None)]
op600.met_dependencies = [StarDep(name='arg298_1', mode=None)]
op600.outputs = [
    buf600: ExternKernelOut
    buf600.layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
    buf600.users = [NodeUser(node=SchedulerNode(name='op601'), can_inplace=True, is_weak=False)]
]
op600.node.kernel = extern_kernels.mm


op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 3211264}, None)]
op601.unmet_dependencies = [MemoryDep('buf600', c0, {c0: 3211264}, None)]
op601.met_dependencies = [MemoryDep('arg299_1', c1, {c0: 1568, c1: 2048}, None)]
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
    buf601.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (3211264, 1)
op601.sizes = ([1568, 2048], [])
buf600_layout = FixedLayout('cuda', torch.float32, size=[1568, 2048], stride=[2048, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[2048], stride=[1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 2048], stride=[401408, 1, 2048, 1])
class op601_loop_body:
    var_ranges = {z0: 1568, z1: 2048}
    index0 = 2048*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf600', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg299_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf600', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf601', get_index_4, mul_2, None)
        return store


op602: ExternKernelSchedulerNode(ExternKernelOut)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf601', mode=None)]
op602.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelOut
    buf602.layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
    buf602.users = [NodeUser(node=SchedulerNode(name='op603'), can_inplace=True, is_weak=False)]
]
op602.node.kernel = extern_kernels.mm


op603_op604_op605: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op603_op604_op605.writes = 
    [   MemoryDep('buf603', c0, {c0: 802816}, None),
        MemoryDep('buf604', c0, {c0: 1568}, None),
        MemoryDep('buf605', c0, {c0: 1568}, None)]
op603_op604_op605.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None),
        MemoryDep('buf602', c0, {c0: 802816}, None)]
op603_op604_op605.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg301_1', c1, {c0: 1568, c1: 512}, None)]
op603_op604_op605.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf604.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf605.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op603_op604_op605.snodes[0] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 802816}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf579', c0, {c0: 802816}, None),
        MemoryDep('buf595', c0, {c0: 802816}, None),
        MemoryDep('buf602', c0, {c0: 802816}, None)]
op603.met_dependencies = 
    [   MemoryDep('arg295_1', c1, {c0: 1568, c1: 512}, None),
        MemoryDep('arg301_1', c1, {c0: 1568, c1: 512}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
    buf603.users = [
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False),
    ]
]
op603.group.device = cuda:0
op603.group.iteration = (802816, 1)
op603.sizes = ([1568, 512], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf602_layout = FixedLayout('cuda', torch.float32, size=[1568, 512], stride=[512, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
class op603_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf595', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg295_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf602', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg301_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf603', get_index_5, add_3, None)
        return store
op603_op604_op605.snodes[1] =
op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 1568}, None)]
op604.unmet_dependencies = [MemoryDep('buf603', c0, {c0: 802816}, None)]
op604.met_dependencies = []
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf604.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op604.group.device = cuda:0
op604.group.iteration = (1568, 512)
op604.sizes = ([1568], [512])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op604_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf604', get_index_1, getitem)
        return store_reduction
op603_op604_op605.snodes[2] =
op605: SchedulerNode(ComputedBuffer)
op605.writes = [MemoryDep('buf605', c0, {c0: 1568}, None)]
op605.unmet_dependencies = [MemoryDep('buf603', c0, {c0: 802816}, None)]
op605.met_dependencies = []
op605.outputs = [
    buf605: ComputedBuffer
    buf605.layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
    buf605.users = [NodeUser(node=SchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op605.group.device = cuda:0
op605.group.iteration = (1568, 512)
op605.sizes = ([1568], [512])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
class op605_loop_body:
    var_ranges = {z0: 1568, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf605', get_index_1, getitem_1)
        return store_reduction


op607: SchedulerNode(ComputedBuffer)
op607.writes = [MemoryDep('buf607', c0, {c0: 8192}, None)]
op607.unmet_dependencies = 
    [   MemoryDep('buf603', 50176*c0 + c1 + 512*c2, {c0: 16, c1: 512, c2: 98}, None),
        MemoryDep('buf604', 98*c0 + c2, {c0: 16, c1: 512, c2: 98}, None),
        MemoryDep('buf605', 98*c0 + c2, {c0: 16, c1: 512, c2: 98}, None)]
op607.met_dependencies = 
    [   MemoryDep('arg302_1', c1, {c0: 16, c1: 512}, None),
        MemoryDep('arg303_1', c1, {c0: 16, c1: 512}, None)]
op607.outputs = [
    buf607: ComputedBuffer
    buf607.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1, 2], stride=[1024, 1, 8192, 8192, 512])
    buf607.users = [NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False)]
]
op607.group.device = cuda:0
op607.group.iteration = (8192, 98)
op607.sizes = ([16, 512], [98])
buf603_layout = FixedLayout('cuda', torch.float32, size=[8, 1, 196, 512], stride=[100352, 802816, 512, 1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
buf605_layout = FixedLayout('cuda', torch.float32, size=[8, 14, 14, 1], stride=[196, 14, 1, 1568])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf607_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1, 2], stride=[1024, 1, 8192, 8192, 512])
class op607_loop_body:
    var_ranges = {z0: 16, z1: 512, z2: 98}
    index0 = 50176*z0 + z1 + 512*z2
    index1 = 98*z0 + z2
    index2 = z1
    index3 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf603', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf604', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf605', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-06, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg302_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg303_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add_1)
        get_index_5 = self.get_index('index3')
        store_reduction = ops.store_reduction('buf607', get_index_5, reduction)
        return store_reduction


op608_op609: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op608_op609.writes = 
    [   MemoryDep('buf608', c0, {c0: 4096}, None),
        MemoryDep('buf609', c0, {c0: 4096}, None)]
op608_op609.unmet_dependencies = [MemoryDep('buf607', 1024*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 2}, None)]
op608_op609.met_dependencies = []
op608_op609.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op608_op609.snodes[0] =
op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 4096}, None)]
op608.unmet_dependencies = [MemoryDep('buf607', 1024*c0 + c1 + 512*c2, {c0: 8, c1: 512, c2: 2}, None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf608.users = [NodeUser(node=SchedulerNode(name='op609'), can_inplace=True, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (4096, 2)
op608.sizes = ([8, 512], [2])
buf607_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1, 2], stride=[1024, 1, 8192, 8192, 512])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op608_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 2}
    index0 = 1024*z0 + z1 + 512*z2
    index1 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf608', get_index_1, reduction)
        return store_reduction
op608_op609.snodes[1] =
op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 4096}, None)]
op609.unmet_dependencies = [MemoryDep('buf608', c0, {c0: 4096}, None)]
op609.met_dependencies = []
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (4096, 1)
op609.sizes = ([4096], [])
buf608_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf609_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op609_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf608', get_index)
        constant = ops.constant(196.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf609', get_index_1, truediv, None)
        return store


op610: ExternKernelSchedulerNode(ExternKernelOut)
op610.writes = [StarDep(name='buf610', mode=None)]
op610.unmet_dependencies = [StarDep(name='buf609', mode=None)]
op610.met_dependencies = [StarDep(name='arg304_1', mode=None), StarDep(name='arg305_1', mode=None)]
op610.outputs = [
    buf610: ExternKernelOut
    buf610.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf610.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op610.node.kernel = extern_kernels.addmm



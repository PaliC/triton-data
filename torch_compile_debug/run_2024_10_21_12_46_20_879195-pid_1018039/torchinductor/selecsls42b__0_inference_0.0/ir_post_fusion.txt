op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', 150528*c0 + c1 + 3*c2, {c0: 8, c1: 3, c2: 50176}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 1204224}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (1204224, 1)
op0.sizes = ([8, 3, 50176], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 50176, 224, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 224, 224], stride=[150528, 1, 672, 3])
class op0_loop_body:
    var_ranges = {z0: 8, z1: 3, z2: 50176}
    index0 = 150528*z0 + 50176*z1 + z2
    index1 = 150528*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf0', get_index_1, load, None)
        return store


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', 27*c0 + c1 + 3*c2, {c0: 32, c1: 3, c2: 9}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg0_1', c0, {c0: 864}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
    buf1.users = [NodeUser(node=ExternKernelSchedulerNode(name='op2'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (864, 1)
op1.sizes = ([32, 3, 9], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 3, 3, 3], stride=[27, 1, 9, 3])
class op1_loop_body:
    var_ranges = {z0: 32, z1: 3, z2: 9}
    index0 = 27*z0 + 9*z1 + z2
    index1 = 27*z0 + z1 + 3*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf1', get_index_1, load, None)
        return store


op2: ExternKernelSchedulerNode(ExternKernelAlloc)
op2.writes = [StarDep(name='buf2', mode=None)]
op2.unmet_dependencies = [StarDep(name='buf0', mode=None), StarDep(name='buf1', mode=None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ExternKernelAlloc
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf2.users = [NodeUser(node=SchedulerNode(name='op3'), can_inplace=True, is_weak=False)]
]
op2.node.kernel = extern_kernels.convolution


op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 3211264}, None)]
op3.unmet_dependencies = [MemoryDep('buf2', c0, {c0: 3211264}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg2_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg3_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg4_1', c1, {c0: 100352, c1: 32}, None),
        MemoryDep('arg5_1', c1, {c0: 100352, c1: 32}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
    buf3.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (3211264, 1)
op3.sizes = ([100352, 32], [])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 112, 112], stride=[401408, 1, 3584, 32])
class op3_loop_body:
    var_ranges = {z0: 100352, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf2', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg3_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg4_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg5_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf3', get_index_5, relu, None)
        return store


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', 288*c0 + c1 + 32*c2, {c0: 64, c1: 32, c2: 9}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg6_1', c0, {c0: 18432}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
    buf4.users = [NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (18432, 1)
op4.sizes = ([64, 32, 9], [])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 1, 96, 32])
class op4_loop_body:
    var_ranges = {z0: 64, z1: 32, z2: 9}
    index0 = 288*z0 + 9*z1 + z2
    index1 = 288*z0 + z1 + 32*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg6_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf4', get_index_1, load, None)
        return store


op5: ExternKernelSchedulerNode(ExternKernelAlloc)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf3', mode=None), StarDep(name='buf4', mode=None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ExternKernelAlloc
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf5.users = [NodeUser(node=SchedulerNode(name='op6'), can_inplace=True, is_weak=False)]
]
op5.node.kernel = extern_kernels.convolution


op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 1605632}, None)]
op6.unmet_dependencies = [MemoryDep('buf5', c0, {c0: 1605632}, None)]
op6.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg7_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg8_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg9_1', c1, {c0: 25088, c1: 64}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf6.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op6.group.device = cuda:0
op6.group.iteration = (1605632, 1)
op6.sizes = ([25088, 64], [])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op6_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf5', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg7_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg8_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg9_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg10_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf6', get_index_5, relu, None)
        return store


op7: ExternKernelSchedulerNode(ExternKernelAlloc)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf6', mode=None)]
op7.met_dependencies = [StarDep(name='arg11_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelAlloc
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf7.users = [NodeUser(node=SchedulerNode(name='op8'), can_inplace=True, is_weak=False)]
]
op7.node.kernel = extern_kernels.convolution


op8: SchedulerNode(ComputedBuffer)
op8.writes = [MemoryDep('buf8', c0, {c0: 1605632}, None)]
op8.unmet_dependencies = [MemoryDep('buf7', c0, {c0: 1605632}, None)]
op8.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg13_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg14_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg15_1', c1, {c0: 25088, c1: 64}, None)]
op8.outputs = [
    buf8: ComputedBuffer
    buf8.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf8.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op8.group.device = cuda:0
op8.group.iteration = (1605632, 1)
op8.sizes = ([25088, 64], [])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op8_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf7', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg13_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg15_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf8', get_index_5, relu, None)
        return store


op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', 576*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 9}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 18432}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (18432, 1)
op9.sizes = ([32, 64, 9], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
class op9_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf9', get_index_1, load, None)
        return store


op10: ExternKernelSchedulerNode(ExternKernelAlloc)
op10.writes = [StarDep(name='buf10', mode=None)]
op10.unmet_dependencies = [StarDep(name='buf8', mode=None), StarDep(name='buf9', mode=None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ExternKernelAlloc
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf10.users = [NodeUser(node=SchedulerNode(name='op11'), can_inplace=True, is_weak=False)]
]
op10.node.kernel = extern_kernels.convolution


op11: SchedulerNode(ComputedBuffer)
op11.writes = [MemoryDep('buf11', c0, {c0: 802816}, None)]
op11.unmet_dependencies = [MemoryDep('buf10', c0, {c0: 802816}, None)]
op11.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg20_1', c1, {c0: 25088, c1: 32}, None)]
op11.outputs = [
    buf11: ComputedBuffer
    buf11.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf11.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False),
    ]
]
op11.group.device = cuda:0
op11.group.iteration = (802816, 1)
op11.sizes = ([25088, 32], [])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
class op11_loop_body:
    var_ranges = {z0: 25088, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf10', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg18_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg19_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg20_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf11', get_index_5, relu, None)
        return store


op12: ExternKernelSchedulerNode(ExternKernelAlloc)
op12.writes = [StarDep(name='buf12', mode=None)]
op12.unmet_dependencies = [StarDep(name='buf11', mode=None)]
op12.met_dependencies = [StarDep(name='arg21_1', mode=None)]
op12.outputs = [
    buf12: ExternKernelAlloc
    buf12.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf12.users = [NodeUser(node=SchedulerNode(name='op13'), can_inplace=True, is_weak=False)]
]
op12.node.kernel = extern_kernels.convolution


op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 1605632}, None)]
op13.unmet_dependencies = [MemoryDep('buf12', c0, {c0: 1605632}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg22_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg23_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 64}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf13.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (1605632, 1)
op13.sizes = ([25088, 64], [])
buf12_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op13_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf12', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg22_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg25_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf13', get_index_5, relu, None)
        return store


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', 576*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 9}, None)]
op14.unmet_dependencies = []
op14.met_dependencies = [MemoryDep('arg26_1', c0, {c0: 18432}, None)]
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (18432, 1)
op14.sizes = ([32, 64, 9], [])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 9, 3, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
class op14_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg26_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf13', mode=None), StarDep(name='buf14', mode=None)]
op15.met_dependencies = []
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf15.users = [NodeUser(node=SchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 3211264}, None)]
op16.unmet_dependencies = 
    [   MemoryDep('buf11', 32*c0 + I, {c0: 25088, c1: 128}, None),
        MemoryDep('buf15', 32*c0 + I, {c0: 25088, c1: 128}, None),
        MemoryDep('buf6', 64*c0 + I, {c0: 25088, c1: 128}, None)]
op16.met_dependencies = 
    [   MemoryDep('arg27_1', I, {c0: 25088, c1: 128}, None),
        MemoryDep('arg28_1', I, {c0: 25088, c1: 128}, None),
        MemoryDep('arg29_1', I, {c0: 25088, c1: 128}, None),
        MemoryDep('arg30_1', I, {c0: 25088, c1: 128}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf16.users = [NodeUser(node=ExternKernelSchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (3211264, 1)
op16.sizes = ([25088, 128], [])
buf6_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
buf11_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
buf15_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op16_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = z1
    index1 = 64*z0 + I
    index2 = 32*z0 + I
    index3 = 32*z0 + I
    index4 = I
    index5 = 128*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(64, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(96, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(96, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf16', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf6', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf11', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf15', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg27_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg28_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg29_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg30_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op17: ExternKernelSchedulerNode(ExternKernelAlloc)
op17.writes = [StarDep(name='buf17', mode=None)]
op17.unmet_dependencies = [StarDep(name='buf16', mode=None)]
op17.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op17.outputs = [
    buf17: ExternKernelAlloc
    buf17.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf17.users = [NodeUser(node=SchedulerNode(name='op18'), can_inplace=True, is_weak=False)]
]
op17.node.kernel = extern_kernels.convolution


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 1605632}, None)]
op18.unmet_dependencies = [MemoryDep('buf17', c0, {c0: 1605632}, None)]
op18.met_dependencies = 
    [   MemoryDep('arg32_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg33_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg34_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg35_1', c1, {c0: 25088, c1: 64}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf18.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op18.group.device = cuda:0
op18.group.iteration = (1605632, 1)
op18.sizes = ([25088, 64], [])
buf17_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op18_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf17', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg32_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg33_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf18', get_index_5, relu, None)
        return store


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', 576*c0 + c1 + 64*c2, {c0: 64, c1: 64, c2: 9}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 36864}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
    buf19.users = [NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (36864, 1)
op19.sizes = ([64, 64, 9], [])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 9, 3, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[64, 64, 3, 3], stride=[576, 1, 192, 64])
class op19_loop_body:
    var_ranges = {z0: 64, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf19', get_index_1, load, None)
        return store


op20: ExternKernelSchedulerNode(ExternKernelAlloc)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf18', mode=None), StarDep(name='buf19', mode=None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ExternKernelAlloc
    buf20.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.convolution


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 1605632}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 1605632}, None)]
op21.met_dependencies = 
    [   MemoryDep('arg37_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg38_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg39_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 64}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf21.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op21.group.device = cuda:0
op21.group.iteration = (1605632, 1)
op21.sizes = ([25088, 64], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op21_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg38_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg39_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf21', get_index_5, relu, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelAlloc)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelAlloc
    buf22.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.convolution


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1605632}, None)]
op23.unmet_dependencies = [MemoryDep('buf22', c0, {c0: 1605632}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg42_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg43_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg44_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 64}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1605632, 1)
op23.sizes = ([25088, 64], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op23_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg42_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg43_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf23', get_index_5, relu, None)
        return store


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', 576*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 9}, None)]
op24.unmet_dependencies = []
op24.met_dependencies = [MemoryDep('arg46_1', c0, {c0: 18432}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (18432, 1)
op24.sizes = ([32, 64, 9], [])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 9, 3, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
class op24_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg46_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelAlloc)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None), StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ExternKernelAlloc
    buf25.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=True, is_weak=False)]
]
op25.node.kernel = extern_kernels.convolution


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 802816}, None)]
op26.unmet_dependencies = [MemoryDep('buf25', c0, {c0: 802816}, None)]
op26.met_dependencies = 
    [   MemoryDep('arg47_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg48_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg49_1', c1, {c0: 25088, c1: 32}, None),
        MemoryDep('arg50_1', c1, {c0: 25088, c1: 32}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf26.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
    ]
]
op26.group.device = cuda:0
op26.group.iteration = (802816, 1)
op26.sizes = ([25088, 32], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
class op26_loop_body:
    var_ranges = {z0: 25088, z1: 32}
    index0 = 32*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg48_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg50_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf26', get_index_5, relu, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelAlloc)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg51_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelAlloc
    buf27.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.convolution


op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 1605632}, None)]
op28.unmet_dependencies = [MemoryDep('buf27', c0, {c0: 1605632}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg52_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg54_1', c1, {c0: 25088, c1: 64}, None),
        MemoryDep('arg55_1', c1, {c0: 25088, c1: 64}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
    buf28.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (1605632, 1)
op28.sizes = ([25088, 64], [])
buf27_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
class op28_loop_body:
    var_ranges = {z0: 25088, z1: 64}
    index0 = 64*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf27', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg52_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg53_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg55_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf28', get_index_5, relu, None)
        return store


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', 576*c0 + c1 + 64*c2, {c0: 32, c1: 64, c2: 9}, None)]
op29.unmet_dependencies = []
op29.met_dependencies = [MemoryDep('arg56_1', c0, {c0: 18432}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (18432, 1)
op29.sizes = ([32, 64, 9], [])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 9, 3, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[32, 64, 3, 3], stride=[576, 1, 192, 64])
class op29_loop_body:
    var_ranges = {z0: 32, z1: 64, z2: 9}
    index0 = 576*z0 + 9*z1 + z2
    index1 = 576*z0 + z1 + 64*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf29', get_index_1, load, None)
        return store


op30: ExternKernelSchedulerNode(ExternKernelAlloc)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf28', mode=None), StarDep(name='buf29', mode=None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ExternKernelAlloc
    buf30.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False)]
]
op30.node.kernel = extern_kernels.convolution


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 4816896}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf18', 64*c0 + I, {c0: 25088, c1: 192}, None),
        MemoryDep('buf21', 64*c0 + I, {c0: 25088, c1: 192}, None),
        MemoryDep('buf26', 32*c0 + I, {c0: 25088, c1: 192}, None),
        MemoryDep('buf30', 32*c0 + I, {c0: 25088, c1: 192}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg57_1', I, {c0: 25088, c1: 192}, None),
        MemoryDep('arg58_1', I, {c0: 25088, c1: 192}, None),
        MemoryDep('arg59_1', I, {c0: 25088, c1: 192}, None),
        MemoryDep('arg60_1', I, {c0: 25088, c1: 192}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 1, 10752, 192])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (4816896, 1)
op31.sizes = ([25088, 192], [])
buf21_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
buf26_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
buf30_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 56, 56], stride=[100352, 1, 1792, 32])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 56, 56], stride=[200704, 1, 3584, 64])
buf31_layout = FixedLayout('cuda', torch.float32, size=[8, 192, 56, 56], stride=[602112, 1, 10752, 192])
class op31_loop_body:
    var_ranges = {z0: 25088, z1: 192}
    index0 = z1
    index1 = 64*z0 + I
    index2 = 32*z0 + I
    index3 = 32*z0 + I
    index4 = I
    index5 = 64*z0 + I
    index6 = 192*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(64, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(96, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(96, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(128, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(128, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(192, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf31', get_index_8, where_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf21', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf26', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg57_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg58_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg59_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg60_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf18', get_index)
        return load


op32: ExternKernelSchedulerNode(ExternKernelAlloc)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelAlloc
    buf32.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.convolution


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 3211264}, None)]
op33.unmet_dependencies = [MemoryDep('buf32', c0, {c0: 3211264}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg62_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg64_1', c1, {c0: 25088, c1: 128}, None),
        MemoryDep('arg65_1', c1, {c0: 25088, c1: 128}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
    buf33.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (3211264, 1)
op33.sizes = ([25088, 128], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 56, 56], stride=[401408, 1, 7168, 128])
class op33_loop_body:
    var_ranges = {z0: 25088, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg62_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg63_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg64_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg65_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, relu, None)
        return store


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', 1152*c0 + c1 + 128*c2, {c0: 144, c1: 128, c2: 9}, None)]
op34.unmet_dependencies = []
op34.met_dependencies = [MemoryDep('arg66_1', c0, {c0: 165888}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[144, 128, 3, 3], stride=[1152, 1, 384, 128])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (165888, 1)
op34.sizes = ([144, 128, 9], [])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[144, 128, 3, 3], stride=[1152, 9, 3, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[144, 128, 3, 3], stride=[1152, 1, 384, 128])
class op34_loop_body:
    var_ranges = {z0: 144, z1: 128, z2: 9}
    index0 = 1152*z0 + 9*z1 + z2
    index1 = 1152*z0 + z1 + 128*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg66_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf34', get_index_1, load, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelAlloc)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf33', mode=None), StarDep(name='buf34', mode=None)]
op35.met_dependencies = []
op35.outputs = [
    buf35: ExternKernelAlloc
    buf35.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf35.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False)]
]
op35.node.kernel = extern_kernels.convolution


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 903168}, None)]
op36.unmet_dependencies = [MemoryDep('buf35', c0, {c0: 903168}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg68_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg69_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg70_1', c1, {c0: 6272, c1: 144}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (903168, 1)
op36.sizes = ([6272, 144], [])
buf35_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op36_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf35', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg68_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg70_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf36', get_index_5, relu, None)
        return store


op37: ExternKernelSchedulerNode(ExternKernelAlloc)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelAlloc
    buf37.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf37.users = [NodeUser(node=SchedulerNode(name='op38'), can_inplace=True, is_weak=False)]
]
op37.node.kernel = extern_kernels.convolution


op38: SchedulerNode(ComputedBuffer)
op38.writes = [MemoryDep('buf38', c0, {c0: 903168}, None)]
op38.unmet_dependencies = [MemoryDep('buf37', c0, {c0: 903168}, None)]
op38.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg73_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg74_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg75_1', c1, {c0: 6272, c1: 144}, None)]
op38.outputs = [
    buf38: ComputedBuffer
    buf38.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.group.device = cuda:0
op38.group.iteration = (903168, 1)
op38.sizes = ([6272, 144], [])
buf37_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf38_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op38_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf37', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg72_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg73_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf38', get_index_5, relu, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', 1296*c0 + c1 + 144*c2, {c0: 72, c1: 144, c2: 9}, None)]
op39.unmet_dependencies = []
op39.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 93312}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (93312, 1)
op39.sizes = ([72, 144, 9], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 9, 3, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
class op39_loop_body:
    var_ranges = {z0: 72, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf39', get_index_1, load, None)
        return store


op40: ExternKernelSchedulerNode(ExternKernelAlloc)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf38', mode=None), StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: ExternKernelAlloc
    buf40.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf40.users = [NodeUser(node=SchedulerNode(name='op41'), can_inplace=True, is_weak=False)]
]
op40.node.kernel = extern_kernels.convolution


op41: SchedulerNode(ComputedBuffer)
op41.writes = [MemoryDep('buf41', c0, {c0: 451584}, None)]
op41.unmet_dependencies = [MemoryDep('buf40', c0, {c0: 451584}, None)]
op41.met_dependencies = 
    [   MemoryDep('arg77_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg78_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg79_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg80_1', c1, {c0: 6272, c1: 72}, None)]
op41.outputs = [
    buf41: ComputedBuffer
    buf41.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf41.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
    ]
]
op41.group.device = cuda:0
op41.group.iteration = (451584, 1)
op41.sizes = ([6272, 72], [])
buf40_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op41_loop_body:
    var_ranges = {z0: 6272, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf40', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg78_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg79_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg80_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf41', get_index_5, relu, None)
        return store


op42: ExternKernelSchedulerNode(ExternKernelAlloc)
op42.writes = [StarDep(name='buf42', mode=None)]
op42.unmet_dependencies = [StarDep(name='buf41', mode=None)]
op42.met_dependencies = [StarDep(name='arg81_1', mode=None)]
op42.outputs = [
    buf42: ExternKernelAlloc
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf42.users = [NodeUser(node=SchedulerNode(name='op43'), can_inplace=True, is_weak=False)]
]
op42.node.kernel = extern_kernels.convolution


op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 903168}, None)]
op43.unmet_dependencies = [MemoryDep('buf42', c0, {c0: 903168}, None)]
op43.met_dependencies = 
    [   MemoryDep('arg82_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg83_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg84_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg85_1', c1, {c0: 6272, c1: 144}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf43.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (903168, 1)
op43.sizes = ([6272, 144], [])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op43_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf42', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg83_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg84_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg85_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf43', get_index_5, relu, None)
        return store


op44: SchedulerNode(ComputedBuffer)
op44.writes = [MemoryDep('buf44', 1296*c0 + c1 + 144*c2, {c0: 72, c1: 144, c2: 9}, None)]
op44.unmet_dependencies = []
op44.met_dependencies = [MemoryDep('arg86_1', c0, {c0: 93312}, None)]
op44.outputs = [
    buf44: ComputedBuffer
    buf44.layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf44.users = [NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op44.group.device = cuda:0
op44.group.iteration = (93312, 1)
op44.sizes = ([72, 144, 9], [])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 9, 3, 1])
buf44_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
class op44_loop_body:
    var_ranges = {z0: 72, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg86_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf44', get_index_1, load, None)
        return store


op45: ExternKernelSchedulerNode(ExternKernelAlloc)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf43', mode=None), StarDep(name='buf44', mode=None)]
op45.met_dependencies = []
op45.outputs = [
    buf45: ExternKernelAlloc
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = extern_kernels.convolution


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 1806336}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf36', 144*c0 + I, {c0: 6272, c1: 288}, None),
        MemoryDep('buf41', 72*c0 + I, {c0: 6272, c1: 288}, None),
        MemoryDep('buf45', 72*c0 + I, {c0: 6272, c1: 288}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg87_1', I, {c0: 6272, c1: 288}, None),
        MemoryDep('arg88_1', I, {c0: 6272, c1: 288}, None),
        MemoryDep('arg89_1', I, {c0: 6272, c1: 288}, None),
        MemoryDep('arg90_1', I, {c0: 6272, c1: 288}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (1806336, 1)
op46.sizes = ([6272, 288], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
buf41_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
class op46_loop_body:
    var_ranges = {z0: 6272, z1: 288}
    index0 = z1
    index1 = 144*z0 + I
    index2 = 72*z0 + I
    index3 = 72*z0 + I
    index4 = I
    index5 = 288*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(144, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(144, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(216, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(216, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(288, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf46', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf36', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf41', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg87_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg88_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg89_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg90_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg91_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 903168}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 903168}, None)]
op48.met_dependencies = 
    [   MemoryDep('arg92_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg93_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg94_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg95_1', c1, {c0: 6272, c1: 144}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf48.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op48.group.device = cuda:0
op48.group.iteration = (903168, 1)
op48.sizes = ([6272, 144], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op48_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg93_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg95_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf48', get_index_5, relu, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', 1296*c0 + c1 + 144*c2, {c0: 144, c1: 144, c2: 9}, None)]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('arg96_1', c0, {c0: 186624}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (186624, 1)
op49.sizes = ([144, 144, 9], [])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 9, 3, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[144, 144, 3, 3], stride=[1296, 1, 432, 144])
class op49_loop_body:
    var_ranges = {z0: 144, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelAlloc)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelAlloc
    buf50.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf50.users = [NodeUser(node=SchedulerNode(name='op51'), can_inplace=True, is_weak=False)]
]
op50.node.kernel = extern_kernels.convolution


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 903168}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 903168}, None)]
op51.met_dependencies = 
    [   MemoryDep('arg100_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg97_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg98_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg99_1', c1, {c0: 6272, c1: 144}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf51.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (903168, 1)
op51.sizes = ([6272, 144], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op51_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg98_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg100_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf51', get_index_5, relu, None)
        return store


op52: ExternKernelSchedulerNode(ExternKernelAlloc)
op52.writes = [StarDep(name='buf52', mode=None)]
op52.unmet_dependencies = [StarDep(name='buf51', mode=None)]
op52.met_dependencies = [StarDep(name='arg101_1', mode=None)]
op52.outputs = [
    buf52: ExternKernelAlloc
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf52.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=True, is_weak=False)]
]
op52.node.kernel = extern_kernels.convolution


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 903168}, None)]
op53.unmet_dependencies = [MemoryDep('buf52', c0, {c0: 903168}, None)]
op53.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg103_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg104_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg105_1', c1, {c0: 6272, c1: 144}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (903168, 1)
op53.sizes = ([6272, 144], [])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg104_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op53_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf52', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg102_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg103_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg104_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg105_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf53', get_index_5, relu, None)
        return store


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', 1296*c0 + c1 + 144*c2, {c0: 72, c1: 144, c2: 9}, None)]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('arg106_1', c0, {c0: 93312}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (93312, 1)
op54.sizes = ([72, 144, 9], [])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 9, 3, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
class op54_loop_body:
    var_ranges = {z0: 72, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg106_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf54', get_index_1, load, None)
        return store


op55: ExternKernelSchedulerNode(ExternKernelAlloc)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelAlloc
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.convolution


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 451584}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 451584}, None)]
op56.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg108_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg109_1', c1, {c0: 6272, c1: 72}, None),
        MemoryDep('arg110_1', c1, {c0: 6272, c1: 72}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf56.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
    ]
]
op56.group.device = cuda:0
op56.group.iteration = (451584, 1)
op56.sizes = ([6272, 72], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
class op56_loop_body:
    var_ranges = {z0: 6272, z1: 72}
    index0 = 72*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg108_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg110_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf56', get_index_5, relu, None)
        return store


op57: ExternKernelSchedulerNode(ExternKernelAlloc)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg111_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelAlloc
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.convolution


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 903168}, None)]
op58.unmet_dependencies = [MemoryDep('buf57', c0, {c0: 903168}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg113_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg114_1', c1, {c0: 6272, c1: 144}, None),
        MemoryDep('arg115_1', c1, {c0: 6272, c1: 144}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
    buf58.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (903168, 1)
op58.sizes = ([6272, 144], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[144], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
class op58_loop_body:
    var_ranges = {z0: 6272, z1: 144}
    index0 = 144*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg113_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg115_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, relu, None)
        return store


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', 1296*c0 + c1 + 144*c2, {c0: 72, c1: 144, c2: 9}, None)]
op59.unmet_dependencies = []
op59.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 93312}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
    buf59.users = [NodeUser(node=ExternKernelSchedulerNode(name='op60'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (93312, 1)
op59.sizes = ([72, 144, 9], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 9, 3, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[72, 144, 3, 3], stride=[1296, 1, 432, 144])
class op59_loop_body:
    var_ranges = {z0: 72, z1: 144, z2: 9}
    index0 = 1296*z0 + 9*z1 + z2
    index1 = 1296*z0 + z1 + 144*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf59', get_index_1, load, None)
        return store


op60: ExternKernelSchedulerNode(ExternKernelAlloc)
op60.writes = [StarDep(name='buf60', mode=None)]
op60.unmet_dependencies = [StarDep(name='buf58', mode=None), StarDep(name='buf59', mode=None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ExternKernelAlloc
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
    buf60.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.node.kernel = extern_kernels.convolution


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 2709504}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf48', 144*c0 + I, {c0: 6272, c1: 432}, None),
        MemoryDep('buf51', 144*c0 + I, {c0: 6272, c1: 432}, None),
        MemoryDep('buf56', 72*c0 + I, {c0: 6272, c1: 432}, None),
        MemoryDep('buf60', 72*c0 + I, {c0: 6272, c1: 432}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg117_1', I, {c0: 6272, c1: 432}, None),
        MemoryDep('arg118_1', I, {c0: 6272, c1: 432}, None),
        MemoryDep('arg119_1', I, {c0: 6272, c1: 432}, None),
        MemoryDep('arg120_1', I, {c0: 6272, c1: 432}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 432, 28, 28], stride=[338688, 1, 12096, 432])
    buf61.users = [NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (2709504, 1)
op61.sizes = ([6272, 432], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
buf56_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 72, 28, 28], stride=[56448, 1, 2016, 72])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[72], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 144, 28, 28], stride=[112896, 1, 4032, 144])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 432, 28, 28], stride=[338688, 1, 12096, 432])
class op61_loop_body:
    var_ranges = {z0: 6272, z1: 432}
    index0 = z1
    index1 = 144*z0 + I
    index2 = 72*z0 + I
    index3 = 72*z0 + I
    index4 = I
    index5 = 144*z0 + I
    index6 = 432*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(144, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(144, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(216, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(216, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(288, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(288, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(432, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf61', get_index_8, where_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf51', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf56', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf60', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg117_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg118_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg119_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg120_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf48', get_index)
        return load


op62: ExternKernelSchedulerNode(ExternKernelAlloc)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelAlloc
    buf62.layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.convolution


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 1806336}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 1806336}, None)]
op63.met_dependencies = 
    [   MemoryDep('arg122_1', c1, {c0: 6272, c1: 288}, None),
        MemoryDep('arg123_1', c1, {c0: 6272, c1: 288}, None),
        MemoryDep('arg124_1', c1, {c0: 6272, c1: 288}, None),
        MemoryDep('arg125_1', c1, {c0: 6272, c1: 288}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (1806336, 1)
op63.sizes = ([6272, 288], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[288], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[8, 288, 28, 28], stride=[225792, 1, 8064, 288])
class op63_loop_body:
    var_ranges = {z0: 6272, z1: 288}
    index0 = 288*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg122_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg123_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg124_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg125_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf63', get_index_5, relu, None)
        return store


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', 2592*c0 + c1 + 288*c2, {c0: 304, c1: 288, c2: 9}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = [MemoryDep('arg126_1', c0, {c0: 787968}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[304, 288, 3, 3], stride=[2592, 1, 864, 288])
    buf64.users = [NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (787968, 1)
op64.sizes = ([304, 288, 9], [])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[304, 288, 3, 3], stride=[2592, 9, 3, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[304, 288, 3, 3], stride=[2592, 1, 864, 288])
class op64_loop_body:
    var_ranges = {z0: 304, z1: 288, z2: 9}
    index0 = 2592*z0 + 9*z1 + z2
    index1 = 2592*z0 + z1 + 288*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg126_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf64', get_index_1, load, None)
        return store


op65: ExternKernelSchedulerNode(ExternKernelAlloc)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf63', mode=None), StarDep(name='buf64', mode=None)]
op65.met_dependencies = []
op65.outputs = [
    buf65: ExternKernelAlloc
    buf65.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.convolution


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 476672}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 476672}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg127_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg128_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg129_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg130_1', c1, {c0: 1568, c1: 304}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (476672, 1)
op66.sizes = ([1568, 304], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op66_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg127_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg128_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg130_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf66', get_index_5, relu, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelAlloc)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelAlloc
    buf67.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf67.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False)]
]
op67.node.kernel = extern_kernels.convolution


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 476672}, None)]
op68.unmet_dependencies = [MemoryDep('buf67', c0, {c0: 476672}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg132_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg133_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg134_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg135_1', c1, {c0: 1568, c1: 304}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (476672, 1)
op68.sizes = ([1568, 304], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op68_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg133_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg135_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf68', get_index_5, relu, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', 2736*c0 + c1 + 304*c2, {c0: 152, c1: 304, c2: 9}, None)]
op69.unmet_dependencies = []
op69.met_dependencies = [MemoryDep('arg136_1', c0, {c0: 415872}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (415872, 1)
op69.sizes = ([152, 304, 9], [])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 9, 3, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
class op69_loop_body:
    var_ranges = {z0: 152, z1: 304, z2: 9}
    index0 = 2736*z0 + 9*z1 + z2
    index1 = 2736*z0 + z1 + 304*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg136_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelAlloc)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None), StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelAlloc
    buf70.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf70.users = [NodeUser(node=SchedulerNode(name='op71'), can_inplace=True, is_weak=False)]
]
op70.node.kernel = extern_kernels.convolution


op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 238336}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 238336}, None)]
op71.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg138_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg139_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg140_1', c1, {c0: 1568, c1: 152}, None)]
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf71.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (238336, 1)
op71.sizes = ([1568, 152], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
class op71_loop_body:
    var_ranges = {z0: 1568, z1: 152}
    index0 = 152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg138_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg140_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf71', get_index_5, relu, None)
        return store


op72: ExternKernelSchedulerNode(ExternKernelAlloc)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op72.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op72.outputs = [
    buf72: ExternKernelAlloc
    buf72.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf72.users = [NodeUser(node=SchedulerNode(name='op73'), can_inplace=True, is_weak=False)]
]
op72.node.kernel = extern_kernels.convolution


op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 476672}, None)]
op73.unmet_dependencies = [MemoryDep('buf72', c0, {c0: 476672}, None)]
op73.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg143_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg144_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg145_1', c1, {c0: 1568, c1: 304}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf73.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (476672, 1)
op73.sizes = ([1568, 304], [])
buf72_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op73_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf72', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg143_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg144_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg145_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf73', get_index_5, relu, None)
        return store


op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', 2736*c0 + c1 + 304*c2, {c0: 152, c1: 304, c2: 9}, None)]
op74.unmet_dependencies = []
op74.met_dependencies = [MemoryDep('arg146_1', c0, {c0: 415872}, None)]
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (415872, 1)
op74.sizes = ([152, 304, 9], [])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 9, 3, 1])
buf74_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
class op74_loop_body:
    var_ranges = {z0: 152, z1: 304, z2: 9}
    index0 = 2736*z0 + 9*z1 + z2
    index1 = 2736*z0 + z1 + 304*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg146_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf74', get_index_1, load, None)
        return store


op75: ExternKernelSchedulerNode(ExternKernelAlloc)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf73', mode=None), StarDep(name='buf74', mode=None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ExternKernelAlloc
    buf75.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf75.users = [NodeUser(node=SchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.node.kernel = extern_kernels.convolution


op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 953344}, None)]
op76.unmet_dependencies = 
    [   MemoryDep('buf66', 304*c0 + I, {c0: 1568, c1: 608}, None),
        MemoryDep('buf71', 152*c0 + I, {c0: 1568, c1: 608}, None),
        MemoryDep('buf75', 152*c0 + I, {c0: 1568, c1: 608}, None)]
op76.met_dependencies = 
    [   MemoryDep('arg147_1', I, {c0: 1568, c1: 608}, None),
        MemoryDep('arg148_1', I, {c0: 1568, c1: 608}, None),
        MemoryDep('arg149_1', I, {c0: 1568, c1: 608}, None),
        MemoryDep('arg150_1', I, {c0: 1568, c1: 608}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[8, 608, 14, 14], stride=[119168, 1, 8512, 608])
    buf76.users = [NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (953344, 1)
op76.sizes = ([1568, 608], [])
buf66_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
buf71_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
buf75_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[8, 608, 14, 14], stride=[119168, 1, 8512, 608])
class op76_loop_body:
    var_ranges = {z0: 1568, z1: 608}
    index0 = z1
    index1 = 304*z0 + I
    index2 = 152*z0 + I
    index3 = 152*z0 + I
    index4 = I
    index5 = 608*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(304, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(304, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(456, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(456, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(608, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock3 = self.masked_subblock3(ge_2, 0.0)
        where = ops.where(and_, masked_subblock2, masked_subblock3)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf76', get_index_6, where_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf66', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf71', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg147_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg148_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg149_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg150_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu


op77: ExternKernelSchedulerNode(ExternKernelAlloc)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf76', mode=None)]
op77.met_dependencies = [StarDep(name='arg151_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelAlloc
    buf77.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf77.users = [NodeUser(node=SchedulerNode(name='op78'), can_inplace=True, is_weak=False)]
]
op77.node.kernel = extern_kernels.convolution


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 476672}, None)]
op78.unmet_dependencies = [MemoryDep('buf77', c0, {c0: 476672}, None)]
op78.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg153_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg154_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg155_1', c1, {c0: 1568, c1: 304}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf78.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
]
op78.group.device = cuda:0
op78.group.iteration = (476672, 1)
op78.sizes = ([1568, 304], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op78_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg153_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg154_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg155_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf78', get_index_5, relu, None)
        return store


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', 2736*c0 + c1 + 304*c2, {c0: 304, c1: 304, c2: 9}, None)]
op79.unmet_dependencies = []
op79.met_dependencies = [MemoryDep('arg156_1', c0, {c0: 831744}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[304, 304, 3, 3], stride=[2736, 1, 912, 304])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (831744, 1)
op79.sizes = ([304, 304, 9], [])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[304, 304, 3, 3], stride=[2736, 9, 3, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[304, 304, 3, 3], stride=[2736, 1, 912, 304])
class op79_loop_body:
    var_ranges = {z0: 304, z1: 304, z2: 9}
    index0 = 2736*z0 + 9*z1 + z2
    index1 = 2736*z0 + z1 + 304*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg156_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf79', get_index_1, load, None)
        return store


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf78', mode=None), StarDep(name='buf79', mode=None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 476672}, None)]
op81.unmet_dependencies = [MemoryDep('buf80', c0, {c0: 476672}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg157_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg158_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg159_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg160_1', c1, {c0: 1568, c1: 304}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (476672, 1)
op81.sizes = ([1568, 304], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op81_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg158_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, relu, None)
        return store


op82: ExternKernelSchedulerNode(ExternKernelAlloc)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg161_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelAlloc
    buf82.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.convolution


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 476672}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 476672}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg162_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg163_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg164_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg165_1', c1, {c0: 1568, c1: 304}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (476672, 1)
op83.sizes = ([1568, 304], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op83_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg162_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg164_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg165_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf83', get_index_5, relu, None)
        return store


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', 2736*c0 + c1 + 304*c2, {c0: 152, c1: 304, c2: 9}, None)]
op84.unmet_dependencies = []
op84.met_dependencies = [MemoryDep('arg166_1', c0, {c0: 415872}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
    buf84.users = [NodeUser(node=ExternKernelSchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (415872, 1)
op84.sizes = ([152, 304, 9], [])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 9, 3, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
class op84_loop_body:
    var_ranges = {z0: 152, z1: 304, z2: 9}
    index0 = 2736*z0 + 9*z1 + z2
    index1 = 2736*z0 + z1 + 304*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg166_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf84', get_index_1, load, None)
        return store


op85: ExternKernelSchedulerNode(ExternKernelAlloc)
op85.writes = [StarDep(name='buf85', mode=None)]
op85.unmet_dependencies = [StarDep(name='buf83', mode=None), StarDep(name='buf84', mode=None)]
op85.met_dependencies = []
op85.outputs = [
    buf85: ExternKernelAlloc
    buf85.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf85.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False)]
]
op85.node.kernel = extern_kernels.convolution


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 238336}, None)]
op86.unmet_dependencies = [MemoryDep('buf85', c0, {c0: 238336}, None)]
op86.met_dependencies = 
    [   MemoryDep('arg167_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg168_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg169_1', c1, {c0: 1568, c1: 152}, None),
        MemoryDep('arg170_1', c1, {c0: 1568, c1: 152}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf86.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
    ]
]
op86.group.device = cuda:0
op86.group.iteration = (238336, 1)
op86.sizes = ([1568, 152], [])
buf85_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg170_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
class op86_loop_body:
    var_ranges = {z0: 1568, z1: 152}
    index0 = 152*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf85', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg167_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg168_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg169_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg170_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf86', get_index_5, relu, None)
        return store


op87: ExternKernelSchedulerNode(ExternKernelAlloc)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf86', mode=None)]
op87.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op87.outputs = [
    buf87: ExternKernelAlloc
    buf87.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=True, is_weak=False)]
]
op87.node.kernel = extern_kernels.convolution


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 476672}, None)]
op88.unmet_dependencies = [MemoryDep('buf87', c0, {c0: 476672}, None)]
op88.met_dependencies = 
    [   MemoryDep('arg172_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg173_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg174_1', c1, {c0: 1568, c1: 304}, None),
        MemoryDep('arg175_1', c1, {c0: 1568, c1: 304}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (476672, 1)
op88.sizes = ([1568, 304], [])
buf87_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[304], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
class op88_loop_body:
    var_ranges = {z0: 1568, z1: 304}
    index0 = 304*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf87', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg172_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg174_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg175_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf88', get_index_5, relu, None)
        return store


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', 2736*c0 + c1 + 304*c2, {c0: 152, c1: 304, c2: 9}, None)]
op89.unmet_dependencies = []
op89.met_dependencies = [MemoryDep('arg176_1', c0, {c0: 415872}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
    buf89.users = [NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op89.group.device = cuda:0
op89.group.iteration = (415872, 1)
op89.sizes = ([152, 304, 9], [])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 9, 3, 1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[152, 304, 3, 3], stride=[2736, 1, 912, 304])
class op89_loop_body:
    var_ranges = {z0: 152, z1: 304, z2: 9}
    index0 = 2736*z0 + 9*z1 + z2
    index1 = 2736*z0 + z1 + 304*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg176_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf89', get_index_1, load, None)
        return store


op90: ExternKernelSchedulerNode(ExternKernelAlloc)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf88', mode=None), StarDep(name='buf89', mode=None)]
op90.met_dependencies = []
op90.outputs = [
    buf90: ExternKernelAlloc
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.node.kernel = extern_kernels.convolution


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 1430016}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf78', 304*c0 + I, {c0: 1568, c1: 912}, None),
        MemoryDep('buf81', 304*c0 + I, {c0: 1568, c1: 912}, None),
        MemoryDep('buf86', 152*c0 + I, {c0: 1568, c1: 912}, None),
        MemoryDep('buf90', 152*c0 + I, {c0: 1568, c1: 912}, None)]
op91.met_dependencies = 
    [   MemoryDep('arg177_1', I, {c0: 1568, c1: 912}, None),
        MemoryDep('arg178_1', I, {c0: 1568, c1: 912}, None),
        MemoryDep('arg179_1', I, {c0: 1568, c1: 912}, None),
        MemoryDep('arg180_1', I, {c0: 1568, c1: 912}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[8, 912, 14, 14], stride=[178752, 1, 12768, 912])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1430016, 1)
op91.sizes = ([1568, 912], [])
buf81_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
buf86_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 152, 14, 14], stride=[29792, 1, 2128, 152])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[152], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[8, 304, 14, 14], stride=[59584, 1, 4256, 304])
buf91_layout = FixedLayout('cuda', torch.float32, size=[8, 912, 14, 14], stride=[178752, 1, 12768, 912])
class op91_loop_body:
    var_ranges = {z0: 1568, z1: 912}
    index0 = z1
    index1 = 304*z0 + I
    index2 = 152*z0 + I
    index3 = 152*z0 + I
    index4 = I
    index5 = 304*z0 + I
    index6 = 912*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(304, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(304, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(456, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock2 = self.masked_subblock2(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(456, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(608, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        and__1 = ops.and_(ge_2, lt_2)
        masked_subblock3 = self.masked_subblock3(and__1, 0.0)
        get_index_6 = self.get_index('index0')
        index_expr_6 = ops.index_expr(get_index_6, torch.int64)
        constant_6 = ops.constant(608, torch.int64)
        ge_3 = ops.ge(index_expr_6, constant_6)
        get_index_7 = self.get_index('index0')
        index_expr_7 = ops.index_expr(get_index_7, torch.int64)
        constant_7 = ops.constant(912, torch.int64)
        lt_3 = ops.lt(index_expr_7, constant_7)
        masked_subblock4 = self.masked_subblock4(ge_3, 0.0)
        where = ops.where(and__1, masked_subblock3, masked_subblock4)
        where_1 = ops.where(and_, masked_subblock2, where)
        where_2 = ops.where(lt, masked_subblock1, where_1)
        get_index_8 = self.get_index('index6')
        store = ops.store('buf91', get_index_8, where_2, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf81', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf86', get_index)
        return load
    def masked_subblock3(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index4')
        load_1 = ops.load('arg177_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg178_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('arg179_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index4')
        load_4 = ops.load('arg180_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        return relu
    def masked_subblock4(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf78', get_index)
        return load


op92: ExternKernelSchedulerNode(ExternKernelAlloc)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelAlloc
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.convolution


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 752640}, None)]
op93.unmet_dependencies = [MemoryDep('buf92', c0, {c0: 752640}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg183_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg184_1', c1, {c0: 1568, c1: 480}, None),
        MemoryDep('arg185_1', c1, {c0: 1568, c1: 480}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (752640, 1)
op93.sizes = ([1568, 480], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[480], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[8, 480, 14, 14], stride=[94080, 1, 6720, 480])
class op93_loop_body:
    var_ranges = {z0: 1568, z1: 480}
    index0 = 480*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg183_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg184_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, relu, None)
        return store


op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', 4320*c0 + c1 + 480*c2, {c0: 960, c1: 480, c2: 9}, None)]
op94.unmet_dependencies = []
op94.met_dependencies = [MemoryDep('arg186_1', c0, {c0: 4147200}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[960, 480, 3, 3], stride=[4320, 1, 1440, 480])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (4147200, 1)
op94.sizes = ([960, 480, 9], [])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[960, 480, 3, 3], stride=[4320, 9, 3, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[960, 480, 3, 3], stride=[4320, 1, 1440, 480])
class op94_loop_body:
    var_ranges = {z0: 960, z1: 480, z2: 9}
    index0 = 4320*z0 + 9*z1 + z2
    index1 = 4320*z0 + z1 + 480*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg186_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf94', get_index_1, load, None)
        return store


op95: ExternKernelSchedulerNode(ExternKernelAlloc)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf93', mode=None), StarDep(name='buf94', mode=None)]
op95.met_dependencies = []
op95.outputs = [
    buf95: ExternKernelAlloc
    buf95.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=True, is_weak=False)]
]
op95.node.kernel = extern_kernels.convolution


op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 376320}, None)]
op96.unmet_dependencies = [MemoryDep('buf95', c0, {c0: 376320}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg187_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg188_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg189_1', c1, {c0: 392, c1: 960}, None),
        MemoryDep('arg190_1', c1, {c0: 392, c1: 960}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
    buf96.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (376320, 1)
op96.sizes = ([392, 960], [])
buf95_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[960], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 960, 7, 7], stride=[47040, 1, 6720, 960])
class op96_loop_body:
    var_ranges = {z0: 392, z1: 960}
    index0 = 960*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf95', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg188_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf96', get_index_5, relu, None)
        return store


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', 8640*c0 + c1 + 960*c2, {c0: 1024, c1: 960, c2: 9}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg191_1', c0, {c0: 8847360}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1024, 960, 3, 3], stride=[8640, 1, 2880, 960])
    buf97.users = [NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (8847360, 1)
op97.sizes = ([1024, 960, 9], [])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[1024, 960, 3, 3], stride=[8640, 9, 3, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1024, 960, 3, 3], stride=[8640, 1, 2880, 960])
class op97_loop_body:
    var_ranges = {z0: 1024, z1: 960, z2: 9}
    index0 = 8640*z0 + 9*z1 + z2
    index1 = 8640*z0 + z1 + 960*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg191_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf97', get_index_1, load, None)
        return store


op98: ExternKernelSchedulerNode(ExternKernelAlloc)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf96', mode=None), StarDep(name='buf97', mode=None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ExternKernelAlloc
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf98.users = [NodeUser(node=SchedulerNode(name='op99'), can_inplace=True, is_weak=False)]
]
op98.node.kernel = extern_kernels.convolution


op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 401408}, None)]
op99.unmet_dependencies = [MemoryDep('buf98', c0, {c0: 401408}, None)]
op99.met_dependencies = 
    [   MemoryDep('arg192_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg193_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg194_1', c1, {c0: 392, c1: 1024}, None),
        MemoryDep('arg195_1', c1, {c0: 392, c1: 1024}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (401408, 1)
op99.sizes = ([392, 1024], [])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 7, 7], stride=[50176, 1, 7168, 1024])
class op99_loop_body:
    var_ranges = {z0: 392, z1: 1024}
    index0 = 1024*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf98', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg192_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg193_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg194_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg195_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf99', get_index_5, relu, None)
        return store


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', 9216*c0 + c1 + 1024*c2, {c0: 1280, c1: 1024, c2: 9}, None)]
op100.unmet_dependencies = []
op100.met_dependencies = [MemoryDep('arg196_1', c0, {c0: 11796480}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[1280, 1024, 3, 3], stride=[9216, 1, 3072, 1024])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (11796480, 1)
op100.sizes = ([1280, 1024, 9], [])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[1280, 1024, 3, 3], stride=[9216, 9, 3, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[1280, 1024, 3, 3], stride=[9216, 1, 3072, 1024])
class op100_loop_body:
    var_ranges = {z0: 1280, z1: 1024, z2: 9}
    index0 = 9216*z0 + 9*z1 + z2
    index1 = 9216*z0 + z1 + 1024*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg196_1', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf100', get_index_1, load, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelAlloc)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None), StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: ExternKernelAlloc
    buf101.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 4, 4], stride=[20480, 1, 5120, 1280])
    buf101.users = [NodeUser(node=SchedulerNode(name='op102'), can_inplace=True, is_weak=False)]
]
op101.node.kernel = extern_kernels.convolution


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 163840}, None)]
op102.unmet_dependencies = [MemoryDep('buf101', c0, {c0: 163840}, None)]
op102.met_dependencies = 
    [   MemoryDep('arg197_1', c1, {c0: 128, c1: 1280}, None),
        MemoryDep('arg198_1', c1, {c0: 128, c1: 1280}, None),
        MemoryDep('arg199_1', c1, {c0: 128, c1: 1280}, None),
        MemoryDep('arg200_1', c1, {c0: 128, c1: 1280}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 4, 4], stride=[20480, 1, 5120, 1280])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (163840, 1)
op102.sizes = ([128, 1280], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 4, 4], stride=[20480, 1, 5120, 1280])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[1280], stride=[1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 1280, 4, 4], stride=[20480, 1, 5120, 1280])
class op102_loop_body:
    var_ranges = {z0: 128, z1: 1280}
    index0 = 1280*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg198_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg200_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf102', get_index_5, relu, None)
        return store


op103: ExternKernelSchedulerNode(ExternKernelAlloc)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op103.met_dependencies = [StarDep(name='arg201_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelAlloc
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 4, 4], stride=[16384, 1, 4096, 1024])
    buf103.users = [NodeUser(node=SchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.convolution


op104_op105: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op104_op105.writes = 
    [   MemoryDep('buf104', c0, {c0: 8192}, None),
        MemoryDep('buf105', c0, {c0: 8192}, None)]
op104_op105.unmet_dependencies = [MemoryDep('buf103', 16384*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 16}, None)]
op104_op105.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg203_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg204_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg205_1', c1, {c0: 8, c1: 1024}, None)]
op104_op105.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op104_op105.snodes[0] =
op104: SchedulerNode(ComputedBuffer)
op104.writes = [MemoryDep('buf104', c0, {c0: 8192}, None)]
op104.unmet_dependencies = [MemoryDep('buf103', 16384*c0 + c1 + 1024*c2, {c0: 8, c1: 1024, c2: 16}, None)]
op104.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg203_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg204_1', c1, {c0: 8, c1: 1024}, None),
        MemoryDep('arg205_1', c1, {c0: 8, c1: 1024}, None)]
op104.outputs = [
    buf104: ComputedBuffer
    buf104.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf104.users = [NodeUser(node=SchedulerNode(name='op105'), can_inplace=True, is_weak=False)]
]
op104.group.device = cuda:0
op104.group.iteration = (8192, 16)
op104.sizes = ([8, 1024], [16])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 4, 4], stride=[16384, 1, 4096, 1024])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1024], stride=[1])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
class op104_loop_body:
    var_ranges = {z0: 8, z1: 1024, z2: 16}
    index0 = 16384*z0 + z1 + 1024*z2
    index1 = z1
    index2 = 1024*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf103', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg202_1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg203_1', get_index_2)
        constant = ops.constant(1e-05, torch.float32)
        add = ops.add(load_2, constant)
        sqrt = ops.sqrt(add)
        reciprocal = ops.reciprocal(sqrt)
        constant_1 = ops.constant(1.0, torch.float32)
        mul = ops.mul(reciprocal, constant_1)
        mul_1 = ops.mul(sub, mul)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg204_1', get_index_3)
        mul_2 = ops.mul(mul_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg205_1', get_index_4)
        add_1 = ops.add(mul_2, load_4)
        relu = ops.relu(add_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', relu)
        get_index_5 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf104', get_index_5, reduction)
        return store_reduction
op104_op105.snodes[1] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 8192}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 8192}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
    buf105.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (8192, 1)
op105.sizes = ([8192], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 1024, 1, 1], stride=[1024, 1, 8192, 8192])
class op105_loop_body:
    var_ranges = {z0: 8192}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(16.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf105', get_index_1, truediv, None)
        return store


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf105', mode=None)]
op106.met_dependencies = [StarDep(name='arg206_1', mode=None), StarDep(name='arg207_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf106.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op106.node.kernel = extern_kernels.addmm



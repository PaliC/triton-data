op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 6291456}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0 + 1, {c0: 16384}, None),
        MemoryDep('arg0_1', c0 - 1, {c0: 16384}, None),
        MemoryDep('arg0_1', c0, {c0: 16384}, None),
        MemoryDep('arg1_1', 128*tmp20 + I, {c0: 16384, c1: 384}, None),
        MemoryDep('arg1_1', 128*tmp32 + I, {c0: 16384, c1: 384}, None),
        MemoryDep('arg1_1', 128*tmp9 + I, {c0: 16384, c1: 384}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 384], stride=[49152, 384, 1])
    buf0.users = [NodeUser(node=ExternKernelSchedulerNode(name='op1'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (6291456, 1)
op0.sizes = ([128, 128, 384], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[128, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 128], stride=[128, 1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[128, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 128], stride=[128, 1])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[128, 128], stride=[128, 1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 128], stride=[128, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 384], stride=[49152, 384, 1])
class op0_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 384}
    index0 = z2
    index1 = z1
    index2 = 128*z0 + z1 + 1
    index3 = 128*indirect0 + I
    index4 = 128*z0 + z1
    index5 = 128*indirect1 + I
    index6 = z1 - 1
    index7 = 128*z0 + z1 - 1
    index8 = 128*indirect2 + I
    index9 = 49152*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(128, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        and_ = ops.and_(ge_1, lt_1)
        masked_subblock4 = self.masked_subblock4(and_, 0.0)
        get_index_4 = self.get_index('index0')
        index_expr_4 = ops.index_expr(get_index_4, torch.int64)
        constant_4 = ops.constant(256, torch.int64)
        ge_2 = ops.ge(index_expr_4, constant_4)
        get_index_5 = self.get_index('index0')
        index_expr_5 = ops.index_expr(get_index_5, torch.int64)
        constant_5 = ops.constant(384, torch.int64)
        lt_2 = ops.lt(index_expr_5, constant_5)
        masked_subblock6 = self.masked_subblock6(ge_2, 0.0)
        where = ops.where(and_, masked_subblock4, masked_subblock6)
        where_1 = ops.where(lt, masked_subblock1, where)
        get_index_6 = self.get_index('index9')
        store = ops.store('buf0', get_index_6, where_1, None)
        return store
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg1_1', get_index_1)
        return load_1
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(127, torch.int64)
        lt = ops.lt(index_expr, constant)
        masked_subblock2 = self.masked_subblock2(lt, 0.0)
        return masked_subblock2
    def masked_subblock4(self, ops):
        get_index = self.get_index('index4')
        load = ops.load('arg0_1', get_index)
        set_indirect1 = self.set_indirect1(load)
        get_index_1 = self.get_index('index5')
        load_1 = ops.load('arg1_1', get_index_1)
        return load_1
    def masked_subblock7(self, ops):
        get_index = self.get_index('index7')
        load = ops.load('arg0_1', get_index)
        set_indirect2 = self.set_indirect2(load)
        get_index_1 = self.get_index('index8')
        load_1 = ops.load('arg1_1', get_index_1)
        return load_1
    def masked_subblock6(self, ops):
        get_index = self.get_index('index6')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        masked_subblock7 = self.masked_subblock7(ge, 0.0)
        return masked_subblock7
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 6291456
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex % 384
        x1 = (xindex // 384) % 128
        x3 = (xindex // 384)
        x4 = xindex
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 128, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = x1
        tmp6 = tl.full([1], 127, tl.int64)
        tmp7 = tmp5 < tmp6
        tmp8 = tmp7 & tmp4
        tmp9 = tl.load(in_ptr0 + (1 + x3), tmp8, eviction_policy='evict_last', other=0.0)
        tmp10 = tl.full([XBLOCK], 30522, tl.int32)
        tmp11 = tmp9 + tmp10
        tmp12 = tmp9 < 0
        tmp13 = tl.where(tmp12, tmp11, tmp9)
        tl.device_assert(((0 <= tl.broadcast_to(tmp13, [XBLOCK])) & (tl.broadcast_to(tmp13, [XBLOCK]) < 30522)) | ~(tmp8), "index out of bounds: 0 <= tl.broadcast_to(tmp13, [XBLOCK]) < 30522")
        tmp15 = tl.load(in_ptr1 + ((128*tmp13) + x0), tmp8, eviction_policy='evict_last', other=0.0)
        tmp16 = tl.full(tmp15.shape, 0.0, tmp15.dtype)
        tmp17 = tl.where(tmp4, tmp15, tmp16)
        tmp18 = tmp0 >= tmp3
        tmp19 = tl.full([1], 256, tl.int64)
        tmp20 = tmp0 < tmp19
        tmp21 = tmp18 & tmp20
        tmp22 = tl.load(in_ptr0 + (x3), tmp21, eviction_policy='evict_last', other=0.0)
        tmp23 = tmp22 + tmp10
        tmp24 = tmp22 < 0
        tmp25 = tl.where(tmp24, tmp23, tmp22)
        tl.device_assert(((0 <= tl.broadcast_to(tmp25, [XBLOCK])) & (tl.broadcast_to(tmp25, [XBLOCK]) < 30522)) | ~(tmp21), "index out of bounds: 0 <= tl.broadcast_to(tmp25, [XBLOCK]) < 30522")
        tmp27 = tl.load(in_ptr1 + ((128*tmp25) + ((-128) + x0)), tmp21, eviction_policy='evict_last', other=0.0)
        tmp28 = tmp0 >= tmp19
        tmp29 = tl.full([1], 384, tl.int64)
        tmp30 = tmp0 < tmp29
        tmp31 = (-1) + x1
        tmp32 = tmp31 >= tmp1
        tmp33 = tmp32 & tmp28
        tmp34 = tl.load(in_ptr0 + ((-1) + x3), tmp33, eviction_policy='evict_last', other=0.0)
        tmp35 = tmp34 + tmp10
        tmp36 = tmp34 < 0
        tmp37 = tl.where(tmp36, tmp35, tmp34)
        tl.device_assert(((0 <= tl.broadcast_to(tmp37, [XBLOCK])) & (tl.broadcast_to(tmp37, [XBLOCK]) < 30522)) | ~(tmp33), "index out of bounds: 0 <= tl.broadcast_to(tmp37, [XBLOCK]) < 30522")
        tmp39 = tl.load(in_ptr1 + ((128*tmp37) + ((-256) + x0)), tmp33, eviction_policy='evict_last', other=0.0)
        tmp40 = tl.full(tmp39.shape, 0.0, tmp39.dtype)
        tmp41 = tl.where(tmp28, tmp39, tmp40)
        tmp42 = tl.where(tmp21, tmp27, tmp41)
        tmp43 = tl.where(tmp4, tmp17, tmp42)
        tl.store(out_ptr0 + (x4), tmp43, None)


op1: ExternKernelSchedulerNode(ExternKernelOut)
op1.writes = [StarDep(name='buf1', mode=None)]
op1.unmet_dependencies = [StarDep(name='buf0', mode=None)]
op1.met_dependencies = [StarDep(name='arg4_1', mode=None)]
op1.outputs = [
    buf1: ExternKernelOut
    buf1.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf1.users = [NodeUser(node=SchedulerNode(name='op2'), can_inplace=True, is_weak=False)]
]
op1.node.kernel = extern_kernels.mm


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 8388608}, None)]
op2.unmet_dependencies = [MemoryDep('buf1', c0, {c0: 8388608}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg1112_1', c1, {c0: 128, c1: 128}, None),
        MemoryDep('arg2_1', c1 + 512*tmp3, {c0: 16384, c1: 512}, None),
        MemoryDep('arg3_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg5_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg6_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg7_1', c1, {c0: 16384, c1: 512}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf2.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (8388608, 1)
op2.sizes = ([128, 128, 512], [])
buf1_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1112_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[512, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[2, 512], stride=[512, 1])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op2_loop_body:
    var_ranges = {z0: 128, z1: 128, z2: 512}
    index0 = 65536*z0 + 512*z1 + z2
    index1 = z2
    index2 = z1
    index3 = 512*indirect0 + z2
    index4 = 0
    index5 = 2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg5_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg1112_1', get_index_2)
        set_indirect0 = self.set_indirect0(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg2_1', get_index_3)
        add_1 = ops.add(add, load_3)
        get_index_4 = self.get_index('index4')
        get_index_5 = self.get_index('index5')
        check_bounds = ops.check_bounds(get_index_4, get_index_5, False, False)
        get_index_6 = self.get_index('index1')
        load_4 = ops.load('arg3_1', get_index_6)
        add_2 = ops.add(add_1, load_4)
        get_index_7 = self.get_index('index1')
        load_5 = ops.load('arg7_1', get_index_7)
        mul = ops.mul(add_2, load_5)
        get_index_8 = self.get_index('index1')
        load_6 = ops.load('arg6_1', get_index_8)
        add_3 = ops.add(mul, load_6)
        get_index_9 = self.get_index('index0')
        store = ops.store('buf2', get_index_9, add_3, None)
        return store
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = xindex
        x0 = xindex % 512
        x1 = (xindex // 512) % 128
        tmp0 = tl.load(in_out_ptr0 + (x3), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tl.full([XBLOCK], 512, tl.int32)
        tmp5 = tmp3 + tmp4
        tmp6 = tmp3 < 0
        tmp7 = tl.where(tmp6, tmp5, tmp3)
        tl.device_assert((0 <= tmp7) & (tmp7 < 512), "index out of bounds: 0 <= tmp7 < 512")
        tmp9 = tl.load(in_ptr2 + (x0 + (512*tmp7)), None)
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 + tmp11
        tmp14 = tmp12 * tmp13
        tmp16 = tmp14 + tmp15
        tl.store(in_out_ptr0 + (x3), tmp16, None)


op3: ExternKernelSchedulerNode(ExternKernelOut)
op3.writes = [StarDep(name='buf3', mode=None)]
op3.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op3.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op3.outputs = [
    buf3: ExternKernelOut
    buf3.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf3.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False)]
]
op3.node.kernel = extern_kernels.mm


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 2097152}, None)]
op4.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 2097152}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg33_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg34_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg35_1', c1, {c0: 16384, c1: 128}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (2097152, 1)
op4.sizes = ([16384, 128], [])
buf3_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op4_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf3', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg33_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg35_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf4', get_index_4, add_1, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg8_1', mode=None), StarDep(name='arg9_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf5.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op5.node.kernel = extern_kernels.addmm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op6.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg11_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op7.met_dependencies = [StarDep(name='arg12_1', mode=None), StarDep(name='arg13_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.addmm


op8: ExternKernelSchedulerNode(FallbackKernel)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = 
    [   StarDep(name='buf5', mode=None),
        StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: FallbackKernel
    buf8.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op9: ExternKernelSchedulerNode(MultiOutput)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: MultiOutput
    buf9.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf9.users = [NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = None


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf9', mode=None)]
op13.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op13.node.kernel = extern_kernels.mm


op14: ExternKernelSchedulerNode(ExternKernelOut)
op14.writes = [StarDep(name='buf14', mode=None)]
op14.unmet_dependencies = [StarDep(name='buf2', mode=None)]
op14.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op14.outputs = [
    buf14: ExternKernelOut
    buf14.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf14.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=True, is_weak=False)]
]
op14.node.kernel = extern_kernels.mm


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 2097152}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf13', c0, {c0: 2097152}, None),
        MemoryDep('buf14', c0, {c0: 2097152}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg16_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg17_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg29_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg30_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg31_1', c1, {c0: 16384, c1: 128}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (2097152, 1)
op15.sizes = ([16384, 128], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg30_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op15_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg15_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf14', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg29_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg31_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg30_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg17_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg16_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf15', get_index_8, add_4, None)
        return store
op15 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False)]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 8388608}, None)]
op17.unmet_dependencies = [MemoryDep('buf16', c0, {c0: 8388608}, None)]
op17.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 16384, c1: 512}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (8388608, 1)
op17.sizes = ([16384, 512], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op17_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf17', get_index_2, relu, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf18.users = [NodeUser(node=SchedulerNode(name='op19'), can_inplace=True, is_weak=False)]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 2097152}, None)]
op19.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 2097152}, None),
        MemoryDep('buf18', c0, {c0: 2097152}, None)]
op19.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg40_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg41_1', c1, {c0: 16384, c1: 128}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf19.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (2097152, 1)
op19.sizes = ([16384, 128], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op19_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg39_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf15', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg41_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg40_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf19', get_index_5, add_2, None)
        return store
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op20: ExternKernelSchedulerNode(ExternKernelOut)
op20.writes = [StarDep(name='buf20', mode=None)]
op20.unmet_dependencies = [StarDep(name='buf19', mode=None)]
op20.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op20.outputs = [
    buf20: ExternKernelOut
    buf20.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf20.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False)]
]
op20.node.kernel = extern_kernels.mm


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 8388608}, None)]
op21.unmet_dependencies = [MemoryDep('buf20', c0, {c0: 8388608}, None)]
op21.met_dependencies = [MemoryDep('arg43_1', c1, {c0: 16384, c1: 512}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (8388608, 1)
op21.sizes = ([16384, 512], [])
buf20_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op21_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf20', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg43_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf21', get_index_2, relu, None)
        return store
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf21', mode=None)]
op22.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 2097152}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 2097152}, None),
        MemoryDep('buf22', c0, {c0: 2097152}, None)]
op23.met_dependencies = 
    [   MemoryDep('arg45_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg46_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg47_1', c1, {c0: 16384, c1: 128}, None)]
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf23.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op24'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False),
    ]
]
op23.group.device = cuda:0
op23.group.iteration = (2097152, 1)
op23.sizes = ([16384, 128], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op23_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg45_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf19', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg47_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg46_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf23', get_index_5, add_2, None)
        return store
op23 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op24: ExternKernelSchedulerNode(ExternKernelOut)
op24.writes = [StarDep(name='buf24', mode=None)]
op24.unmet_dependencies = [StarDep(name='buf23', mode=None)]
op24.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op24.outputs = [
    buf24: ExternKernelOut
    buf24.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf24.users = [NodeUser(node=SchedulerNode(name='op25'), can_inplace=True, is_weak=False)]
]
op24.node.kernel = extern_kernels.mm


op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 8388608}, None)]
op25.unmet_dependencies = [MemoryDep('buf24', c0, {c0: 8388608}, None)]
op25.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 16384, c1: 512}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf25.users = [NodeUser(node=ExternKernelSchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (8388608, 1)
op25.sizes = ([16384, 512], [])
buf24_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op25_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf24', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf25', get_index_2, relu, None)
        return store
op25 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op26: ExternKernelSchedulerNode(ExternKernelOut)
op26.writes = [StarDep(name='buf26', mode=None)]
op26.unmet_dependencies = [StarDep(name='buf25', mode=None)]
op26.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op26.outputs = [
    buf26: ExternKernelOut
    buf26.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf26.users = [NodeUser(node=SchedulerNode(name='op27'), can_inplace=True, is_weak=False)]
]
op26.node.kernel = extern_kernels.mm


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 2097152}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf23', c0, {c0: 2097152}, None),
        MemoryDep('buf26', c0, {c0: 2097152}, None)]
op27.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg52_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg53_1', c1, {c0: 16384, c1: 128}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf27.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False),
    ]
]
op27.group.device = cuda:0
op27.group.iteration = (2097152, 1)
op27.sizes = ([16384, 128], [])
buf26_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op27_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf26', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg51_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf23', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg53_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg52_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf27', get_index_5, add_2, None)
        return store
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op28: ExternKernelSchedulerNode(ExternKernelOut)
op28.writes = [StarDep(name='buf28', mode=None)]
op28.unmet_dependencies = [StarDep(name='buf27', mode=None)]
op28.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op28.outputs = [
    buf28: ExternKernelOut
    buf28.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf28.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False)]
]
op28.node.kernel = extern_kernels.mm


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 8388608}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 8388608}, None)]
op29.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 16384, c1: 512}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf29.users = [NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (8388608, 1)
op29.sizes = ([16384, 512], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op29_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf29', get_index_2, relu, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 2097152}, None)]
op31.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 2097152}, None),
        MemoryDep('buf30', c0, {c0: 2097152}, None)]
op31.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg22_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg23_1', c1, {c0: 16384, c1: 128}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (2097152, 1)
op31.sizes = ([16384, 128], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op31_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf27', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg23_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg22_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf31', get_index_5, add_2, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf32.users = [NodeUser(node=SchedulerNode(name='op33'), can_inplace=True, is_weak=False)]
]
op32.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 8388608}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf2', c0, {c0: 8388608}, None),
        MemoryDep('buf32', c0, {c0: 8388608}, None)]
op33.met_dependencies = 
    [   MemoryDep('arg25_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg26_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg27_1', c1, {c0: 16384, c1: 512}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf33.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False),
    ]
]
op33.group.device = cuda:0
op33.group.iteration = (8388608, 1)
op33.sizes = ([16384, 512], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op33_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf2', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg27_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg26_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf33', get_index_5, add_2, None)
        return store
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op34: ExternKernelSchedulerNode(ExternKernelOut)
op34.writes = [StarDep(name='buf34', mode=None)]
op34.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op34.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op34.outputs = [
    buf34: ExternKernelOut
    buf34.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf34.users = [NodeUser(node=SchedulerNode(name='op35'), can_inplace=True, is_weak=False)]
]
op34.node.kernel = extern_kernels.mm


op35: SchedulerNode(ComputedBuffer)
op35.writes = [MemoryDep('buf35', c0, {c0: 2097152}, None)]
op35.unmet_dependencies = [MemoryDep('buf34', c0, {c0: 2097152}, None)]
op35.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg80_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg81_1', c1, {c0: 16384, c1: 128}, None)]
op35.outputs = [
    buf35: ComputedBuffer
    buf35.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf35.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
    ]
]
op35.group.device = cuda:0
op35.group.iteration = (2097152, 1)
op35.sizes = ([16384, 128], [])
buf34_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op35_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf34', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg79_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg81_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf35', get_index_4, add_1, None)
        return store
op35 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op36: ExternKernelSchedulerNode(ExternKernelOut)
op36.writes = [StarDep(name='buf36', mode=None)]
op36.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op36.met_dependencies = [StarDep(name='arg54_1', mode=None), StarDep(name='arg55_1', mode=None)]
op36.outputs = [
    buf36: ExternKernelOut
    buf36.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf36.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op36.node.kernel = extern_kernels.addmm


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf35', mode=None)]
op37.met_dependencies = [StarDep(name='arg56_1', mode=None), StarDep(name='arg57_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf37.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op37.node.kernel = extern_kernels.addmm


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op38.met_dependencies = [StarDep(name='arg58_1', mode=None), StarDep(name='arg59_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.addmm


op39: ExternKernelSchedulerNode(FallbackKernel)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = 
    [   StarDep(name='buf36', mode=None),
        StarDep(name='buf37', mode=None),
        StarDep(name='buf38', mode=None)]
op39.met_dependencies = []
op39.outputs = [
    buf39: FallbackKernel
    buf39.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf39.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
    ]
]
op39.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op40: ExternKernelSchedulerNode(MultiOutput)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = [StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: MultiOutput
    buf40.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False)]
]
op40.node.kernel = None


op44: ExternKernelSchedulerNode(ExternKernelOut)
op44.writes = [StarDep(name='buf44', mode=None)]
op44.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op44.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op44.outputs = [
    buf44: ExternKernelOut
    buf44.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf44.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op44.node.kernel = extern_kernels.mm


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf33', mode=None)]
op45.met_dependencies = [StarDep(name='arg74_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.node.kernel = extern_kernels.mm


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 2097152}, None)]
op46.unmet_dependencies = 
    [   MemoryDep('buf44', c0, {c0: 2097152}, None),
        MemoryDep('buf45', c0, {c0: 2097152}, None)]
op46.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg62_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg63_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg75_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg76_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg77_1', c1, {c0: 16384, c1: 128}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (2097152, 1)
op46.sizes = ([16384, 128], [])
buf44_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op46_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf44', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf45', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg75_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg77_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg76_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg63_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg62_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf46', get_index_8, add_4, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf47.users = [NodeUser(node=SchedulerNode(name='op48'), can_inplace=True, is_weak=False)]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 8388608}, None)]
op48.unmet_dependencies = [MemoryDep('buf47', c0, {c0: 8388608}, None)]
op48.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 16384, c1: 512}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (8388608, 1)
op48.sizes = ([16384, 512], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op48_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg83_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf48', get_index_2, relu, None)
        return store
op48 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op49: ExternKernelSchedulerNode(ExternKernelOut)
op49.writes = [StarDep(name='buf49', mode=None)]
op49.unmet_dependencies = [StarDep(name='buf48', mode=None)]
op49.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op49.outputs = [
    buf49: ExternKernelOut
    buf49.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf49.users = [NodeUser(node=SchedulerNode(name='op50'), can_inplace=True, is_weak=False)]
]
op49.node.kernel = extern_kernels.mm


op50: SchedulerNode(ComputedBuffer)
op50.writes = [MemoryDep('buf50', c0, {c0: 2097152}, None)]
op50.unmet_dependencies = 
    [   MemoryDep('buf46', c0, {c0: 2097152}, None),
        MemoryDep('buf49', c0, {c0: 2097152}, None)]
op50.met_dependencies = 
    [   MemoryDep('arg85_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg86_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg87_1', c1, {c0: 16384, c1: 128}, None)]
op50.outputs = [
    buf50: ComputedBuffer
    buf50.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf50.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op50.group.device = cuda:0
op50.group.iteration = (2097152, 1)
op50.sizes = ([16384, 128], [])
buf49_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg87_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op50_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf49', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf46', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg87_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg86_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf50', get_index_5, add_2, None)
        return store
op50 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op51: ExternKernelSchedulerNode(ExternKernelOut)
op51.writes = [StarDep(name='buf51', mode=None)]
op51.unmet_dependencies = [StarDep(name='buf50', mode=None)]
op51.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op51.outputs = [
    buf51: ExternKernelOut
    buf51.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf51.users = [NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False)]
]
op51.node.kernel = extern_kernels.mm


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 8388608}, None)]
op52.unmet_dependencies = [MemoryDep('buf51', c0, {c0: 8388608}, None)]
op52.met_dependencies = [MemoryDep('arg89_1', c1, {c0: 16384, c1: 512}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf52.users = [NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (8388608, 1)
op52.sizes = ([16384, 512], [])
buf51_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op52_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf51', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg89_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf52', get_index_2, relu, None)
        return store
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf52', mode=None)]
op53.met_dependencies = [StarDep(name='arg90_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 2097152}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 2097152}, None),
        MemoryDep('buf53', c0, {c0: 2097152}, None)]
op54.met_dependencies = 
    [   MemoryDep('arg91_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg92_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg93_1', c1, {c0: 16384, c1: 128}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf54.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False),
    ]
]
op54.group.device = cuda:0
op54.group.iteration = (2097152, 1)
op54.sizes = ([16384, 128], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf50_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op54_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg91_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf50', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg92_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf54', get_index_5, add_2, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf54', mode=None)]
op55.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=True, is_weak=False)]
]
op55.node.kernel = extern_kernels.mm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 8388608}, None)]
op56.unmet_dependencies = [MemoryDep('buf55', c0, {c0: 8388608}, None)]
op56.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 16384, c1: 512}, None)]
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (8388608, 1)
op56.sizes = ([16384, 512], [])
buf55_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op56_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf55', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf56', get_index_2, relu, None)
        return store
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg96_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf57.users = [NodeUser(node=SchedulerNode(name='op58'), can_inplace=True, is_weak=False)]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 2097152}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 2097152}, None),
        MemoryDep('buf57', c0, {c0: 2097152}, None)]
op58.met_dependencies = 
    [   MemoryDep('arg97_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg98_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg99_1', c1, {c0: 16384, c1: 128}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf58.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False),
    ]
]
op58.group.device = cuda:0
op58.group.iteration = (2097152, 1)
op58.sizes = ([16384, 128], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op58_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg97_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf54', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg99_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg98_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf58', get_index_5, add_2, None)
        return store
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op59: ExternKernelSchedulerNode(ExternKernelOut)
op59.writes = [StarDep(name='buf59', mode=None)]
op59.unmet_dependencies = [StarDep(name='buf58', mode=None)]
op59.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op59.outputs = [
    buf59: ExternKernelOut
    buf59.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf59.users = [NodeUser(node=SchedulerNode(name='op60'), can_inplace=True, is_weak=False)]
]
op59.node.kernel = extern_kernels.mm


op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 8388608}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 8388608}, None)]
op60.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 16384, c1: 512}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf60.users = [NodeUser(node=ExternKernelSchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (8388608, 1)
op60.sizes = ([16384, 512], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op60_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf60', get_index_2, relu, None)
        return store
op60 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op61: ExternKernelSchedulerNode(ExternKernelOut)
op61.writes = [StarDep(name='buf61', mode=None)]
op61.unmet_dependencies = [StarDep(name='buf60', mode=None)]
op61.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op61.outputs = [
    buf61: ExternKernelOut
    buf61.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf61.users = [NodeUser(node=SchedulerNode(name='op62'), can_inplace=True, is_weak=False)]
]
op61.node.kernel = extern_kernels.mm


op62: SchedulerNode(ComputedBuffer)
op62.writes = [MemoryDep('buf62', c0, {c0: 2097152}, None)]
op62.unmet_dependencies = 
    [   MemoryDep('buf58', c0, {c0: 2097152}, None),
        MemoryDep('buf61', c0, {c0: 2097152}, None)]
op62.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg68_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg69_1', c1, {c0: 16384, c1: 128}, None)]
op62.outputs = [
    buf62: ComputedBuffer
    buf62.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf62.users = [NodeUser(node=ExternKernelSchedulerNode(name='op63'), can_inplace=False, is_weak=False)]
]
op62.group.device = cuda:0
op62.group.iteration = (2097152, 1)
op62.sizes = ([16384, 128], [])
buf61_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf62_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op62_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf61', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf58', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg69_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg68_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf62', get_index_5, add_2, None)
        return store
op62 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op63: ExternKernelSchedulerNode(ExternKernelOut)
op63.writes = [StarDep(name='buf63', mode=None)]
op63.unmet_dependencies = [StarDep(name='buf62', mode=None)]
op63.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op63.outputs = [
    buf63: ExternKernelOut
    buf63.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf63.users = [NodeUser(node=SchedulerNode(name='op64'), can_inplace=True, is_weak=False)]
]
op63.node.kernel = extern_kernels.mm


op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 8388608}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 8388608}, None),
        MemoryDep('buf63', c0, {c0: 8388608}, None)]
op64.met_dependencies = 
    [   MemoryDep('arg71_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg72_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg73_1', c1, {c0: 16384, c1: 512}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf64.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False),
    ]
]
op64.group.device = cuda:0
op64.group.iteration = (8388608, 1)
op64.sizes = ([16384, 512], [])
buf63_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op64_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf63', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg73_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg72_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf64', get_index_5, add_2, None)
        return store
op64 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op65: ExternKernelSchedulerNode(ExternKernelOut)
op65.writes = [StarDep(name='buf65', mode=None)]
op65.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op65.met_dependencies = [StarDep(name='arg124_1', mode=None)]
op65.outputs = [
    buf65: ExternKernelOut
    buf65.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf65.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False)]
]
op65.node.kernel = extern_kernels.mm


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 2097152}, None)]
op66.unmet_dependencies = [MemoryDep('buf65', c0, {c0: 2097152}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg125_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg126_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg127_1', c1, {c0: 16384, c1: 128}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op68'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (2097152, 1)
op66.sizes = ([16384, 128], [])
buf65_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op66_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf65', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg125_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg127_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf66', get_index_4, add_1, None)
        return store
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg100_1', mode=None), StarDep(name='arg101_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf67.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op67.node.kernel = extern_kernels.addmm


op68: ExternKernelSchedulerNode(ExternKernelOut)
op68.writes = [StarDep(name='buf68', mode=None)]
op68.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op68.met_dependencies = [StarDep(name='arg102_1', mode=None), StarDep(name='arg103_1', mode=None)]
op68.outputs = [
    buf68: ExternKernelOut
    buf68.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.node.kernel = extern_kernels.addmm


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op69.met_dependencies = [StarDep(name='arg104_1', mode=None), StarDep(name='arg105_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.node.kernel = extern_kernels.addmm


op70: ExternKernelSchedulerNode(FallbackKernel)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = 
    [   StarDep(name='buf67', mode=None),
        StarDep(name='buf68', mode=None),
        StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: FallbackKernel
    buf70.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf70.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op70.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op71: ExternKernelSchedulerNode(MultiOutput)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf70', mode=None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: MultiOutput
    buf71.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = None


op75: ExternKernelSchedulerNode(ExternKernelOut)
op75.writes = [StarDep(name='buf75', mode=None)]
op75.unmet_dependencies = [StarDep(name='buf71', mode=None)]
op75.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op75.outputs = [
    buf75: ExternKernelOut
    buf75.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf75.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op75.node.kernel = extern_kernels.mm


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf64', mode=None)]
op76.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=True, is_weak=False)]
]
op76.node.kernel = extern_kernels.mm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 2097152}, None)]
op77.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 2097152}, None),
        MemoryDep('buf76', c0, {c0: 2097152}, None)]
op77.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg108_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg109_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg121_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg122_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg123_1', c1, {c0: 16384, c1: 128}, None)]
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf77.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op77.group.device = cuda:0
op77.group.iteration = (2097152, 1)
op77.sizes = ([16384, 128], [])
buf75_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op77_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf75', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg107_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf76', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg122_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg109_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg108_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf77', get_index_8, add_4, None)
        return store
op77 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 8388608}, None)]
op79.unmet_dependencies = [MemoryDep('buf78', c0, {c0: 8388608}, None)]
op79.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 16384, c1: 512}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (8388608, 1)
op79.sizes = ([16384, 512], [])
buf78_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op79_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf78', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf79', get_index_2, relu, None)
        return store
op79 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op80: ExternKernelSchedulerNode(ExternKernelOut)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelOut
    buf80.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False)]
]
op80.node.kernel = extern_kernels.mm


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 2097152}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf77', c0, {c0: 2097152}, None),
        MemoryDep('buf80', c0, {c0: 2097152}, None)]
op81.met_dependencies = 
    [   MemoryDep('arg131_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg132_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg133_1', c1, {c0: 16384, c1: 128}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf81.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False),
    ]
]
op81.group.device = cuda:0
op81.group.iteration = (2097152, 1)
op81.sizes = ([16384, 128], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op81_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg131_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf77', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg132_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf81', get_index_5, add_2, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf82.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False)]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 8388608}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 8388608}, None)]
op83.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 16384, c1: 512}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (8388608, 1)
op83.sizes = ([16384, 512], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op83_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf83', get_index_2, relu, None)
        return store
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2097152}, None)]
op85.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 2097152}, None),
        MemoryDep('buf84', c0, {c0: 2097152}, None)]
op85.met_dependencies = 
    [   MemoryDep('arg137_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg138_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg139_1', c1, {c0: 16384, c1: 128}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf85.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False),
    ]
]
op85.group.device = cuda:0
op85.group.iteration = (2097152, 1)
op85.sizes = ([16384, 128], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op85_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf81', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg138_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf85', get_index_5, add_2, None)
        return store
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg140_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf86.users = [NodeUser(node=SchedulerNode(name='op87'), can_inplace=True, is_weak=False)]
]
op86.node.kernel = extern_kernels.mm


op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 8388608}, None)]
op87.unmet_dependencies = [MemoryDep('buf86', c0, {c0: 8388608}, None)]
op87.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 16384, c1: 512}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf87.users = [NodeUser(node=ExternKernelSchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (8388608, 1)
op87.sizes = ([16384, 512], [])
buf86_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op87_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf86', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf87', get_index_2, relu, None)
        return store
op87 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op88: ExternKernelSchedulerNode(ExternKernelOut)
op88.writes = [StarDep(name='buf88', mode=None)]
op88.unmet_dependencies = [StarDep(name='buf87', mode=None)]
op88.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op88.outputs = [
    buf88: ExternKernelOut
    buf88.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf88.users = [NodeUser(node=SchedulerNode(name='op89'), can_inplace=True, is_weak=False)]
]
op88.node.kernel = extern_kernels.mm


op89: SchedulerNode(ComputedBuffer)
op89.writes = [MemoryDep('buf89', c0, {c0: 2097152}, None)]
op89.unmet_dependencies = 
    [   MemoryDep('buf85', c0, {c0: 2097152}, None),
        MemoryDep('buf88', c0, {c0: 2097152}, None)]
op89.met_dependencies = 
    [   MemoryDep('arg143_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg144_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg145_1', c1, {c0: 16384, c1: 128}, None)]
op89.outputs = [
    buf89: ComputedBuffer
    buf89.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf89.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op89.group.device = cuda:0
op89.group.iteration = (2097152, 1)
op89.sizes = ([16384, 128], [])
buf88_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op89_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf88', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf85', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg144_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf89', get_index_5, add_2, None)
        return store
op89 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op90: ExternKernelSchedulerNode(ExternKernelOut)
op90.writes = [StarDep(name='buf90', mode=None)]
op90.unmet_dependencies = [StarDep(name='buf89', mode=None)]
op90.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op90.outputs = [
    buf90: ExternKernelOut
    buf90.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf90.users = [NodeUser(node=SchedulerNode(name='op91'), can_inplace=True, is_weak=False)]
]
op90.node.kernel = extern_kernels.mm


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 8388608}, None)]
op91.unmet_dependencies = [MemoryDep('buf90', c0, {c0: 8388608}, None)]
op91.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 16384, c1: 512}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf91.users = [NodeUser(node=ExternKernelSchedulerNode(name='op92'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (8388608, 1)
op91.sizes = ([16384, 512], [])
buf90_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op91_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf90', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf91', get_index_2, relu, None)
        return store
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op92: ExternKernelSchedulerNode(ExternKernelOut)
op92.writes = [StarDep(name='buf92', mode=None)]
op92.unmet_dependencies = [StarDep(name='buf91', mode=None)]
op92.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op92.outputs = [
    buf92: ExternKernelOut
    buf92.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf92.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False)]
]
op92.node.kernel = extern_kernels.mm


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 2097152}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf89', c0, {c0: 2097152}, None),
        MemoryDep('buf92', c0, {c0: 2097152}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg114_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg115_1', c1, {c0: 16384, c1: 128}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf93.users = [NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (2097152, 1)
op93.sizes = ([16384, 128], [])
buf92_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf89_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op93_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf92', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf89', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg114_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf93', get_index_5, add_2, None)
        return store
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 8388608}, None)]
op95.unmet_dependencies = 
    [   MemoryDep('buf64', c0, {c0: 8388608}, None),
        MemoryDep('buf94', c0, {c0: 8388608}, None)]
op95.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg118_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg119_1', c1, {c0: 16384, c1: 512}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf95.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op100'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False),
    ]
]
op95.group.device = cuda:0
op95.group.iteration = (8388608, 1)
op95.sizes = ([16384, 512], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op95_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf64', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg119_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg118_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf95', get_index_5, add_2, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf96.users = [NodeUser(node=SchedulerNode(name='op97'), can_inplace=True, is_weak=False)]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 2097152}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 2097152}, None)]
op97.met_dependencies = 
    [   MemoryDep('arg171_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg172_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg173_1', c1, {c0: 16384, c1: 128}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf97.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op99'), can_inplace=False, is_weak=False),
    ]
]
op97.group.device = cuda:0
op97.group.iteration = (2097152, 1)
op97.sizes = ([16384, 128], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg172_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op97_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg172_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf97', get_index_4, add_1, None)
        return store
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op98: ExternKernelSchedulerNode(ExternKernelOut)
op98.writes = [StarDep(name='buf98', mode=None)]
op98.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op98.met_dependencies = [StarDep(name='arg146_1', mode=None), StarDep(name='arg147_1', mode=None)]
op98.outputs = [
    buf98: ExternKernelOut
    buf98.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf98.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op98.node.kernel = extern_kernels.addmm


op99: ExternKernelSchedulerNode(ExternKernelOut)
op99.writes = [StarDep(name='buf99', mode=None)]
op99.unmet_dependencies = [StarDep(name='buf97', mode=None)]
op99.met_dependencies = [StarDep(name='arg148_1', mode=None), StarDep(name='arg149_1', mode=None)]
op99.outputs = [
    buf99: ExternKernelOut
    buf99.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf99.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op99.node.kernel = extern_kernels.addmm


op100: ExternKernelSchedulerNode(ExternKernelOut)
op100.writes = [StarDep(name='buf100', mode=None)]
op100.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op100.met_dependencies = [StarDep(name='arg150_1', mode=None), StarDep(name='arg151_1', mode=None)]
op100.outputs = [
    buf100: ExternKernelOut
    buf100.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf100.users = [NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False)]
]
op100.node.kernel = extern_kernels.addmm


op101: ExternKernelSchedulerNode(FallbackKernel)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = 
    [   StarDep(name='buf100', mode=None),
        StarDep(name='buf98', mode=None),
        StarDep(name='buf99', mode=None)]
op101.met_dependencies = []
op101.outputs = [
    buf101: FallbackKernel
    buf101.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
    ]
]
op101.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op102: ExternKernelSchedulerNode(MultiOutput)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf101', mode=None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: MultiOutput
    buf102.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = None


op106: ExternKernelSchedulerNode(ExternKernelOut)
op106.writes = [StarDep(name='buf106', mode=None)]
op106.unmet_dependencies = [StarDep(name='buf102', mode=None)]
op106.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op106.outputs = [
    buf106: ExternKernelOut
    buf106.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op106.node.kernel = extern_kernels.mm


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op107.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=True, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 2097152}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf106', c0, {c0: 2097152}, None),
        MemoryDep('buf107', c0, {c0: 2097152}, None)]
op108.met_dependencies = 
    [   MemoryDep('arg153_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg154_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg155_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg167_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg168_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg169_1', c1, {c0: 16384, c1: 128}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf108.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False),
    ]
]
op108.group.device = cuda:0
op108.group.iteration = (2097152, 1)
op108.sizes = ([16384, 128], [])
buf106_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf107_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op108_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf106', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg153_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf107', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg167_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg169_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg168_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg155_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg154_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf108', get_index_8, add_4, None)
        return store
op108 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf108', mode=None)]
op109.met_dependencies = [StarDep(name='arg174_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op110'), can_inplace=True, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 8388608}, None)]
op110.unmet_dependencies = [MemoryDep('buf109', c0, {c0: 8388608}, None)]
op110.met_dependencies = [MemoryDep('arg175_1', c1, {c0: 16384, c1: 512}, None)]
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (8388608, 1)
op110.sizes = ([16384, 512], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op110_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg175_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf110', get_index_2, relu, None)
        return store
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op111: ExternKernelSchedulerNode(ExternKernelOut)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelOut
    buf111.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf111.users = [NodeUser(node=SchedulerNode(name='op112'), can_inplace=True, is_weak=False)]
]
op111.node.kernel = extern_kernels.mm


op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 2097152}, None)]
op112.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 2097152}, None),
        MemoryDep('buf111', c0, {c0: 2097152}, None)]
op112.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg178_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg179_1', c1, {c0: 16384, c1: 128}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf112.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
    ]
]
op112.group.device = cuda:0
op112.group.iteration = (2097152, 1)
op112.sizes = ([16384, 128], [])
buf111_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op112_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf111', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf108', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg178_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf112', get_index_5, add_2, None)
        return store
op112 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op113: ExternKernelSchedulerNode(ExternKernelOut)
op113.writes = [StarDep(name='buf113', mode=None)]
op113.unmet_dependencies = [StarDep(name='buf112', mode=None)]
op113.met_dependencies = [StarDep(name='arg180_1', mode=None)]
op113.outputs = [
    buf113: ExternKernelOut
    buf113.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf113.users = [NodeUser(node=SchedulerNode(name='op114'), can_inplace=True, is_weak=False)]
]
op113.node.kernel = extern_kernels.mm


op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 8388608}, None)]
op114.unmet_dependencies = [MemoryDep('buf113', c0, {c0: 8388608}, None)]
op114.met_dependencies = [MemoryDep('arg181_1', c1, {c0: 16384, c1: 512}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf114.users = [NodeUser(node=ExternKernelSchedulerNode(name='op115'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (8388608, 1)
op114.sizes = ([16384, 512], [])
buf113_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op114_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf113', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg181_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf114', get_index_2, relu, None)
        return store
op114 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op115: ExternKernelSchedulerNode(ExternKernelOut)
op115.writes = [StarDep(name='buf115', mode=None)]
op115.unmet_dependencies = [StarDep(name='buf114', mode=None)]
op115.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op115.outputs = [
    buf115: ExternKernelOut
    buf115.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf115.users = [NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False)]
]
op115.node.kernel = extern_kernels.mm


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 2097152}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 2097152}, None),
        MemoryDep('buf115', c0, {c0: 2097152}, None)]
op116.met_dependencies = 
    [   MemoryDep('arg183_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg184_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg185_1', c1, {c0: 16384, c1: 128}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf116.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False),
    ]
]
op116.group.device = cuda:0
op116.group.iteration = (2097152, 1)
op116.sizes = ([16384, 128], [])
buf115_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op116_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf115', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf112', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg185_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg184_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf116', get_index_5, add_2, None)
        return store
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op117: ExternKernelSchedulerNode(ExternKernelOut)
op117.writes = [StarDep(name='buf117', mode=None)]
op117.unmet_dependencies = [StarDep(name='buf116', mode=None)]
op117.met_dependencies = [StarDep(name='arg186_1', mode=None)]
op117.outputs = [
    buf117: ExternKernelOut
    buf117.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf117.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False)]
]
op117.node.kernel = extern_kernels.mm


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 8388608}, None)]
op118.unmet_dependencies = [MemoryDep('buf117', c0, {c0: 8388608}, None)]
op118.met_dependencies = [MemoryDep('arg187_1', c1, {c0: 16384, c1: 512}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (8388608, 1)
op118.sizes = ([16384, 512], [])
buf117_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op118_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf117', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg187_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf118', get_index_2, relu, None)
        return store
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf118', mode=None)]
op119.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=True, is_weak=False)]
]
op119.node.kernel = extern_kernels.mm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 2097152}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 2097152}, None),
        MemoryDep('buf119', c0, {c0: 2097152}, None)]
op120.met_dependencies = 
    [   MemoryDep('arg189_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg190_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg191_1', c1, {c0: 16384, c1: 128}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf120.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False),
    ]
]
op120.group.device = cuda:0
op120.group.iteration = (2097152, 1)
op120.sizes = ([16384, 128], [])
buf119_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op120_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf119', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf116', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg191_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg190_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf120', get_index_5, add_2, None)
        return store
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf121.users = [NodeUser(node=SchedulerNode(name='op122'), can_inplace=True, is_weak=False)]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 8388608}, None)]
op122.unmet_dependencies = [MemoryDep('buf121', c0, {c0: 8388608}, None)]
op122.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 16384, c1: 512}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (8388608, 1)
op122.sizes = ([16384, 512], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op122_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf122', get_index_2, relu, None)
        return store
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf122', mode=None)]
op123.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf123.users = [NodeUser(node=SchedulerNode(name='op124'), can_inplace=True, is_weak=False)]
]
op123.node.kernel = extern_kernels.mm


op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 2097152}, None)]
op124.unmet_dependencies = 
    [   MemoryDep('buf120', c0, {c0: 2097152}, None),
        MemoryDep('buf123', c0, {c0: 2097152}, None)]
op124.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg160_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg161_1', c1, {c0: 16384, c1: 128}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf124.users = [NodeUser(node=ExternKernelSchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (2097152, 1)
op124.sizes = ([16384, 128], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op124_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf120', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg160_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf124', get_index_5, add_2, None)
        return store
op124 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op125: ExternKernelSchedulerNode(ExternKernelOut)
op125.writes = [StarDep(name='buf125', mode=None)]
op125.unmet_dependencies = [StarDep(name='buf124', mode=None)]
op125.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op125.outputs = [
    buf125: ExternKernelOut
    buf125.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf125.users = [NodeUser(node=SchedulerNode(name='op126'), can_inplace=True, is_weak=False)]
]
op125.node.kernel = extern_kernels.mm


op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 8388608}, None)]
op126.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 8388608}, None),
        MemoryDep('buf95', c0, {c0: 8388608}, None)]
op126.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg164_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg165_1', c1, {c0: 16384, c1: 512}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf126.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op127'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op126.group.device = cuda:0
op126.group.iteration = (8388608, 1)
op126.sizes = ([16384, 512], [])
buf125_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op126_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf125', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf95', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg164_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf126', get_index_5, add_2, None)
        return store
op126 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op127: ExternKernelSchedulerNode(ExternKernelOut)
op127.writes = [StarDep(name='buf127', mode=None)]
op127.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op127.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op127.outputs = [
    buf127: ExternKernelOut
    buf127.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf127.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=True, is_weak=False)]
]
op127.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 2097152}, None)]
op128.unmet_dependencies = [MemoryDep('buf127', c0, {c0: 2097152}, None)]
op128.met_dependencies = 
    [   MemoryDep('arg217_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg218_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg219_1', c1, {c0: 16384, c1: 128}, None)]
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf128.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op130'), can_inplace=False, is_weak=False),
    ]
]
op128.group.device = cuda:0
op128.group.iteration = (2097152, 1)
op128.sizes = ([16384, 128], [])
buf127_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op128_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf127', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg218_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf128', get_index_4, add_1, None)
        return store
op128 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op129.met_dependencies = [StarDep(name='arg192_1', mode=None), StarDep(name='arg193_1', mode=None)]
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf129.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.addmm


op130: ExternKernelSchedulerNode(ExternKernelOut)
op130.writes = [StarDep(name='buf130', mode=None)]
op130.unmet_dependencies = [StarDep(name='buf128', mode=None)]
op130.met_dependencies = [StarDep(name='arg194_1', mode=None), StarDep(name='arg195_1', mode=None)]
op130.outputs = [
    buf130: ExternKernelOut
    buf130.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.node.kernel = extern_kernels.addmm


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op131.met_dependencies = [StarDep(name='arg196_1', mode=None), StarDep(name='arg197_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf131.users = [NodeUser(node=ExternKernelSchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op131.node.kernel = extern_kernels.addmm


op132: ExternKernelSchedulerNode(FallbackKernel)
op132.writes = [StarDep(name='buf132', mode=None)]
op132.unmet_dependencies = 
    [   StarDep(name='buf129', mode=None),
        StarDep(name='buf130', mode=None),
        StarDep(name='buf131', mode=None)]
op132.met_dependencies = []
op132.outputs = [
    buf132: FallbackKernel
    buf132.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
    ]
]
op132.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op133: ExternKernelSchedulerNode(MultiOutput)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: MultiOutput
    buf133.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf133.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op133.node.kernel = None


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf133', mode=None)]
op137.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138: ExternKernelSchedulerNode(ExternKernelOut)
op138.writes = [StarDep(name='buf138', mode=None)]
op138.unmet_dependencies = [StarDep(name='buf126', mode=None)]
op138.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op138.outputs = [
    buf138: ExternKernelOut
    buf138.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf138.users = [NodeUser(node=SchedulerNode(name='op139'), can_inplace=True, is_weak=False)]
]
op138.node.kernel = extern_kernels.mm


op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 2097152}, None)]
op139.unmet_dependencies = 
    [   MemoryDep('buf137', c0, {c0: 2097152}, None),
        MemoryDep('buf138', c0, {c0: 2097152}, None)]
op139.met_dependencies = 
    [   MemoryDep('arg199_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg200_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg201_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg213_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg214_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg215_1', c1, {c0: 16384, c1: 128}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf139.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
    ]
]
op139.group.device = cuda:0
op139.group.iteration = (2097152, 1)
op139.sizes = ([16384, 128], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op139_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg199_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf138', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg213_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg215_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg214_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg201_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg200_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf139', get_index_8, add_4, None)
        return store
op139 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op140: ExternKernelSchedulerNode(ExternKernelOut)
op140.writes = [StarDep(name='buf140', mode=None)]
op140.unmet_dependencies = [StarDep(name='buf139', mode=None)]
op140.met_dependencies = [StarDep(name='arg220_1', mode=None)]
op140.outputs = [
    buf140: ExternKernelOut
    buf140.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf140.users = [NodeUser(node=SchedulerNode(name='op141'), can_inplace=True, is_weak=False)]
]
op140.node.kernel = extern_kernels.mm


op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 8388608}, None)]
op141.unmet_dependencies = [MemoryDep('buf140', c0, {c0: 8388608}, None)]
op141.met_dependencies = [MemoryDep('arg221_1', c1, {c0: 16384, c1: 512}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf141.users = [NodeUser(node=ExternKernelSchedulerNode(name='op142'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (8388608, 1)
op141.sizes = ([16384, 512], [])
buf140_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op141_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf140', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg221_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf141', get_index_2, relu, None)
        return store
op141 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op142: ExternKernelSchedulerNode(ExternKernelOut)
op142.writes = [StarDep(name='buf142', mode=None)]
op142.unmet_dependencies = [StarDep(name='buf141', mode=None)]
op142.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op142.outputs = [
    buf142: ExternKernelOut
    buf142.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf142.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False)]
]
op142.node.kernel = extern_kernels.mm


op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 2097152}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf139', c0, {c0: 2097152}, None),
        MemoryDep('buf142', c0, {c0: 2097152}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg224_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg225_1', c1, {c0: 16384, c1: 128}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf143.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op143.group.device = cuda:0
op143.group.iteration = (2097152, 1)
op143.sizes = ([16384, 128], [])
buf142_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op143_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf142', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg223_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf139', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg225_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg224_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf143', get_index_5, add_2, None)
        return store
op143 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 8388608}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 8388608}, None)]
op145.met_dependencies = [MemoryDep('arg227_1', c1, {c0: 16384, c1: 512}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (8388608, 1)
op145.sizes = ([16384, 512], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op145_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg227_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf145', get_index_2, relu, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 2097152}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf143', c0, {c0: 2097152}, None),
        MemoryDep('buf146', c0, {c0: 2097152}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg230_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg231_1', c1, {c0: 16384, c1: 128}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf147.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (2097152, 1)
op147.sizes = ([16384, 128], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op147_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg229_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf143', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg231_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg230_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_2, None)
        return store
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op148: ExternKernelSchedulerNode(ExternKernelOut)
op148.writes = [StarDep(name='buf148', mode=None)]
op148.unmet_dependencies = [StarDep(name='buf147', mode=None)]
op148.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op148.outputs = [
    buf148: ExternKernelOut
    buf148.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf148.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=True, is_weak=False)]
]
op148.node.kernel = extern_kernels.mm


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 8388608}, None)]
op149.unmet_dependencies = [MemoryDep('buf148', c0, {c0: 8388608}, None)]
op149.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 16384, c1: 512}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (8388608, 1)
op149.sizes = ([16384, 512], [])
buf148_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op149_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf148', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf149', get_index_2, relu, None)
        return store
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op150: ExternKernelSchedulerNode(ExternKernelOut)
op150.writes = [StarDep(name='buf150', mode=None)]
op150.unmet_dependencies = [StarDep(name='buf149', mode=None)]
op150.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op150.outputs = [
    buf150: ExternKernelOut
    buf150.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf150.users = [NodeUser(node=SchedulerNode(name='op151'), can_inplace=True, is_weak=False)]
]
op150.node.kernel = extern_kernels.mm


op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 2097152}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 2097152}, None),
        MemoryDep('buf150', c0, {c0: 2097152}, None)]
op151.met_dependencies = 
    [   MemoryDep('arg235_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg236_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg237_1', c1, {c0: 16384, c1: 128}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf151.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False),
    ]
]
op151.group.device = cuda:0
op151.group.iteration = (2097152, 1)
op151.sizes = ([16384, 128], [])
buf150_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op151_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf150', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg235_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf147', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg237_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg236_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf151', get_index_5, add_2, None)
        return store
op151 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op152: ExternKernelSchedulerNode(ExternKernelOut)
op152.writes = [StarDep(name='buf152', mode=None)]
op152.unmet_dependencies = [StarDep(name='buf151', mode=None)]
op152.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op152.outputs = [
    buf152: ExternKernelOut
    buf152.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf152.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=True, is_weak=False)]
]
op152.node.kernel = extern_kernels.mm


op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 8388608}, None)]
op153.unmet_dependencies = [MemoryDep('buf152', c0, {c0: 8388608}, None)]
op153.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 16384, c1: 512}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf153.users = [NodeUser(node=ExternKernelSchedulerNode(name='op154'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (8388608, 1)
op153.sizes = ([16384, 512], [])
buf152_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op153_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf152', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf153', get_index_2, relu, None)
        return store
op153 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op154: ExternKernelSchedulerNode(ExternKernelOut)
op154.writes = [StarDep(name='buf154', mode=None)]
op154.unmet_dependencies = [StarDep(name='buf153', mode=None)]
op154.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op154.outputs = [
    buf154: ExternKernelOut
    buf154.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf154.users = [NodeUser(node=SchedulerNode(name='op155'), can_inplace=True, is_weak=False)]
]
op154.node.kernel = extern_kernels.mm


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 2097152}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf151', c0, {c0: 2097152}, None),
        MemoryDep('buf154', c0, {c0: 2097152}, None)]
op155.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg206_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg207_1', c1, {c0: 16384, c1: 128}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf155.users = [NodeUser(node=ExternKernelSchedulerNode(name='op156'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (2097152, 1)
op155.sizes = ([16384, 128], [])
buf154_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op155_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf154', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf151', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg207_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg206_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf155', get_index_5, add_2, None)
        return store
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op156: ExternKernelSchedulerNode(ExternKernelOut)
op156.writes = [StarDep(name='buf156', mode=None)]
op156.unmet_dependencies = [StarDep(name='buf155', mode=None)]
op156.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op156.outputs = [
    buf156: ExternKernelOut
    buf156.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf156.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False)]
]
op156.node.kernel = extern_kernels.mm


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 8388608}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 8388608}, None),
        MemoryDep('buf156', c0, {c0: 8388608}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg209_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg210_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg211_1', c1, {c0: 16384, c1: 512}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (8388608, 1)
op157.sizes = ([16384, 512], [])
buf156_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op157_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf156', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf126', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg211_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg210_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf157', get_index_5, add_2, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.mm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 2097152}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 2097152}, None)]
op159.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg264_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg265_1', c1, {c0: 16384, c1: 128}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf159.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (2097152, 1)
op159.sizes = ([16384, 128], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op159_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg263_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg265_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg264_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf159', get_index_4, add_1, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg238_1', mode=None), StarDep(name='arg239_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf160.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op160.node.kernel = extern_kernels.addmm


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op161.met_dependencies = [StarDep(name='arg240_1', mode=None), StarDep(name='arg241_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf161.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.addmm


op162: ExternKernelSchedulerNode(ExternKernelOut)
op162.writes = [StarDep(name='buf162', mode=None)]
op162.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op162.met_dependencies = [StarDep(name='arg242_1', mode=None), StarDep(name='arg243_1', mode=None)]
op162.outputs = [
    buf162: ExternKernelOut
    buf162.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op162.node.kernel = extern_kernels.addmm


op163: ExternKernelSchedulerNode(FallbackKernel)
op163.writes = [StarDep(name='buf163', mode=None)]
op163.unmet_dependencies = 
    [   StarDep(name='buf160', mode=None),
        StarDep(name='buf161', mode=None),
        StarDep(name='buf162', mode=None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: FallbackKernel
    buf163.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf163.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op163.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op164: ExternKernelSchedulerNode(MultiOutput)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: MultiOutput
    buf164.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf164.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = None


op168: ExternKernelSchedulerNode(ExternKernelOut)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op168.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op168.outputs = [
    buf168: ExternKernelOut
    buf168.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf168.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op168.node.kernel = extern_kernels.mm


op169: ExternKernelSchedulerNode(ExternKernelOut)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op169.met_dependencies = [StarDep(name='arg258_1', mode=None)]
op169.outputs = [
    buf169: ExternKernelOut
    buf169.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op170'), can_inplace=True, is_weak=False)]
]
op169.node.kernel = extern_kernels.mm


op170: SchedulerNode(ComputedBuffer)
op170.writes = [MemoryDep('buf170', c0, {c0: 2097152}, None)]
op170.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 2097152}, None),
        MemoryDep('buf169', c0, {c0: 2097152}, None)]
op170.met_dependencies = 
    [   MemoryDep('arg245_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg246_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg247_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg259_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg260_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg261_1', c1, {c0: 16384, c1: 128}, None)]
op170.outputs = [
    buf170: ComputedBuffer
    buf170.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf170.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
    ]
]
op170.group.device = cuda:0
op170.group.iteration = (2097152, 1)
op170.sizes = ([16384, 128], [])
buf168_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg260_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg246_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op170_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf168', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf169', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg259_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg261_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg260_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg247_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg246_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf170', get_index_8, add_4, None)
        return store
op170 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op171: ExternKernelSchedulerNode(ExternKernelOut)
op171.writes = [StarDep(name='buf171', mode=None)]
op171.unmet_dependencies = [StarDep(name='buf170', mode=None)]
op171.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op171.outputs = [
    buf171: ExternKernelOut
    buf171.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf171.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=True, is_weak=False)]
]
op171.node.kernel = extern_kernels.mm


op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 8388608}, None)]
op172.unmet_dependencies = [MemoryDep('buf171', c0, {c0: 8388608}, None)]
op172.met_dependencies = [MemoryDep('arg267_1', c1, {c0: 16384, c1: 512}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (8388608, 1)
op172.sizes = ([16384, 512], [])
buf171_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg267_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op172_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf171', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg267_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf172', get_index_2, relu, None)
        return store
op172 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf172', mode=None)]
op173.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 2097152}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf170', c0, {c0: 2097152}, None),
        MemoryDep('buf173', c0, {c0: 2097152}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg269_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg270_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg271_1', c1, {c0: 16384, c1: 128}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf174.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (2097152, 1)
op174.sizes = ([16384, 128], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf170_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op174_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg269_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf170', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg271_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg270_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf174', get_index_5, add_2, None)
        return store
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf175.users = [NodeUser(node=SchedulerNode(name='op176'), can_inplace=True, is_weak=False)]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 8388608}, None)]
op176.unmet_dependencies = [MemoryDep('buf175', c0, {c0: 8388608}, None)]
op176.met_dependencies = [MemoryDep('arg273_1', c1, {c0: 16384, c1: 512}, None)]
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (8388608, 1)
op176.sizes = ([16384, 512], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op176_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg273_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf176', get_index_2, relu, None)
        return store
op176 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op177: ExternKernelSchedulerNode(ExternKernelOut)
op177.writes = [StarDep(name='buf177', mode=None)]
op177.unmet_dependencies = [StarDep(name='buf176', mode=None)]
op177.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op177.outputs = [
    buf177: ExternKernelOut
    buf177.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf177.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=True, is_weak=False)]
]
op177.node.kernel = extern_kernels.mm


op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 2097152}, None)]
op178.unmet_dependencies = 
    [   MemoryDep('buf174', c0, {c0: 2097152}, None),
        MemoryDep('buf177', c0, {c0: 2097152}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg276_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg277_1', c1, {c0: 16384, c1: 128}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf178.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op178.group.device = cuda:0
op178.group.iteration = (2097152, 1)
op178.sizes = ([16384, 128], [])
buf177_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op178_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf177', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg275_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf174', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg277_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg276_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf178', get_index_5, add_2, None)
        return store
op178 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op179: ExternKernelSchedulerNode(ExternKernelOut)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf178', mode=None)]
op179.met_dependencies = [StarDep(name='arg278_1', mode=None)]
op179.outputs = [
    buf179: ExternKernelOut
    buf179.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False)]
]
op179.node.kernel = extern_kernels.mm


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 8388608}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', c0, {c0: 8388608}, None)]
op180.met_dependencies = [MemoryDep('arg279_1', c1, {c0: 16384, c1: 512}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (8388608, 1)
op180.sizes = ([16384, 512], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op180_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg279_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf180', get_index_2, relu, None)
        return store
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf180', mode=None)]
op181.met_dependencies = [StarDep(name='arg280_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 2097152}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 2097152}, None),
        MemoryDep('buf181', c0, {c0: 2097152}, None)]
op182.met_dependencies = 
    [   MemoryDep('arg281_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg282_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg283_1', c1, {c0: 16384, c1: 128}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf182.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False),
    ]
]
op182.group.device = cuda:0
op182.group.iteration = (2097152, 1)
op182.sizes = ([16384, 128], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg283_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op182_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg281_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf178', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg283_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg282_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf182', get_index_5, add_2, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf182', mode=None)]
op183.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf183.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=True, is_weak=False)]
]
op183.node.kernel = extern_kernels.mm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 8388608}, None)]
op184.unmet_dependencies = [MemoryDep('buf183', c0, {c0: 8388608}, None)]
op184.met_dependencies = [MemoryDep('arg249_1', c1, {c0: 16384, c1: 512}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (8388608, 1)
op184.sizes = ([16384, 512], [])
buf183_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op184_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf183', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg249_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf184', get_index_2, relu, None)
        return store
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False)]
]
op185.node.kernel = extern_kernels.mm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 2097152}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf182', c0, {c0: 2097152}, None),
        MemoryDep('buf185', c0, {c0: 2097152}, None)]
op186.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg252_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg253_1', c1, {c0: 16384, c1: 128}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (2097152, 1)
op186.sizes = ([16384, 128], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf182_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op186_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf182', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg253_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg252_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf186', get_index_5, add_2, None)
        return store
op186 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op187: ExternKernelSchedulerNode(ExternKernelOut)
op187.writes = [StarDep(name='buf187', mode=None)]
op187.unmet_dependencies = [StarDep(name='buf186', mode=None)]
op187.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op187.outputs = [
    buf187: ExternKernelOut
    buf187.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf187.users = [NodeUser(node=SchedulerNode(name='op188'), can_inplace=True, is_weak=False)]
]
op187.node.kernel = extern_kernels.mm


op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 8388608}, None)]
op188.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 8388608}, None),
        MemoryDep('buf187', c0, {c0: 8388608}, None)]
op188.met_dependencies = 
    [   MemoryDep('arg255_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg256_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg257_1', c1, {c0: 16384, c1: 512}, None)]
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf188.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False),
    ]
]
op188.group.device = cuda:0
op188.group.iteration = (8388608, 1)
op188.sizes = ([16384, 512], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg256_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op188_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg255_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg257_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg256_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf188', get_index_5, add_2, None)
        return store
op188 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op189: ExternKernelSchedulerNode(ExternKernelOut)
op189.writes = [StarDep(name='buf189', mode=None)]
op189.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op189.met_dependencies = [StarDep(name='arg308_1', mode=None)]
op189.outputs = [
    buf189: ExternKernelOut
    buf189.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf189.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=True, is_weak=False)]
]
op189.node.kernel = extern_kernels.mm


op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 2097152}, None)]
op190.unmet_dependencies = [MemoryDep('buf189', c0, {c0: 2097152}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg309_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg310_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg311_1', c1, {c0: 16384, c1: 128}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf190.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False),
    ]
]
op190.group.device = cuda:0
op190.group.iteration = (2097152, 1)
op190.sizes = ([16384, 128], [])
buf189_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg311_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg310_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op190_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf189', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg309_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg311_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg310_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf190', get_index_4, add_1, None)
        return store
op190 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op191: ExternKernelSchedulerNode(ExternKernelOut)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op191.met_dependencies = [StarDep(name='arg284_1', mode=None), StarDep(name='arg285_1', mode=None)]
op191.outputs = [
    buf191: ExternKernelOut
    buf191.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op191.node.kernel = extern_kernels.addmm


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf190', mode=None)]
op192.met_dependencies = [StarDep(name='arg286_1', mode=None), StarDep(name='arg287_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.node.kernel = extern_kernels.addmm


op193: ExternKernelSchedulerNode(ExternKernelOut)
op193.writes = [StarDep(name='buf193', mode=None)]
op193.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op193.met_dependencies = [StarDep(name='arg288_1', mode=None), StarDep(name='arg289_1', mode=None)]
op193.outputs = [
    buf193: ExternKernelOut
    buf193.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.node.kernel = extern_kernels.addmm


op194: ExternKernelSchedulerNode(FallbackKernel)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = 
    [   StarDep(name='buf191', mode=None),
        StarDep(name='buf192', mode=None),
        StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: FallbackKernel
    buf194.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf194.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
    ]
]
op194.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op195: ExternKernelSchedulerNode(MultiOutput)
op195.writes = [StarDep(name='buf195', mode=None)]
op195.unmet_dependencies = [StarDep(name='buf194', mode=None)]
op195.met_dependencies = []
op195.outputs = [
    buf195: MultiOutput
    buf195.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf195.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op195.node.kernel = None


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf195', mode=None)]
op199.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: ExternKernelSchedulerNode(ExternKernelOut)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = [StarDep(name='buf188', mode=None)]
op200.met_dependencies = [StarDep(name='arg304_1', mode=None)]
op200.outputs = [
    buf200: ExternKernelOut
    buf200.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf200.users = [NodeUser(node=SchedulerNode(name='op201'), can_inplace=True, is_weak=False)]
]
op200.node.kernel = extern_kernels.mm


op201: SchedulerNode(ComputedBuffer)
op201.writes = [MemoryDep('buf201', c0, {c0: 2097152}, None)]
op201.unmet_dependencies = 
    [   MemoryDep('buf199', c0, {c0: 2097152}, None),
        MemoryDep('buf200', c0, {c0: 2097152}, None)]
op201.met_dependencies = 
    [   MemoryDep('arg291_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg292_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg293_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg305_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg306_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg307_1', c1, {c0: 16384, c1: 128}, None)]
op201.outputs = [
    buf201: ComputedBuffer
    buf201.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf201.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False),
    ]
]
op201.group.device = cuda:0
op201.group.iteration = (2097152, 1)
op201.sizes = ([16384, 128], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg306_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op201_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg291_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf200', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg305_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg307_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg306_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg293_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg292_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf201', get_index_8, add_4, None)
        return store
op201 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op202: ExternKernelSchedulerNode(ExternKernelOut)
op202.writes = [StarDep(name='buf202', mode=None)]
op202.unmet_dependencies = [StarDep(name='buf201', mode=None)]
op202.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op202.outputs = [
    buf202: ExternKernelOut
    buf202.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.node.kernel = extern_kernels.mm


op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 8388608}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 8388608}, None)]
op203.met_dependencies = [MemoryDep('arg313_1', c1, {c0: 16384, c1: 512}, None)]
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf203.users = [NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.group.device = cuda:0
op203.group.iteration = (8388608, 1)
op203.sizes = ([16384, 512], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op203_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg313_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf203', get_index_2, relu, None)
        return store
op203 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op204: ExternKernelSchedulerNode(ExternKernelOut)
op204.writes = [StarDep(name='buf204', mode=None)]
op204.unmet_dependencies = [StarDep(name='buf203', mode=None)]
op204.met_dependencies = [StarDep(name='arg314_1', mode=None)]
op204.outputs = [
    buf204: ExternKernelOut
    buf204.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf204.users = [NodeUser(node=SchedulerNode(name='op205'), can_inplace=True, is_weak=False)]
]
op204.node.kernel = extern_kernels.mm


op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 2097152}, None)]
op205.unmet_dependencies = 
    [   MemoryDep('buf201', c0, {c0: 2097152}, None),
        MemoryDep('buf204', c0, {c0: 2097152}, None)]
op205.met_dependencies = 
    [   MemoryDep('arg315_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg316_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg317_1', c1, {c0: 16384, c1: 128}, None)]
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf205.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op205.group.device = cuda:0
op205.group.iteration = (2097152, 1)
op205.sizes = ([16384, 128], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg316_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op205_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg315_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf201', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg317_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg316_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf205', get_index_5, add_2, None)
        return store
op205 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op206: ExternKernelSchedulerNode(ExternKernelOut)
op206.writes = [StarDep(name='buf206', mode=None)]
op206.unmet_dependencies = [StarDep(name='buf205', mode=None)]
op206.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op206.outputs = [
    buf206: ExternKernelOut
    buf206.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf206.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=True, is_weak=False)]
]
op206.node.kernel = extern_kernels.mm


op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 8388608}, None)]
op207.unmet_dependencies = [MemoryDep('buf206', c0, {c0: 8388608}, None)]
op207.met_dependencies = [MemoryDep('arg319_1', c1, {c0: 16384, c1: 512}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (8388608, 1)
op207.sizes = ([16384, 512], [])
buf206_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op207_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf206', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg319_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf207', get_index_2, relu, None)
        return store
op207 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op208: ExternKernelSchedulerNode(ExternKernelOut)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg320_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelOut
    buf208.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False)]
]
op208.node.kernel = extern_kernels.mm


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 2097152}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf205', c0, {c0: 2097152}, None),
        MemoryDep('buf208', c0, {c0: 2097152}, None)]
op209.met_dependencies = 
    [   MemoryDep('arg321_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg322_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg323_1', c1, {c0: 16384, c1: 128}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf209.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False),
    ]
]
op209.group.device = cuda:0
op209.group.iteration = (2097152, 1)
op209.sizes = ([16384, 128], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg323_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg322_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op209_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg321_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf205', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg323_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg322_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf209', get_index_5, add_2, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf210.users = [NodeUser(node=SchedulerNode(name='op211'), can_inplace=True, is_weak=False)]
]
op210.node.kernel = extern_kernels.mm


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 8388608}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 8388608}, None)]
op211.met_dependencies = [MemoryDep('arg325_1', c1, {c0: 16384, c1: 512}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (8388608, 1)
op211.sizes = ([16384, 512], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op211_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg325_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf211', get_index_2, relu, None)
        return store
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf211', mode=None)]
op212.met_dependencies = [StarDep(name='arg326_1', mode=None)]
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf212.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=True, is_weak=False)]
]
op212.node.kernel = extern_kernels.mm


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 2097152}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf209', c0, {c0: 2097152}, None),
        MemoryDep('buf212', c0, {c0: 2097152}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg327_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg328_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg329_1', c1, {c0: 16384, c1: 128}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf213.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (2097152, 1)
op213.sizes = ([16384, 128], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg328_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op213_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg327_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf209', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg328_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf213', get_index_5, add_2, None)
        return store
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op214: ExternKernelSchedulerNode(ExternKernelOut)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf213', mode=None)]
op214.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op214.outputs = [
    buf214: ExternKernelOut
    buf214.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf214.users = [NodeUser(node=SchedulerNode(name='op215'), can_inplace=True, is_weak=False)]
]
op214.node.kernel = extern_kernels.mm


op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 8388608}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 8388608}, None)]
op215.met_dependencies = [MemoryDep('arg295_1', c1, {c0: 16384, c1: 512}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf215.users = [NodeUser(node=ExternKernelSchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (8388608, 1)
op215.sizes = ([16384, 512], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg295_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op215_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg295_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf215', get_index_2, relu, None)
        return store
op215 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op216: ExternKernelSchedulerNode(ExternKernelOut)
op216.writes = [StarDep(name='buf216', mode=None)]
op216.unmet_dependencies = [StarDep(name='buf215', mode=None)]
op216.met_dependencies = [StarDep(name='arg296_1', mode=None)]
op216.outputs = [
    buf216: ExternKernelOut
    buf216.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf216.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=True, is_weak=False)]
]
op216.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 2097152}, None)]
op217.unmet_dependencies = 
    [   MemoryDep('buf213', c0, {c0: 2097152}, None),
        MemoryDep('buf216', c0, {c0: 2097152}, None)]
op217.met_dependencies = 
    [   MemoryDep('arg297_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg298_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg299_1', c1, {c0: 16384, c1: 128}, None)]
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (2097152, 1)
op217.sizes = ([16384, 128], [])
buf216_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op217_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf216', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg297_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf213', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg299_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg298_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf217', get_index_5, add_2, None)
        return store
op217 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf217', mode=None)]
op218.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=True, is_weak=False)]
]
op218.node.kernel = extern_kernels.mm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 8388608}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf188', c0, {c0: 8388608}, None),
        MemoryDep('buf218', c0, {c0: 8388608}, None)]
op219.met_dependencies = 
    [   MemoryDep('arg301_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg302_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg303_1', c1, {c0: 16384, c1: 512}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf219.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False),
    ]
]
op219.group.device = cuda:0
op219.group.iteration = (8388608, 1)
op219.sizes = ([16384, 512], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg302_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op219_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg303_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg302_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf219', get_index_5, add_2, None)
        return store
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg354_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf220.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False)]
]
op220.node.kernel = extern_kernels.mm


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 2097152}, None)]
op221.unmet_dependencies = [MemoryDep('buf220', c0, {c0: 2097152}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg355_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg356_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg357_1', c1, {c0: 16384, c1: 128}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op223'), can_inplace=False, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (2097152, 1)
op221.sizes = ([16384, 128], [])
buf220_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg355_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg357_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg356_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op221_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf220', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg355_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg357_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg356_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf221', get_index_4, add_1, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg330_1', mode=None), StarDep(name='arg331_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf222.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op222.node.kernel = extern_kernels.addmm


op223: ExternKernelSchedulerNode(ExternKernelOut)
op223.writes = [StarDep(name='buf223', mode=None)]
op223.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op223.met_dependencies = [StarDep(name='arg332_1', mode=None), StarDep(name='arg333_1', mode=None)]
op223.outputs = [
    buf223: ExternKernelOut
    buf223.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op223.node.kernel = extern_kernels.addmm


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op224.met_dependencies = [StarDep(name='arg334_1', mode=None), StarDep(name='arg335_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op224.node.kernel = extern_kernels.addmm


op225: ExternKernelSchedulerNode(FallbackKernel)
op225.writes = [StarDep(name='buf225', mode=None)]
op225.unmet_dependencies = 
    [   StarDep(name='buf222', mode=None),
        StarDep(name='buf223', mode=None),
        StarDep(name='buf224', mode=None)]
op225.met_dependencies = []
op225.outputs = [
    buf225: FallbackKernel
    buf225.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf225.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
    ]
]
op225.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op226: ExternKernelSchedulerNode(MultiOutput)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: MultiOutput
    buf226.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf226.users = [NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False)]
]
op226.node.kernel = None


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf226', mode=None)]
op230.met_dependencies = [StarDep(name='arg336_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf230.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op230.node.kernel = extern_kernels.mm


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op231.met_dependencies = [StarDep(name='arg350_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf231.users = [NodeUser(node=SchedulerNode(name='op232'), can_inplace=True, is_weak=False)]
]
op231.node.kernel = extern_kernels.mm


op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 2097152}, None)]
op232.unmet_dependencies = 
    [   MemoryDep('buf230', c0, {c0: 2097152}, None),
        MemoryDep('buf231', c0, {c0: 2097152}, None)]
op232.met_dependencies = 
    [   MemoryDep('arg337_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg338_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg339_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg351_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg352_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg353_1', c1, {c0: 16384, c1: 128}, None)]
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (2097152, 1)
op232.sizes = ([16384, 128], [])
buf230_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg351_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg353_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg352_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg339_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg338_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op232_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf230', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg337_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf231', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg351_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg353_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg352_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg339_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg338_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf232', get_index_8, add_4, None)
        return store
op232 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op233: ExternKernelSchedulerNode(ExternKernelOut)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = [StarDep(name='arg358_1', mode=None)]
op233.outputs = [
    buf233: ExternKernelOut
    buf233.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=True, is_weak=False)]
]
op233.node.kernel = extern_kernels.mm


op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 8388608}, None)]
op234.unmet_dependencies = [MemoryDep('buf233', c0, {c0: 8388608}, None)]
op234.met_dependencies = [MemoryDep('arg359_1', c1, {c0: 16384, c1: 512}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (8388608, 1)
op234.sizes = ([16384, 512], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg359_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op234_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf233', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg359_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf234', get_index_2, relu, None)
        return store
op234 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op235: ExternKernelSchedulerNode(ExternKernelOut)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf234', mode=None)]
op235.met_dependencies = [StarDep(name='arg360_1', mode=None)]
op235.outputs = [
    buf235: ExternKernelOut
    buf235.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf235.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=True, is_weak=False)]
]
op235.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 2097152}, None)]
op236.unmet_dependencies = 
    [   MemoryDep('buf232', c0, {c0: 2097152}, None),
        MemoryDep('buf235', c0, {c0: 2097152}, None)]
op236.met_dependencies = 
    [   MemoryDep('arg361_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg362_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg363_1', c1, {c0: 16384, c1: 128}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf236.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op236.group.device = cuda:0
op236.group.iteration = (2097152, 1)
op236.sizes = ([16384, 128], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg361_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg363_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg362_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op236_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg361_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg363_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg362_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf236', get_index_5, add_2, None)
        return store
op236 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf236', mode=None)]
op237.met_dependencies = [StarDep(name='arg364_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=True, is_weak=False)]
]
op237.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 8388608}, None)]
op238.unmet_dependencies = [MemoryDep('buf237', c0, {c0: 8388608}, None)]
op238.met_dependencies = [MemoryDep('arg365_1', c1, {c0: 16384, c1: 512}, None)]
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (8388608, 1)
op238.sizes = ([16384, 512], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg365_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op238_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg365_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf238', get_index_2, relu, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg366_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 2097152}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf236', c0, {c0: 2097152}, None),
        MemoryDep('buf239', c0, {c0: 2097152}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg367_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg368_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg369_1', c1, {c0: 16384, c1: 128}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf240.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (2097152, 1)
op240.sizes = ([16384, 128], [])
buf239_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg367_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg369_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg368_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op240_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf239', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg367_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf236', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg369_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg368_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf240', get_index_5, add_2, None)
        return store
op240 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op241: ExternKernelSchedulerNode(ExternKernelOut)
op241.writes = [StarDep(name='buf241', mode=None)]
op241.unmet_dependencies = [StarDep(name='buf240', mode=None)]
op241.met_dependencies = [StarDep(name='arg370_1', mode=None)]
op241.outputs = [
    buf241: ExternKernelOut
    buf241.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.node.kernel = extern_kernels.mm


op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 8388608}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 8388608}, None)]
op242.met_dependencies = [MemoryDep('arg371_1', c1, {c0: 16384, c1: 512}, None)]
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf242.users = [NodeUser(node=ExternKernelSchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (8388608, 1)
op242.sizes = ([16384, 512], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg371_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op242_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg371_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf242', get_index_2, relu, None)
        return store
op242 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op243: ExternKernelSchedulerNode(ExternKernelOut)
op243.writes = [StarDep(name='buf243', mode=None)]
op243.unmet_dependencies = [StarDep(name='buf242', mode=None)]
op243.met_dependencies = [StarDep(name='arg372_1', mode=None)]
op243.outputs = [
    buf243: ExternKernelOut
    buf243.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf243.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False)]
]
op243.node.kernel = extern_kernels.mm


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 2097152}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 2097152}, None),
        MemoryDep('buf243', c0, {c0: 2097152}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg373_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg374_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg375_1', c1, {c0: 16384, c1: 128}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf244.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False),
    ]
]
op244.group.device = cuda:0
op244.group.iteration = (2097152, 1)
op244.sizes = ([16384, 128], [])
buf243_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg373_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg375_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg374_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op244_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf243', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg373_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf240', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg375_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg374_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf244', get_index_5, add_2, None)
        return store
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg340_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.mm


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 8388608}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 8388608}, None)]
op246.met_dependencies = [MemoryDep('arg341_1', c1, {c0: 16384, c1: 512}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (8388608, 1)
op246.sizes = ([16384, 512], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op246_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg341_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf246', get_index_2, relu, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg342_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.mm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 2097152}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf244', c0, {c0: 2097152}, None),
        MemoryDep('buf247', c0, {c0: 2097152}, None)]
op248.met_dependencies = 
    [   MemoryDep('arg343_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg344_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg345_1', c1, {c0: 16384, c1: 128}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (2097152, 1)
op248.sizes = ([16384, 128], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg344_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op248_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg343_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf244', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg344_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf248', get_index_5, add_2, None)
        return store
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf249.users = [NodeUser(node=SchedulerNode(name='op250'), can_inplace=True, is_weak=False)]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 8388608}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf219', c0, {c0: 8388608}, None),
        MemoryDep('buf249', c0, {c0: 8388608}, None)]
op250.met_dependencies = 
    [   MemoryDep('arg347_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg348_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg349_1', c1, {c0: 16384, c1: 512}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf250.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op255'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
    ]
]
op250.group.device = cuda:0
op250.group.iteration = (8388608, 1)
op250.sizes = ([16384, 512], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op250_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg347_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf219', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg349_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg348_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf250', get_index_5, add_2, None)
        return store
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op251: ExternKernelSchedulerNode(ExternKernelOut)
op251.writes = [StarDep(name='buf251', mode=None)]
op251.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op251.met_dependencies = [StarDep(name='arg400_1', mode=None)]
op251.outputs = [
    buf251: ExternKernelOut
    buf251.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf251.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=True, is_weak=False)]
]
op251.node.kernel = extern_kernels.mm


op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 2097152}, None)]
op252.unmet_dependencies = [MemoryDep('buf251', c0, {c0: 2097152}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg401_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg402_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg403_1', c1, {c0: 16384, c1: 128}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf252.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
    ]
]
op252.group.device = cuda:0
op252.group.iteration = (2097152, 1)
op252.sizes = ([16384, 128], [])
buf251_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg401_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg403_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg402_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op252_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf251', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg401_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg403_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg402_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf252', get_index_4, add_1, None)
        return store
op252 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op253: ExternKernelSchedulerNode(ExternKernelOut)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op253.met_dependencies = [StarDep(name='arg376_1', mode=None), StarDep(name='arg377_1', mode=None)]
op253.outputs = [
    buf253: ExternKernelOut
    buf253.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op253.node.kernel = extern_kernels.addmm


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf252', mode=None)]
op254.met_dependencies = [StarDep(name='arg378_1', mode=None), StarDep(name='arg379_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf254.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254.node.kernel = extern_kernels.addmm


op255: ExternKernelSchedulerNode(ExternKernelOut)
op255.writes = [StarDep(name='buf255', mode=None)]
op255.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op255.met_dependencies = [StarDep(name='arg380_1', mode=None), StarDep(name='arg381_1', mode=None)]
op255.outputs = [
    buf255: ExternKernelOut
    buf255.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.node.kernel = extern_kernels.addmm


op256: ExternKernelSchedulerNode(FallbackKernel)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = 
    [   StarDep(name='buf253', mode=None),
        StarDep(name='buf254', mode=None),
        StarDep(name='buf255', mode=None)]
op256.met_dependencies = []
op256.outputs = [
    buf256: FallbackKernel
    buf256.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf256.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op260'), can_inplace=False, is_weak=False),
    ]
]
op256.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op257: ExternKernelSchedulerNode(MultiOutput)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = []
op257.outputs = [
    buf257: MultiOutput
    buf257.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op257.node.kernel = None


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op261.met_dependencies = [StarDep(name='arg382_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op261.node.kernel = extern_kernels.mm


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf250', mode=None)]
op262.met_dependencies = [StarDep(name='arg396_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf262.users = [NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False)]
]
op262.node.kernel = extern_kernels.mm


op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 2097152}, None)]
op263.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 2097152}, None),
        MemoryDep('buf262', c0, {c0: 2097152}, None)]
op263.met_dependencies = 
    [   MemoryDep('arg383_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg384_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg385_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg397_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg398_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg399_1', c1, {c0: 16384, c1: 128}, None)]
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf263.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False),
    ]
]
op263.group.device = cuda:0
op263.group.iteration = (2097152, 1)
op263.sizes = ([16384, 128], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg383_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg397_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg399_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg398_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg385_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg384_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op263_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg383_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf262', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg397_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg399_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg398_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg385_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg384_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf263', get_index_8, add_4, None)
        return store
op263 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op264: ExternKernelSchedulerNode(ExternKernelOut)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = [StarDep(name='buf263', mode=None)]
op264.met_dependencies = [StarDep(name='arg404_1', mode=None)]
op264.outputs = [
    buf264: ExternKernelOut
    buf264.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf264.users = [NodeUser(node=SchedulerNode(name='op265'), can_inplace=True, is_weak=False)]
]
op264.node.kernel = extern_kernels.mm


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 8388608}, None)]
op265.unmet_dependencies = [MemoryDep('buf264', c0, {c0: 8388608}, None)]
op265.met_dependencies = [MemoryDep('arg405_1', c1, {c0: 16384, c1: 512}, None)]
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (8388608, 1)
op265.sizes = ([16384, 512], [])
buf264_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg405_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op265_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf264', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg405_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf265', get_index_2, relu, None)
        return store
op265 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf265', mode=None)]
op266.met_dependencies = [StarDep(name='arg406_1', mode=None)]
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf266.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=True, is_weak=False)]
]
op266.node.kernel = extern_kernels.mm


op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 2097152}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf263', c0, {c0: 2097152}, None),
        MemoryDep('buf266', c0, {c0: 2097152}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg407_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg408_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg409_1', c1, {c0: 16384, c1: 128}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf267.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (2097152, 1)
op267.sizes = ([16384, 128], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg407_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg409_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg408_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op267_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg407_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf263', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg409_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg408_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf267', get_index_5, add_2, None)
        return store
op267 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op268: ExternKernelSchedulerNode(ExternKernelOut)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf267', mode=None)]
op268.met_dependencies = [StarDep(name='arg410_1', mode=None)]
op268.outputs = [
    buf268: ExternKernelOut
    buf268.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.node.kernel = extern_kernels.mm


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 8388608}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 8388608}, None)]
op269.met_dependencies = [MemoryDep('arg411_1', c1, {c0: 16384, c1: 512}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (8388608, 1)
op269.sizes = ([16384, 512], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg411_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op269_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg411_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf269', get_index_2, relu, None)
        return store
op269 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op270: ExternKernelSchedulerNode(ExternKernelOut)
op270.writes = [StarDep(name='buf270', mode=None)]
op270.unmet_dependencies = [StarDep(name='buf269', mode=None)]
op270.met_dependencies = [StarDep(name='arg412_1', mode=None)]
op270.outputs = [
    buf270: ExternKernelOut
    buf270.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf270.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=True, is_weak=False)]
]
op270.node.kernel = extern_kernels.mm


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 2097152}, None)]
op271.unmet_dependencies = 
    [   MemoryDep('buf267', c0, {c0: 2097152}, None),
        MemoryDep('buf270', c0, {c0: 2097152}, None)]
op271.met_dependencies = 
    [   MemoryDep('arg413_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg414_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg415_1', c1, {c0: 16384, c1: 128}, None)]
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf271.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False),
    ]
]
op271.group.device = cuda:0
op271.group.iteration = (2097152, 1)
op271.sizes = ([16384, 128], [])
buf270_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg413_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg415_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg414_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op271_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf270', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg413_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf267', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg415_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg414_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf271', get_index_5, add_2, None)
        return store
op271 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg416_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False)]
]
op272.node.kernel = extern_kernels.mm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 8388608}, None)]
op273.unmet_dependencies = [MemoryDep('buf272', c0, {c0: 8388608}, None)]
op273.met_dependencies = [MemoryDep('arg417_1', c1, {c0: 16384, c1: 512}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (8388608, 1)
op273.sizes = ([16384, 512], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg417_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op273_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg417_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf273', get_index_2, relu, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg418_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 2097152}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf271', c0, {c0: 2097152}, None),
        MemoryDep('buf274', c0, {c0: 2097152}, None)]
op275.met_dependencies = 
    [   MemoryDep('arg419_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg420_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg421_1', c1, {c0: 16384, c1: 128}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf275.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (2097152, 1)
op275.sizes = ([16384, 128], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg419_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg421_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg420_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op275_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg419_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf271', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg421_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg420_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf275', get_index_5, add_2, None)
        return store
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op276: ExternKernelSchedulerNode(ExternKernelOut)
op276.writes = [StarDep(name='buf276', mode=None)]
op276.unmet_dependencies = [StarDep(name='buf275', mode=None)]
op276.met_dependencies = [StarDep(name='arg386_1', mode=None)]
op276.outputs = [
    buf276: ExternKernelOut
    buf276.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf276.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=True, is_weak=False)]
]
op276.node.kernel = extern_kernels.mm


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 8388608}, None)]
op277.unmet_dependencies = [MemoryDep('buf276', c0, {c0: 8388608}, None)]
op277.met_dependencies = [MemoryDep('arg387_1', c1, {c0: 16384, c1: 512}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (8388608, 1)
op277.sizes = ([16384, 512], [])
buf276_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg387_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op277_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf276', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg387_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf277', get_index_2, relu, None)
        return store
op277 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op278: ExternKernelSchedulerNode(ExternKernelOut)
op278.writes = [StarDep(name='buf278', mode=None)]
op278.unmet_dependencies = [StarDep(name='buf277', mode=None)]
op278.met_dependencies = [StarDep(name='arg388_1', mode=None)]
op278.outputs = [
    buf278: ExternKernelOut
    buf278.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf278.users = [NodeUser(node=SchedulerNode(name='op279'), can_inplace=True, is_weak=False)]
]
op278.node.kernel = extern_kernels.mm


op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 2097152}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 2097152}, None),
        MemoryDep('buf278', c0, {c0: 2097152}, None)]
op279.met_dependencies = 
    [   MemoryDep('arg389_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg390_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg391_1', c1, {c0: 16384, c1: 128}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf279.users = [NodeUser(node=ExternKernelSchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (2097152, 1)
op279.sizes = ([16384, 128], [])
buf278_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg389_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg391_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg390_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op279_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf278', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg389_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf275', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg391_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg390_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf279', get_index_5, add_2, None)
        return store
op279 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op280: ExternKernelSchedulerNode(ExternKernelOut)
op280.writes = [StarDep(name='buf280', mode=None)]
op280.unmet_dependencies = [StarDep(name='buf279', mode=None)]
op280.met_dependencies = [StarDep(name='arg392_1', mode=None)]
op280.outputs = [
    buf280: ExternKernelOut
    buf280.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf280.users = [NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False)]
]
op280.node.kernel = extern_kernels.mm


op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 8388608}, None)]
op281.unmet_dependencies = 
    [   MemoryDep('buf250', c0, {c0: 8388608}, None),
        MemoryDep('buf280', c0, {c0: 8388608}, None)]
op281.met_dependencies = 
    [   MemoryDep('arg393_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg394_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg395_1', c1, {c0: 16384, c1: 512}, None)]
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf281.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False),
    ]
]
op281.group.device = cuda:0
op281.group.iteration = (8388608, 1)
op281.sizes = ([16384, 512], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg393_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg395_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg394_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op281_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg393_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg395_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg394_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf281', get_index_5, add_2, None)
        return store
op281 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op282: ExternKernelSchedulerNode(ExternKernelOut)
op282.writes = [StarDep(name='buf282', mode=None)]
op282.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op282.met_dependencies = [StarDep(name='arg446_1', mode=None)]
op282.outputs = [
    buf282: ExternKernelOut
    buf282.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf282.users = [NodeUser(node=SchedulerNode(name='op283'), can_inplace=True, is_weak=False)]
]
op282.node.kernel = extern_kernels.mm


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 2097152}, None)]
op283.unmet_dependencies = [MemoryDep('buf282', c0, {c0: 2097152}, None)]
op283.met_dependencies = 
    [   MemoryDep('arg447_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg448_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg449_1', c1, {c0: 16384, c1: 128}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf283.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op283.group.device = cuda:0
op283.group.iteration = (2097152, 1)
op283.sizes = ([16384, 128], [])
buf282_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg447_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg449_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg448_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op283_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf282', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg447_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg449_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg448_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf283', get_index_4, add_1, None)
        return store
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op284: ExternKernelSchedulerNode(ExternKernelOut)
op284.writes = [StarDep(name='buf284', mode=None)]
op284.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op284.met_dependencies = [StarDep(name='arg422_1', mode=None), StarDep(name='arg423_1', mode=None)]
op284.outputs = [
    buf284: ExternKernelOut
    buf284.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op284.node.kernel = extern_kernels.addmm


op285: ExternKernelSchedulerNode(ExternKernelOut)
op285.writes = [StarDep(name='buf285', mode=None)]
op285.unmet_dependencies = [StarDep(name='buf283', mode=None)]
op285.met_dependencies = [StarDep(name='arg424_1', mode=None), StarDep(name='arg425_1', mode=None)]
op285.outputs = [
    buf285: ExternKernelOut
    buf285.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op285.node.kernel = extern_kernels.addmm


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op286.met_dependencies = [StarDep(name='arg426_1', mode=None), StarDep(name='arg427_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf286.users = [NodeUser(node=ExternKernelSchedulerNode(name='op287'), can_inplace=False, is_weak=False)]
]
op286.node.kernel = extern_kernels.addmm


op287: ExternKernelSchedulerNode(FallbackKernel)
op287.writes = [StarDep(name='buf287', mode=None)]
op287.unmet_dependencies = 
    [   StarDep(name='buf284', mode=None),
        StarDep(name='buf285', mode=None),
        StarDep(name='buf286', mode=None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: FallbackKernel
    buf287.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf287.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op291'), can_inplace=False, is_weak=False),
    ]
]
op287.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op288: ExternKernelSchedulerNode(MultiOutput)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: MultiOutput
    buf288.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op288.node.kernel = None


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf288', mode=None)]
op292.met_dependencies = [StarDep(name='arg428_1', mode=None)]
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op292.node.kernel = extern_kernels.mm


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf281', mode=None)]
op293.met_dependencies = [StarDep(name='arg442_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op293.node.kernel = extern_kernels.mm


op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 2097152}, None)]
op294.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 2097152}, None),
        MemoryDep('buf293', c0, {c0: 2097152}, None)]
op294.met_dependencies = 
    [   MemoryDep('arg429_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg430_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg431_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg443_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg444_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg445_1', c1, {c0: 16384, c1: 128}, None)]
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf294.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op294.group.device = cuda:0
op294.group.iteration = (2097152, 1)
op294.sizes = ([16384, 128], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg429_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg443_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg445_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg444_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg431_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg430_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op294_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg429_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf293', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg443_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg445_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg444_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg431_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg430_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf294', get_index_8, add_4, None)
        return store
op294 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op295.met_dependencies = [StarDep(name='arg450_1', mode=None)]
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False)]
]
op295.node.kernel = extern_kernels.mm


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 8388608}, None)]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 8388608}, None)]
op296.met_dependencies = [MemoryDep('arg451_1', c1, {c0: 16384, c1: 512}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (8388608, 1)
op296.sizes = ([16384, 512], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg451_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op296_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg451_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf296', get_index_2, relu, None)
        return store
op296 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op297: ExternKernelSchedulerNode(ExternKernelOut)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg452_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelOut
    buf297.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False)]
]
op297.node.kernel = extern_kernels.mm


op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 2097152}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf294', c0, {c0: 2097152}, None),
        MemoryDep('buf297', c0, {c0: 2097152}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg453_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg454_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg455_1', c1, {c0: 16384, c1: 128}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf298.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (2097152, 1)
op298.sizes = ([16384, 128], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg453_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg455_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg454_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op298_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf297', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg453_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf294', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg455_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg454_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf298', get_index_5, add_2, None)
        return store
op298 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op299: ExternKernelSchedulerNode(ExternKernelOut)
op299.writes = [StarDep(name='buf299', mode=None)]
op299.unmet_dependencies = [StarDep(name='buf298', mode=None)]
op299.met_dependencies = [StarDep(name='arg456_1', mode=None)]
op299.outputs = [
    buf299: ExternKernelOut
    buf299.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf299.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=True, is_weak=False)]
]
op299.node.kernel = extern_kernels.mm


op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 8388608}, None)]
op300.unmet_dependencies = [MemoryDep('buf299', c0, {c0: 8388608}, None)]
op300.met_dependencies = [MemoryDep('arg457_1', c1, {c0: 16384, c1: 512}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (8388608, 1)
op300.sizes = ([16384, 512], [])
buf299_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg457_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op300_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf299', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg457_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf300', get_index_2, relu, None)
        return store
op300 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf300', mode=None)]
op301.met_dependencies = [StarDep(name='arg458_1', mode=None)]
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.mm


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 2097152}, None)]
op302.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 2097152}, None),
        MemoryDep('buf301', c0, {c0: 2097152}, None)]
op302.met_dependencies = 
    [   MemoryDep('arg459_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg460_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg461_1', c1, {c0: 16384, c1: 128}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf302.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
    ]
]
op302.group.device = cuda:0
op302.group.iteration = (2097152, 1)
op302.sizes = ([16384, 128], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg459_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg461_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg460_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op302_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg459_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf298', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg461_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg460_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf302', get_index_5, add_2, None)
        return store
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op303: ExternKernelSchedulerNode(ExternKernelOut)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg462_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelOut
    buf303.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf303.users = [NodeUser(node=SchedulerNode(name='op304'), can_inplace=True, is_weak=False)]
]
op303.node.kernel = extern_kernels.mm


op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 8388608}, None)]
op304.unmet_dependencies = [MemoryDep('buf303', c0, {c0: 8388608}, None)]
op304.met_dependencies = [MemoryDep('arg463_1', c1, {c0: 16384, c1: 512}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf304.users = [NodeUser(node=ExternKernelSchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (8388608, 1)
op304.sizes = ([16384, 512], [])
buf303_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg463_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op304_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf303', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg463_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf304', get_index_2, relu, None)
        return store
op304 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op305: ExternKernelSchedulerNode(ExternKernelOut)
op305.writes = [StarDep(name='buf305', mode=None)]
op305.unmet_dependencies = [StarDep(name='buf304', mode=None)]
op305.met_dependencies = [StarDep(name='arg464_1', mode=None)]
op305.outputs = [
    buf305: ExternKernelOut
    buf305.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf305.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False)]
]
op305.node.kernel = extern_kernels.mm


op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 2097152}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf302', c0, {c0: 2097152}, None),
        MemoryDep('buf305', c0, {c0: 2097152}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg465_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg466_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg467_1', c1, {c0: 16384, c1: 128}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf306.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
    ]
]
op306.group.device = cuda:0
op306.group.iteration = (2097152, 1)
op306.sizes = ([16384, 128], [])
buf305_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg465_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg467_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg466_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op306_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf305', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg465_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf302', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg467_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg466_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf306', get_index_5, add_2, None)
        return store
op306 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg432_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 8388608}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 8388608}, None)]
op308.met_dependencies = [MemoryDep('arg433_1', c1, {c0: 16384, c1: 512}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (8388608, 1)
op308.sizes = ([16384, 512], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg433_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op308_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg433_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf308', get_index_2, relu, None)
        return store
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg434_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 2097152}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 2097152}, None),
        MemoryDep('buf309', c0, {c0: 2097152}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg435_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg436_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg437_1', c1, {c0: 16384, c1: 128}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (2097152, 1)
op310.sizes = ([16384, 128], [])
buf309_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg435_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg437_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg436_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op310_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf309', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg435_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf306', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg437_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg436_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf310', get_index_5, add_2, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg438_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 8388608}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf281', c0, {c0: 8388608}, None),
        MemoryDep('buf311', c0, {c0: 8388608}, None)]
op312.met_dependencies = 
    [   MemoryDep('arg439_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg440_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg441_1', c1, {c0: 16384, c1: 512}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf312.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op324'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (8388608, 1)
op312.sizes = ([16384, 512], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg439_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg441_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg440_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op312_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg439_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf281', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg441_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg440_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf312', get_index_5, add_2, None)
        return store
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg492_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.mm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 2097152}, None)]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 2097152}, None)]
op314.met_dependencies = 
    [   MemoryDep('arg493_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg494_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg495_1', c1, {c0: 16384, c1: 128}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf314.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op316'), can_inplace=False, is_weak=False),
    ]
]
op314.group.device = cuda:0
op314.group.iteration = (2097152, 1)
op314.sizes = ([16384, 128], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg493_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg495_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg494_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op314_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg493_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg495_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg494_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf314', get_index_4, add_1, None)
        return store
op314 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op315: ExternKernelSchedulerNode(ExternKernelOut)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg468_1', mode=None), StarDep(name='arg469_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelOut
    buf315.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf315.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.addmm


op316: ExternKernelSchedulerNode(ExternKernelOut)
op316.writes = [StarDep(name='buf316', mode=None)]
op316.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op316.met_dependencies = [StarDep(name='arg470_1', mode=None), StarDep(name='arg471_1', mode=None)]
op316.outputs = [
    buf316: ExternKernelOut
    buf316.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf316.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op316.node.kernel = extern_kernels.addmm


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op317.met_dependencies = [StarDep(name='arg472_1', mode=None), StarDep(name='arg473_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op317.node.kernel = extern_kernels.addmm


op318: ExternKernelSchedulerNode(FallbackKernel)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = 
    [   StarDep(name='buf315', mode=None),
        StarDep(name='buf316', mode=None),
        StarDep(name='buf317', mode=None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: FallbackKernel
    buf318.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf318.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False),
    ]
]
op318.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op319: ExternKernelSchedulerNode(MultiOutput)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf318', mode=None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: MultiOutput
    buf319.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False)]
]
op319.node.kernel = None


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf319', mode=None)]
op323.met_dependencies = [StarDep(name='arg474_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op323.node.kernel = extern_kernels.mm


op324: ExternKernelSchedulerNode(ExternKernelOut)
op324.writes = [StarDep(name='buf324', mode=None)]
op324.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op324.met_dependencies = [StarDep(name='arg488_1', mode=None)]
op324.outputs = [
    buf324: ExternKernelOut
    buf324.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf324.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=True, is_weak=False)]
]
op324.node.kernel = extern_kernels.mm


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 2097152}, None)]
op325.unmet_dependencies = 
    [   MemoryDep('buf323', c0, {c0: 2097152}, None),
        MemoryDep('buf324', c0, {c0: 2097152}, None)]
op325.met_dependencies = 
    [   MemoryDep('arg475_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg476_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg477_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg489_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg490_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg491_1', c1, {c0: 16384, c1: 128}, None)]
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf325.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False),
    ]
]
op325.group.device = cuda:0
op325.group.iteration = (2097152, 1)
op325.sizes = ([16384, 128], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg475_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg489_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg491_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg490_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg477_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg476_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op325_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg475_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf324', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg489_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg491_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg490_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg477_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg476_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf325', get_index_8, add_4, None)
        return store
op325 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf325', mode=None)]
op326.met_dependencies = [StarDep(name='arg496_1', mode=None)]
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=True, is_weak=False)]
]
op326.node.kernel = extern_kernels.mm


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 8388608}, None)]
op327.unmet_dependencies = [MemoryDep('buf326', c0, {c0: 8388608}, None)]
op327.met_dependencies = [MemoryDep('arg497_1', c1, {c0: 16384, c1: 512}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (8388608, 1)
op327.sizes = ([16384, 512], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg497_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op327_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg497_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf327', get_index_2, relu, None)
        return store
op327 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg498_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf328.users = [NodeUser(node=SchedulerNode(name='op329'), can_inplace=True, is_weak=False)]
]
op328.node.kernel = extern_kernels.mm


op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 2097152}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf325', c0, {c0: 2097152}, None),
        MemoryDep('buf328', c0, {c0: 2097152}, None)]
op329.met_dependencies = 
    [   MemoryDep('arg499_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg500_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg501_1', c1, {c0: 16384, c1: 128}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf329.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False),
    ]
]
op329.group.device = cuda:0
op329.group.iteration = (2097152, 1)
op329.sizes = ([16384, 128], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg499_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg501_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg500_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op329_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg499_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf325', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg501_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg500_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf329', get_index_5, add_2, None)
        return store
op329 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op330: ExternKernelSchedulerNode(ExternKernelOut)
op330.writes = [StarDep(name='buf330', mode=None)]
op330.unmet_dependencies = [StarDep(name='buf329', mode=None)]
op330.met_dependencies = [StarDep(name='arg502_1', mode=None)]
op330.outputs = [
    buf330: ExternKernelOut
    buf330.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf330.users = [NodeUser(node=SchedulerNode(name='op331'), can_inplace=True, is_weak=False)]
]
op330.node.kernel = extern_kernels.mm


op331: SchedulerNode(ComputedBuffer)
op331.writes = [MemoryDep('buf331', c0, {c0: 8388608}, None)]
op331.unmet_dependencies = [MemoryDep('buf330', c0, {c0: 8388608}, None)]
op331.met_dependencies = [MemoryDep('arg503_1', c1, {c0: 16384, c1: 512}, None)]
op331.outputs = [
    buf331: ComputedBuffer
    buf331.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf331.users = [NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False)]
]
op331.group.device = cuda:0
op331.group.iteration = (8388608, 1)
op331.sizes = ([16384, 512], [])
buf330_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg503_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf331_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op331_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf330', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg503_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf331', get_index_2, relu, None)
        return store
op331 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op332: ExternKernelSchedulerNode(ExternKernelOut)
op332.writes = [StarDep(name='buf332', mode=None)]
op332.unmet_dependencies = [StarDep(name='buf331', mode=None)]
op332.met_dependencies = [StarDep(name='arg504_1', mode=None)]
op332.outputs = [
    buf332: ExternKernelOut
    buf332.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf332.users = [NodeUser(node=SchedulerNode(name='op333'), can_inplace=True, is_weak=False)]
]
op332.node.kernel = extern_kernels.mm


op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 2097152}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf329', c0, {c0: 2097152}, None),
        MemoryDep('buf332', c0, {c0: 2097152}, None)]
op333.met_dependencies = 
    [   MemoryDep('arg505_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg506_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg507_1', c1, {c0: 16384, c1: 128}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf333.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False),
    ]
]
op333.group.device = cuda:0
op333.group.iteration = (2097152, 1)
op333.sizes = ([16384, 128], [])
buf332_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg505_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg507_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg506_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op333_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf332', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg505_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf329', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg507_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg506_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf333', get_index_5, add_2, None)
        return store
op333 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op334: ExternKernelSchedulerNode(ExternKernelOut)
op334.writes = [StarDep(name='buf334', mode=None)]
op334.unmet_dependencies = [StarDep(name='buf333', mode=None)]
op334.met_dependencies = [StarDep(name='arg508_1', mode=None)]
op334.outputs = [
    buf334: ExternKernelOut
    buf334.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf334.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False)]
]
op334.node.kernel = extern_kernels.mm


op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 8388608}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 8388608}, None)]
op335.met_dependencies = [MemoryDep('arg509_1', c1, {c0: 16384, c1: 512}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (8388608, 1)
op335.sizes = ([16384, 512], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg509_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op335_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg509_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf335', get_index_2, relu, None)
        return store
op335 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg510_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False)]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 2097152}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf333', c0, {c0: 2097152}, None),
        MemoryDep('buf336', c0, {c0: 2097152}, None)]
op337.met_dependencies = 
    [   MemoryDep('arg511_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg512_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg513_1', c1, {c0: 16384, c1: 128}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf337.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
    ]
]
op337.group.device = cuda:0
op337.group.iteration = (2097152, 1)
op337.sizes = ([16384, 128], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg511_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg513_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg512_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op337_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg511_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf333', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg513_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg512_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf337', get_index_5, add_2, None)
        return store
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg478_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf338.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=True, is_weak=False)]
]
op338.node.kernel = extern_kernels.mm


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 8388608}, None)]
op339.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 8388608}, None)]
op339.met_dependencies = [MemoryDep('arg479_1', c1, {c0: 16384, c1: 512}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (8388608, 1)
op339.sizes = ([16384, 512], [])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg479_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op339_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg479_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf339', get_index_2, relu, None)
        return store
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op340: ExternKernelSchedulerNode(ExternKernelOut)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf339', mode=None)]
op340.met_dependencies = [StarDep(name='arg480_1', mode=None)]
op340.outputs = [
    buf340: ExternKernelOut
    buf340.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.mm


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 2097152}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf337', c0, {c0: 2097152}, None),
        MemoryDep('buf340', c0, {c0: 2097152}, None)]
op341.met_dependencies = 
    [   MemoryDep('arg481_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg482_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg483_1', c1, {c0: 16384, c1: 128}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (2097152, 1)
op341.sizes = ([16384, 128], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg481_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg483_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg482_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op341_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg481_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf337', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg483_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg482_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf341', get_index_5, add_2, None)
        return store
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf341', mode=None)]
op342.met_dependencies = [StarDep(name='arg484_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False)]
]
op342.node.kernel = extern_kernels.mm


op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 8388608}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 8388608}, None),
        MemoryDep('buf342', c0, {c0: 8388608}, None)]
op343.met_dependencies = 
    [   MemoryDep('arg485_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg486_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg487_1', c1, {c0: 16384, c1: 512}, None)]
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf343.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op344'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op343.group.device = cuda:0
op343.group.iteration = (8388608, 1)
op343.sizes = ([16384, 512], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg485_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg487_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg486_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op343_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg485_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf312', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg487_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg486_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf343', get_index_5, add_2, None)
        return store
op343 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op344: ExternKernelSchedulerNode(ExternKernelOut)
op344.writes = [StarDep(name='buf344', mode=None)]
op344.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op344.met_dependencies = [StarDep(name='arg538_1', mode=None)]
op344.outputs = [
    buf344: ExternKernelOut
    buf344.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf344.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=True, is_weak=False)]
]
op344.node.kernel = extern_kernels.mm


op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 2097152}, None)]
op345.unmet_dependencies = [MemoryDep('buf344', c0, {c0: 2097152}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg539_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg540_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg541_1', c1, {c0: 16384, c1: 128}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf345.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False),
    ]
]
op345.group.device = cuda:0
op345.group.iteration = (2097152, 1)
op345.sizes = ([16384, 128], [])
buf344_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg539_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg541_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg540_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op345_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf344', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg539_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg541_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg540_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf345', get_index_4, add_1, None)
        return store
op345 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op346: ExternKernelSchedulerNode(ExternKernelOut)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op346.met_dependencies = [StarDep(name='arg514_1', mode=None), StarDep(name='arg515_1', mode=None)]
op346.outputs = [
    buf346: ExternKernelOut
    buf346.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op346.node.kernel = extern_kernels.addmm


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf345', mode=None)]
op347.met_dependencies = [StarDep(name='arg516_1', mode=None), StarDep(name='arg517_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf347.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op347.node.kernel = extern_kernels.addmm


op348: ExternKernelSchedulerNode(ExternKernelOut)
op348.writes = [StarDep(name='buf348', mode=None)]
op348.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op348.met_dependencies = [StarDep(name='arg518_1', mode=None), StarDep(name='arg519_1', mode=None)]
op348.outputs = [
    buf348: ExternKernelOut
    buf348.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op348.node.kernel = extern_kernels.addmm


op349: ExternKernelSchedulerNode(FallbackKernel)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = 
    [   StarDep(name='buf346', mode=None),
        StarDep(name='buf347', mode=None),
        StarDep(name='buf348', mode=None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: FallbackKernel
    buf349.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf349.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False),
    ]
]
op349.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op350: ExternKernelSchedulerNode(MultiOutput)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: MultiOutput
    buf350.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op350.node.kernel = None


op354: ExternKernelSchedulerNode(ExternKernelOut)
op354.writes = [StarDep(name='buf354', mode=None)]
op354.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op354.met_dependencies = [StarDep(name='arg520_1', mode=None)]
op354.outputs = [
    buf354: ExternKernelOut
    buf354.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf354.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op354.node.kernel = extern_kernels.mm


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf343', mode=None)]
op355.met_dependencies = [StarDep(name='arg534_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False)]
]
op355.node.kernel = extern_kernels.mm


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 2097152}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf354', c0, {c0: 2097152}, None),
        MemoryDep('buf355', c0, {c0: 2097152}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg521_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg522_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg523_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg535_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg536_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg537_1', c1, {c0: 16384, c1: 128}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (2097152, 1)
op356.sizes = ([16384, 128], [])
buf354_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg521_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg535_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg537_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg536_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg523_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg522_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op356_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf354', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg521_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf355', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg535_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg537_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg536_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg523_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg522_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf356', get_index_8, add_4, None)
        return store
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op357: ExternKernelSchedulerNode(ExternKernelOut)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg542_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelOut
    buf357.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf357.users = [NodeUser(node=SchedulerNode(name='op358'), can_inplace=True, is_weak=False)]
]
op357.node.kernel = extern_kernels.mm


op358: SchedulerNode(ComputedBuffer)
op358.writes = [MemoryDep('buf358', c0, {c0: 8388608}, None)]
op358.unmet_dependencies = [MemoryDep('buf357', c0, {c0: 8388608}, None)]
op358.met_dependencies = [MemoryDep('arg543_1', c1, {c0: 16384, c1: 512}, None)]
op358.outputs = [
    buf358: ComputedBuffer
    buf358.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op358.group.device = cuda:0
op358.group.iteration = (8388608, 1)
op358.sizes = ([16384, 512], [])
buf357_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg543_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf358_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op358_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf357', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg543_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf358', get_index_2, relu, None)
        return store
op358 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf358', mode=None)]
op359.met_dependencies = [StarDep(name='arg544_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf359.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=True, is_weak=False)]
]
op359.node.kernel = extern_kernels.mm


op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 2097152}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 2097152}, None),
        MemoryDep('buf359', c0, {c0: 2097152}, None)]
op360.met_dependencies = 
    [   MemoryDep('arg545_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg546_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg547_1', c1, {c0: 16384, c1: 128}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf360.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
    ]
]
op360.group.device = cuda:0
op360.group.iteration = (2097152, 1)
op360.sizes = ([16384, 128], [])
buf359_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg545_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg547_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg546_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op360_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf359', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg545_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg547_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg546_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf360', get_index_5, add_2, None)
        return store
op360 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op361: ExternKernelSchedulerNode(ExternKernelOut)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = [StarDep(name='arg548_1', mode=None)]
op361.outputs = [
    buf361: ExternKernelOut
    buf361.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.mm


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 8388608}, None)]
op362.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 8388608}, None)]
op362.met_dependencies = [MemoryDep('arg549_1', c1, {c0: 16384, c1: 512}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (8388608, 1)
op362.sizes = ([16384, 512], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg549_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op362_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg549_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf362', get_index_2, relu, None)
        return store
op362 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op363: ExternKernelSchedulerNode(ExternKernelOut)
op363.writes = [StarDep(name='buf363', mode=None)]
op363.unmet_dependencies = [StarDep(name='buf362', mode=None)]
op363.met_dependencies = [StarDep(name='arg550_1', mode=None)]
op363.outputs = [
    buf363: ExternKernelOut
    buf363.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf363.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False)]
]
op363.node.kernel = extern_kernels.mm


op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 2097152}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf360', c0, {c0: 2097152}, None),
        MemoryDep('buf363', c0, {c0: 2097152}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg551_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg552_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg553_1', c1, {c0: 16384, c1: 128}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf364.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False),
    ]
]
op364.group.device = cuda:0
op364.group.iteration = (2097152, 1)
op364.sizes = ([16384, 128], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg551_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg553_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg552_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op364_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg551_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg553_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg552_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf364', get_index_5, add_2, None)
        return store
op364 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg554_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 8388608}, None)]
op366.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 8388608}, None)]
op366.met_dependencies = [MemoryDep('arg555_1', c1, {c0: 16384, c1: 512}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (8388608, 1)
op366.sizes = ([16384, 512], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg555_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op366_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg555_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf366', get_index_2, relu, None)
        return store
op366 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op367: ExternKernelSchedulerNode(ExternKernelOut)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg556_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelOut
    buf367.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.node.kernel = extern_kernels.mm


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 2097152}, None)]
op368.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 2097152}, None),
        MemoryDep('buf367', c0, {c0: 2097152}, None)]
op368.met_dependencies = 
    [   MemoryDep('arg557_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg558_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg559_1', c1, {c0: 16384, c1: 128}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf368.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
    ]
]
op368.group.device = cuda:0
op368.group.iteration = (2097152, 1)
op368.sizes = ([16384, 128], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg557_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg559_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg558_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op368_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg557_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf364', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg559_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg558_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf368', get_index_5, add_2, None)
        return store
op368 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op369: ExternKernelSchedulerNode(ExternKernelOut)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op369.met_dependencies = [StarDep(name='arg524_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelOut
    buf369.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.node.kernel = extern_kernels.mm


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 8388608}, None)]
op370.unmet_dependencies = [MemoryDep('buf369', c0, {c0: 8388608}, None)]
op370.met_dependencies = [MemoryDep('arg525_1', c1, {c0: 16384, c1: 512}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (8388608, 1)
op370.sizes = ([16384, 512], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg525_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op370_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg525_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf370', get_index_2, relu, None)
        return store
op370 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op371.met_dependencies = [StarDep(name='arg526_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf371.users = [NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False)]
]
op371.node.kernel = extern_kernels.mm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 2097152}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf368', c0, {c0: 2097152}, None),
        MemoryDep('buf371', c0, {c0: 2097152}, None)]
op372.met_dependencies = 
    [   MemoryDep('arg527_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg528_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg529_1', c1, {c0: 16384, c1: 128}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (2097152, 1)
op372.sizes = ([16384, 128], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg527_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg529_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg528_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op372_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg527_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf368', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg529_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg528_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf372', get_index_5, add_2, None)
        return store
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op373: ExternKernelSchedulerNode(ExternKernelOut)
op373.writes = [StarDep(name='buf373', mode=None)]
op373.unmet_dependencies = [StarDep(name='buf372', mode=None)]
op373.met_dependencies = [StarDep(name='arg530_1', mode=None)]
op373.outputs = [
    buf373: ExternKernelOut
    buf373.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf373.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False)]
]
op373.node.kernel = extern_kernels.mm


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 8388608}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf343', c0, {c0: 8388608}, None),
        MemoryDep('buf373', c0, {c0: 8388608}, None)]
op374.met_dependencies = 
    [   MemoryDep('arg531_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg532_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg533_1', c1, {c0: 16384, c1: 512}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf374.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False),
    ]
]
op374.group.device = cuda:0
op374.group.iteration = (8388608, 1)
op374.sizes = ([16384, 512], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg531_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg533_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg532_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op374_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg531_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg533_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg532_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf374', get_index_5, add_2, None)
        return store
op374 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op375.met_dependencies = [StarDep(name='arg584_1', mode=None)]
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False)]
]
op375.node.kernel = extern_kernels.mm


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 2097152}, None)]
op376.unmet_dependencies = [MemoryDep('buf375', c0, {c0: 2097152}, None)]
op376.met_dependencies = 
    [   MemoryDep('arg585_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg586_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg587_1', c1, {c0: 16384, c1: 128}, None)]
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf376.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op376.group.device = cuda:0
op376.group.iteration = (2097152, 1)
op376.sizes = ([16384, 128], [])
buf375_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg585_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg587_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg586_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op376_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf375', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg585_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg587_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg586_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf376', get_index_4, add_1, None)
        return store
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg560_1', mode=None), StarDep(name='arg561_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op377.node.kernel = extern_kernels.addmm


op378: ExternKernelSchedulerNode(ExternKernelOut)
op378.writes = [StarDep(name='buf378', mode=None)]
op378.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op378.met_dependencies = [StarDep(name='arg562_1', mode=None), StarDep(name='arg563_1', mode=None)]
op378.outputs = [
    buf378: ExternKernelOut
    buf378.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.node.kernel = extern_kernels.addmm


op379: ExternKernelSchedulerNode(ExternKernelOut)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op379.met_dependencies = [StarDep(name='arg564_1', mode=None), StarDep(name='arg565_1', mode=None)]
op379.outputs = [
    buf379: ExternKernelOut
    buf379.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.node.kernel = extern_kernels.addmm


op380: ExternKernelSchedulerNode(FallbackKernel)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = 
    [   StarDep(name='buf377', mode=None),
        StarDep(name='buf378', mode=None),
        StarDep(name='buf379', mode=None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: FallbackKernel
    buf380.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf380.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op381'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op383'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False),
    ]
]
op380.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op381: ExternKernelSchedulerNode(MultiOutput)
op381.writes = [StarDep(name='buf381', mode=None)]
op381.unmet_dependencies = [StarDep(name='buf380', mode=None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: MultiOutput
    buf381.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op381.node.kernel = None


op385: ExternKernelSchedulerNode(ExternKernelOut)
op385.writes = [StarDep(name='buf385', mode=None)]
op385.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op385.met_dependencies = [StarDep(name='arg566_1', mode=None)]
op385.outputs = [
    buf385: ExternKernelOut
    buf385.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf385.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op385.node.kernel = extern_kernels.mm


op386: ExternKernelSchedulerNode(ExternKernelOut)
op386.writes = [StarDep(name='buf386', mode=None)]
op386.unmet_dependencies = [StarDep(name='buf374', mode=None)]
op386.met_dependencies = [StarDep(name='arg580_1', mode=None)]
op386.outputs = [
    buf386: ExternKernelOut
    buf386.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op386.node.kernel = extern_kernels.mm


op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 2097152}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf385', c0, {c0: 2097152}, None),
        MemoryDep('buf386', c0, {c0: 2097152}, None)]
op387.met_dependencies = 
    [   MemoryDep('arg567_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg568_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg569_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg581_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg582_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg583_1', c1, {c0: 16384, c1: 128}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf387.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
    ]
]
op387.group.device = cuda:0
op387.group.iteration = (2097152, 1)
op387.sizes = ([16384, 128], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg567_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg581_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg583_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg582_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg569_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg568_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op387_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg567_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf386', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg581_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg583_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg582_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg569_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg568_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf387', get_index_8, add_4, None)
        return store
op387 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op388: ExternKernelSchedulerNode(ExternKernelOut)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg588_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelOut
    buf388.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
]
op388.node.kernel = extern_kernels.mm


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 8388608}, None)]
op389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 8388608}, None)]
op389.met_dependencies = [MemoryDep('arg589_1', c1, {c0: 16384, c1: 512}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (8388608, 1)
op389.sizes = ([16384, 512], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg589_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op389_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg589_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, relu, None)
        return store
op389 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op390: ExternKernelSchedulerNode(ExternKernelOut)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op390.met_dependencies = [StarDep(name='arg590_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelOut
    buf390.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False)]
]
op390.node.kernel = extern_kernels.mm


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 2097152}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf387', c0, {c0: 2097152}, None),
        MemoryDep('buf390', c0, {c0: 2097152}, None)]
op391.met_dependencies = 
    [   MemoryDep('arg591_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg592_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg593_1', c1, {c0: 16384, c1: 128}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf391.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (2097152, 1)
op391.sizes = ([16384, 128], [])
buf390_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg591_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg593_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg592_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op391_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf390', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg591_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf387', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg593_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg592_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf391', get_index_5, add_2, None)
        return store
op391 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op392: ExternKernelSchedulerNode(ExternKernelOut)
op392.writes = [StarDep(name='buf392', mode=None)]
op392.unmet_dependencies = [StarDep(name='buf391', mode=None)]
op392.met_dependencies = [StarDep(name='arg594_1', mode=None)]
op392.outputs = [
    buf392: ExternKernelOut
    buf392.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf392.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False)]
]
op392.node.kernel = extern_kernels.mm


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 8388608}, None)]
op393.unmet_dependencies = [MemoryDep('buf392', c0, {c0: 8388608}, None)]
op393.met_dependencies = [MemoryDep('arg595_1', c1, {c0: 16384, c1: 512}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (8388608, 1)
op393.sizes = ([16384, 512], [])
buf392_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg595_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op393_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf392', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg595_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf393', get_index_2, relu, None)
        return store
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op394: ExternKernelSchedulerNode(ExternKernelOut)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf393', mode=None)]
op394.met_dependencies = [StarDep(name='arg596_1', mode=None)]
op394.outputs = [
    buf394: ExternKernelOut
    buf394.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
]
op394.node.kernel = extern_kernels.mm


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 2097152}, None)]
op395.unmet_dependencies = 
    [   MemoryDep('buf391', c0, {c0: 2097152}, None),
        MemoryDep('buf394', c0, {c0: 2097152}, None)]
op395.met_dependencies = 
    [   MemoryDep('arg597_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg598_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg599_1', c1, {c0: 16384, c1: 128}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf395.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (2097152, 1)
op395.sizes = ([16384, 128], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg597_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg599_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg598_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op395_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg597_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf391', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg599_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg598_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf395', get_index_5, add_2, None)
        return store
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = [StarDep(name='buf395', mode=None)]
op396.met_dependencies = [StarDep(name='arg600_1', mode=None)]
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf396.users = [NodeUser(node=SchedulerNode(name='op397'), can_inplace=True, is_weak=False)]
]
op396.node.kernel = extern_kernels.mm


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 8388608}, None)]
op397.unmet_dependencies = [MemoryDep('buf396', c0, {c0: 8388608}, None)]
op397.met_dependencies = [MemoryDep('arg601_1', c1, {c0: 16384, c1: 512}, None)]
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf397.users = [NodeUser(node=ExternKernelSchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op397.group.device = cuda:0
op397.group.iteration = (8388608, 1)
op397.sizes = ([16384, 512], [])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg601_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op397_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg601_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf397', get_index_2, relu, None)
        return store
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op398: ExternKernelSchedulerNode(ExternKernelOut)
op398.writes = [StarDep(name='buf398', mode=None)]
op398.unmet_dependencies = [StarDep(name='buf397', mode=None)]
op398.met_dependencies = [StarDep(name='arg602_1', mode=None)]
op398.outputs = [
    buf398: ExternKernelOut
    buf398.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=True, is_weak=False)]
]
op398.node.kernel = extern_kernels.mm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 2097152}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf395', c0, {c0: 2097152}, None),
        MemoryDep('buf398', c0, {c0: 2097152}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg603_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg604_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg605_1', c1, {c0: 16384, c1: 128}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf399.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
]
op399.group.device = cuda:0
op399.group.iteration = (2097152, 1)
op399.sizes = ([16384, 128], [])
buf398_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg603_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg605_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg604_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op399_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf398', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg603_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf395', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg605_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg604_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf399', get_index_5, add_2, None)
        return store
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf399', mode=None)]
op400.met_dependencies = [StarDep(name='arg570_1', mode=None)]
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False)]
]
op400.node.kernel = extern_kernels.mm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 8388608}, None)]
op401.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 8388608}, None)]
op401.met_dependencies = [MemoryDep('arg571_1', c1, {c0: 16384, c1: 512}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (8388608, 1)
op401.sizes = ([16384, 512], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg571_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op401_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg571_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf401', get_index_2, relu, None)
        return store
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op402: ExternKernelSchedulerNode(ExternKernelOut)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op402.met_dependencies = [StarDep(name='arg572_1', mode=None)]
op402.outputs = [
    buf402: ExternKernelOut
    buf402.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op402.node.kernel = extern_kernels.mm


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 2097152}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf399', c0, {c0: 2097152}, None),
        MemoryDep('buf402', c0, {c0: 2097152}, None)]
op403.met_dependencies = 
    [   MemoryDep('arg573_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg574_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg575_1', c1, {c0: 16384, c1: 128}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf403.users = [NodeUser(node=ExternKernelSchedulerNode(name='op404'), can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (2097152, 1)
op403.sizes = ([16384, 128], [])
buf402_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg573_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg575_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg574_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op403_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf402', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg573_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf399', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg575_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg574_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf403', get_index_5, add_2, None)
        return store
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op404: ExternKernelSchedulerNode(ExternKernelOut)
op404.writes = [StarDep(name='buf404', mode=None)]
op404.unmet_dependencies = [StarDep(name='buf403', mode=None)]
op404.met_dependencies = [StarDep(name='arg576_1', mode=None)]
op404.outputs = [
    buf404: ExternKernelOut
    buf404.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
]
op404.node.kernel = extern_kernels.mm


op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 8388608}, None)]
op405.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 8388608}, None),
        MemoryDep('buf404', c0, {c0: 8388608}, None)]
op405.met_dependencies = 
    [   MemoryDep('arg577_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg578_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg579_1', c1, {c0: 16384, c1: 512}, None)]
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf405.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False),
    ]
]
op405.group.device = cuda:0
op405.group.iteration = (8388608, 1)
op405.sizes = ([16384, 512], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg577_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg579_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg578_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op405_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg577_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf374', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg579_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg578_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf405', get_index_5, add_2, None)
        return store
op405 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op406: ExternKernelSchedulerNode(ExternKernelOut)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op406.met_dependencies = [StarDep(name='arg630_1', mode=None)]
op406.outputs = [
    buf406: ExternKernelOut
    buf406.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf406.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False)]
]
op406.node.kernel = extern_kernels.mm


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 2097152}, None)]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 2097152}, None)]
op407.met_dependencies = 
    [   MemoryDep('arg631_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg632_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg633_1', c1, {c0: 16384, c1: 128}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf407.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op409'), can_inplace=False, is_weak=False),
    ]
]
op407.group.device = cuda:0
op407.group.iteration = (2097152, 1)
op407.sizes = ([16384, 128], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg631_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg633_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg632_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op407_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg631_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg633_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg632_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf407', get_index_4, add_1, None)
        return store
op407 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg606_1', mode=None), StarDep(name='arg607_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf408.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op408.node.kernel = extern_kernels.addmm


op409: ExternKernelSchedulerNode(ExternKernelOut)
op409.writes = [StarDep(name='buf409', mode=None)]
op409.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op409.met_dependencies = [StarDep(name='arg608_1', mode=None), StarDep(name='arg609_1', mode=None)]
op409.outputs = [
    buf409: ExternKernelOut
    buf409.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op409.node.kernel = extern_kernels.addmm


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op410.met_dependencies = [StarDep(name='arg610_1', mode=None), StarDep(name='arg611_1', mode=None)]
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.node.kernel = extern_kernels.addmm


op411: ExternKernelSchedulerNode(FallbackKernel)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = 
    [   StarDep(name='buf408', mode=None),
        StarDep(name='buf409', mode=None),
        StarDep(name='buf410', mode=None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: FallbackKernel
    buf411.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf411.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False),
    ]
]
op411.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op412: ExternKernelSchedulerNode(MultiOutput)
op412.writes = [StarDep(name='buf412', mode=None)]
op412.unmet_dependencies = [StarDep(name='buf411', mode=None)]
op412.met_dependencies = []
op412.outputs = [
    buf412: MultiOutput
    buf412.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf412.users = [NodeUser(node=ExternKernelSchedulerNode(name='op416'), can_inplace=False, is_weak=False)]
]
op412.node.kernel = None


op416: ExternKernelSchedulerNode(ExternKernelOut)
op416.writes = [StarDep(name='buf416', mode=None)]
op416.unmet_dependencies = [StarDep(name='buf412', mode=None)]
op416.met_dependencies = [StarDep(name='arg612_1', mode=None)]
op416.outputs = [
    buf416: ExternKernelOut
    buf416.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf416.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op416.node.kernel = extern_kernels.mm


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op417.met_dependencies = [StarDep(name='arg626_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False)]
]
op417.node.kernel = extern_kernels.mm


op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 2097152}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf416', c0, {c0: 2097152}, None),
        MemoryDep('buf417', c0, {c0: 2097152}, None)]
op418.met_dependencies = 
    [   MemoryDep('arg613_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg614_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg615_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg627_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg628_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg629_1', c1, {c0: 16384, c1: 128}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf418.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False),
    ]
]
op418.group.device = cuda:0
op418.group.iteration = (2097152, 1)
op418.sizes = ([16384, 128], [])
buf416_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg613_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg627_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg629_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg628_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg615_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg614_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op418_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf416', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg613_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf417', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg627_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg629_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg628_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg615_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg614_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf418', get_index_8, add_4, None)
        return store
op418 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = [StarDep(name='arg634_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf419.users = [NodeUser(node=SchedulerNode(name='op420'), can_inplace=True, is_weak=False)]
]
op419.node.kernel = extern_kernels.mm


op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 8388608}, None)]
op420.unmet_dependencies = [MemoryDep('buf419', c0, {c0: 8388608}, None)]
op420.met_dependencies = [MemoryDep('arg635_1', c1, {c0: 16384, c1: 512}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf420.users = [NodeUser(node=ExternKernelSchedulerNode(name='op421'), can_inplace=False, is_weak=False)]
]
op420.group.device = cuda:0
op420.group.iteration = (8388608, 1)
op420.sizes = ([16384, 512], [])
buf419_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg635_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op420_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf419', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg635_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf420', get_index_2, relu, None)
        return store
op420 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op421: ExternKernelSchedulerNode(ExternKernelOut)
op421.writes = [StarDep(name='buf421', mode=None)]
op421.unmet_dependencies = [StarDep(name='buf420', mode=None)]
op421.met_dependencies = [StarDep(name='arg636_1', mode=None)]
op421.outputs = [
    buf421: ExternKernelOut
    buf421.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf421.users = [NodeUser(node=SchedulerNode(name='op422'), can_inplace=True, is_weak=False)]
]
op421.node.kernel = extern_kernels.mm


op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 2097152}, None)]
op422.unmet_dependencies = 
    [   MemoryDep('buf418', c0, {c0: 2097152}, None),
        MemoryDep('buf421', c0, {c0: 2097152}, None)]
op422.met_dependencies = 
    [   MemoryDep('arg637_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg638_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg639_1', c1, {c0: 16384, c1: 128}, None)]
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf422.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False),
    ]
]
op422.group.device = cuda:0
op422.group.iteration = (2097152, 1)
op422.sizes = ([16384, 128], [])
buf421_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg637_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg639_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg638_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op422_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf421', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg637_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf418', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg639_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg638_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf422', get_index_5, add_2, None)
        return store
op422 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op423: ExternKernelSchedulerNode(ExternKernelOut)
op423.writes = [StarDep(name='buf423', mode=None)]
op423.unmet_dependencies = [StarDep(name='buf422', mode=None)]
op423.met_dependencies = [StarDep(name='arg640_1', mode=None)]
op423.outputs = [
    buf423: ExternKernelOut
    buf423.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf423.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False)]
]
op423.node.kernel = extern_kernels.mm


op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 8388608}, None)]
op424.unmet_dependencies = [MemoryDep('buf423', c0, {c0: 8388608}, None)]
op424.met_dependencies = [MemoryDep('arg641_1', c1, {c0: 16384, c1: 512}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf424.users = [NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False)]
]
op424.group.device = cuda:0
op424.group.iteration = (8388608, 1)
op424.sizes = ([16384, 512], [])
buf423_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg641_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op424_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf423', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg641_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf424', get_index_2, relu, None)
        return store
op424 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf424', mode=None)]
op425.met_dependencies = [StarDep(name='arg642_1', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf425.users = [NodeUser(node=SchedulerNode(name='op426'), can_inplace=True, is_weak=False)]
]
op425.node.kernel = extern_kernels.mm


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 2097152}, None)]
op426.unmet_dependencies = 
    [   MemoryDep('buf422', c0, {c0: 2097152}, None),
        MemoryDep('buf425', c0, {c0: 2097152}, None)]
op426.met_dependencies = 
    [   MemoryDep('arg643_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg644_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg645_1', c1, {c0: 16384, c1: 128}, None)]
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf426.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op427'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False),
    ]
]
op426.group.device = cuda:0
op426.group.iteration = (2097152, 1)
op426.sizes = ([16384, 128], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg643_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg645_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg644_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op426_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg643_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf422', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg645_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg644_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf426', get_index_5, add_2, None)
        return store
op426 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op427: ExternKernelSchedulerNode(ExternKernelOut)
op427.writes = [StarDep(name='buf427', mode=None)]
op427.unmet_dependencies = [StarDep(name='buf426', mode=None)]
op427.met_dependencies = [StarDep(name='arg646_1', mode=None)]
op427.outputs = [
    buf427: ExternKernelOut
    buf427.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf427.users = [NodeUser(node=SchedulerNode(name='op428'), can_inplace=True, is_weak=False)]
]
op427.node.kernel = extern_kernels.mm


op428: SchedulerNode(ComputedBuffer)
op428.writes = [MemoryDep('buf428', c0, {c0: 8388608}, None)]
op428.unmet_dependencies = [MemoryDep('buf427', c0, {c0: 8388608}, None)]
op428.met_dependencies = [MemoryDep('arg647_1', c1, {c0: 16384, c1: 512}, None)]
op428.outputs = [
    buf428: ComputedBuffer
    buf428.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf428.users = [NodeUser(node=ExternKernelSchedulerNode(name='op429'), can_inplace=False, is_weak=False)]
]
op428.group.device = cuda:0
op428.group.iteration = (8388608, 1)
op428.sizes = ([16384, 512], [])
buf427_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg647_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf428_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op428_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf427', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg647_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf428', get_index_2, relu, None)
        return store
op428 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op429: ExternKernelSchedulerNode(ExternKernelOut)
op429.writes = [StarDep(name='buf429', mode=None)]
op429.unmet_dependencies = [StarDep(name='buf428', mode=None)]
op429.met_dependencies = [StarDep(name='arg648_1', mode=None)]
op429.outputs = [
    buf429: ExternKernelOut
    buf429.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf429.users = [NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False)]
]
op429.node.kernel = extern_kernels.mm


op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', c0, {c0: 2097152}, None)]
op430.unmet_dependencies = 
    [   MemoryDep('buf426', c0, {c0: 2097152}, None),
        MemoryDep('buf429', c0, {c0: 2097152}, None)]
op430.met_dependencies = 
    [   MemoryDep('arg649_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg650_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg651_1', c1, {c0: 16384, c1: 128}, None)]
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf430.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False),
    ]
]
op430.group.device = cuda:0
op430.group.iteration = (2097152, 1)
op430.sizes = ([16384, 128], [])
buf429_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg649_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg651_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg650_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op430_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf429', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg649_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf426', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg651_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg650_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf430', get_index_5, add_2, None)
        return store
op430 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf430', mode=None)]
op431.met_dependencies = [StarDep(name='arg616_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf431.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=True, is_weak=False)]
]
op431.node.kernel = extern_kernels.mm


op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', c0, {c0: 8388608}, None)]
op432.unmet_dependencies = [MemoryDep('buf431', c0, {c0: 8388608}, None)]
op432.met_dependencies = [MemoryDep('arg617_1', c1, {c0: 16384, c1: 512}, None)]
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (8388608, 1)
op432.sizes = ([16384, 512], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg617_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf432_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op432_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg617_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf432', get_index_2, relu, None)
        return store
op432 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op433: ExternKernelSchedulerNode(ExternKernelOut)
op433.writes = [StarDep(name='buf433', mode=None)]
op433.unmet_dependencies = [StarDep(name='buf432', mode=None)]
op433.met_dependencies = [StarDep(name='arg618_1', mode=None)]
op433.outputs = [
    buf433: ExternKernelOut
    buf433.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf433.users = [NodeUser(node=SchedulerNode(name='op434'), can_inplace=True, is_weak=False)]
]
op433.node.kernel = extern_kernels.mm


op434: SchedulerNode(ComputedBuffer)
op434.writes = [MemoryDep('buf434', c0, {c0: 2097152}, None)]
op434.unmet_dependencies = 
    [   MemoryDep('buf430', c0, {c0: 2097152}, None),
        MemoryDep('buf433', c0, {c0: 2097152}, None)]
op434.met_dependencies = 
    [   MemoryDep('arg619_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg620_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg621_1', c1, {c0: 16384, c1: 128}, None)]
op434.outputs = [
    buf434: ComputedBuffer
    buf434.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf434.users = [NodeUser(node=ExternKernelSchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op434.group.device = cuda:0
op434.group.iteration = (2097152, 1)
op434.sizes = ([16384, 128], [])
buf433_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg619_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf430_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg621_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg620_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf434_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op434_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf433', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg619_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf430', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg621_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg620_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf434', get_index_5, add_2, None)
        return store
op434 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op435: ExternKernelSchedulerNode(ExternKernelOut)
op435.writes = [StarDep(name='buf435', mode=None)]
op435.unmet_dependencies = [StarDep(name='buf434', mode=None)]
op435.met_dependencies = [StarDep(name='arg622_1', mode=None)]
op435.outputs = [
    buf435: ExternKernelOut
    buf435.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf435.users = [NodeUser(node=SchedulerNode(name='op436'), can_inplace=True, is_weak=False)]
]
op435.node.kernel = extern_kernels.mm


op436: SchedulerNode(ComputedBuffer)
op436.writes = [MemoryDep('buf436', c0, {c0: 8388608}, None)]
op436.unmet_dependencies = 
    [   MemoryDep('buf405', c0, {c0: 8388608}, None),
        MemoryDep('buf435', c0, {c0: 8388608}, None)]
op436.met_dependencies = 
    [   MemoryDep('arg623_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg624_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg625_1', c1, {c0: 16384, c1: 512}, None)]
op436.outputs = [
    buf436: ComputedBuffer
    buf436.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf436.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
    ]
]
op436.group.device = cuda:0
op436.group.iteration = (8388608, 1)
op436.sizes = ([16384, 512], [])
buf435_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg623_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg625_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg624_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op436_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf435', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg623_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf405', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg625_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg624_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf436', get_index_5, add_2, None)
        return store
op436 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op437: ExternKernelSchedulerNode(ExternKernelOut)
op437.writes = [StarDep(name='buf437', mode=None)]
op437.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op437.met_dependencies = [StarDep(name='arg676_1', mode=None)]
op437.outputs = [
    buf437: ExternKernelOut
    buf437.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf437.users = [NodeUser(node=SchedulerNode(name='op438'), can_inplace=True, is_weak=False)]
]
op437.node.kernel = extern_kernels.mm


op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 2097152}, None)]
op438.unmet_dependencies = [MemoryDep('buf437', c0, {c0: 2097152}, None)]
op438.met_dependencies = 
    [   MemoryDep('arg677_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg678_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg679_1', c1, {c0: 16384, c1: 128}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf438.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op440'), can_inplace=False, is_weak=False),
    ]
]
op438.group.device = cuda:0
op438.group.iteration = (2097152, 1)
op438.sizes = ([16384, 128], [])
buf437_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg677_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg679_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg678_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op438_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf437', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg677_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg679_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg678_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf438', get_index_4, add_1, None)
        return store
op438 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op439: ExternKernelSchedulerNode(ExternKernelOut)
op439.writes = [StarDep(name='buf439', mode=None)]
op439.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op439.met_dependencies = [StarDep(name='arg652_1', mode=None), StarDep(name='arg653_1', mode=None)]
op439.outputs = [
    buf439: ExternKernelOut
    buf439.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf439.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op439.node.kernel = extern_kernels.addmm


op440: ExternKernelSchedulerNode(ExternKernelOut)
op440.writes = [StarDep(name='buf440', mode=None)]
op440.unmet_dependencies = [StarDep(name='buf438', mode=None)]
op440.met_dependencies = [StarDep(name='arg654_1', mode=None), StarDep(name='arg655_1', mode=None)]
op440.outputs = [
    buf440: ExternKernelOut
    buf440.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf440.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op440.node.kernel = extern_kernels.addmm


op441: ExternKernelSchedulerNode(ExternKernelOut)
op441.writes = [StarDep(name='buf441', mode=None)]
op441.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op441.met_dependencies = [StarDep(name='arg656_1', mode=None), StarDep(name='arg657_1', mode=None)]
op441.outputs = [
    buf441: ExternKernelOut
    buf441.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf441.users = [NodeUser(node=ExternKernelSchedulerNode(name='op442'), can_inplace=False, is_weak=False)]
]
op441.node.kernel = extern_kernels.addmm


op442: ExternKernelSchedulerNode(FallbackKernel)
op442.writes = [StarDep(name='buf442', mode=None)]
op442.unmet_dependencies = 
    [   StarDep(name='buf439', mode=None),
        StarDep(name='buf440', mode=None),
        StarDep(name='buf441', mode=None)]
op442.met_dependencies = []
op442.outputs = [
    buf442: FallbackKernel
    buf442.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf442.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op443'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op446'), can_inplace=False, is_weak=False),
    ]
]
op442.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op443: ExternKernelSchedulerNode(MultiOutput)
op443.writes = [StarDep(name='buf443', mode=None)]
op443.unmet_dependencies = [StarDep(name='buf442', mode=None)]
op443.met_dependencies = []
op443.outputs = [
    buf443: MultiOutput
    buf443.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf443.users = [NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op443.node.kernel = None


op447: ExternKernelSchedulerNode(ExternKernelOut)
op447.writes = [StarDep(name='buf447', mode=None)]
op447.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op447.met_dependencies = [StarDep(name='arg658_1', mode=None)]
op447.outputs = [
    buf447: ExternKernelOut
    buf447.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf447.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False)]
]
op447.node.kernel = extern_kernels.mm


op448: ExternKernelSchedulerNode(ExternKernelOut)
op448.writes = [StarDep(name='buf448', mode=None)]
op448.unmet_dependencies = [StarDep(name='buf436', mode=None)]
op448.met_dependencies = [StarDep(name='arg672_1', mode=None)]
op448.outputs = [
    buf448: ExternKernelOut
    buf448.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf448.users = [NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False)]
]
op448.node.kernel = extern_kernels.mm


op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 2097152}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 2097152}, None),
        MemoryDep('buf448', c0, {c0: 2097152}, None)]
op449.met_dependencies = 
    [   MemoryDep('arg659_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg660_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg661_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg673_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg674_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg675_1', c1, {c0: 16384, c1: 128}, None)]
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf449.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False),
    ]
]
op449.group.device = cuda:0
op449.group.iteration = (2097152, 1)
op449.sizes = ([16384, 128], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg659_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg673_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg675_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg674_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg661_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg660_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op449_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg659_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf448', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg673_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg675_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg674_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg661_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg660_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf449', get_index_8, add_4, None)
        return store
op449 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op450: ExternKernelSchedulerNode(ExternKernelOut)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf449', mode=None)]
op450.met_dependencies = [StarDep(name='arg680_1', mode=None)]
op450.outputs = [
    buf450: ExternKernelOut
    buf450.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf450.users = [NodeUser(node=SchedulerNode(name='op451'), can_inplace=True, is_weak=False)]
]
op450.node.kernel = extern_kernels.mm


op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 8388608}, None)]
op451.unmet_dependencies = [MemoryDep('buf450', c0, {c0: 8388608}, None)]
op451.met_dependencies = [MemoryDep('arg681_1', c1, {c0: 16384, c1: 512}, None)]
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (8388608, 1)
op451.sizes = ([16384, 512], [])
buf450_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg681_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf451_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op451_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg681_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf451', get_index_2, relu, None)
        return store
op451 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op452: ExternKernelSchedulerNode(ExternKernelOut)
op452.writes = [StarDep(name='buf452', mode=None)]
op452.unmet_dependencies = [StarDep(name='buf451', mode=None)]
op452.met_dependencies = [StarDep(name='arg682_1', mode=None)]
op452.outputs = [
    buf452: ExternKernelOut
    buf452.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf452.users = [NodeUser(node=SchedulerNode(name='op453'), can_inplace=True, is_weak=False)]
]
op452.node.kernel = extern_kernels.mm


op453: SchedulerNode(ComputedBuffer)
op453.writes = [MemoryDep('buf453', c0, {c0: 2097152}, None)]
op453.unmet_dependencies = 
    [   MemoryDep('buf449', c0, {c0: 2097152}, None),
        MemoryDep('buf452', c0, {c0: 2097152}, None)]
op453.met_dependencies = 
    [   MemoryDep('arg683_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg684_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg685_1', c1, {c0: 16384, c1: 128}, None)]
op453.outputs = [
    buf453: ComputedBuffer
    buf453.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf453.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op454'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False),
    ]
]
op453.group.device = cuda:0
op453.group.iteration = (2097152, 1)
op453.sizes = ([16384, 128], [])
buf452_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg683_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf449_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg685_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg684_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op453_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf452', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg683_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf449', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg685_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg684_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf453', get_index_5, add_2, None)
        return store
op453 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op454: ExternKernelSchedulerNode(ExternKernelOut)
op454.writes = [StarDep(name='buf454', mode=None)]
op454.unmet_dependencies = [StarDep(name='buf453', mode=None)]
op454.met_dependencies = [StarDep(name='arg686_1', mode=None)]
op454.outputs = [
    buf454: ExternKernelOut
    buf454.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf454.users = [NodeUser(node=SchedulerNode(name='op455'), can_inplace=True, is_weak=False)]
]
op454.node.kernel = extern_kernels.mm


op455: SchedulerNode(ComputedBuffer)
op455.writes = [MemoryDep('buf455', c0, {c0: 8388608}, None)]
op455.unmet_dependencies = [MemoryDep('buf454', c0, {c0: 8388608}, None)]
op455.met_dependencies = [MemoryDep('arg687_1', c1, {c0: 16384, c1: 512}, None)]
op455.outputs = [
    buf455: ComputedBuffer
    buf455.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf455.users = [NodeUser(node=ExternKernelSchedulerNode(name='op456'), can_inplace=False, is_weak=False)]
]
op455.group.device = cuda:0
op455.group.iteration = (8388608, 1)
op455.sizes = ([16384, 512], [])
buf454_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg687_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op455_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf454', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg687_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf455', get_index_2, relu, None)
        return store
op455 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op456: ExternKernelSchedulerNode(ExternKernelOut)
op456.writes = [StarDep(name='buf456', mode=None)]
op456.unmet_dependencies = [StarDep(name='buf455', mode=None)]
op456.met_dependencies = [StarDep(name='arg688_1', mode=None)]
op456.outputs = [
    buf456: ExternKernelOut
    buf456.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf456.users = [NodeUser(node=SchedulerNode(name='op457'), can_inplace=True, is_weak=False)]
]
op456.node.kernel = extern_kernels.mm


op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 2097152}, None)]
op457.unmet_dependencies = 
    [   MemoryDep('buf453', c0, {c0: 2097152}, None),
        MemoryDep('buf456', c0, {c0: 2097152}, None)]
op457.met_dependencies = 
    [   MemoryDep('arg689_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg690_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg691_1', c1, {c0: 16384, c1: 128}, None)]
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf457.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False),
    ]
]
op457.group.device = cuda:0
op457.group.iteration = (2097152, 1)
op457.sizes = ([16384, 128], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg689_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf453_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg691_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg690_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op457_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg689_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf453', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg691_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg690_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf457', get_index_5, add_2, None)
        return store
op457 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op458: ExternKernelSchedulerNode(ExternKernelOut)
op458.writes = [StarDep(name='buf458', mode=None)]
op458.unmet_dependencies = [StarDep(name='buf457', mode=None)]
op458.met_dependencies = [StarDep(name='arg692_1', mode=None)]
op458.outputs = [
    buf458: ExternKernelOut
    buf458.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf458.users = [NodeUser(node=SchedulerNode(name='op459'), can_inplace=True, is_weak=False)]
]
op458.node.kernel = extern_kernels.mm


op459: SchedulerNode(ComputedBuffer)
op459.writes = [MemoryDep('buf459', c0, {c0: 8388608}, None)]
op459.unmet_dependencies = [MemoryDep('buf458', c0, {c0: 8388608}, None)]
op459.met_dependencies = [MemoryDep('arg693_1', c1, {c0: 16384, c1: 512}, None)]
op459.outputs = [
    buf459: ComputedBuffer
    buf459.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf459.users = [NodeUser(node=ExternKernelSchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op459.group.device = cuda:0
op459.group.iteration = (8388608, 1)
op459.sizes = ([16384, 512], [])
buf458_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg693_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf459_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op459_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf458', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg693_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf459', get_index_2, relu, None)
        return store
op459 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op460: ExternKernelSchedulerNode(ExternKernelOut)
op460.writes = [StarDep(name='buf460', mode=None)]
op460.unmet_dependencies = [StarDep(name='buf459', mode=None)]
op460.met_dependencies = [StarDep(name='arg694_1', mode=None)]
op460.outputs = [
    buf460: ExternKernelOut
    buf460.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf460.users = [NodeUser(node=SchedulerNode(name='op461'), can_inplace=True, is_weak=False)]
]
op460.node.kernel = extern_kernels.mm


op461: SchedulerNode(ComputedBuffer)
op461.writes = [MemoryDep('buf461', c0, {c0: 2097152}, None)]
op461.unmet_dependencies = 
    [   MemoryDep('buf457', c0, {c0: 2097152}, None),
        MemoryDep('buf460', c0, {c0: 2097152}, None)]
op461.met_dependencies = 
    [   MemoryDep('arg695_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg696_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg697_1', c1, {c0: 16384, c1: 128}, None)]
op461.outputs = [
    buf461: ComputedBuffer
    buf461.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf461.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op462'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=True, is_weak=False),
    ]
]
op461.group.device = cuda:0
op461.group.iteration = (2097152, 1)
op461.sizes = ([16384, 128], [])
buf460_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg695_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg697_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg696_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op461_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf460', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg695_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf457', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg697_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg696_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf461', get_index_5, add_2, None)
        return store
op461 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op462: ExternKernelSchedulerNode(ExternKernelOut)
op462.writes = [StarDep(name='buf462', mode=None)]
op462.unmet_dependencies = [StarDep(name='buf461', mode=None)]
op462.met_dependencies = [StarDep(name='arg662_1', mode=None)]
op462.outputs = [
    buf462: ExternKernelOut
    buf462.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf462.users = [NodeUser(node=SchedulerNode(name='op463'), can_inplace=True, is_weak=False)]
]
op462.node.kernel = extern_kernels.mm


op463: SchedulerNode(ComputedBuffer)
op463.writes = [MemoryDep('buf463', c0, {c0: 8388608}, None)]
op463.unmet_dependencies = [MemoryDep('buf462', c0, {c0: 8388608}, None)]
op463.met_dependencies = [MemoryDep('arg663_1', c1, {c0: 16384, c1: 512}, None)]
op463.outputs = [
    buf463: ComputedBuffer
    buf463.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf463.users = [NodeUser(node=ExternKernelSchedulerNode(name='op464'), can_inplace=False, is_weak=False)]
]
op463.group.device = cuda:0
op463.group.iteration = (8388608, 1)
op463.sizes = ([16384, 512], [])
buf462_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg663_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op463_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf462', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg663_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf463', get_index_2, relu, None)
        return store
op463 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op464: ExternKernelSchedulerNode(ExternKernelOut)
op464.writes = [StarDep(name='buf464', mode=None)]
op464.unmet_dependencies = [StarDep(name='buf463', mode=None)]
op464.met_dependencies = [StarDep(name='arg664_1', mode=None)]
op464.outputs = [
    buf464: ExternKernelOut
    buf464.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf464.users = [NodeUser(node=SchedulerNode(name='op465'), can_inplace=True, is_weak=False)]
]
op464.node.kernel = extern_kernels.mm


op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 2097152}, None)]
op465.unmet_dependencies = 
    [   MemoryDep('buf461', c0, {c0: 2097152}, None),
        MemoryDep('buf464', c0, {c0: 2097152}, None)]
op465.met_dependencies = 
    [   MemoryDep('arg665_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg666_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg667_1', c1, {c0: 16384, c1: 128}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf465.users = [NodeUser(node=ExternKernelSchedulerNode(name='op466'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (2097152, 1)
op465.sizes = ([16384, 128], [])
buf464_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg665_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf461_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg667_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg666_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op465_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf464', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg665_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf461', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg667_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg666_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf465', get_index_5, add_2, None)
        return store
op465 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op466: ExternKernelSchedulerNode(ExternKernelOut)
op466.writes = [StarDep(name='buf466', mode=None)]
op466.unmet_dependencies = [StarDep(name='buf465', mode=None)]
op466.met_dependencies = [StarDep(name='arg668_1', mode=None)]
op466.outputs = [
    buf466: ExternKernelOut
    buf466.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf466.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False)]
]
op466.node.kernel = extern_kernels.mm


op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 8388608}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf436', c0, {c0: 8388608}, None),
        MemoryDep('buf466', c0, {c0: 8388608}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg669_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg670_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg671_1', c1, {c0: 16384, c1: 512}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf467.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op472'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False),
    ]
]
op467.group.device = cuda:0
op467.group.iteration = (8388608, 1)
op467.sizes = ([16384, 512], [])
buf466_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg669_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg671_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg670_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op467_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf466', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg669_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf436', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg671_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg670_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf467', get_index_5, add_2, None)
        return store
op467 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op468: ExternKernelSchedulerNode(ExternKernelOut)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='arg722_1', mode=None)]
op468.outputs = [
    buf468: ExternKernelOut
    buf468.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf468.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False)]
]
op468.node.kernel = extern_kernels.mm


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 2097152}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 2097152}, None)]
op469.met_dependencies = 
    [   MemoryDep('arg723_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg724_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg725_1', c1, {c0: 16384, c1: 128}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf469.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op471'), can_inplace=False, is_weak=False),
    ]
]
op469.group.device = cuda:0
op469.group.iteration = (2097152, 1)
op469.sizes = ([16384, 128], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg723_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg725_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg724_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op469_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg723_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg725_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg724_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf469', get_index_4, add_1, None)
        return store
op469 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='arg698_1', mode=None), StarDep(name='arg699_1', mode=None)]
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf470.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op470.node.kernel = extern_kernels.addmm


op471: ExternKernelSchedulerNode(ExternKernelOut)
op471.writes = [StarDep(name='buf471', mode=None)]
op471.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op471.met_dependencies = [StarDep(name='arg700_1', mode=None), StarDep(name='arg701_1', mode=None)]
op471.outputs = [
    buf471: ExternKernelOut
    buf471.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf471.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op471.node.kernel = extern_kernels.addmm


op472: ExternKernelSchedulerNode(ExternKernelOut)
op472.writes = [StarDep(name='buf472', mode=None)]
op472.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op472.met_dependencies = [StarDep(name='arg702_1', mode=None), StarDep(name='arg703_1', mode=None)]
op472.outputs = [
    buf472: ExternKernelOut
    buf472.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.node.kernel = extern_kernels.addmm


op473: ExternKernelSchedulerNode(FallbackKernel)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = 
    [   StarDep(name='buf470', mode=None),
        StarDep(name='buf471', mode=None),
        StarDep(name='buf472', mode=None)]
op473.met_dependencies = []
op473.outputs = [
    buf473: FallbackKernel
    buf473.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf473.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op477'), can_inplace=False, is_weak=False),
    ]
]
op473.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op474: ExternKernelSchedulerNode(MultiOutput)
op474.writes = [StarDep(name='buf474', mode=None)]
op474.unmet_dependencies = [StarDep(name='buf473', mode=None)]
op474.met_dependencies = []
op474.outputs = [
    buf474: MultiOutput
    buf474.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf474.users = [NodeUser(node=ExternKernelSchedulerNode(name='op478'), can_inplace=False, is_weak=False)]
]
op474.node.kernel = None


op478: ExternKernelSchedulerNode(ExternKernelOut)
op478.writes = [StarDep(name='buf478', mode=None)]
op478.unmet_dependencies = [StarDep(name='buf474', mode=None)]
op478.met_dependencies = [StarDep(name='arg704_1', mode=None)]
op478.outputs = [
    buf478: ExternKernelOut
    buf478.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf478.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=True, is_weak=False)]
]
op478.node.kernel = extern_kernels.mm


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op479.met_dependencies = [StarDep(name='arg718_1', mode=None)]
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf479.users = [NodeUser(node=SchedulerNode(name='op480'), can_inplace=True, is_weak=False)]
]
op479.node.kernel = extern_kernels.mm


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 2097152}, None)]
op480.unmet_dependencies = 
    [   MemoryDep('buf478', c0, {c0: 2097152}, None),
        MemoryDep('buf479', c0, {c0: 2097152}, None)]
op480.met_dependencies = 
    [   MemoryDep('arg705_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg706_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg707_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg719_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg720_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg721_1', c1, {c0: 16384, c1: 128}, None)]
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf480.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op481'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
    ]
]
op480.group.device = cuda:0
op480.group.iteration = (2097152, 1)
op480.sizes = ([16384, 128], [])
buf478_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg705_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf479_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg719_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg721_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg720_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg707_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg706_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op480_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf478', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg705_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf479', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg719_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg721_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg720_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg707_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg706_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf480', get_index_8, add_4, None)
        return store
op480 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op481: ExternKernelSchedulerNode(ExternKernelOut)
op481.writes = [StarDep(name='buf481', mode=None)]
op481.unmet_dependencies = [StarDep(name='buf480', mode=None)]
op481.met_dependencies = [StarDep(name='arg726_1', mode=None)]
op481.outputs = [
    buf481: ExternKernelOut
    buf481.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf481.users = [NodeUser(node=SchedulerNode(name='op482'), can_inplace=True, is_weak=False)]
]
op481.node.kernel = extern_kernels.mm


op482: SchedulerNode(ComputedBuffer)
op482.writes = [MemoryDep('buf482', c0, {c0: 8388608}, None)]
op482.unmet_dependencies = [MemoryDep('buf481', c0, {c0: 8388608}, None)]
op482.met_dependencies = [MemoryDep('arg727_1', c1, {c0: 16384, c1: 512}, None)]
op482.outputs = [
    buf482: ComputedBuffer
    buf482.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf482.users = [NodeUser(node=ExternKernelSchedulerNode(name='op483'), can_inplace=False, is_weak=False)]
]
op482.group.device = cuda:0
op482.group.iteration = (8388608, 1)
op482.sizes = ([16384, 512], [])
buf481_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg727_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf482_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op482_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf481', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg727_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf482', get_index_2, relu, None)
        return store
op482 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op483: ExternKernelSchedulerNode(ExternKernelOut)
op483.writes = [StarDep(name='buf483', mode=None)]
op483.unmet_dependencies = [StarDep(name='buf482', mode=None)]
op483.met_dependencies = [StarDep(name='arg728_1', mode=None)]
op483.outputs = [
    buf483: ExternKernelOut
    buf483.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf483.users = [NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False)]
]
op483.node.kernel = extern_kernels.mm


op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', c0, {c0: 2097152}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf480', c0, {c0: 2097152}, None),
        MemoryDep('buf483', c0, {c0: 2097152}, None)]
op484.met_dependencies = 
    [   MemoryDep('arg729_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg730_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg731_1', c1, {c0: 16384, c1: 128}, None)]
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf484.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False),
    ]
]
op484.group.device = cuda:0
op484.group.iteration = (2097152, 1)
op484.sizes = ([16384, 128], [])
buf483_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg729_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg731_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg730_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op484_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf483', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg729_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf480', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg731_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg730_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf484', get_index_5, add_2, None)
        return store
op484 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf484', mode=None)]
op485.met_dependencies = [StarDep(name='arg732_1', mode=None)]
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=True, is_weak=False)]
]
op485.node.kernel = extern_kernels.mm


op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', c0, {c0: 8388608}, None)]
op486.unmet_dependencies = [MemoryDep('buf485', c0, {c0: 8388608}, None)]
op486.met_dependencies = [MemoryDep('arg733_1', c1, {c0: 16384, c1: 512}, None)]
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (8388608, 1)
op486.sizes = ([16384, 512], [])
buf485_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg733_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf486_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op486_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg733_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf486', get_index_2, relu, None)
        return store
op486 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op487: ExternKernelSchedulerNode(ExternKernelOut)
op487.writes = [StarDep(name='buf487', mode=None)]
op487.unmet_dependencies = [StarDep(name='buf486', mode=None)]
op487.met_dependencies = [StarDep(name='arg734_1', mode=None)]
op487.outputs = [
    buf487: ExternKernelOut
    buf487.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf487.users = [NodeUser(node=SchedulerNode(name='op488'), can_inplace=True, is_weak=False)]
]
op487.node.kernel = extern_kernels.mm


op488: SchedulerNode(ComputedBuffer)
op488.writes = [MemoryDep('buf488', c0, {c0: 2097152}, None)]
op488.unmet_dependencies = 
    [   MemoryDep('buf484', c0, {c0: 2097152}, None),
        MemoryDep('buf487', c0, {c0: 2097152}, None)]
op488.met_dependencies = 
    [   MemoryDep('arg735_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg736_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg737_1', c1, {c0: 16384, c1: 128}, None)]
op488.outputs = [
    buf488: ComputedBuffer
    buf488.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf488.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op489'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False),
    ]
]
op488.group.device = cuda:0
op488.group.iteration = (2097152, 1)
op488.sizes = ([16384, 128], [])
buf487_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg735_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf484_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg737_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg736_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op488_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf487', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg735_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf484', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg737_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg736_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf488', get_index_5, add_2, None)
        return store
op488 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op489: ExternKernelSchedulerNode(ExternKernelOut)
op489.writes = [StarDep(name='buf489', mode=None)]
op489.unmet_dependencies = [StarDep(name='buf488', mode=None)]
op489.met_dependencies = [StarDep(name='arg738_1', mode=None)]
op489.outputs = [
    buf489: ExternKernelOut
    buf489.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf489.users = [NodeUser(node=SchedulerNode(name='op490'), can_inplace=True, is_weak=False)]
]
op489.node.kernel = extern_kernels.mm


op490: SchedulerNode(ComputedBuffer)
op490.writes = [MemoryDep('buf490', c0, {c0: 8388608}, None)]
op490.unmet_dependencies = [MemoryDep('buf489', c0, {c0: 8388608}, None)]
op490.met_dependencies = [MemoryDep('arg739_1', c1, {c0: 16384, c1: 512}, None)]
op490.outputs = [
    buf490: ComputedBuffer
    buf490.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf490.users = [NodeUser(node=ExternKernelSchedulerNode(name='op491'), can_inplace=False, is_weak=False)]
]
op490.group.device = cuda:0
op490.group.iteration = (8388608, 1)
op490.sizes = ([16384, 512], [])
buf489_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg739_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op490_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf489', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg739_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf490', get_index_2, relu, None)
        return store
op490 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op491: ExternKernelSchedulerNode(ExternKernelOut)
op491.writes = [StarDep(name='buf491', mode=None)]
op491.unmet_dependencies = [StarDep(name='buf490', mode=None)]
op491.met_dependencies = [StarDep(name='arg740_1', mode=None)]
op491.outputs = [
    buf491: ExternKernelOut
    buf491.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf491.users = [NodeUser(node=SchedulerNode(name='op492'), can_inplace=True, is_weak=False)]
]
op491.node.kernel = extern_kernels.mm


op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 2097152}, None)]
op492.unmet_dependencies = 
    [   MemoryDep('buf488', c0, {c0: 2097152}, None),
        MemoryDep('buf491', c0, {c0: 2097152}, None)]
op492.met_dependencies = 
    [   MemoryDep('arg741_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg742_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg743_1', c1, {c0: 16384, c1: 128}, None)]
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf492.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False),
    ]
]
op492.group.device = cuda:0
op492.group.iteration = (2097152, 1)
op492.sizes = ([16384, 128], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg741_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf488_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg743_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg742_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op492_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg741_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf488', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg743_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg742_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf492', get_index_5, add_2, None)
        return store
op492 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op493: ExternKernelSchedulerNode(ExternKernelOut)
op493.writes = [StarDep(name='buf493', mode=None)]
op493.unmet_dependencies = [StarDep(name='buf492', mode=None)]
op493.met_dependencies = [StarDep(name='arg708_1', mode=None)]
op493.outputs = [
    buf493: ExternKernelOut
    buf493.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf493.users = [NodeUser(node=SchedulerNode(name='op494'), can_inplace=True, is_weak=False)]
]
op493.node.kernel = extern_kernels.mm


op494: SchedulerNode(ComputedBuffer)
op494.writes = [MemoryDep('buf494', c0, {c0: 8388608}, None)]
op494.unmet_dependencies = [MemoryDep('buf493', c0, {c0: 8388608}, None)]
op494.met_dependencies = [MemoryDep('arg709_1', c1, {c0: 16384, c1: 512}, None)]
op494.outputs = [
    buf494: ComputedBuffer
    buf494.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf494.users = [NodeUser(node=ExternKernelSchedulerNode(name='op495'), can_inplace=False, is_weak=False)]
]
op494.group.device = cuda:0
op494.group.iteration = (8388608, 1)
op494.sizes = ([16384, 512], [])
buf493_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg709_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf494_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op494_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf493', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg709_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf494', get_index_2, relu, None)
        return store
op494 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op495: ExternKernelSchedulerNode(ExternKernelOut)
op495.writes = [StarDep(name='buf495', mode=None)]
op495.unmet_dependencies = [StarDep(name='buf494', mode=None)]
op495.met_dependencies = [StarDep(name='arg710_1', mode=None)]
op495.outputs = [
    buf495: ExternKernelOut
    buf495.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf495.users = [NodeUser(node=SchedulerNode(name='op496'), can_inplace=True, is_weak=False)]
]
op495.node.kernel = extern_kernels.mm


op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 2097152}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf492', c0, {c0: 2097152}, None),
        MemoryDep('buf495', c0, {c0: 2097152}, None)]
op496.met_dependencies = 
    [   MemoryDep('arg711_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg712_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg713_1', c1, {c0: 16384, c1: 128}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf496.users = [NodeUser(node=ExternKernelSchedulerNode(name='op497'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (2097152, 1)
op496.sizes = ([16384, 128], [])
buf495_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg711_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg713_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg712_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op496_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf495', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg711_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf492', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg713_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg712_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf496', get_index_5, add_2, None)
        return store
op496 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op497: ExternKernelSchedulerNode(ExternKernelOut)
op497.writes = [StarDep(name='buf497', mode=None)]
op497.unmet_dependencies = [StarDep(name='buf496', mode=None)]
op497.met_dependencies = [StarDep(name='arg714_1', mode=None)]
op497.outputs = [
    buf497: ExternKernelOut
    buf497.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf497.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False)]
]
op497.node.kernel = extern_kernels.mm


op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 8388608}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf467', c0, {c0: 8388608}, None),
        MemoryDep('buf497', c0, {c0: 8388608}, None)]
op498.met_dependencies = 
    [   MemoryDep('arg715_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg716_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg717_1', c1, {c0: 16384, c1: 512}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf498.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=True, is_weak=False),
    ]
]
op498.group.device = cuda:0
op498.group.iteration = (8388608, 1)
op498.sizes = ([16384, 512], [])
buf497_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg715_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg717_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg716_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op498_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf497', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg715_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf467', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg717_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg716_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf498', get_index_5, add_2, None)
        return store
op498 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op499: ExternKernelSchedulerNode(ExternKernelOut)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg768_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelOut
    buf499.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf499.users = [NodeUser(node=SchedulerNode(name='op500'), can_inplace=True, is_weak=False)]
]
op499.node.kernel = extern_kernels.mm


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 2097152}, None)]
op500.unmet_dependencies = [MemoryDep('buf499', c0, {c0: 2097152}, None)]
op500.met_dependencies = 
    [   MemoryDep('arg769_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg770_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg771_1', c1, {c0: 16384, c1: 128}, None)]
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf500.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op501'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False),
    ]
]
op500.group.device = cuda:0
op500.group.iteration = (2097152, 1)
op500.sizes = ([16384, 128], [])
buf499_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg769_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg771_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg770_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op500_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg769_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg771_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg770_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf500', get_index_4, add_1, None)
        return store
op500 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op501: ExternKernelSchedulerNode(ExternKernelOut)
op501.writes = [StarDep(name='buf501', mode=None)]
op501.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op501.met_dependencies = [StarDep(name='arg744_1', mode=None), StarDep(name='arg745_1', mode=None)]
op501.outputs = [
    buf501: ExternKernelOut
    buf501.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op501.node.kernel = extern_kernels.addmm


op502: ExternKernelSchedulerNode(ExternKernelOut)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf500', mode=None)]
op502.met_dependencies = [StarDep(name='arg746_1', mode=None), StarDep(name='arg747_1', mode=None)]
op502.outputs = [
    buf502: ExternKernelOut
    buf502.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf502.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op502.node.kernel = extern_kernels.addmm


op503: ExternKernelSchedulerNode(ExternKernelOut)
op503.writes = [StarDep(name='buf503', mode=None)]
op503.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op503.met_dependencies = [StarDep(name='arg748_1', mode=None), StarDep(name='arg749_1', mode=None)]
op503.outputs = [
    buf503: ExternKernelOut
    buf503.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf503.users = [NodeUser(node=ExternKernelSchedulerNode(name='op504'), can_inplace=False, is_weak=False)]
]
op503.node.kernel = extern_kernels.addmm


op504: ExternKernelSchedulerNode(FallbackKernel)
op504.writes = [StarDep(name='buf504', mode=None)]
op504.unmet_dependencies = 
    [   StarDep(name='buf501', mode=None),
        StarDep(name='buf502', mode=None),
        StarDep(name='buf503', mode=None)]
op504.met_dependencies = []
op504.outputs = [
    buf504: FallbackKernel
    buf504.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf504.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op506'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op507'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False),
    ]
]
op504.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op505: ExternKernelSchedulerNode(MultiOutput)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf504', mode=None)]
op505.met_dependencies = []
op505.outputs = [
    buf505: MultiOutput
    buf505.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf505.users = [NodeUser(node=ExternKernelSchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op505.node.kernel = None


op509: ExternKernelSchedulerNode(ExternKernelOut)
op509.writes = [StarDep(name='buf509', mode=None)]
op509.unmet_dependencies = [StarDep(name='buf505', mode=None)]
op509.met_dependencies = [StarDep(name='arg750_1', mode=None)]
op509.outputs = [
    buf509: ExternKernelOut
    buf509.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf509.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False)]
]
op509.node.kernel = extern_kernels.mm


op510: ExternKernelSchedulerNode(ExternKernelOut)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op510.met_dependencies = [StarDep(name='arg764_1', mode=None)]
op510.outputs = [
    buf510: ExternKernelOut
    buf510.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf510.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False)]
]
op510.node.kernel = extern_kernels.mm


op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 2097152}, None)]
op511.unmet_dependencies = 
    [   MemoryDep('buf509', c0, {c0: 2097152}, None),
        MemoryDep('buf510', c0, {c0: 2097152}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg751_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg752_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg753_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg765_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg766_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg767_1', c1, {c0: 16384, c1: 128}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf511.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=True, is_weak=False),
    ]
]
op511.group.device = cuda:0
op511.group.iteration = (2097152, 1)
op511.sizes = ([16384, 128], [])
buf509_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg751_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg765_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg767_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg766_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg753_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg752_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op511_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf509', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg751_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf510', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg765_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg767_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg766_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg753_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg752_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf511', get_index_8, add_4, None)
        return store
op511 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op512: ExternKernelSchedulerNode(ExternKernelOut)
op512.writes = [StarDep(name='buf512', mode=None)]
op512.unmet_dependencies = [StarDep(name='buf511', mode=None)]
op512.met_dependencies = [StarDep(name='arg772_1', mode=None)]
op512.outputs = [
    buf512: ExternKernelOut
    buf512.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf512.users = [NodeUser(node=SchedulerNode(name='op513'), can_inplace=True, is_weak=False)]
]
op512.node.kernel = extern_kernels.mm


op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 8388608}, None)]
op513.unmet_dependencies = [MemoryDep('buf512', c0, {c0: 8388608}, None)]
op513.met_dependencies = [MemoryDep('arg773_1', c1, {c0: 16384, c1: 512}, None)]
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf513.users = [NodeUser(node=ExternKernelSchedulerNode(name='op514'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (8388608, 1)
op513.sizes = ([16384, 512], [])
buf512_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg773_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op513_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf512', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg773_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf513', get_index_2, relu, None)
        return store
op513 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op514: ExternKernelSchedulerNode(ExternKernelOut)
op514.writes = [StarDep(name='buf514', mode=None)]
op514.unmet_dependencies = [StarDep(name='buf513', mode=None)]
op514.met_dependencies = [StarDep(name='arg774_1', mode=None)]
op514.outputs = [
    buf514: ExternKernelOut
    buf514.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf514.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=True, is_weak=False)]
]
op514.node.kernel = extern_kernels.mm


op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 2097152}, None)]
op515.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 2097152}, None),
        MemoryDep('buf514', c0, {c0: 2097152}, None)]
op515.met_dependencies = 
    [   MemoryDep('arg775_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg776_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg777_1', c1, {c0: 16384, c1: 128}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf515.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False),
    ]
]
op515.group.device = cuda:0
op515.group.iteration = (2097152, 1)
op515.sizes = ([16384, 128], [])
buf514_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg775_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg777_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg776_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op515_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf514', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg775_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf511', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg777_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg776_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf515', get_index_5, add_2, None)
        return store
op515 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='arg778_1', mode=None)]
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf516.users = [NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False)]
]
op516.node.kernel = extern_kernels.mm


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 8388608}, None)]
op517.unmet_dependencies = [MemoryDep('buf516', c0, {c0: 8388608}, None)]
op517.met_dependencies = [MemoryDep('arg779_1', c1, {c0: 16384, c1: 512}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (8388608, 1)
op517.sizes = ([16384, 512], [])
buf516_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg779_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op517_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg779_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf517', get_index_2, relu, None)
        return store
op517 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op518: ExternKernelSchedulerNode(ExternKernelOut)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf517', mode=None)]
op518.met_dependencies = [StarDep(name='arg780_1', mode=None)]
op518.outputs = [
    buf518: ExternKernelOut
    buf518.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf518.users = [NodeUser(node=SchedulerNode(name='op519'), can_inplace=True, is_weak=False)]
]
op518.node.kernel = extern_kernels.mm


op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 2097152}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf515', c0, {c0: 2097152}, None),
        MemoryDep('buf518', c0, {c0: 2097152}, None)]
op519.met_dependencies = 
    [   MemoryDep('arg781_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg782_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg783_1', c1, {c0: 16384, c1: 128}, None)]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf519.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op523'), can_inplace=True, is_weak=False),
    ]
]
op519.group.device = cuda:0
op519.group.iteration = (2097152, 1)
op519.sizes = ([16384, 128], [])
buf518_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg781_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg783_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg782_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op519_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf518', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg781_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf515', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg783_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg782_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf519', get_index_5, add_2, None)
        return store
op519 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op520: ExternKernelSchedulerNode(ExternKernelOut)
op520.writes = [StarDep(name='buf520', mode=None)]
op520.unmet_dependencies = [StarDep(name='buf519', mode=None)]
op520.met_dependencies = [StarDep(name='arg784_1', mode=None)]
op520.outputs = [
    buf520: ExternKernelOut
    buf520.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf520.users = [NodeUser(node=SchedulerNode(name='op521'), can_inplace=True, is_weak=False)]
]
op520.node.kernel = extern_kernels.mm


op521: SchedulerNode(ComputedBuffer)
op521.writes = [MemoryDep('buf521', c0, {c0: 8388608}, None)]
op521.unmet_dependencies = [MemoryDep('buf520', c0, {c0: 8388608}, None)]
op521.met_dependencies = [MemoryDep('arg785_1', c1, {c0: 16384, c1: 512}, None)]
op521.outputs = [
    buf521: ComputedBuffer
    buf521.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf521.users = [NodeUser(node=ExternKernelSchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op521.group.device = cuda:0
op521.group.iteration = (8388608, 1)
op521.sizes = ([16384, 512], [])
buf520_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg785_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf521_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op521_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf520', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg785_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf521', get_index_2, relu, None)
        return store
op521 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op522: ExternKernelSchedulerNode(ExternKernelOut)
op522.writes = [StarDep(name='buf522', mode=None)]
op522.unmet_dependencies = [StarDep(name='buf521', mode=None)]
op522.met_dependencies = [StarDep(name='arg786_1', mode=None)]
op522.outputs = [
    buf522: ExternKernelOut
    buf522.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf522.users = [NodeUser(node=SchedulerNode(name='op523'), can_inplace=True, is_weak=False)]
]
op522.node.kernel = extern_kernels.mm


op523: SchedulerNode(ComputedBuffer)
op523.writes = [MemoryDep('buf523', c0, {c0: 2097152}, None)]
op523.unmet_dependencies = 
    [   MemoryDep('buf519', c0, {c0: 2097152}, None),
        MemoryDep('buf522', c0, {c0: 2097152}, None)]
op523.met_dependencies = 
    [   MemoryDep('arg787_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg788_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg789_1', c1, {c0: 16384, c1: 128}, None)]
op523.outputs = [
    buf523: ComputedBuffer
    buf523.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf523.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op524'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False),
    ]
]
op523.group.device = cuda:0
op523.group.iteration = (2097152, 1)
op523.sizes = ([16384, 128], [])
buf522_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg787_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg789_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg788_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op523_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf522', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg787_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf519', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg789_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg788_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf523', get_index_5, add_2, None)
        return store
op523 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op524: ExternKernelSchedulerNode(ExternKernelOut)
op524.writes = [StarDep(name='buf524', mode=None)]
op524.unmet_dependencies = [StarDep(name='buf523', mode=None)]
op524.met_dependencies = [StarDep(name='arg754_1', mode=None)]
op524.outputs = [
    buf524: ExternKernelOut
    buf524.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf524.users = [NodeUser(node=SchedulerNode(name='op525'), can_inplace=True, is_weak=False)]
]
op524.node.kernel = extern_kernels.mm


op525: SchedulerNode(ComputedBuffer)
op525.writes = [MemoryDep('buf525', c0, {c0: 8388608}, None)]
op525.unmet_dependencies = [MemoryDep('buf524', c0, {c0: 8388608}, None)]
op525.met_dependencies = [MemoryDep('arg755_1', c1, {c0: 16384, c1: 512}, None)]
op525.outputs = [
    buf525: ComputedBuffer
    buf525.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf525.users = [NodeUser(node=ExternKernelSchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op525.group.device = cuda:0
op525.group.iteration = (8388608, 1)
op525.sizes = ([16384, 512], [])
buf524_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg755_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op525_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf524', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg755_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf525', get_index_2, relu, None)
        return store
op525 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op526: ExternKernelSchedulerNode(ExternKernelOut)
op526.writes = [StarDep(name='buf526', mode=None)]
op526.unmet_dependencies = [StarDep(name='buf525', mode=None)]
op526.met_dependencies = [StarDep(name='arg756_1', mode=None)]
op526.outputs = [
    buf526: ExternKernelOut
    buf526.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf526.users = [NodeUser(node=SchedulerNode(name='op527'), can_inplace=True, is_weak=False)]
]
op526.node.kernel = extern_kernels.mm


op527: SchedulerNode(ComputedBuffer)
op527.writes = [MemoryDep('buf527', c0, {c0: 2097152}, None)]
op527.unmet_dependencies = 
    [   MemoryDep('buf523', c0, {c0: 2097152}, None),
        MemoryDep('buf526', c0, {c0: 2097152}, None)]
op527.met_dependencies = 
    [   MemoryDep('arg757_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg758_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg759_1', c1, {c0: 16384, c1: 128}, None)]
op527.outputs = [
    buf527: ComputedBuffer
    buf527.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf527.users = [NodeUser(node=ExternKernelSchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op527.group.device = cuda:0
op527.group.iteration = (2097152, 1)
op527.sizes = ([16384, 128], [])
buf526_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg757_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf523_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg759_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg758_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op527_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf526', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg757_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf523', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg759_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg758_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf527', get_index_5, add_2, None)
        return store
op527 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op528: ExternKernelSchedulerNode(ExternKernelOut)
op528.writes = [StarDep(name='buf528', mode=None)]
op528.unmet_dependencies = [StarDep(name='buf527', mode=None)]
op528.met_dependencies = [StarDep(name='arg760_1', mode=None)]
op528.outputs = [
    buf528: ExternKernelOut
    buf528.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf528.users = [NodeUser(node=SchedulerNode(name='op529'), can_inplace=True, is_weak=False)]
]
op528.node.kernel = extern_kernels.mm


op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 8388608}, None)]
op529.unmet_dependencies = 
    [   MemoryDep('buf498', c0, {c0: 8388608}, None),
        MemoryDep('buf528', c0, {c0: 8388608}, None)]
op529.met_dependencies = 
    [   MemoryDep('arg761_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg762_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg763_1', c1, {c0: 16384, c1: 512}, None)]
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf529.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op541'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False),
    ]
]
op529.group.device = cuda:0
op529.group.iteration = (8388608, 1)
op529.sizes = ([16384, 512], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg761_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg763_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg762_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op529_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg761_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf498', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg763_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg762_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf529', get_index_5, add_2, None)
        return store
op529 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op530: ExternKernelSchedulerNode(ExternKernelOut)
op530.writes = [StarDep(name='buf530', mode=None)]
op530.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op530.met_dependencies = [StarDep(name='arg814_1', mode=None)]
op530.outputs = [
    buf530: ExternKernelOut
    buf530.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf530.users = [NodeUser(node=SchedulerNode(name='op531'), can_inplace=True, is_weak=False)]
]
op530.node.kernel = extern_kernels.mm


op531: SchedulerNode(ComputedBuffer)
op531.writes = [MemoryDep('buf531', c0, {c0: 2097152}, None)]
op531.unmet_dependencies = [MemoryDep('buf530', c0, {c0: 2097152}, None)]
op531.met_dependencies = 
    [   MemoryDep('arg815_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg816_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg817_1', c1, {c0: 16384, c1: 128}, None)]
op531.outputs = [
    buf531: ComputedBuffer
    buf531.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf531.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op532'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
    ]
]
op531.group.device = cuda:0
op531.group.iteration = (2097152, 1)
op531.sizes = ([16384, 128], [])
buf530_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg815_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg817_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg816_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf531_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op531_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf530', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg815_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg817_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg816_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf531', get_index_4, add_1, None)
        return store
op531 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op532: ExternKernelSchedulerNode(ExternKernelOut)
op532.writes = [StarDep(name='buf532', mode=None)]
op532.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op532.met_dependencies = [StarDep(name='arg790_1', mode=None), StarDep(name='arg791_1', mode=None)]
op532.outputs = [
    buf532: ExternKernelOut
    buf532.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf532.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op532.node.kernel = extern_kernels.addmm


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf531', mode=None)]
op533.met_dependencies = [StarDep(name='arg792_1', mode=None), StarDep(name='arg793_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf533.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op533.node.kernel = extern_kernels.addmm


op534: ExternKernelSchedulerNode(ExternKernelOut)
op534.writes = [StarDep(name='buf534', mode=None)]
op534.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op534.met_dependencies = [StarDep(name='arg794_1', mode=None), StarDep(name='arg795_1', mode=None)]
op534.outputs = [
    buf534: ExternKernelOut
    buf534.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op535'), can_inplace=False, is_weak=False)]
]
op534.node.kernel = extern_kernels.addmm


op535: ExternKernelSchedulerNode(FallbackKernel)
op535.writes = [StarDep(name='buf535', mode=None)]
op535.unmet_dependencies = 
    [   StarDep(name='buf532', mode=None),
        StarDep(name='buf533', mode=None),
        StarDep(name='buf534', mode=None)]
op535.met_dependencies = []
op535.outputs = [
    buf535: FallbackKernel
    buf535.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf535.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
    ]
]
op535.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op536: ExternKernelSchedulerNode(MultiOutput)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf535', mode=None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: MultiOutput
    buf536.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf536.users = [NodeUser(node=ExternKernelSchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op536.node.kernel = None


op540: ExternKernelSchedulerNode(ExternKernelOut)
op540.writes = [StarDep(name='buf540', mode=None)]
op540.unmet_dependencies = [StarDep(name='buf536', mode=None)]
op540.met_dependencies = [StarDep(name='arg796_1', mode=None)]
op540.outputs = [
    buf540: ExternKernelOut
    buf540.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf540.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op540.node.kernel = extern_kernels.mm


op541: ExternKernelSchedulerNode(ExternKernelOut)
op541.writes = [StarDep(name='buf541', mode=None)]
op541.unmet_dependencies = [StarDep(name='buf529', mode=None)]
op541.met_dependencies = [StarDep(name='arg810_1', mode=None)]
op541.outputs = [
    buf541: ExternKernelOut
    buf541.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf541.users = [NodeUser(node=SchedulerNode(name='op542'), can_inplace=True, is_weak=False)]
]
op541.node.kernel = extern_kernels.mm


op542: SchedulerNode(ComputedBuffer)
op542.writes = [MemoryDep('buf542', c0, {c0: 2097152}, None)]
op542.unmet_dependencies = 
    [   MemoryDep('buf540', c0, {c0: 2097152}, None),
        MemoryDep('buf541', c0, {c0: 2097152}, None)]
op542.met_dependencies = 
    [   MemoryDep('arg797_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg798_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg799_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg811_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg812_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg813_1', c1, {c0: 16384, c1: 128}, None)]
op542.outputs = [
    buf542: ComputedBuffer
    buf542.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf542.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op543'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False),
    ]
]
op542.group.device = cuda:0
op542.group.iteration = (2097152, 1)
op542.sizes = ([16384, 128], [])
buf540_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg797_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg811_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg813_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg812_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg799_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg798_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op542_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf540', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg797_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf541', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg811_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg813_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg812_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg799_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg798_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf542', get_index_8, add_4, None)
        return store
op542 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op543: ExternKernelSchedulerNode(ExternKernelOut)
op543.writes = [StarDep(name='buf543', mode=None)]
op543.unmet_dependencies = [StarDep(name='buf542', mode=None)]
op543.met_dependencies = [StarDep(name='arg818_1', mode=None)]
op543.outputs = [
    buf543: ExternKernelOut
    buf543.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf543.users = [NodeUser(node=SchedulerNode(name='op544'), can_inplace=True, is_weak=False)]
]
op543.node.kernel = extern_kernels.mm


op544: SchedulerNode(ComputedBuffer)
op544.writes = [MemoryDep('buf544', c0, {c0: 8388608}, None)]
op544.unmet_dependencies = [MemoryDep('buf543', c0, {c0: 8388608}, None)]
op544.met_dependencies = [MemoryDep('arg819_1', c1, {c0: 16384, c1: 512}, None)]
op544.outputs = [
    buf544: ComputedBuffer
    buf544.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf544.users = [NodeUser(node=ExternKernelSchedulerNode(name='op545'), can_inplace=False, is_weak=False)]
]
op544.group.device = cuda:0
op544.group.iteration = (8388608, 1)
op544.sizes = ([16384, 512], [])
buf543_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg819_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op544_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf543', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg819_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf544', get_index_2, relu, None)
        return store
op544 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op545: ExternKernelSchedulerNode(ExternKernelOut)
op545.writes = [StarDep(name='buf545', mode=None)]
op545.unmet_dependencies = [StarDep(name='buf544', mode=None)]
op545.met_dependencies = [StarDep(name='arg820_1', mode=None)]
op545.outputs = [
    buf545: ExternKernelOut
    buf545.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf545.users = [NodeUser(node=SchedulerNode(name='op546'), can_inplace=True, is_weak=False)]
]
op545.node.kernel = extern_kernels.mm


op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 2097152}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf542', c0, {c0: 2097152}, None),
        MemoryDep('buf545', c0, {c0: 2097152}, None)]
op546.met_dependencies = 
    [   MemoryDep('arg821_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg822_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg823_1', c1, {c0: 16384, c1: 128}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf546.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False),
    ]
]
op546.group.device = cuda:0
op546.group.iteration = (2097152, 1)
op546.sizes = ([16384, 128], [])
buf545_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg821_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf542_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg823_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg822_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op546_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf545', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg821_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf542', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg823_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg822_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf546', get_index_5, add_2, None)
        return store
op546 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op547: ExternKernelSchedulerNode(ExternKernelOut)
op547.writes = [StarDep(name='buf547', mode=None)]
op547.unmet_dependencies = [StarDep(name='buf546', mode=None)]
op547.met_dependencies = [StarDep(name='arg824_1', mode=None)]
op547.outputs = [
    buf547: ExternKernelOut
    buf547.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf547.users = [NodeUser(node=SchedulerNode(name='op548'), can_inplace=True, is_weak=False)]
]
op547.node.kernel = extern_kernels.mm


op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 8388608}, None)]
op548.unmet_dependencies = [MemoryDep('buf547', c0, {c0: 8388608}, None)]
op548.met_dependencies = [MemoryDep('arg825_1', c1, {c0: 16384, c1: 512}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf548.users = [NodeUser(node=ExternKernelSchedulerNode(name='op549'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (8388608, 1)
op548.sizes = ([16384, 512], [])
buf547_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg825_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op548_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf547', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg825_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf548', get_index_2, relu, None)
        return store
op548 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op549: ExternKernelSchedulerNode(ExternKernelOut)
op549.writes = [StarDep(name='buf549', mode=None)]
op549.unmet_dependencies = [StarDep(name='buf548', mode=None)]
op549.met_dependencies = [StarDep(name='arg826_1', mode=None)]
op549.outputs = [
    buf549: ExternKernelOut
    buf549.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf549.users = [NodeUser(node=SchedulerNode(name='op550'), can_inplace=True, is_weak=False)]
]
op549.node.kernel = extern_kernels.mm


op550: SchedulerNode(ComputedBuffer)
op550.writes = [MemoryDep('buf550', c0, {c0: 2097152}, None)]
op550.unmet_dependencies = 
    [   MemoryDep('buf546', c0, {c0: 2097152}, None),
        MemoryDep('buf549', c0, {c0: 2097152}, None)]
op550.met_dependencies = 
    [   MemoryDep('arg827_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg828_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg829_1', c1, {c0: 16384, c1: 128}, None)]
op550.outputs = [
    buf550: ComputedBuffer
    buf550.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf550.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op551'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False),
    ]
]
op550.group.device = cuda:0
op550.group.iteration = (2097152, 1)
op550.sizes = ([16384, 128], [])
buf549_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg827_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg829_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg828_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op550_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf549', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg827_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf546', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg829_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg828_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf550', get_index_5, add_2, None)
        return store
op550 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op551: ExternKernelSchedulerNode(ExternKernelOut)
op551.writes = [StarDep(name='buf551', mode=None)]
op551.unmet_dependencies = [StarDep(name='buf550', mode=None)]
op551.met_dependencies = [StarDep(name='arg830_1', mode=None)]
op551.outputs = [
    buf551: ExternKernelOut
    buf551.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf551.users = [NodeUser(node=SchedulerNode(name='op552'), can_inplace=True, is_weak=False)]
]
op551.node.kernel = extern_kernels.mm


op552: SchedulerNode(ComputedBuffer)
op552.writes = [MemoryDep('buf552', c0, {c0: 8388608}, None)]
op552.unmet_dependencies = [MemoryDep('buf551', c0, {c0: 8388608}, None)]
op552.met_dependencies = [MemoryDep('arg831_1', c1, {c0: 16384, c1: 512}, None)]
op552.outputs = [
    buf552: ComputedBuffer
    buf552.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf552.users = [NodeUser(node=ExternKernelSchedulerNode(name='op553'), can_inplace=False, is_weak=False)]
]
op552.group.device = cuda:0
op552.group.iteration = (8388608, 1)
op552.sizes = ([16384, 512], [])
buf551_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg831_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf552_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op552_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf551', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg831_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf552', get_index_2, relu, None)
        return store
op552 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op553: ExternKernelSchedulerNode(ExternKernelOut)
op553.writes = [StarDep(name='buf553', mode=None)]
op553.unmet_dependencies = [StarDep(name='buf552', mode=None)]
op553.met_dependencies = [StarDep(name='arg832_1', mode=None)]
op553.outputs = [
    buf553: ExternKernelOut
    buf553.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf553.users = [NodeUser(node=SchedulerNode(name='op554'), can_inplace=True, is_weak=False)]
]
op553.node.kernel = extern_kernels.mm


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 2097152}, None)]
op554.unmet_dependencies = 
    [   MemoryDep('buf550', c0, {c0: 2097152}, None),
        MemoryDep('buf553', c0, {c0: 2097152}, None)]
op554.met_dependencies = 
    [   MemoryDep('arg833_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg834_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg835_1', c1, {c0: 16384, c1: 128}, None)]
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf554.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op558'), can_inplace=True, is_weak=False),
    ]
]
op554.group.device = cuda:0
op554.group.iteration = (2097152, 1)
op554.sizes = ([16384, 128], [])
buf553_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg833_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf550_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg835_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg834_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op554_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf553', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg833_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf550', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg835_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg834_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf554', get_index_5, add_2, None)
        return store
op554 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf554', mode=None)]
op555.met_dependencies = [StarDep(name='arg800_1', mode=None)]
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf555.users = [NodeUser(node=SchedulerNode(name='op556'), can_inplace=True, is_weak=False)]
]
op555.node.kernel = extern_kernels.mm


op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 8388608}, None)]
op556.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 8388608}, None)]
op556.met_dependencies = [MemoryDep('arg801_1', c1, {c0: 16384, c1: 512}, None)]
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf556.users = [NodeUser(node=ExternKernelSchedulerNode(name='op557'), can_inplace=False, is_weak=False)]
]
op556.group.device = cuda:0
op556.group.iteration = (8388608, 1)
op556.sizes = ([16384, 512], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg801_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op556_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg801_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf556', get_index_2, relu, None)
        return store
op556 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op557: ExternKernelSchedulerNode(ExternKernelOut)
op557.writes = [StarDep(name='buf557', mode=None)]
op557.unmet_dependencies = [StarDep(name='buf556', mode=None)]
op557.met_dependencies = [StarDep(name='arg802_1', mode=None)]
op557.outputs = [
    buf557: ExternKernelOut
    buf557.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf557.users = [NodeUser(node=SchedulerNode(name='op558'), can_inplace=True, is_weak=False)]
]
op557.node.kernel = extern_kernels.mm


op558: SchedulerNode(ComputedBuffer)
op558.writes = [MemoryDep('buf558', c0, {c0: 2097152}, None)]
op558.unmet_dependencies = 
    [   MemoryDep('buf554', c0, {c0: 2097152}, None),
        MemoryDep('buf557', c0, {c0: 2097152}, None)]
op558.met_dependencies = 
    [   MemoryDep('arg803_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg804_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg805_1', c1, {c0: 16384, c1: 128}, None)]
op558.outputs = [
    buf558: ComputedBuffer
    buf558.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf558.users = [NodeUser(node=ExternKernelSchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op558.group.device = cuda:0
op558.group.iteration = (2097152, 1)
op558.sizes = ([16384, 128], [])
buf557_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg803_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg805_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg804_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf558_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op558_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf557', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg803_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf554', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg805_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg804_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf558', get_index_5, add_2, None)
        return store
op558 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op559: ExternKernelSchedulerNode(ExternKernelOut)
op559.writes = [StarDep(name='buf559', mode=None)]
op559.unmet_dependencies = [StarDep(name='buf558', mode=None)]
op559.met_dependencies = [StarDep(name='arg806_1', mode=None)]
op559.outputs = [
    buf559: ExternKernelOut
    buf559.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf559.users = [NodeUser(node=SchedulerNode(name='op560'), can_inplace=True, is_weak=False)]
]
op559.node.kernel = extern_kernels.mm


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 8388608}, None)]
op560.unmet_dependencies = 
    [   MemoryDep('buf529', c0, {c0: 8388608}, None),
        MemoryDep('buf559', c0, {c0: 8388608}, None)]
op560.met_dependencies = 
    [   MemoryDep('arg807_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg808_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg809_1', c1, {c0: 16384, c1: 512}, None)]
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf560.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=True, is_weak=False),
    ]
]
op560.group.device = cuda:0
op560.group.iteration = (8388608, 1)
op560.sizes = ([16384, 512], [])
buf559_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg807_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg809_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg808_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op560_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf559', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg807_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf529', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg809_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg808_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf560', get_index_5, add_2, None)
        return store
op560 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf560', mode=None)]
op561.met_dependencies = [StarDep(name='arg860_1', mode=None)]
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf561.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=True, is_weak=False)]
]
op561.node.kernel = extern_kernels.mm


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 2097152}, None)]
op562.unmet_dependencies = [MemoryDep('buf561', c0, {c0: 2097152}, None)]
op562.met_dependencies = 
    [   MemoryDep('arg861_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg862_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg863_1', c1, {c0: 16384, c1: 128}, None)]
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf562.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op564'), can_inplace=False, is_weak=False),
    ]
]
op562.group.device = cuda:0
op562.group.iteration = (2097152, 1)
op562.sizes = ([16384, 128], [])
buf561_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg861_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg863_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg862_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op562_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg861_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg863_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg862_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf562', get_index_4, add_1, None)
        return store
op562 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op563.met_dependencies = [StarDep(name='arg836_1', mode=None), StarDep(name='arg837_1', mode=None)]
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf563.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op563.node.kernel = extern_kernels.addmm


op564: ExternKernelSchedulerNode(ExternKernelOut)
op564.writes = [StarDep(name='buf564', mode=None)]
op564.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op564.met_dependencies = [StarDep(name='arg838_1', mode=None), StarDep(name='arg839_1', mode=None)]
op564.outputs = [
    buf564: ExternKernelOut
    buf564.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf564.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op564.node.kernel = extern_kernels.addmm


op565: ExternKernelSchedulerNode(ExternKernelOut)
op565.writes = [StarDep(name='buf565', mode=None)]
op565.unmet_dependencies = [StarDep(name='buf560', mode=None)]
op565.met_dependencies = [StarDep(name='arg840_1', mode=None), StarDep(name='arg841_1', mode=None)]
op565.outputs = [
    buf565: ExternKernelOut
    buf565.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf565.users = [NodeUser(node=ExternKernelSchedulerNode(name='op566'), can_inplace=False, is_weak=False)]
]
op565.node.kernel = extern_kernels.addmm


op566: ExternKernelSchedulerNode(FallbackKernel)
op566.writes = [StarDep(name='buf566', mode=None)]
op566.unmet_dependencies = 
    [   StarDep(name='buf563', mode=None),
        StarDep(name='buf564', mode=None),
        StarDep(name='buf565', mode=None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: FallbackKernel
    buf566.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf566.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op568'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op570'), can_inplace=False, is_weak=False),
    ]
]
op566.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op567: ExternKernelSchedulerNode(MultiOutput)
op567.writes = [StarDep(name='buf567', mode=None)]
op567.unmet_dependencies = [StarDep(name='buf566', mode=None)]
op567.met_dependencies = []
op567.outputs = [
    buf567: MultiOutput
    buf567.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf567.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op567.node.kernel = None


op571: ExternKernelSchedulerNode(ExternKernelOut)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf567', mode=None)]
op571.met_dependencies = [StarDep(name='arg842_1', mode=None)]
op571.outputs = [
    buf571: ExternKernelOut
    buf571.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf571.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False)]
]
op571.node.kernel = extern_kernels.mm


op572: ExternKernelSchedulerNode(ExternKernelOut)
op572.writes = [StarDep(name='buf572', mode=None)]
op572.unmet_dependencies = [StarDep(name='buf560', mode=None)]
op572.met_dependencies = [StarDep(name='arg856_1', mode=None)]
op572.outputs = [
    buf572: ExternKernelOut
    buf572.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf572.users = [NodeUser(node=SchedulerNode(name='op573'), can_inplace=True, is_weak=False)]
]
op572.node.kernel = extern_kernels.mm


op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 2097152}, None)]
op573.unmet_dependencies = 
    [   MemoryDep('buf571', c0, {c0: 2097152}, None),
        MemoryDep('buf572', c0, {c0: 2097152}, None)]
op573.met_dependencies = 
    [   MemoryDep('arg843_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg844_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg845_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg857_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg858_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg859_1', c1, {c0: 16384, c1: 128}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf573.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False),
    ]
]
op573.group.device = cuda:0
op573.group.iteration = (2097152, 1)
op573.sizes = ([16384, 128], [])
buf571_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg843_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg857_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg859_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg858_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg845_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg844_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op573_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf571', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg843_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf572', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg857_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg859_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg858_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg845_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg844_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf573', get_index_8, add_4, None)
        return store
op573 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op574: ExternKernelSchedulerNode(ExternKernelOut)
op574.writes = [StarDep(name='buf574', mode=None)]
op574.unmet_dependencies = [StarDep(name='buf573', mode=None)]
op574.met_dependencies = [StarDep(name='arg864_1', mode=None)]
op574.outputs = [
    buf574: ExternKernelOut
    buf574.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf574.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False)]
]
op574.node.kernel = extern_kernels.mm


op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 8388608}, None)]
op575.unmet_dependencies = [MemoryDep('buf574', c0, {c0: 8388608}, None)]
op575.met_dependencies = [MemoryDep('arg865_1', c1, {c0: 16384, c1: 512}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (8388608, 1)
op575.sizes = ([16384, 512], [])
buf574_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg865_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op575_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf574', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg865_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf575', get_index_2, relu, None)
        return store
op575 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op576: ExternKernelSchedulerNode(ExternKernelOut)
op576.writes = [StarDep(name='buf576', mode=None)]
op576.unmet_dependencies = [StarDep(name='buf575', mode=None)]
op576.met_dependencies = [StarDep(name='arg866_1', mode=None)]
op576.outputs = [
    buf576: ExternKernelOut
    buf576.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False)]
]
op576.node.kernel = extern_kernels.mm


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 2097152}, None)]
op577.unmet_dependencies = 
    [   MemoryDep('buf573', c0, {c0: 2097152}, None),
        MemoryDep('buf576', c0, {c0: 2097152}, None)]
op577.met_dependencies = 
    [   MemoryDep('arg867_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg868_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg869_1', c1, {c0: 16384, c1: 128}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf577.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False),
    ]
]
op577.group.device = cuda:0
op577.group.iteration = (2097152, 1)
op577.sizes = ([16384, 128], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg867_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg869_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg868_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op577_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg867_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf573', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg869_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg868_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf577', get_index_5, add_2, None)
        return store
op577 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op578.met_dependencies = [StarDep(name='arg870_1', mode=None)]
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf578.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False)]
]
op578.node.kernel = extern_kernels.mm


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 8388608}, None)]
op579.unmet_dependencies = [MemoryDep('buf578', c0, {c0: 8388608}, None)]
op579.met_dependencies = [MemoryDep('arg871_1', c1, {c0: 16384, c1: 512}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf579.users = [NodeUser(node=ExternKernelSchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op579.group.device = cuda:0
op579.group.iteration = (8388608, 1)
op579.sizes = ([16384, 512], [])
buf578_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg871_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op579_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf578', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg871_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf579', get_index_2, relu, None)
        return store
op579 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op580: ExternKernelSchedulerNode(ExternKernelOut)
op580.writes = [StarDep(name='buf580', mode=None)]
op580.unmet_dependencies = [StarDep(name='buf579', mode=None)]
op580.met_dependencies = [StarDep(name='arg872_1', mode=None)]
op580.outputs = [
    buf580: ExternKernelOut
    buf580.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf580.users = [NodeUser(node=SchedulerNode(name='op581'), can_inplace=True, is_weak=False)]
]
op580.node.kernel = extern_kernels.mm


op581: SchedulerNode(ComputedBuffer)
op581.writes = [MemoryDep('buf581', c0, {c0: 2097152}, None)]
op581.unmet_dependencies = 
    [   MemoryDep('buf577', c0, {c0: 2097152}, None),
        MemoryDep('buf580', c0, {c0: 2097152}, None)]
op581.met_dependencies = 
    [   MemoryDep('arg873_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg874_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg875_1', c1, {c0: 16384, c1: 128}, None)]
op581.outputs = [
    buf581: ComputedBuffer
    buf581.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf581.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=True, is_weak=False),
    ]
]
op581.group.device = cuda:0
op581.group.iteration = (2097152, 1)
op581.sizes = ([16384, 128], [])
buf580_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg873_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg875_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg874_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op581_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf580', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg873_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf577', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg875_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg874_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf581', get_index_5, add_2, None)
        return store
op581 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op582: ExternKernelSchedulerNode(ExternKernelOut)
op582.writes = [StarDep(name='buf582', mode=None)]
op582.unmet_dependencies = [StarDep(name='buf581', mode=None)]
op582.met_dependencies = [StarDep(name='arg876_1', mode=None)]
op582.outputs = [
    buf582: ExternKernelOut
    buf582.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf582.users = [NodeUser(node=SchedulerNode(name='op583'), can_inplace=True, is_weak=False)]
]
op582.node.kernel = extern_kernels.mm


op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 8388608}, None)]
op583.unmet_dependencies = [MemoryDep('buf582', c0, {c0: 8388608}, None)]
op583.met_dependencies = [MemoryDep('arg877_1', c1, {c0: 16384, c1: 512}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf583.users = [NodeUser(node=ExternKernelSchedulerNode(name='op584'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (8388608, 1)
op583.sizes = ([16384, 512], [])
buf582_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg877_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op583_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf582', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg877_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf583', get_index_2, relu, None)
        return store
op583 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op584: ExternKernelSchedulerNode(ExternKernelOut)
op584.writes = [StarDep(name='buf584', mode=None)]
op584.unmet_dependencies = [StarDep(name='buf583', mode=None)]
op584.met_dependencies = [StarDep(name='arg878_1', mode=None)]
op584.outputs = [
    buf584: ExternKernelOut
    buf584.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf584.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=True, is_weak=False)]
]
op584.node.kernel = extern_kernels.mm


op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 2097152}, None)]
op585.unmet_dependencies = 
    [   MemoryDep('buf581', c0, {c0: 2097152}, None),
        MemoryDep('buf584', c0, {c0: 2097152}, None)]
op585.met_dependencies = 
    [   MemoryDep('arg879_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg880_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg881_1', c1, {c0: 16384, c1: 128}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf585.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op586'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False),
    ]
]
op585.group.device = cuda:0
op585.group.iteration = (2097152, 1)
op585.sizes = ([16384, 128], [])
buf584_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg879_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg881_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg880_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op585_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf584', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg879_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf581', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg881_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg880_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf585', get_index_5, add_2, None)
        return store
op585 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op586: ExternKernelSchedulerNode(ExternKernelOut)
op586.writes = [StarDep(name='buf586', mode=None)]
op586.unmet_dependencies = [StarDep(name='buf585', mode=None)]
op586.met_dependencies = [StarDep(name='arg846_1', mode=None)]
op586.outputs = [
    buf586: ExternKernelOut
    buf586.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf586.users = [NodeUser(node=SchedulerNode(name='op587'), can_inplace=True, is_weak=False)]
]
op586.node.kernel = extern_kernels.mm


op587: SchedulerNode(ComputedBuffer)
op587.writes = [MemoryDep('buf587', c0, {c0: 8388608}, None)]
op587.unmet_dependencies = [MemoryDep('buf586', c0, {c0: 8388608}, None)]
op587.met_dependencies = [MemoryDep('arg847_1', c1, {c0: 16384, c1: 512}, None)]
op587.outputs = [
    buf587: ComputedBuffer
    buf587.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf587.users = [NodeUser(node=ExternKernelSchedulerNode(name='op588'), can_inplace=False, is_weak=False)]
]
op587.group.device = cuda:0
op587.group.iteration = (8388608, 1)
op587.sizes = ([16384, 512], [])
buf586_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg847_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf587_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op587_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf586', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg847_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf587', get_index_2, relu, None)
        return store
op587 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op588: ExternKernelSchedulerNode(ExternKernelOut)
op588.writes = [StarDep(name='buf588', mode=None)]
op588.unmet_dependencies = [StarDep(name='buf587', mode=None)]
op588.met_dependencies = [StarDep(name='arg848_1', mode=None)]
op588.outputs = [
    buf588: ExternKernelOut
    buf588.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf588.users = [NodeUser(node=SchedulerNode(name='op589'), can_inplace=True, is_weak=False)]
]
op588.node.kernel = extern_kernels.mm


op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 2097152}, None)]
op589.unmet_dependencies = 
    [   MemoryDep('buf585', c0, {c0: 2097152}, None),
        MemoryDep('buf588', c0, {c0: 2097152}, None)]
op589.met_dependencies = 
    [   MemoryDep('arg849_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg850_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg851_1', c1, {c0: 16384, c1: 128}, None)]
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf589.users = [NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.group.device = cuda:0
op589.group.iteration = (2097152, 1)
op589.sizes = ([16384, 128], [])
buf588_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg849_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg851_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg850_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op589_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf588', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg849_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf585', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg851_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg850_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf589', get_index_5, add_2, None)
        return store
op589 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op590: ExternKernelSchedulerNode(ExternKernelOut)
op590.writes = [StarDep(name='buf590', mode=None)]
op590.unmet_dependencies = [StarDep(name='buf589', mode=None)]
op590.met_dependencies = [StarDep(name='arg852_1', mode=None)]
op590.outputs = [
    buf590: ExternKernelOut
    buf590.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf590.users = [NodeUser(node=SchedulerNode(name='op591'), can_inplace=True, is_weak=False)]
]
op590.node.kernel = extern_kernels.mm


op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', c0, {c0: 8388608}, None)]
op591.unmet_dependencies = 
    [   MemoryDep('buf560', c0, {c0: 8388608}, None),
        MemoryDep('buf590', c0, {c0: 8388608}, None)]
op591.met_dependencies = 
    [   MemoryDep('arg853_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg854_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg855_1', c1, {c0: 16384, c1: 512}, None)]
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf591.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False),
    ]
]
op591.group.device = cuda:0
op591.group.iteration = (8388608, 1)
op591.sizes = ([16384, 512], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg853_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg855_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg854_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op591_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg853_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf560', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg855_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg854_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf591', get_index_5, add_2, None)
        return store
op591 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op592: ExternKernelSchedulerNode(ExternKernelOut)
op592.writes = [StarDep(name='buf592', mode=None)]
op592.unmet_dependencies = [StarDep(name='buf591', mode=None)]
op592.met_dependencies = [StarDep(name='arg906_1', mode=None)]
op592.outputs = [
    buf592: ExternKernelOut
    buf592.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf592.users = [NodeUser(node=SchedulerNode(name='op593'), can_inplace=True, is_weak=False)]
]
op592.node.kernel = extern_kernels.mm


op593: SchedulerNode(ComputedBuffer)
op593.writes = [MemoryDep('buf593', c0, {c0: 2097152}, None)]
op593.unmet_dependencies = [MemoryDep('buf592', c0, {c0: 2097152}, None)]
op593.met_dependencies = 
    [   MemoryDep('arg907_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg908_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg909_1', c1, {c0: 16384, c1: 128}, None)]
op593.outputs = [
    buf593: ComputedBuffer
    buf593.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf593.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op594'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op595'), can_inplace=False, is_weak=False),
    ]
]
op593.group.device = cuda:0
op593.group.iteration = (2097152, 1)
op593.sizes = ([16384, 128], [])
buf592_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg907_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg909_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg908_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf593_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op593_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf592', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg907_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg909_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg908_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf593', get_index_4, add_1, None)
        return store
op593 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op594: ExternKernelSchedulerNode(ExternKernelOut)
op594.writes = [StarDep(name='buf594', mode=None)]
op594.unmet_dependencies = [StarDep(name='buf593', mode=None)]
op594.met_dependencies = [StarDep(name='arg882_1', mode=None), StarDep(name='arg883_1', mode=None)]
op594.outputs = [
    buf594: ExternKernelOut
    buf594.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op594.node.kernel = extern_kernels.addmm


op595: ExternKernelSchedulerNode(ExternKernelOut)
op595.writes = [StarDep(name='buf595', mode=None)]
op595.unmet_dependencies = [StarDep(name='buf593', mode=None)]
op595.met_dependencies = [StarDep(name='arg884_1', mode=None), StarDep(name='arg885_1', mode=None)]
op595.outputs = [
    buf595: ExternKernelOut
    buf595.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf595.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op595.node.kernel = extern_kernels.addmm


op596: ExternKernelSchedulerNode(ExternKernelOut)
op596.writes = [StarDep(name='buf596', mode=None)]
op596.unmet_dependencies = [StarDep(name='buf591', mode=None)]
op596.met_dependencies = [StarDep(name='arg886_1', mode=None), StarDep(name='arg887_1', mode=None)]
op596.outputs = [
    buf596: ExternKernelOut
    buf596.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf596.users = [NodeUser(node=ExternKernelSchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.node.kernel = extern_kernels.addmm


op597: ExternKernelSchedulerNode(FallbackKernel)
op597.writes = [StarDep(name='buf597', mode=None)]
op597.unmet_dependencies = 
    [   StarDep(name='buf594', mode=None),
        StarDep(name='buf595', mode=None),
        StarDep(name='buf596', mode=None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: FallbackKernel
    buf597.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf597.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op599'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op601'), can_inplace=False, is_weak=False),
    ]
]
op597.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op598: ExternKernelSchedulerNode(MultiOutput)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf597', mode=None)]
op598.met_dependencies = []
op598.outputs = [
    buf598: MultiOutput
    buf598.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf598.users = [NodeUser(node=ExternKernelSchedulerNode(name='op602'), can_inplace=False, is_weak=False)]
]
op598.node.kernel = None


op602: ExternKernelSchedulerNode(ExternKernelOut)
op602.writes = [StarDep(name='buf602', mode=None)]
op602.unmet_dependencies = [StarDep(name='buf598', mode=None)]
op602.met_dependencies = [StarDep(name='arg888_1', mode=None)]
op602.outputs = [
    buf602: ExternKernelOut
    buf602.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf602.users = [NodeUser(node=SchedulerNode(name='op604'), can_inplace=True, is_weak=False)]
]
op602.node.kernel = extern_kernels.mm


op603: ExternKernelSchedulerNode(ExternKernelOut)
op603.writes = [StarDep(name='buf603', mode=None)]
op603.unmet_dependencies = [StarDep(name='buf591', mode=None)]
op603.met_dependencies = [StarDep(name='arg902_1', mode=None)]
op603.outputs = [
    buf603: ExternKernelOut
    buf603.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf603.users = [NodeUser(node=SchedulerNode(name='op604'), can_inplace=True, is_weak=False)]
]
op603.node.kernel = extern_kernels.mm


op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 2097152}, None)]
op604.unmet_dependencies = 
    [   MemoryDep('buf602', c0, {c0: 2097152}, None),
        MemoryDep('buf603', c0, {c0: 2097152}, None)]
op604.met_dependencies = 
    [   MemoryDep('arg889_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg890_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg891_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg903_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg904_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg905_1', c1, {c0: 16384, c1: 128}, None)]
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf604.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=True, is_weak=False),
    ]
]
op604.group.device = cuda:0
op604.group.iteration = (2097152, 1)
op604.sizes = ([16384, 128], [])
buf602_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg889_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg903_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg905_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg904_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg891_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg890_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op604_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf602', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg889_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf603', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg903_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg905_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg904_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg891_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg890_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf604', get_index_8, add_4, None)
        return store
op604 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op605: ExternKernelSchedulerNode(ExternKernelOut)
op605.writes = [StarDep(name='buf605', mode=None)]
op605.unmet_dependencies = [StarDep(name='buf604', mode=None)]
op605.met_dependencies = [StarDep(name='arg910_1', mode=None)]
op605.outputs = [
    buf605: ExternKernelOut
    buf605.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf605.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False)]
]
op605.node.kernel = extern_kernels.mm


op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 8388608}, None)]
op606.unmet_dependencies = [MemoryDep('buf605', c0, {c0: 8388608}, None)]
op606.met_dependencies = [MemoryDep('arg911_1', c1, {c0: 16384, c1: 512}, None)]
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf606.users = [NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False)]
]
op606.group.device = cuda:0
op606.group.iteration = (8388608, 1)
op606.sizes = ([16384, 512], [])
buf605_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg911_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op606_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf605', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg911_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf606', get_index_2, relu, None)
        return store
op606 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op607.met_dependencies = [StarDep(name='arg912_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf607.users = [NodeUser(node=SchedulerNode(name='op608'), can_inplace=True, is_weak=False)]
]
op607.node.kernel = extern_kernels.mm


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 2097152}, None)]
op608.unmet_dependencies = 
    [   MemoryDep('buf604', c0, {c0: 2097152}, None),
        MemoryDep('buf607', c0, {c0: 2097152}, None)]
op608.met_dependencies = 
    [   MemoryDep('arg913_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg914_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg915_1', c1, {c0: 16384, c1: 128}, None)]
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf608.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op609'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
    ]
]
op608.group.device = cuda:0
op608.group.iteration = (2097152, 1)
op608.sizes = ([16384, 128], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg913_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg915_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg914_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op608_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg913_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf604', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg915_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg914_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf608', get_index_5, add_2, None)
        return store
op608 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op609: ExternKernelSchedulerNode(ExternKernelOut)
op609.writes = [StarDep(name='buf609', mode=None)]
op609.unmet_dependencies = [StarDep(name='buf608', mode=None)]
op609.met_dependencies = [StarDep(name='arg916_1', mode=None)]
op609.outputs = [
    buf609: ExternKernelOut
    buf609.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf609.users = [NodeUser(node=SchedulerNode(name='op610'), can_inplace=True, is_weak=False)]
]
op609.node.kernel = extern_kernels.mm


op610: SchedulerNode(ComputedBuffer)
op610.writes = [MemoryDep('buf610', c0, {c0: 8388608}, None)]
op610.unmet_dependencies = [MemoryDep('buf609', c0, {c0: 8388608}, None)]
op610.met_dependencies = [MemoryDep('arg917_1', c1, {c0: 16384, c1: 512}, None)]
op610.outputs = [
    buf610: ComputedBuffer
    buf610.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf610.users = [NodeUser(node=ExternKernelSchedulerNode(name='op611'), can_inplace=False, is_weak=False)]
]
op610.group.device = cuda:0
op610.group.iteration = (8388608, 1)
op610.sizes = ([16384, 512], [])
buf609_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg917_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf610_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op610_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf609', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg917_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf610', get_index_2, relu, None)
        return store
op610 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op611: ExternKernelSchedulerNode(ExternKernelOut)
op611.writes = [StarDep(name='buf611', mode=None)]
op611.unmet_dependencies = [StarDep(name='buf610', mode=None)]
op611.met_dependencies = [StarDep(name='arg918_1', mode=None)]
op611.outputs = [
    buf611: ExternKernelOut
    buf611.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf611.users = [NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False)]
]
op611.node.kernel = extern_kernels.mm


op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 2097152}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf608', c0, {c0: 2097152}, None),
        MemoryDep('buf611', c0, {c0: 2097152}, None)]
op612.met_dependencies = 
    [   MemoryDep('arg919_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg920_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg921_1', c1, {c0: 16384, c1: 128}, None)]
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf612.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op616'), can_inplace=True, is_weak=False),
    ]
]
op612.group.device = cuda:0
op612.group.iteration = (2097152, 1)
op612.sizes = ([16384, 128], [])
buf611_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg919_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg921_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg920_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op612_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf611', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg919_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf608', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg921_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg920_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf612', get_index_5, add_2, None)
        return store
op612 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf612', mode=None)]
op613.met_dependencies = [StarDep(name='arg922_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False)]
]
op613.node.kernel = extern_kernels.mm


op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 8388608}, None)]
op614.unmet_dependencies = [MemoryDep('buf613', c0, {c0: 8388608}, None)]
op614.met_dependencies = [MemoryDep('arg923_1', c1, {c0: 16384, c1: 512}, None)]
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf614.users = [NodeUser(node=ExternKernelSchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op614.group.device = cuda:0
op614.group.iteration = (8388608, 1)
op614.sizes = ([16384, 512], [])
buf613_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg923_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf614_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op614_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg923_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf614', get_index_2, relu, None)
        return store
op614 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op615: ExternKernelSchedulerNode(ExternKernelOut)
op615.writes = [StarDep(name='buf615', mode=None)]
op615.unmet_dependencies = [StarDep(name='buf614', mode=None)]
op615.met_dependencies = [StarDep(name='arg924_1', mode=None)]
op615.outputs = [
    buf615: ExternKernelOut
    buf615.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf615.users = [NodeUser(node=SchedulerNode(name='op616'), can_inplace=True, is_weak=False)]
]
op615.node.kernel = extern_kernels.mm


op616: SchedulerNode(ComputedBuffer)
op616.writes = [MemoryDep('buf616', c0, {c0: 2097152}, None)]
op616.unmet_dependencies = 
    [   MemoryDep('buf612', c0, {c0: 2097152}, None),
        MemoryDep('buf615', c0, {c0: 2097152}, None)]
op616.met_dependencies = 
    [   MemoryDep('arg925_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg926_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg927_1', c1, {c0: 16384, c1: 128}, None)]
op616.outputs = [
    buf616: ComputedBuffer
    buf616.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf616.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op617'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=True, is_weak=False),
    ]
]
op616.group.device = cuda:0
op616.group.iteration = (2097152, 1)
op616.sizes = ([16384, 128], [])
buf615_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg925_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf612_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg927_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg926_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op616_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf615', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg925_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf612', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg927_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg926_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf616', get_index_5, add_2, None)
        return store
op616 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op617: ExternKernelSchedulerNode(ExternKernelOut)
op617.writes = [StarDep(name='buf617', mode=None)]
op617.unmet_dependencies = [StarDep(name='buf616', mode=None)]
op617.met_dependencies = [StarDep(name='arg892_1', mode=None)]
op617.outputs = [
    buf617: ExternKernelOut
    buf617.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf617.users = [NodeUser(node=SchedulerNode(name='op618'), can_inplace=True, is_weak=False)]
]
op617.node.kernel = extern_kernels.mm


op618: SchedulerNode(ComputedBuffer)
op618.writes = [MemoryDep('buf618', c0, {c0: 8388608}, None)]
op618.unmet_dependencies = [MemoryDep('buf617', c0, {c0: 8388608}, None)]
op618.met_dependencies = [MemoryDep('arg893_1', c1, {c0: 16384, c1: 512}, None)]
op618.outputs = [
    buf618: ComputedBuffer
    buf618.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf618.users = [NodeUser(node=ExternKernelSchedulerNode(name='op619'), can_inplace=False, is_weak=False)]
]
op618.group.device = cuda:0
op618.group.iteration = (8388608, 1)
op618.sizes = ([16384, 512], [])
buf617_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg893_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op618_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf617', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg893_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf618', get_index_2, relu, None)
        return store
op618 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op619: ExternKernelSchedulerNode(ExternKernelOut)
op619.writes = [StarDep(name='buf619', mode=None)]
op619.unmet_dependencies = [StarDep(name='buf618', mode=None)]
op619.met_dependencies = [StarDep(name='arg894_1', mode=None)]
op619.outputs = [
    buf619: ExternKernelOut
    buf619.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf619.users = [NodeUser(node=SchedulerNode(name='op620'), can_inplace=True, is_weak=False)]
]
op619.node.kernel = extern_kernels.mm


op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 2097152}, None)]
op620.unmet_dependencies = 
    [   MemoryDep('buf616', c0, {c0: 2097152}, None),
        MemoryDep('buf619', c0, {c0: 2097152}, None)]
op620.met_dependencies = 
    [   MemoryDep('arg895_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg896_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg897_1', c1, {c0: 16384, c1: 128}, None)]
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf620.users = [NodeUser(node=ExternKernelSchedulerNode(name='op621'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (2097152, 1)
op620.sizes = ([16384, 128], [])
buf619_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg895_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf616_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg897_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg896_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op620_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg895_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf616', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg897_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg896_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf620', get_index_5, add_2, None)
        return store
op620 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op621: ExternKernelSchedulerNode(ExternKernelOut)
op621.writes = [StarDep(name='buf621', mode=None)]
op621.unmet_dependencies = [StarDep(name='buf620', mode=None)]
op621.met_dependencies = [StarDep(name='arg898_1', mode=None)]
op621.outputs = [
    buf621: ExternKernelOut
    buf621.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf621.users = [NodeUser(node=SchedulerNode(name='op622'), can_inplace=True, is_weak=False)]
]
op621.node.kernel = extern_kernels.mm


op622: SchedulerNode(ComputedBuffer)
op622.writes = [MemoryDep('buf622', c0, {c0: 8388608}, None)]
op622.unmet_dependencies = 
    [   MemoryDep('buf591', c0, {c0: 8388608}, None),
        MemoryDep('buf621', c0, {c0: 8388608}, None)]
op622.met_dependencies = 
    [   MemoryDep('arg899_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg900_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg901_1', c1, {c0: 16384, c1: 512}, None)]
op622.outputs = [
    buf622: ComputedBuffer
    buf622.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf622.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op623'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op634'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=True, is_weak=False),
    ]
]
op622.group.device = cuda:0
op622.group.iteration = (8388608, 1)
op622.sizes = ([16384, 512], [])
buf621_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg899_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg901_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg900_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op622_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf621', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg899_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf591', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg901_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg900_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf622', get_index_5, add_2, None)
        return store
op622 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op623: ExternKernelSchedulerNode(ExternKernelOut)
op623.writes = [StarDep(name='buf623', mode=None)]
op623.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op623.met_dependencies = [StarDep(name='arg952_1', mode=None)]
op623.outputs = [
    buf623: ExternKernelOut
    buf623.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf623.users = [NodeUser(node=SchedulerNode(name='op624'), can_inplace=True, is_weak=False)]
]
op623.node.kernel = extern_kernels.mm


op624: SchedulerNode(ComputedBuffer)
op624.writes = [MemoryDep('buf624', c0, {c0: 2097152}, None)]
op624.unmet_dependencies = [MemoryDep('buf623', c0, {c0: 2097152}, None)]
op624.met_dependencies = 
    [   MemoryDep('arg953_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg954_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg955_1', c1, {c0: 16384, c1: 128}, None)]
op624.outputs = [
    buf624: ComputedBuffer
    buf624.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf624.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op625'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False),
    ]
]
op624.group.device = cuda:0
op624.group.iteration = (2097152, 1)
op624.sizes = ([16384, 128], [])
buf623_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg953_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg955_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg954_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf624_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op624_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf623', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg953_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg955_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg954_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf624', get_index_4, add_1, None)
        return store
op624 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op625: ExternKernelSchedulerNode(ExternKernelOut)
op625.writes = [StarDep(name='buf625', mode=None)]
op625.unmet_dependencies = [StarDep(name='buf624', mode=None)]
op625.met_dependencies = [StarDep(name='arg928_1', mode=None), StarDep(name='arg929_1', mode=None)]
op625.outputs = [
    buf625: ExternKernelOut
    buf625.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf625.users = [NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op625.node.kernel = extern_kernels.addmm


op626: ExternKernelSchedulerNode(ExternKernelOut)
op626.writes = [StarDep(name='buf626', mode=None)]
op626.unmet_dependencies = [StarDep(name='buf624', mode=None)]
op626.met_dependencies = [StarDep(name='arg930_1', mode=None), StarDep(name='arg931_1', mode=None)]
op626.outputs = [
    buf626: ExternKernelOut
    buf626.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf626.users = [NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op626.node.kernel = extern_kernels.addmm


op627: ExternKernelSchedulerNode(ExternKernelOut)
op627.writes = [StarDep(name='buf627', mode=None)]
op627.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op627.met_dependencies = [StarDep(name='arg932_1', mode=None), StarDep(name='arg933_1', mode=None)]
op627.outputs = [
    buf627: ExternKernelOut
    buf627.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf627.users = [NodeUser(node=ExternKernelSchedulerNode(name='op628'), can_inplace=False, is_weak=False)]
]
op627.node.kernel = extern_kernels.addmm


op628: ExternKernelSchedulerNode(FallbackKernel)
op628.writes = [StarDep(name='buf628', mode=None)]
op628.unmet_dependencies = 
    [   StarDep(name='buf625', mode=None),
        StarDep(name='buf626', mode=None),
        StarDep(name='buf627', mode=None)]
op628.met_dependencies = []
op628.outputs = [
    buf628: FallbackKernel
    buf628.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf628.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op630'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op632'), can_inplace=False, is_weak=False),
    ]
]
op628.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op629: ExternKernelSchedulerNode(MultiOutput)
op629.writes = [StarDep(name='buf629', mode=None)]
op629.unmet_dependencies = [StarDep(name='buf628', mode=None)]
op629.met_dependencies = []
op629.outputs = [
    buf629: MultiOutput
    buf629.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf629.users = [NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op629.node.kernel = None


op633: ExternKernelSchedulerNode(ExternKernelOut)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf629', mode=None)]
op633.met_dependencies = [StarDep(name='arg934_1', mode=None)]
op633.outputs = [
    buf633: ExternKernelOut
    buf633.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf633.users = [NodeUser(node=SchedulerNode(name='op635'), can_inplace=True, is_weak=False)]
]
op633.node.kernel = extern_kernels.mm


op634: ExternKernelSchedulerNode(ExternKernelOut)
op634.writes = [StarDep(name='buf634', mode=None)]
op634.unmet_dependencies = [StarDep(name='buf622', mode=None)]
op634.met_dependencies = [StarDep(name='arg948_1', mode=None)]
op634.outputs = [
    buf634: ExternKernelOut
    buf634.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf634.users = [NodeUser(node=SchedulerNode(name='op635'), can_inplace=True, is_weak=False)]
]
op634.node.kernel = extern_kernels.mm


op635: SchedulerNode(ComputedBuffer)
op635.writes = [MemoryDep('buf635', c0, {c0: 2097152}, None)]
op635.unmet_dependencies = 
    [   MemoryDep('buf633', c0, {c0: 2097152}, None),
        MemoryDep('buf634', c0, {c0: 2097152}, None)]
op635.met_dependencies = 
    [   MemoryDep('arg935_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg936_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg937_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg949_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg950_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg951_1', c1, {c0: 16384, c1: 128}, None)]
op635.outputs = [
    buf635: ComputedBuffer
    buf635.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf635.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op636'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=True, is_weak=False),
    ]
]
op635.group.device = cuda:0
op635.group.iteration = (2097152, 1)
op635.sizes = ([16384, 128], [])
buf633_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg935_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg949_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg951_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg950_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg937_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg936_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op635_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf633', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg935_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf634', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg949_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg951_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg950_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg937_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg936_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf635', get_index_8, add_4, None)
        return store
op635 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op636: ExternKernelSchedulerNode(ExternKernelOut)
op636.writes = [StarDep(name='buf636', mode=None)]
op636.unmet_dependencies = [StarDep(name='buf635', mode=None)]
op636.met_dependencies = [StarDep(name='arg956_1', mode=None)]
op636.outputs = [
    buf636: ExternKernelOut
    buf636.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf636.users = [NodeUser(node=SchedulerNode(name='op637'), can_inplace=True, is_weak=False)]
]
op636.node.kernel = extern_kernels.mm


op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 8388608}, None)]
op637.unmet_dependencies = [MemoryDep('buf636', c0, {c0: 8388608}, None)]
op637.met_dependencies = [MemoryDep('arg957_1', c1, {c0: 16384, c1: 512}, None)]
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf637.users = [NodeUser(node=ExternKernelSchedulerNode(name='op638'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (8388608, 1)
op637.sizes = ([16384, 512], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg957_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op637_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg957_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf637', get_index_2, relu, None)
        return store
op637 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op638: ExternKernelSchedulerNode(ExternKernelOut)
op638.writes = [StarDep(name='buf638', mode=None)]
op638.unmet_dependencies = [StarDep(name='buf637', mode=None)]
op638.met_dependencies = [StarDep(name='arg958_1', mode=None)]
op638.outputs = [
    buf638: ExternKernelOut
    buf638.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf638.users = [NodeUser(node=SchedulerNode(name='op639'), can_inplace=True, is_weak=False)]
]
op638.node.kernel = extern_kernels.mm


op639: SchedulerNode(ComputedBuffer)
op639.writes = [MemoryDep('buf639', c0, {c0: 2097152}, None)]
op639.unmet_dependencies = 
    [   MemoryDep('buf635', c0, {c0: 2097152}, None),
        MemoryDep('buf638', c0, {c0: 2097152}, None)]
op639.met_dependencies = 
    [   MemoryDep('arg959_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg960_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg961_1', c1, {c0: 16384, c1: 128}, None)]
op639.outputs = [
    buf639: ComputedBuffer
    buf639.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf639.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op640'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False),
    ]
]
op639.group.device = cuda:0
op639.group.iteration = (2097152, 1)
op639.sizes = ([16384, 128], [])
buf638_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg959_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg961_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg960_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op639_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf638', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg959_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf635', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg961_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg960_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf639', get_index_5, add_2, None)
        return store
op639 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op640: ExternKernelSchedulerNode(ExternKernelOut)
op640.writes = [StarDep(name='buf640', mode=None)]
op640.unmet_dependencies = [StarDep(name='buf639', mode=None)]
op640.met_dependencies = [StarDep(name='arg962_1', mode=None)]
op640.outputs = [
    buf640: ExternKernelOut
    buf640.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf640.users = [NodeUser(node=SchedulerNode(name='op641'), can_inplace=True, is_weak=False)]
]
op640.node.kernel = extern_kernels.mm


op641: SchedulerNode(ComputedBuffer)
op641.writes = [MemoryDep('buf641', c0, {c0: 8388608}, None)]
op641.unmet_dependencies = [MemoryDep('buf640', c0, {c0: 8388608}, None)]
op641.met_dependencies = [MemoryDep('arg963_1', c1, {c0: 16384, c1: 512}, None)]
op641.outputs = [
    buf641: ComputedBuffer
    buf641.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf641.users = [NodeUser(node=ExternKernelSchedulerNode(name='op642'), can_inplace=False, is_weak=False)]
]
op641.group.device = cuda:0
op641.group.iteration = (8388608, 1)
op641.sizes = ([16384, 512], [])
buf640_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg963_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf641_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op641_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf640', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg963_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf641', get_index_2, relu, None)
        return store
op641 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op642: ExternKernelSchedulerNode(ExternKernelOut)
op642.writes = [StarDep(name='buf642', mode=None)]
op642.unmet_dependencies = [StarDep(name='buf641', mode=None)]
op642.met_dependencies = [StarDep(name='arg964_1', mode=None)]
op642.outputs = [
    buf642: ExternKernelOut
    buf642.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf642.users = [NodeUser(node=SchedulerNode(name='op643'), can_inplace=True, is_weak=False)]
]
op642.node.kernel = extern_kernels.mm


op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 2097152}, None)]
op643.unmet_dependencies = 
    [   MemoryDep('buf639', c0, {c0: 2097152}, None),
        MemoryDep('buf642', c0, {c0: 2097152}, None)]
op643.met_dependencies = 
    [   MemoryDep('arg965_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg966_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg967_1', c1, {c0: 16384, c1: 128}, None)]
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf643.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op647'), can_inplace=True, is_weak=False),
    ]
]
op643.group.device = cuda:0
op643.group.iteration = (2097152, 1)
op643.sizes = ([16384, 128], [])
buf642_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg965_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf639_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg967_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg966_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op643_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf642', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg965_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf639', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg967_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg966_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf643', get_index_5, add_2, None)
        return store
op643 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op644: ExternKernelSchedulerNode(ExternKernelOut)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf643', mode=None)]
op644.met_dependencies = [StarDep(name='arg968_1', mode=None)]
op644.outputs = [
    buf644: ExternKernelOut
    buf644.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf644.users = [NodeUser(node=SchedulerNode(name='op645'), can_inplace=True, is_weak=False)]
]
op644.node.kernel = extern_kernels.mm


op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', c0, {c0: 8388608}, None)]
op645.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 8388608}, None)]
op645.met_dependencies = [MemoryDep('arg969_1', c1, {c0: 16384, c1: 512}, None)]
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf645.users = [NodeUser(node=ExternKernelSchedulerNode(name='op646'), can_inplace=False, is_weak=False)]
]
op645.group.device = cuda:0
op645.group.iteration = (8388608, 1)
op645.sizes = ([16384, 512], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg969_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op645_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg969_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf645', get_index_2, relu, None)
        return store
op645 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op646: ExternKernelSchedulerNode(ExternKernelOut)
op646.writes = [StarDep(name='buf646', mode=None)]
op646.unmet_dependencies = [StarDep(name='buf645', mode=None)]
op646.met_dependencies = [StarDep(name='arg970_1', mode=None)]
op646.outputs = [
    buf646: ExternKernelOut
    buf646.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf646.users = [NodeUser(node=SchedulerNode(name='op647'), can_inplace=True, is_weak=False)]
]
op646.node.kernel = extern_kernels.mm


op647: SchedulerNode(ComputedBuffer)
op647.writes = [MemoryDep('buf647', c0, {c0: 2097152}, None)]
op647.unmet_dependencies = 
    [   MemoryDep('buf643', c0, {c0: 2097152}, None),
        MemoryDep('buf646', c0, {c0: 2097152}, None)]
op647.met_dependencies = 
    [   MemoryDep('arg971_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg972_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg973_1', c1, {c0: 16384, c1: 128}, None)]
op647.outputs = [
    buf647: ComputedBuffer
    buf647.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf647.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op648'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False),
    ]
]
op647.group.device = cuda:0
op647.group.iteration = (2097152, 1)
op647.sizes = ([16384, 128], [])
buf646_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg971_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg973_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg972_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op647_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf646', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg971_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf643', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg973_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg972_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf647', get_index_5, add_2, None)
        return store
op647 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op648: ExternKernelSchedulerNode(ExternKernelOut)
op648.writes = [StarDep(name='buf648', mode=None)]
op648.unmet_dependencies = [StarDep(name='buf647', mode=None)]
op648.met_dependencies = [StarDep(name='arg938_1', mode=None)]
op648.outputs = [
    buf648: ExternKernelOut
    buf648.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf648.users = [NodeUser(node=SchedulerNode(name='op649'), can_inplace=True, is_weak=False)]
]
op648.node.kernel = extern_kernels.mm


op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 8388608}, None)]
op649.unmet_dependencies = [MemoryDep('buf648', c0, {c0: 8388608}, None)]
op649.met_dependencies = [MemoryDep('arg939_1', c1, {c0: 16384, c1: 512}, None)]
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf649.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op649.group.device = cuda:0
op649.group.iteration = (8388608, 1)
op649.sizes = ([16384, 512], [])
buf648_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg939_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op649_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf648', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg939_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf649', get_index_2, relu, None)
        return store
op649 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op650: ExternKernelSchedulerNode(ExternKernelOut)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf649', mode=None)]
op650.met_dependencies = [StarDep(name='arg940_1', mode=None)]
op650.outputs = [
    buf650: ExternKernelOut
    buf650.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf650.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=True, is_weak=False)]
]
op650.node.kernel = extern_kernels.mm


op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 2097152}, None)]
op651.unmet_dependencies = 
    [   MemoryDep('buf647', c0, {c0: 2097152}, None),
        MemoryDep('buf650', c0, {c0: 2097152}, None)]
op651.met_dependencies = 
    [   MemoryDep('arg941_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg942_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg943_1', c1, {c0: 16384, c1: 128}, None)]
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf651.users = [NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False)]
]
op651.group.device = cuda:0
op651.group.iteration = (2097152, 1)
op651.sizes = ([16384, 128], [])
buf650_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg941_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf647_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg943_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg942_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op651_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg941_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf647', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg943_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg942_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf651', get_index_5, add_2, None)
        return store
op651 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op652: ExternKernelSchedulerNode(ExternKernelOut)
op652.writes = [StarDep(name='buf652', mode=None)]
op652.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op652.met_dependencies = [StarDep(name='arg944_1', mode=None)]
op652.outputs = [
    buf652: ExternKernelOut
    buf652.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf652.users = [NodeUser(node=SchedulerNode(name='op653'), can_inplace=True, is_weak=False)]
]
op652.node.kernel = extern_kernels.mm


op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 8388608}, None)]
op653.unmet_dependencies = 
    [   MemoryDep('buf622', c0, {c0: 8388608}, None),
        MemoryDep('buf652', c0, {c0: 8388608}, None)]
op653.met_dependencies = 
    [   MemoryDep('arg945_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg946_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg947_1', c1, {c0: 16384, c1: 512}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf653.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op658'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False),
    ]
]
op653.group.device = cuda:0
op653.group.iteration = (8388608, 1)
op653.sizes = ([16384, 512], [])
buf652_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg945_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf622_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg947_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg946_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op653_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf652', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg945_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf622', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg947_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg946_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf653', get_index_5, add_2, None)
        return store
op653 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op654: ExternKernelSchedulerNode(ExternKernelOut)
op654.writes = [StarDep(name='buf654', mode=None)]
op654.unmet_dependencies = [StarDep(name='buf653', mode=None)]
op654.met_dependencies = [StarDep(name='arg998_1', mode=None)]
op654.outputs = [
    buf654: ExternKernelOut
    buf654.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf654.users = [NodeUser(node=SchedulerNode(name='op655'), can_inplace=True, is_weak=False)]
]
op654.node.kernel = extern_kernels.mm


op655: SchedulerNode(ComputedBuffer)
op655.writes = [MemoryDep('buf655', c0, {c0: 2097152}, None)]
op655.unmet_dependencies = [MemoryDep('buf654', c0, {c0: 2097152}, None)]
op655.met_dependencies = 
    [   MemoryDep('arg1000_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1001_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg999_1', c1, {c0: 16384, c1: 128}, None)]
op655.outputs = [
    buf655: ComputedBuffer
    buf655.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf655.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op656'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False),
    ]
]
op655.group.device = cuda:0
op655.group.iteration = (2097152, 1)
op655.sizes = ([16384, 128], [])
buf654_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg999_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1001_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1000_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf655_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op655_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf654', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg999_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1001_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1000_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf655', get_index_4, add_1, None)
        return store
op655 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op656: ExternKernelSchedulerNode(ExternKernelOut)
op656.writes = [StarDep(name='buf656', mode=None)]
op656.unmet_dependencies = [StarDep(name='buf655', mode=None)]
op656.met_dependencies = [StarDep(name='arg974_1', mode=None), StarDep(name='arg975_1', mode=None)]
op656.outputs = [
    buf656: ExternKernelOut
    buf656.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op656.node.kernel = extern_kernels.addmm


op657: ExternKernelSchedulerNode(ExternKernelOut)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf655', mode=None)]
op657.met_dependencies = [StarDep(name='arg976_1', mode=None), StarDep(name='arg977_1', mode=None)]
op657.outputs = [
    buf657: ExternKernelOut
    buf657.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf657.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op657.node.kernel = extern_kernels.addmm


op658: ExternKernelSchedulerNode(ExternKernelOut)
op658.writes = [StarDep(name='buf658', mode=None)]
op658.unmet_dependencies = [StarDep(name='buf653', mode=None)]
op658.met_dependencies = [StarDep(name='arg978_1', mode=None), StarDep(name='arg979_1', mode=None)]
op658.outputs = [
    buf658: ExternKernelOut
    buf658.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op658.node.kernel = extern_kernels.addmm


op659: ExternKernelSchedulerNode(FallbackKernel)
op659.writes = [StarDep(name='buf659', mode=None)]
op659.unmet_dependencies = 
    [   StarDep(name='buf656', mode=None),
        StarDep(name='buf657', mode=None),
        StarDep(name='buf658', mode=None)]
op659.met_dependencies = []
op659.outputs = [
    buf659: FallbackKernel
    buf659.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf659.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op660'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op663'), can_inplace=False, is_weak=False),
    ]
]
op659.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op660: ExternKernelSchedulerNode(MultiOutput)
op660.writes = [StarDep(name='buf660', mode=None)]
op660.unmet_dependencies = [StarDep(name='buf659', mode=None)]
op660.met_dependencies = []
op660.outputs = [
    buf660: MultiOutput
    buf660.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf660.users = [NodeUser(node=ExternKernelSchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
]
op660.node.kernel = None


op664: ExternKernelSchedulerNode(ExternKernelOut)
op664.writes = [StarDep(name='buf664', mode=None)]
op664.unmet_dependencies = [StarDep(name='buf660', mode=None)]
op664.met_dependencies = [StarDep(name='arg980_1', mode=None)]
op664.outputs = [
    buf664: ExternKernelOut
    buf664.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf664.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False)]
]
op664.node.kernel = extern_kernels.mm


op665: ExternKernelSchedulerNode(ExternKernelOut)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf653', mode=None)]
op665.met_dependencies = [StarDep(name='arg994_1', mode=None)]
op665.outputs = [
    buf665: ExternKernelOut
    buf665.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf665.users = [NodeUser(node=SchedulerNode(name='op666'), can_inplace=True, is_weak=False)]
]
op665.node.kernel = extern_kernels.mm


op666: SchedulerNode(ComputedBuffer)
op666.writes = [MemoryDep('buf666', c0, {c0: 2097152}, None)]
op666.unmet_dependencies = 
    [   MemoryDep('buf664', c0, {c0: 2097152}, None),
        MemoryDep('buf665', c0, {c0: 2097152}, None)]
op666.met_dependencies = 
    [   MemoryDep('arg981_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg982_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg983_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg995_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg996_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg997_1', c1, {c0: 16384, c1: 128}, None)]
op666.outputs = [
    buf666: ComputedBuffer
    buf666.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf666.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op667'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False),
    ]
]
op666.group.device = cuda:0
op666.group.iteration = (2097152, 1)
op666.sizes = ([16384, 128], [])
buf664_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg981_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf665_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg995_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg997_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg996_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg983_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg982_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op666_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf664', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg981_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf665', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg995_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg997_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg996_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg983_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg982_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf666', get_index_8, add_4, None)
        return store
op666 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op667: ExternKernelSchedulerNode(ExternKernelOut)
op667.writes = [StarDep(name='buf667', mode=None)]
op667.unmet_dependencies = [StarDep(name='buf666', mode=None)]
op667.met_dependencies = [StarDep(name='arg1002_1', mode=None)]
op667.outputs = [
    buf667: ExternKernelOut
    buf667.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf667.users = [NodeUser(node=SchedulerNode(name='op668'), can_inplace=True, is_weak=False)]
]
op667.node.kernel = extern_kernels.mm


op668: SchedulerNode(ComputedBuffer)
op668.writes = [MemoryDep('buf668', c0, {c0: 8388608}, None)]
op668.unmet_dependencies = [MemoryDep('buf667', c0, {c0: 8388608}, None)]
op668.met_dependencies = [MemoryDep('arg1003_1', c1, {c0: 16384, c1: 512}, None)]
op668.outputs = [
    buf668: ComputedBuffer
    buf668.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf668.users = [NodeUser(node=ExternKernelSchedulerNode(name='op669'), can_inplace=False, is_weak=False)]
]
op668.group.device = cuda:0
op668.group.iteration = (8388608, 1)
op668.sizes = ([16384, 512], [])
buf667_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1003_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf668_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op668_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf667', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1003_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf668', get_index_2, relu, None)
        return store
op668 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op669: ExternKernelSchedulerNode(ExternKernelOut)
op669.writes = [StarDep(name='buf669', mode=None)]
op669.unmet_dependencies = [StarDep(name='buf668', mode=None)]
op669.met_dependencies = [StarDep(name='arg1004_1', mode=None)]
op669.outputs = [
    buf669: ExternKernelOut
    buf669.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf669.users = [NodeUser(node=SchedulerNode(name='op670'), can_inplace=True, is_weak=False)]
]
op669.node.kernel = extern_kernels.mm


op670: SchedulerNode(ComputedBuffer)
op670.writes = [MemoryDep('buf670', c0, {c0: 2097152}, None)]
op670.unmet_dependencies = 
    [   MemoryDep('buf666', c0, {c0: 2097152}, None),
        MemoryDep('buf669', c0, {c0: 2097152}, None)]
op670.met_dependencies = 
    [   MemoryDep('arg1005_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1006_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1007_1', c1, {c0: 16384, c1: 128}, None)]
op670.outputs = [
    buf670: ComputedBuffer
    buf670.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf670.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op671'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False),
    ]
]
op670.group.device = cuda:0
op670.group.iteration = (2097152, 1)
op670.sizes = ([16384, 128], [])
buf669_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1005_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf666_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1007_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1006_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op670_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf669', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1005_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf666', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1007_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1006_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf670', get_index_5, add_2, None)
        return store
op670 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op671: ExternKernelSchedulerNode(ExternKernelOut)
op671.writes = [StarDep(name='buf671', mode=None)]
op671.unmet_dependencies = [StarDep(name='buf670', mode=None)]
op671.met_dependencies = [StarDep(name='arg1008_1', mode=None)]
op671.outputs = [
    buf671: ExternKernelOut
    buf671.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf671.users = [NodeUser(node=SchedulerNode(name='op672'), can_inplace=True, is_weak=False)]
]
op671.node.kernel = extern_kernels.mm


op672: SchedulerNode(ComputedBuffer)
op672.writes = [MemoryDep('buf672', c0, {c0: 8388608}, None)]
op672.unmet_dependencies = [MemoryDep('buf671', c0, {c0: 8388608}, None)]
op672.met_dependencies = [MemoryDep('arg1009_1', c1, {c0: 16384, c1: 512}, None)]
op672.outputs = [
    buf672: ComputedBuffer
    buf672.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf672.users = [NodeUser(node=ExternKernelSchedulerNode(name='op673'), can_inplace=False, is_weak=False)]
]
op672.group.device = cuda:0
op672.group.iteration = (8388608, 1)
op672.sizes = ([16384, 512], [])
buf671_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1009_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf672_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op672_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf671', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1009_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf672', get_index_2, relu, None)
        return store
op672 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op673: ExternKernelSchedulerNode(ExternKernelOut)
op673.writes = [StarDep(name='buf673', mode=None)]
op673.unmet_dependencies = [StarDep(name='buf672', mode=None)]
op673.met_dependencies = [StarDep(name='arg1010_1', mode=None)]
op673.outputs = [
    buf673: ExternKernelOut
    buf673.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf673.users = [NodeUser(node=SchedulerNode(name='op674'), can_inplace=True, is_weak=False)]
]
op673.node.kernel = extern_kernels.mm


op674: SchedulerNode(ComputedBuffer)
op674.writes = [MemoryDep('buf674', c0, {c0: 2097152}, None)]
op674.unmet_dependencies = 
    [   MemoryDep('buf670', c0, {c0: 2097152}, None),
        MemoryDep('buf673', c0, {c0: 2097152}, None)]
op674.met_dependencies = 
    [   MemoryDep('arg1011_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1012_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1013_1', c1, {c0: 16384, c1: 128}, None)]
op674.outputs = [
    buf674: ComputedBuffer
    buf674.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf674.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op675'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op678'), can_inplace=True, is_weak=False),
    ]
]
op674.group.device = cuda:0
op674.group.iteration = (2097152, 1)
op674.sizes = ([16384, 128], [])
buf673_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1011_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf670_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1013_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1012_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op674_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf673', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1011_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf670', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1013_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1012_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf674', get_index_5, add_2, None)
        return store
op674 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op675: ExternKernelSchedulerNode(ExternKernelOut)
op675.writes = [StarDep(name='buf675', mode=None)]
op675.unmet_dependencies = [StarDep(name='buf674', mode=None)]
op675.met_dependencies = [StarDep(name='arg1014_1', mode=None)]
op675.outputs = [
    buf675: ExternKernelOut
    buf675.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf675.users = [NodeUser(node=SchedulerNode(name='op676'), can_inplace=True, is_weak=False)]
]
op675.node.kernel = extern_kernels.mm


op676: SchedulerNode(ComputedBuffer)
op676.writes = [MemoryDep('buf676', c0, {c0: 8388608}, None)]
op676.unmet_dependencies = [MemoryDep('buf675', c0, {c0: 8388608}, None)]
op676.met_dependencies = [MemoryDep('arg1015_1', c1, {c0: 16384, c1: 512}, None)]
op676.outputs = [
    buf676: ComputedBuffer
    buf676.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf676.users = [NodeUser(node=ExternKernelSchedulerNode(name='op677'), can_inplace=False, is_weak=False)]
]
op676.group.device = cuda:0
op676.group.iteration = (8388608, 1)
op676.sizes = ([16384, 512], [])
buf675_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1015_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf676_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op676_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf675', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1015_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf676', get_index_2, relu, None)
        return store
op676 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op677: ExternKernelSchedulerNode(ExternKernelOut)
op677.writes = [StarDep(name='buf677', mode=None)]
op677.unmet_dependencies = [StarDep(name='buf676', mode=None)]
op677.met_dependencies = [StarDep(name='arg1016_1', mode=None)]
op677.outputs = [
    buf677: ExternKernelOut
    buf677.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf677.users = [NodeUser(node=SchedulerNode(name='op678'), can_inplace=True, is_weak=False)]
]
op677.node.kernel = extern_kernels.mm


op678: SchedulerNode(ComputedBuffer)
op678.writes = [MemoryDep('buf678', c0, {c0: 2097152}, None)]
op678.unmet_dependencies = 
    [   MemoryDep('buf674', c0, {c0: 2097152}, None),
        MemoryDep('buf677', c0, {c0: 2097152}, None)]
op678.met_dependencies = 
    [   MemoryDep('arg1017_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1018_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1019_1', c1, {c0: 16384, c1: 128}, None)]
op678.outputs = [
    buf678: ComputedBuffer
    buf678.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf678.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op679'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False),
    ]
]
op678.group.device = cuda:0
op678.group.iteration = (2097152, 1)
op678.sizes = ([16384, 128], [])
buf677_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1017_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf674_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1019_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1018_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op678_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf677', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1017_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf674', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1019_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1018_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf678', get_index_5, add_2, None)
        return store
op678 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op679: ExternKernelSchedulerNode(ExternKernelOut)
op679.writes = [StarDep(name='buf679', mode=None)]
op679.unmet_dependencies = [StarDep(name='buf678', mode=None)]
op679.met_dependencies = [StarDep(name='arg984_1', mode=None)]
op679.outputs = [
    buf679: ExternKernelOut
    buf679.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf679.users = [NodeUser(node=SchedulerNode(name='op680'), can_inplace=True, is_weak=False)]
]
op679.node.kernel = extern_kernels.mm


op680: SchedulerNode(ComputedBuffer)
op680.writes = [MemoryDep('buf680', c0, {c0: 8388608}, None)]
op680.unmet_dependencies = [MemoryDep('buf679', c0, {c0: 8388608}, None)]
op680.met_dependencies = [MemoryDep('arg985_1', c1, {c0: 16384, c1: 512}, None)]
op680.outputs = [
    buf680: ComputedBuffer
    buf680.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf680.users = [NodeUser(node=ExternKernelSchedulerNode(name='op681'), can_inplace=False, is_weak=False)]
]
op680.group.device = cuda:0
op680.group.iteration = (8388608, 1)
op680.sizes = ([16384, 512], [])
buf679_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg985_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf680_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op680_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf679', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg985_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf680', get_index_2, relu, None)
        return store
op680 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op681: ExternKernelSchedulerNode(ExternKernelOut)
op681.writes = [StarDep(name='buf681', mode=None)]
op681.unmet_dependencies = [StarDep(name='buf680', mode=None)]
op681.met_dependencies = [StarDep(name='arg986_1', mode=None)]
op681.outputs = [
    buf681: ExternKernelOut
    buf681.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf681.users = [NodeUser(node=SchedulerNode(name='op682'), can_inplace=True, is_weak=False)]
]
op681.node.kernel = extern_kernels.mm


op682: SchedulerNode(ComputedBuffer)
op682.writes = [MemoryDep('buf682', c0, {c0: 2097152}, None)]
op682.unmet_dependencies = 
    [   MemoryDep('buf678', c0, {c0: 2097152}, None),
        MemoryDep('buf681', c0, {c0: 2097152}, None)]
op682.met_dependencies = 
    [   MemoryDep('arg987_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg988_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg989_1', c1, {c0: 16384, c1: 128}, None)]
op682.outputs = [
    buf682: ComputedBuffer
    buf682.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf682.users = [NodeUser(node=ExternKernelSchedulerNode(name='op683'), can_inplace=False, is_weak=False)]
]
op682.group.device = cuda:0
op682.group.iteration = (2097152, 1)
op682.sizes = ([16384, 128], [])
buf681_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg987_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf678_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg989_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg988_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf682_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op682_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf681', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg987_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf678', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg989_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg988_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf682', get_index_5, add_2, None)
        return store
op682 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op683: ExternKernelSchedulerNode(ExternKernelOut)
op683.writes = [StarDep(name='buf683', mode=None)]
op683.unmet_dependencies = [StarDep(name='buf682', mode=None)]
op683.met_dependencies = [StarDep(name='arg990_1', mode=None)]
op683.outputs = [
    buf683: ExternKernelOut
    buf683.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf683.users = [NodeUser(node=SchedulerNode(name='op684'), can_inplace=True, is_weak=False)]
]
op683.node.kernel = extern_kernels.mm


op684: SchedulerNode(ComputedBuffer)
op684.writes = [MemoryDep('buf684', c0, {c0: 8388608}, None)]
op684.unmet_dependencies = 
    [   MemoryDep('buf653', c0, {c0: 8388608}, None),
        MemoryDep('buf683', c0, {c0: 8388608}, None)]
op684.met_dependencies = 
    [   MemoryDep('arg991_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg992_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg993_1', c1, {c0: 16384, c1: 512}, None)]
op684.outputs = [
    buf684: ComputedBuffer
    buf684.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf684.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op685'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op689'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op696'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op715'), can_inplace=True, is_weak=False),
    ]
]
op684.group.device = cuda:0
op684.group.iteration = (8388608, 1)
op684.sizes = ([16384, 512], [])
buf683_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg991_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg993_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg992_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op684_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf683', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg991_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf653', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg993_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg992_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf684', get_index_5, add_2, None)
        return store
op684 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op685: ExternKernelSchedulerNode(ExternKernelOut)
op685.writes = [StarDep(name='buf685', mode=None)]
op685.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op685.met_dependencies = [StarDep(name='arg1044_1', mode=None)]
op685.outputs = [
    buf685: ExternKernelOut
    buf685.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf685.users = [NodeUser(node=SchedulerNode(name='op686'), can_inplace=True, is_weak=False)]
]
op685.node.kernel = extern_kernels.mm


op686: SchedulerNode(ComputedBuffer)
op686.writes = [MemoryDep('buf686', c0, {c0: 2097152}, None)]
op686.unmet_dependencies = [MemoryDep('buf685', c0, {c0: 2097152}, None)]
op686.met_dependencies = 
    [   MemoryDep('arg1045_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1046_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1047_1', c1, {c0: 16384, c1: 128}, None)]
op686.outputs = [
    buf686: ComputedBuffer
    buf686.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf686.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op687'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op688'), can_inplace=False, is_weak=False),
    ]
]
op686.group.device = cuda:0
op686.group.iteration = (2097152, 1)
op686.sizes = ([16384, 128], [])
buf685_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1045_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1047_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1046_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf686_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op686_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf685', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1045_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1047_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1046_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf686', get_index_4, add_1, None)
        return store
op686 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op687: ExternKernelSchedulerNode(ExternKernelOut)
op687.writes = [StarDep(name='buf687', mode=None)]
op687.unmet_dependencies = [StarDep(name='buf686', mode=None)]
op687.met_dependencies = [StarDep(name='arg1020_1', mode=None), StarDep(name='arg1021_1', mode=None)]
op687.outputs = [
    buf687: ExternKernelOut
    buf687.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf687.users = [NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op687.node.kernel = extern_kernels.addmm


op688: ExternKernelSchedulerNode(ExternKernelOut)
op688.writes = [StarDep(name='buf688', mode=None)]
op688.unmet_dependencies = [StarDep(name='buf686', mode=None)]
op688.met_dependencies = [StarDep(name='arg1022_1', mode=None), StarDep(name='arg1023_1', mode=None)]
op688.outputs = [
    buf688: ExternKernelOut
    buf688.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf688.users = [NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op688.node.kernel = extern_kernels.addmm


op689: ExternKernelSchedulerNode(ExternKernelOut)
op689.writes = [StarDep(name='buf689', mode=None)]
op689.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op689.met_dependencies = [StarDep(name='arg1024_1', mode=None), StarDep(name='arg1025_1', mode=None)]
op689.outputs = [
    buf689: ExternKernelOut
    buf689.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf689.users = [NodeUser(node=ExternKernelSchedulerNode(name='op690'), can_inplace=False, is_weak=False)]
]
op689.node.kernel = extern_kernels.addmm


op690: ExternKernelSchedulerNode(FallbackKernel)
op690.writes = [StarDep(name='buf690', mode=None)]
op690.unmet_dependencies = 
    [   StarDep(name='buf687', mode=None),
        StarDep(name='buf688', mode=None),
        StarDep(name='buf689', mode=None)]
op690.met_dependencies = []
op690.outputs = [
    buf690: FallbackKernel
    buf690.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf690.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op691'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op692'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op693'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op694'), can_inplace=False, is_weak=False),
    ]
]
op690.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op691: ExternKernelSchedulerNode(MultiOutput)
op691.writes = [StarDep(name='buf691', mode=None)]
op691.unmet_dependencies = [StarDep(name='buf690', mode=None)]
op691.met_dependencies = []
op691.outputs = [
    buf691: MultiOutput
    buf691.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf691.users = [NodeUser(node=ExternKernelSchedulerNode(name='op695'), can_inplace=False, is_weak=False)]
]
op691.node.kernel = None


op695: ExternKernelSchedulerNode(ExternKernelOut)
op695.writes = [StarDep(name='buf695', mode=None)]
op695.unmet_dependencies = [StarDep(name='buf691', mode=None)]
op695.met_dependencies = [StarDep(name='arg1026_1', mode=None)]
op695.outputs = [
    buf695: ExternKernelOut
    buf695.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf695.users = [NodeUser(node=SchedulerNode(name='op697'), can_inplace=True, is_weak=False)]
]
op695.node.kernel = extern_kernels.mm


op696: ExternKernelSchedulerNode(ExternKernelOut)
op696.writes = [StarDep(name='buf696', mode=None)]
op696.unmet_dependencies = [StarDep(name='buf684', mode=None)]
op696.met_dependencies = [StarDep(name='arg1040_1', mode=None)]
op696.outputs = [
    buf696: ExternKernelOut
    buf696.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf696.users = [NodeUser(node=SchedulerNode(name='op697'), can_inplace=True, is_weak=False)]
]
op696.node.kernel = extern_kernels.mm


op697: SchedulerNode(ComputedBuffer)
op697.writes = [MemoryDep('buf697', c0, {c0: 2097152}, None)]
op697.unmet_dependencies = 
    [   MemoryDep('buf695', c0, {c0: 2097152}, None),
        MemoryDep('buf696', c0, {c0: 2097152}, None)]
op697.met_dependencies = 
    [   MemoryDep('arg1027_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1028_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1029_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1041_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1042_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1043_1', c1, {c0: 16384, c1: 128}, None)]
op697.outputs = [
    buf697: ComputedBuffer
    buf697.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf697.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op698'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False),
    ]
]
op697.group.device = cuda:0
op697.group.iteration = (2097152, 1)
op697.sizes = ([16384, 128], [])
buf695_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1027_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf696_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1041_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1043_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1042_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1029_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1028_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf697_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op697_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf695', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1027_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf696', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1041_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1043_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1042_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1029_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1028_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf697', get_index_8, add_4, None)
        return store
op697 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op698: ExternKernelSchedulerNode(ExternKernelOut)
op698.writes = [StarDep(name='buf698', mode=None)]
op698.unmet_dependencies = [StarDep(name='buf697', mode=None)]
op698.met_dependencies = [StarDep(name='arg1048_1', mode=None)]
op698.outputs = [
    buf698: ExternKernelOut
    buf698.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf698.users = [NodeUser(node=SchedulerNode(name='op699'), can_inplace=True, is_weak=False)]
]
op698.node.kernel = extern_kernels.mm


op699: SchedulerNode(ComputedBuffer)
op699.writes = [MemoryDep('buf699', c0, {c0: 8388608}, None)]
op699.unmet_dependencies = [MemoryDep('buf698', c0, {c0: 8388608}, None)]
op699.met_dependencies = [MemoryDep('arg1049_1', c1, {c0: 16384, c1: 512}, None)]
op699.outputs = [
    buf699: ComputedBuffer
    buf699.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf699.users = [NodeUser(node=ExternKernelSchedulerNode(name='op700'), can_inplace=False, is_weak=False)]
]
op699.group.device = cuda:0
op699.group.iteration = (8388608, 1)
op699.sizes = ([16384, 512], [])
buf698_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1049_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf699_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op699_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf698', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1049_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf699', get_index_2, relu, None)
        return store
op699 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op700: ExternKernelSchedulerNode(ExternKernelOut)
op700.writes = [StarDep(name='buf700', mode=None)]
op700.unmet_dependencies = [StarDep(name='buf699', mode=None)]
op700.met_dependencies = [StarDep(name='arg1050_1', mode=None)]
op700.outputs = [
    buf700: ExternKernelOut
    buf700.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf700.users = [NodeUser(node=SchedulerNode(name='op701'), can_inplace=True, is_weak=False)]
]
op700.node.kernel = extern_kernels.mm


op701: SchedulerNode(ComputedBuffer)
op701.writes = [MemoryDep('buf701', c0, {c0: 2097152}, None)]
op701.unmet_dependencies = 
    [   MemoryDep('buf697', c0, {c0: 2097152}, None),
        MemoryDep('buf700', c0, {c0: 2097152}, None)]
op701.met_dependencies = 
    [   MemoryDep('arg1051_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1052_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1053_1', c1, {c0: 16384, c1: 128}, None)]
op701.outputs = [
    buf701: ComputedBuffer
    buf701.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf701.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op702'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False),
    ]
]
op701.group.device = cuda:0
op701.group.iteration = (2097152, 1)
op701.sizes = ([16384, 128], [])
buf700_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1051_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf697_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1053_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1052_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf701_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op701_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf700', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1051_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf697', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1053_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1052_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf701', get_index_5, add_2, None)
        return store
op701 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op702: ExternKernelSchedulerNode(ExternKernelOut)
op702.writes = [StarDep(name='buf702', mode=None)]
op702.unmet_dependencies = [StarDep(name='buf701', mode=None)]
op702.met_dependencies = [StarDep(name='arg1054_1', mode=None)]
op702.outputs = [
    buf702: ExternKernelOut
    buf702.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf702.users = [NodeUser(node=SchedulerNode(name='op703'), can_inplace=True, is_weak=False)]
]
op702.node.kernel = extern_kernels.mm


op703: SchedulerNode(ComputedBuffer)
op703.writes = [MemoryDep('buf703', c0, {c0: 8388608}, None)]
op703.unmet_dependencies = [MemoryDep('buf702', c0, {c0: 8388608}, None)]
op703.met_dependencies = [MemoryDep('arg1055_1', c1, {c0: 16384, c1: 512}, None)]
op703.outputs = [
    buf703: ComputedBuffer
    buf703.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf703.users = [NodeUser(node=ExternKernelSchedulerNode(name='op704'), can_inplace=False, is_weak=False)]
]
op703.group.device = cuda:0
op703.group.iteration = (8388608, 1)
op703.sizes = ([16384, 512], [])
buf702_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1055_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf703_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op703_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf702', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1055_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf703', get_index_2, relu, None)
        return store
op703 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op704: ExternKernelSchedulerNode(ExternKernelOut)
op704.writes = [StarDep(name='buf704', mode=None)]
op704.unmet_dependencies = [StarDep(name='buf703', mode=None)]
op704.met_dependencies = [StarDep(name='arg1056_1', mode=None)]
op704.outputs = [
    buf704: ExternKernelOut
    buf704.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf704.users = [NodeUser(node=SchedulerNode(name='op705'), can_inplace=True, is_weak=False)]
]
op704.node.kernel = extern_kernels.mm


op705: SchedulerNode(ComputedBuffer)
op705.writes = [MemoryDep('buf705', c0, {c0: 2097152}, None)]
op705.unmet_dependencies = 
    [   MemoryDep('buf701', c0, {c0: 2097152}, None),
        MemoryDep('buf704', c0, {c0: 2097152}, None)]
op705.met_dependencies = 
    [   MemoryDep('arg1057_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1058_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1059_1', c1, {c0: 16384, c1: 128}, None)]
op705.outputs = [
    buf705: ComputedBuffer
    buf705.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf705.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op706'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False),
    ]
]
op705.group.device = cuda:0
op705.group.iteration = (2097152, 1)
op705.sizes = ([16384, 128], [])
buf704_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1057_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf701_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1059_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1058_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op705_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf704', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1057_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf701', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1059_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1058_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf705', get_index_5, add_2, None)
        return store
op705 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op706: ExternKernelSchedulerNode(ExternKernelOut)
op706.writes = [StarDep(name='buf706', mode=None)]
op706.unmet_dependencies = [StarDep(name='buf705', mode=None)]
op706.met_dependencies = [StarDep(name='arg1060_1', mode=None)]
op706.outputs = [
    buf706: ExternKernelOut
    buf706.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf706.users = [NodeUser(node=SchedulerNode(name='op707'), can_inplace=True, is_weak=False)]
]
op706.node.kernel = extern_kernels.mm


op707: SchedulerNode(ComputedBuffer)
op707.writes = [MemoryDep('buf707', c0, {c0: 8388608}, None)]
op707.unmet_dependencies = [MemoryDep('buf706', c0, {c0: 8388608}, None)]
op707.met_dependencies = [MemoryDep('arg1061_1', c1, {c0: 16384, c1: 512}, None)]
op707.outputs = [
    buf707: ComputedBuffer
    buf707.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf707.users = [NodeUser(node=ExternKernelSchedulerNode(name='op708'), can_inplace=False, is_weak=False)]
]
op707.group.device = cuda:0
op707.group.iteration = (8388608, 1)
op707.sizes = ([16384, 512], [])
buf706_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1061_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf707_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op707_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf706', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1061_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf707', get_index_2, relu, None)
        return store
op707 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op708: ExternKernelSchedulerNode(ExternKernelOut)
op708.writes = [StarDep(name='buf708', mode=None)]
op708.unmet_dependencies = [StarDep(name='buf707', mode=None)]
op708.met_dependencies = [StarDep(name='arg1062_1', mode=None)]
op708.outputs = [
    buf708: ExternKernelOut
    buf708.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf708.users = [NodeUser(node=SchedulerNode(name='op709'), can_inplace=True, is_weak=False)]
]
op708.node.kernel = extern_kernels.mm


op709: SchedulerNode(ComputedBuffer)
op709.writes = [MemoryDep('buf709', c0, {c0: 2097152}, None)]
op709.unmet_dependencies = 
    [   MemoryDep('buf705', c0, {c0: 2097152}, None),
        MemoryDep('buf708', c0, {c0: 2097152}, None)]
op709.met_dependencies = 
    [   MemoryDep('arg1063_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1064_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1065_1', c1, {c0: 16384, c1: 128}, None)]
op709.outputs = [
    buf709: ComputedBuffer
    buf709.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf709.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op710'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op713'), can_inplace=True, is_weak=False),
    ]
]
op709.group.device = cuda:0
op709.group.iteration = (2097152, 1)
op709.sizes = ([16384, 128], [])
buf708_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1063_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf705_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1065_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1064_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op709_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf708', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1063_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf705', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1065_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1064_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf709', get_index_5, add_2, None)
        return store
op709 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op710: ExternKernelSchedulerNode(ExternKernelOut)
op710.writes = [StarDep(name='buf710', mode=None)]
op710.unmet_dependencies = [StarDep(name='buf709', mode=None)]
op710.met_dependencies = [StarDep(name='arg1030_1', mode=None)]
op710.outputs = [
    buf710: ExternKernelOut
    buf710.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf710.users = [NodeUser(node=SchedulerNode(name='op711'), can_inplace=True, is_weak=False)]
]
op710.node.kernel = extern_kernels.mm


op711: SchedulerNode(ComputedBuffer)
op711.writes = [MemoryDep('buf711', c0, {c0: 8388608}, None)]
op711.unmet_dependencies = [MemoryDep('buf710', c0, {c0: 8388608}, None)]
op711.met_dependencies = [MemoryDep('arg1031_1', c1, {c0: 16384, c1: 512}, None)]
op711.outputs = [
    buf711: ComputedBuffer
    buf711.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf711.users = [NodeUser(node=ExternKernelSchedulerNode(name='op712'), can_inplace=False, is_weak=False)]
]
op711.group.device = cuda:0
op711.group.iteration = (8388608, 1)
op711.sizes = ([16384, 512], [])
buf710_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1031_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf711_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op711_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf710', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1031_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf711', get_index_2, relu, None)
        return store
op711 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op712: ExternKernelSchedulerNode(ExternKernelOut)
op712.writes = [StarDep(name='buf712', mode=None)]
op712.unmet_dependencies = [StarDep(name='buf711', mode=None)]
op712.met_dependencies = [StarDep(name='arg1032_1', mode=None)]
op712.outputs = [
    buf712: ExternKernelOut
    buf712.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf712.users = [NodeUser(node=SchedulerNode(name='op713'), can_inplace=True, is_weak=False)]
]
op712.node.kernel = extern_kernels.mm


op713: SchedulerNode(ComputedBuffer)
op713.writes = [MemoryDep('buf713', c0, {c0: 2097152}, None)]
op713.unmet_dependencies = 
    [   MemoryDep('buf709', c0, {c0: 2097152}, None),
        MemoryDep('buf712', c0, {c0: 2097152}, None)]
op713.met_dependencies = 
    [   MemoryDep('arg1033_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1034_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1035_1', c1, {c0: 16384, c1: 128}, None)]
op713.outputs = [
    buf713: ComputedBuffer
    buf713.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf713.users = [NodeUser(node=ExternKernelSchedulerNode(name='op714'), can_inplace=False, is_weak=False)]
]
op713.group.device = cuda:0
op713.group.iteration = (2097152, 1)
op713.sizes = ([16384, 128], [])
buf712_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1033_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf709_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1035_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1034_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf713_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op713_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf712', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1033_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf709', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1035_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1034_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf713', get_index_5, add_2, None)
        return store
op713 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op714: ExternKernelSchedulerNode(ExternKernelOut)
op714.writes = [StarDep(name='buf714', mode=None)]
op714.unmet_dependencies = [StarDep(name='buf713', mode=None)]
op714.met_dependencies = [StarDep(name='arg1036_1', mode=None)]
op714.outputs = [
    buf714: ExternKernelOut
    buf714.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf714.users = [NodeUser(node=SchedulerNode(name='op715'), can_inplace=True, is_weak=False)]
]
op714.node.kernel = extern_kernels.mm


op715: SchedulerNode(ComputedBuffer)
op715.writes = [MemoryDep('buf715', c0, {c0: 8388608}, None)]
op715.unmet_dependencies = 
    [   MemoryDep('buf684', c0, {c0: 8388608}, None),
        MemoryDep('buf714', c0, {c0: 8388608}, None)]
op715.met_dependencies = 
    [   MemoryDep('arg1037_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg1038_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg1039_1', c1, {c0: 16384, c1: 512}, None)]
op715.outputs = [
    buf715: ComputedBuffer
    buf715.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf715.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op716'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op720'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op727'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False),
    ]
]
op715.group.device = cuda:0
op715.group.iteration = (8388608, 1)
op715.sizes = ([16384, 512], [])
buf714_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1037_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf684_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg1039_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1038_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op715_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf714', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1037_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf684', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1039_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1038_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf715', get_index_5, add_2, None)
        return store
op715 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op716: ExternKernelSchedulerNode(ExternKernelOut)
op716.writes = [StarDep(name='buf716', mode=None)]
op716.unmet_dependencies = [StarDep(name='buf715', mode=None)]
op716.met_dependencies = [StarDep(name='arg1090_1', mode=None)]
op716.outputs = [
    buf716: ExternKernelOut
    buf716.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf716.users = [NodeUser(node=SchedulerNode(name='op717'), can_inplace=True, is_weak=False)]
]
op716.node.kernel = extern_kernels.mm


op717: SchedulerNode(ComputedBuffer)
op717.writes = [MemoryDep('buf717', c0, {c0: 2097152}, None)]
op717.unmet_dependencies = [MemoryDep('buf716', c0, {c0: 2097152}, None)]
op717.met_dependencies = 
    [   MemoryDep('arg1091_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1092_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1093_1', c1, {c0: 16384, c1: 128}, None)]
op717.outputs = [
    buf717: ComputedBuffer
    buf717.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf717.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op718'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op719'), can_inplace=False, is_weak=False),
    ]
]
op717.group.device = cuda:0
op717.group.iteration = (2097152, 1)
op717.sizes = ([16384, 128], [])
buf716_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1091_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1093_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1092_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf717_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op717_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf716', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1091_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg1093_1', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1092_1', get_index_3)
        add_1 = ops.add(mul, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf717', get_index_4, add_1, None)
        return store
op717 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tmp6 = tmp4 + tmp5
        tl.store(in_out_ptr0 + (x2), tmp6, None)


op718: ExternKernelSchedulerNode(ExternKernelOut)
op718.writes = [StarDep(name='buf718', mode=None)]
op718.unmet_dependencies = [StarDep(name='buf717', mode=None)]
op718.met_dependencies = [StarDep(name='arg1066_1', mode=None), StarDep(name='arg1067_1', mode=None)]
op718.outputs = [
    buf718: ExternKernelOut
    buf718.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf718.users = [NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False)]
]
op718.node.kernel = extern_kernels.addmm


op719: ExternKernelSchedulerNode(ExternKernelOut)
op719.writes = [StarDep(name='buf719', mode=None)]
op719.unmet_dependencies = [StarDep(name='buf717', mode=None)]
op719.met_dependencies = [StarDep(name='arg1068_1', mode=None), StarDep(name='arg1069_1', mode=None)]
op719.outputs = [
    buf719: ExternKernelOut
    buf719.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf719.users = [NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False)]
]
op719.node.kernel = extern_kernels.addmm


op720: ExternKernelSchedulerNode(ExternKernelOut)
op720.writes = [StarDep(name='buf720', mode=None)]
op720.unmet_dependencies = [StarDep(name='buf715', mode=None)]
op720.met_dependencies = [StarDep(name='arg1070_1', mode=None), StarDep(name='arg1071_1', mode=None)]
op720.outputs = [
    buf720: ExternKernelOut
    buf720.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf720.users = [NodeUser(node=ExternKernelSchedulerNode(name='op721'), can_inplace=False, is_weak=False)]
]
op720.node.kernel = extern_kernels.addmm


op721: ExternKernelSchedulerNode(FallbackKernel)
op721.writes = [StarDep(name='buf721', mode=None)]
op721.unmet_dependencies = 
    [   StarDep(name='buf718', mode=None),
        StarDep(name='buf719', mode=None),
        StarDep(name='buf720', mode=None)]
op721.met_dependencies = []
op721.outputs = [
    buf721: FallbackKernel
    buf721.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf721.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op722'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op723'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op724'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op725'), can_inplace=False, is_weak=False),
    ]
]
op721.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op722: ExternKernelSchedulerNode(MultiOutput)
op722.writes = [StarDep(name='buf722', mode=None)]
op722.unmet_dependencies = [StarDep(name='buf721', mode=None)]
op722.met_dependencies = []
op722.outputs = [
    buf722: MultiOutput
    buf722.layout = FixedLayout('cuda', torch.float32, size=[128, 4, 128, 32], stride=[16384, 32, 128, 1])
    buf722.users = [NodeUser(node=ExternKernelSchedulerNode(name='op726'), can_inplace=False, is_weak=False)]
]
op722.node.kernel = None


op726: ExternKernelSchedulerNode(ExternKernelOut)
op726.writes = [StarDep(name='buf726', mode=None)]
op726.unmet_dependencies = [StarDep(name='buf722', mode=None)]
op726.met_dependencies = [StarDep(name='arg1072_1', mode=None)]
op726.outputs = [
    buf726: ExternKernelOut
    buf726.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf726.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=True, is_weak=False)]
]
op726.node.kernel = extern_kernels.mm


op727: ExternKernelSchedulerNode(ExternKernelOut)
op727.writes = [StarDep(name='buf727', mode=None)]
op727.unmet_dependencies = [StarDep(name='buf715', mode=None)]
op727.met_dependencies = [StarDep(name='arg1086_1', mode=None)]
op727.outputs = [
    buf727: ExternKernelOut
    buf727.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf727.users = [NodeUser(node=SchedulerNode(name='op728'), can_inplace=True, is_weak=False)]
]
op727.node.kernel = extern_kernels.mm


op728: SchedulerNode(ComputedBuffer)
op728.writes = [MemoryDep('buf728', c0, {c0: 2097152}, None)]
op728.unmet_dependencies = 
    [   MemoryDep('buf726', c0, {c0: 2097152}, None),
        MemoryDep('buf727', c0, {c0: 2097152}, None)]
op728.met_dependencies = 
    [   MemoryDep('arg1073_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1074_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1075_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1087_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1088_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1089_1', c1, {c0: 16384, c1: 128}, None)]
op728.outputs = [
    buf728: ComputedBuffer
    buf728.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf728.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op729'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op732'), can_inplace=True, is_weak=False),
    ]
]
op728.group.device = cuda:0
op728.group.iteration = (2097152, 1)
op728.sizes = ([16384, 128], [])
buf726_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1073_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf727_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1087_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1089_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1088_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1075_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1074_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op728_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf726', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1073_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf727', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1087_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1089_1', get_index_4)
        mul = ops.mul(add_1, load_4)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg1088_1', get_index_5)
        add_2 = ops.add(mul, load_5)
        add_3 = ops.add(add, add_2)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg1075_1', get_index_6)
        mul_1 = ops.mul(add_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg1074_1', get_index_7)
        add_4 = ops.add(mul_1, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf728', get_index_8, add_4, None)
        return store
op728 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 8, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp4 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp8 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp5 = tmp3 + tmp4
        tmp7 = tmp5 * tmp6
        tmp9 = tmp7 + tmp8
        tmp10 = tmp2 + tmp9
        tmp12 = tmp10 * tmp11
        tmp14 = tmp12 + tmp13
        tl.store(in_out_ptr0 + (x2), tmp14, None)


op729: ExternKernelSchedulerNode(ExternKernelOut)
op729.writes = [StarDep(name='buf729', mode=None)]
op729.unmet_dependencies = [StarDep(name='buf728', mode=None)]
op729.met_dependencies = [StarDep(name='arg1094_1', mode=None)]
op729.outputs = [
    buf729: ExternKernelOut
    buf729.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf729.users = [NodeUser(node=SchedulerNode(name='op730'), can_inplace=True, is_weak=False)]
]
op729.node.kernel = extern_kernels.mm


op730: SchedulerNode(ComputedBuffer)
op730.writes = [MemoryDep('buf730', c0, {c0: 8388608}, None)]
op730.unmet_dependencies = [MemoryDep('buf729', c0, {c0: 8388608}, None)]
op730.met_dependencies = [MemoryDep('arg1095_1', c1, {c0: 16384, c1: 512}, None)]
op730.outputs = [
    buf730: ComputedBuffer
    buf730.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf730.users = [NodeUser(node=ExternKernelSchedulerNode(name='op731'), can_inplace=False, is_weak=False)]
]
op730.group.device = cuda:0
op730.group.iteration = (8388608, 1)
op730.sizes = ([16384, 512], [])
buf729_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1095_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf730_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op730_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf729', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1095_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf730', get_index_2, relu, None)
        return store
op730 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op731: ExternKernelSchedulerNode(ExternKernelOut)
op731.writes = [StarDep(name='buf731', mode=None)]
op731.unmet_dependencies = [StarDep(name='buf730', mode=None)]
op731.met_dependencies = [StarDep(name='arg1096_1', mode=None)]
op731.outputs = [
    buf731: ExternKernelOut
    buf731.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf731.users = [NodeUser(node=SchedulerNode(name='op732'), can_inplace=True, is_weak=False)]
]
op731.node.kernel = extern_kernels.mm


op732: SchedulerNode(ComputedBuffer)
op732.writes = [MemoryDep('buf732', c0, {c0: 2097152}, None)]
op732.unmet_dependencies = 
    [   MemoryDep('buf728', c0, {c0: 2097152}, None),
        MemoryDep('buf731', c0, {c0: 2097152}, None)]
op732.met_dependencies = 
    [   MemoryDep('arg1097_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1098_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1099_1', c1, {c0: 16384, c1: 128}, None)]
op732.outputs = [
    buf732: ComputedBuffer
    buf732.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf732.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op733'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op736'), can_inplace=True, is_weak=False),
    ]
]
op732.group.device = cuda:0
op732.group.iteration = (2097152, 1)
op732.sizes = ([16384, 128], [])
buf731_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1097_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf728_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1099_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1098_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op732_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf731', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1097_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf728', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1099_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1098_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf732', get_index_5, add_2, None)
        return store
op732 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op733: ExternKernelSchedulerNode(ExternKernelOut)
op733.writes = [StarDep(name='buf733', mode=None)]
op733.unmet_dependencies = [StarDep(name='buf732', mode=None)]
op733.met_dependencies = [StarDep(name='arg1100_1', mode=None)]
op733.outputs = [
    buf733: ExternKernelOut
    buf733.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf733.users = [NodeUser(node=SchedulerNode(name='op734'), can_inplace=True, is_weak=False)]
]
op733.node.kernel = extern_kernels.mm


op734: SchedulerNode(ComputedBuffer)
op734.writes = [MemoryDep('buf734', c0, {c0: 8388608}, None)]
op734.unmet_dependencies = [MemoryDep('buf733', c0, {c0: 8388608}, None)]
op734.met_dependencies = [MemoryDep('arg1101_1', c1, {c0: 16384, c1: 512}, None)]
op734.outputs = [
    buf734: ComputedBuffer
    buf734.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf734.users = [NodeUser(node=ExternKernelSchedulerNode(name='op735'), can_inplace=False, is_weak=False)]
]
op734.group.device = cuda:0
op734.group.iteration = (8388608, 1)
op734.sizes = ([16384, 512], [])
buf733_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1101_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf734_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op734_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf733', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1101_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf734', get_index_2, relu, None)
        return store
op734 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op735: ExternKernelSchedulerNode(ExternKernelOut)
op735.writes = [StarDep(name='buf735', mode=None)]
op735.unmet_dependencies = [StarDep(name='buf734', mode=None)]
op735.met_dependencies = [StarDep(name='arg1102_1', mode=None)]
op735.outputs = [
    buf735: ExternKernelOut
    buf735.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf735.users = [NodeUser(node=SchedulerNode(name='op736'), can_inplace=True, is_weak=False)]
]
op735.node.kernel = extern_kernels.mm


op736: SchedulerNode(ComputedBuffer)
op736.writes = [MemoryDep('buf736', c0, {c0: 2097152}, None)]
op736.unmet_dependencies = 
    [   MemoryDep('buf732', c0, {c0: 2097152}, None),
        MemoryDep('buf735', c0, {c0: 2097152}, None)]
op736.met_dependencies = 
    [   MemoryDep('arg1103_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1104_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1105_1', c1, {c0: 16384, c1: 128}, None)]
op736.outputs = [
    buf736: ComputedBuffer
    buf736.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf736.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op737'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op740'), can_inplace=True, is_weak=False),
    ]
]
op736.group.device = cuda:0
op736.group.iteration = (2097152, 1)
op736.sizes = ([16384, 128], [])
buf735_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1103_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf732_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1105_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1104_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op736_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf735', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1103_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf732', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1105_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1104_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf736', get_index_5, add_2, None)
        return store
op736 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op737: ExternKernelSchedulerNode(ExternKernelOut)
op737.writes = [StarDep(name='buf737', mode=None)]
op737.unmet_dependencies = [StarDep(name='buf736', mode=None)]
op737.met_dependencies = [StarDep(name='arg1106_1', mode=None)]
op737.outputs = [
    buf737: ExternKernelOut
    buf737.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf737.users = [NodeUser(node=SchedulerNode(name='op738'), can_inplace=True, is_weak=False)]
]
op737.node.kernel = extern_kernels.mm


op738: SchedulerNode(ComputedBuffer)
op738.writes = [MemoryDep('buf738', c0, {c0: 8388608}, None)]
op738.unmet_dependencies = [MemoryDep('buf737', c0, {c0: 8388608}, None)]
op738.met_dependencies = [MemoryDep('arg1107_1', c1, {c0: 16384, c1: 512}, None)]
op738.outputs = [
    buf738: ComputedBuffer
    buf738.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf738.users = [NodeUser(node=ExternKernelSchedulerNode(name='op739'), can_inplace=False, is_weak=False)]
]
op738.group.device = cuda:0
op738.group.iteration = (8388608, 1)
op738.sizes = ([16384, 512], [])
buf737_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1107_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf738_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op738_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf737', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1107_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf738', get_index_2, relu, None)
        return store
op738 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op739: ExternKernelSchedulerNode(ExternKernelOut)
op739.writes = [StarDep(name='buf739', mode=None)]
op739.unmet_dependencies = [StarDep(name='buf738', mode=None)]
op739.met_dependencies = [StarDep(name='arg1108_1', mode=None)]
op739.outputs = [
    buf739: ExternKernelOut
    buf739.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf739.users = [NodeUser(node=SchedulerNode(name='op740'), can_inplace=True, is_weak=False)]
]
op739.node.kernel = extern_kernels.mm


op740: SchedulerNode(ComputedBuffer)
op740.writes = [MemoryDep('buf740', c0, {c0: 2097152}, None)]
op740.unmet_dependencies = 
    [   MemoryDep('buf736', c0, {c0: 2097152}, None),
        MemoryDep('buf739', c0, {c0: 2097152}, None)]
op740.met_dependencies = 
    [   MemoryDep('arg1109_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1110_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1111_1', c1, {c0: 16384, c1: 128}, None)]
op740.outputs = [
    buf740: ComputedBuffer
    buf740.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf740.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op741'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False),
    ]
]
op740.group.device = cuda:0
op740.group.iteration = (2097152, 1)
op740.sizes = ([16384, 128], [])
buf739_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1109_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf736_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1111_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1110_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op740_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf739', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf736', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1111_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1110_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf740', get_index_5, add_2, None)
        return store
op740 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op741: ExternKernelSchedulerNode(ExternKernelOut)
op741.writes = [StarDep(name='buf741', mode=None)]
op741.unmet_dependencies = [StarDep(name='buf740', mode=None)]
op741.met_dependencies = [StarDep(name='arg1076_1', mode=None)]
op741.outputs = [
    buf741: ExternKernelOut
    buf741.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf741.users = [NodeUser(node=SchedulerNode(name='op742'), can_inplace=True, is_weak=False)]
]
op741.node.kernel = extern_kernels.mm


op742: SchedulerNode(ComputedBuffer)
op742.writes = [MemoryDep('buf742', c0, {c0: 8388608}, None)]
op742.unmet_dependencies = [MemoryDep('buf741', c0, {c0: 8388608}, None)]
op742.met_dependencies = [MemoryDep('arg1077_1', c1, {c0: 16384, c1: 512}, None)]
op742.outputs = [
    buf742: ComputedBuffer
    buf742.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf742.users = [NodeUser(node=ExternKernelSchedulerNode(name='op743'), can_inplace=False, is_weak=False)]
]
op742.group.device = cuda:0
op742.group.iteration = (8388608, 1)
op742.sizes = ([16384, 512], [])
buf741_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1077_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf742_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op742_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf741', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1077_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf742', get_index_2, relu, None)
        return store
op742 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = tl.full([1], 0, tl.int32)
        tmp4 = triton_helpers.maximum(tmp3, tmp2)
        tl.store(in_out_ptr0 + (x2), tmp4, None)


op743: ExternKernelSchedulerNode(ExternKernelOut)
op743.writes = [StarDep(name='buf743', mode=None)]
op743.unmet_dependencies = [StarDep(name='buf742', mode=None)]
op743.met_dependencies = [StarDep(name='arg1078_1', mode=None)]
op743.outputs = [
    buf743: ExternKernelOut
    buf743.layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
    buf743.users = [NodeUser(node=SchedulerNode(name='op744'), can_inplace=True, is_weak=False)]
]
op743.node.kernel = extern_kernels.mm


op744: SchedulerNode(ComputedBuffer)
op744.writes = [MemoryDep('buf744', c0, {c0: 2097152}, None)]
op744.unmet_dependencies = 
    [   MemoryDep('buf740', c0, {c0: 2097152}, None),
        MemoryDep('buf743', c0, {c0: 2097152}, None)]
op744.met_dependencies = 
    [   MemoryDep('arg1079_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1080_1', c1, {c0: 16384, c1: 128}, None),
        MemoryDep('arg1081_1', c1, {c0: 16384, c1: 128}, None)]
op744.outputs = [
    buf744: ComputedBuffer
    buf744.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
    buf744.users = [NodeUser(node=ExternKernelSchedulerNode(name='op745'), can_inplace=False, is_weak=False)]
]
op744.group.device = cuda:0
op744.group.iteration = (2097152, 1)
op744.sizes = ([16384, 128], [])
buf743_layout = FixedLayout('cuda', torch.float32, size=[16384, 128], stride=[128, 1])
arg1079_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf740_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
arg1081_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
arg1080_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf744_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 128], stride=[16384, 128, 1])
class op744_loop_body:
    var_ranges = {z0: 16384, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf743', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1079_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf740', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1081_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1080_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf744', get_index_5, add_2, None)
        return store
op744 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[2097152], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 2097152
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 128
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op745: ExternKernelSchedulerNode(ExternKernelOut)
op745.writes = [StarDep(name='buf745', mode=None)]
op745.unmet_dependencies = [StarDep(name='buf744', mode=None)]
op745.met_dependencies = [StarDep(name='arg1082_1', mode=None)]
op745.outputs = [
    buf745: ExternKernelOut
    buf745.layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
    buf745.users = [NodeUser(node=SchedulerNode(name='op746'), can_inplace=True, is_weak=False)]
]
op745.node.kernel = extern_kernels.mm


op746: SchedulerNode(ComputedBuffer)
op746.writes = [MemoryDep('buf746', c0, {c0: 8388608}, None)]
op746.unmet_dependencies = 
    [   MemoryDep('buf715', c0, {c0: 8388608}, None),
        MemoryDep('buf745', c0, {c0: 8388608}, None)]
op746.met_dependencies = 
    [   MemoryDep('arg1083_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg1084_1', c1, {c0: 16384, c1: 512}, None),
        MemoryDep('arg1085_1', c1, {c0: 16384, c1: 512}, None)]
op746.outputs = [
    buf746: ComputedBuffer
    buf746.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
    buf746.users = [NodeUser(node=ExternKernelSchedulerNode(name='op747'), can_inplace=False, is_weak=False)]
]
op746.group.device = cuda:0
op746.group.iteration = (8388608, 1)
op746.sizes = ([16384, 512], [])
buf745_layout = FixedLayout('cuda', torch.float32, size=[16384, 512], stride=[512, 1])
arg1083_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf715_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
arg1085_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg1084_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf746_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 512], stride=[65536, 512, 1])
class op746_loop_body:
    var_ranges = {z0: 16384, z1: 512}
    index0 = 512*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf745', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1083_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf715', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg1085_1', get_index_3)
        mul = ops.mul(add_1, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg1084_1', get_index_4)
        add_2 = ops.add(mul, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf746', get_index_5, add_2, None)
        return store
op746 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, xnumel, XBLOCK : tl.constexpr):
        xnumel = 8388608
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 512
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr1 + (x2), None)
        tmp5 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 * tmp5
        tmp8 = tmp6 + tmp7
        tl.store(in_out_ptr0 + (x2), tmp8, None)


op747: ExternKernelSchedulerNode(ExternKernelOut)
op747.writes = [StarDep(name='buf747', mode=None)]
op747.unmet_dependencies = [StarDep(name='buf746', mode=None)]
op747.met_dependencies = [StarDep(name='arg1113_1', mode=None)]
op747.outputs = [
    buf747: ExternKernelOut
    buf747.layout = FixedLayout('cuda', torch.float32, size=[16384, 2], stride=[2, 1])
    buf747.users = [
        NodeUser(node=SchedulerNode(name='op748'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op753'), can_inplace=False, is_weak=False),
    ]
]
op747.node.kernel = extern_kernels.mm


op748_op749_op750: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op748_op749_op750.writes = 
    [   MemoryDep('buf748', c0, {c0: 16384}, None),
        MemoryDep('buf749', c0, {c0: 128}, None),
        MemoryDep('buf750', c0, {c0: 128}, None)]
op748_op749_op750.unmet_dependencies = [MemoryDep('buf747', 2*c0, {c0: 16384}, None)]
op748_op749_op750.met_dependencies = [MemoryDep('arg1114_1', 0, {}, None)]
op748_op749_op750.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf748.users = [
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf749.users = [
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
    ]
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf750.users = [NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op748_op749_op750.snodes[0] =
op748: SchedulerNode(ComputedBuffer)
op748.writes = [MemoryDep('buf748', c0, {c0: 16384}, None)]
op748.unmet_dependencies = [MemoryDep('buf747', 2*c0, {c0: 16384}, None)]
op748.met_dependencies = [MemoryDep('arg1114_1', 0, {}, None)]
op748.outputs = [
    buf748: ComputedBuffer
    buf748.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf748.users = [
        NodeUser(node=SchedulerNode(name='op749'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op748.group.device = cuda:0
op748.group.iteration = (16384, 1)
op748.sizes = ([16384], [])
buf747_layout = FixedLayout('cuda', torch.float32, size=[16384, 2], stride=[2, 1])
arg1114_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
class op748_loop_body:
    var_ranges = {z0: 16384}
    index0 = 2*z0
    index1 = 0
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf747', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf748', get_index_2, add, None)
        return store
op748 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (2*x0), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (0))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK])
        tmp3 = tmp0 + tmp2
        tl.store(out_ptr0 + (x0), tmp3, None)
op748_op749_op750.snodes[1] =
op749: SchedulerNode(ComputedBuffer)
op749.writes = [MemoryDep('buf749', c0, {c0: 128}, None)]
op749.unmet_dependencies = [MemoryDep('buf748', c0, {c0: 16384}, None)]
op749.met_dependencies = []
op749.outputs = [
    buf749: ComputedBuffer
    buf749.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf749.users = [
        NodeUser(node=SchedulerNode(name='op750'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False),
    ]
]
op749.group.device = cuda:0
op749.group.iteration = (128, 128)
op749.sizes = ([128], [128])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
class op749_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf748', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf749', get_index_1, reduction)
        return store_reduction
op749 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(xmask, tmp1, float("-inf"))
        tmp4 = triton_helpers.max2(tmp3, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp4, xmask)
op748_op749_op750.snodes[2] =
op750: SchedulerNode(ComputedBuffer)
op750.writes = [MemoryDep('buf750', c0, {c0: 128}, None)]
op750.unmet_dependencies = 
    [   MemoryDep('buf748', c0, {c0: 16384}, None),
        MemoryDep('buf749', c0, {c0: 128}, None)]
op750.met_dependencies = []
op750.outputs = [
    buf750: ComputedBuffer
    buf750.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf750.users = [NodeUser(node=SchedulerNode(name='op751'), can_inplace=False, is_weak=False)]
]
op750.group.device = cuda:0
op750.group.iteration = (128, 128)
op750.sizes = ([128], [128])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf750_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
class op750_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf748', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf749', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf750', get_index_2, reduction)
        return store_reduction
op750 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.where(xmask, tmp4, 0)
        tmp7 = tl.sum(tmp6, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op748_op749_op750 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (0))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        _tmp5 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + ((2*r1) + (256*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp0 + tmp2
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = triton_helpers.maximum(_tmp5, tmp4)
            _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
            tl.store(out_ptr0 + (r1 + (128*x0)), tmp3, rmask & xmask)
        tmp5 = triton_helpers.max2(_tmp5, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp5, xmask)
        _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp7 = tl.load(out_ptr0 + (r1 + (128*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tmp7 - tmp5
            tmp9 = tl_math.exp(tmp8)
            tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
            tmp12 = _tmp11 + tmp10
            _tmp11 = tl.where(rmask & xmask, tmp12, _tmp11)
        tmp11 = tl.sum(_tmp11, 1)[:, None]
        tl.store(out_ptr2 + (x0), tmp11, xmask)


op753_op754_op755: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op753_op754_op755.writes = 
    [   MemoryDep('buf753', c0, {c0: 16384}, None),
        MemoryDep('buf754', c0, {c0: 128}, None),
        MemoryDep('buf755', c0, {c0: 128}, None)]
op753_op754_op755.unmet_dependencies = [MemoryDep('buf747', 2*c0 + 1, {c0: 16384}, None)]
op753_op754_op755.met_dependencies = [MemoryDep('arg1114_1', 1, {}, None)]
op753_op754_op755.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf753.users = [
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf754.users = [
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
    ]
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf755.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op753_op754_op755.snodes[0] =
op753: SchedulerNode(ComputedBuffer)
op753.writes = [MemoryDep('buf753', c0, {c0: 16384}, None)]
op753.unmet_dependencies = [MemoryDep('buf747', 2*c0 + 1, {c0: 16384}, None)]
op753.met_dependencies = [MemoryDep('arg1114_1', 1, {}, None)]
op753.outputs = [
    buf753: ComputedBuffer
    buf753.layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
    buf753.users = [
        NodeUser(node=SchedulerNode(name='op754'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op753.group.device = cuda:0
op753.group.iteration = (16384, 1)
op753.sizes = ([16384], [])
buf747_layout = FixedLayout('cuda', torch.float32, size=[16384, 2], stride=[2, 1])
arg1114_1_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
class op753_loop_body:
    var_ranges = {z0: 16384}
    index0 = 2*z0 + 1
    index1 = 1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf747', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg1114_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        store = ops.store('buf753', get_index_2, add, None)
        return store
op753 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 16384
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (1 + (2*x0)), None, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (1))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK])
        tmp3 = tmp0 + tmp2
        tl.store(out_ptr0 + (x0), tmp3, None)
op753_op754_op755.snodes[1] =
op754: SchedulerNode(ComputedBuffer)
op754.writes = [MemoryDep('buf754', c0, {c0: 128}, None)]
op754.unmet_dependencies = [MemoryDep('buf753', c0, {c0: 16384}, None)]
op754.met_dependencies = []
op754.outputs = [
    buf754: ComputedBuffer
    buf754.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf754.users = [
        NodeUser(node=SchedulerNode(name='op755'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False),
    ]
]
op754.group.device = cuda:0
op754.group.iteration = (128, 128)
op754.sizes = ([128], [128])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
class op754_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf753', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf754', get_index_1, reduction)
        return store_reduction
op754 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.where(xmask, tmp1, float("-inf"))
        tmp4 = triton_helpers.max2(tmp3, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp4, xmask)
op753_op754_op755.snodes[2] =
op755: SchedulerNode(ComputedBuffer)
op755.writes = [MemoryDep('buf755', c0, {c0: 128}, None)]
op755.unmet_dependencies = 
    [   MemoryDep('buf753', c0, {c0: 16384}, None),
        MemoryDep('buf754', c0, {c0: 128}, None)]
op755.met_dependencies = []
op755.outputs = [
    buf755: ComputedBuffer
    buf755.layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
    buf755.users = [NodeUser(node=SchedulerNode(name='op756'), can_inplace=False, is_weak=False)]
]
op755.group.device = cuda:0
op755.group.iteration = (128, 128)
op755.sizes = ([128], [128])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf755_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
class op755_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf753', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf754', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf755', get_index_2, reduction)
        return store_reduction
op755 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (128*x0)), xmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp3 = tl_math.exp(tmp2)
        tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
        tmp6 = tl.where(xmask, tmp4, 0)
        tmp7 = tl.sum(tmp6, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp7, xmask)
op753_op754_op755 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[128, 128],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 2, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, out_ptr1, out_ptr2, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 128
        rnumel = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (1))
        tmp2 = tl.broadcast_to(tmp1, [XBLOCK, RBLOCK])
        _tmp5 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (1 + (2*r1) + (256*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp3 = tmp0 + tmp2
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = triton_helpers.maximum(_tmp5, tmp4)
            _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
            tl.store(out_ptr0 + (r1 + (128*x0)), tmp3, rmask & xmask)
        tmp5 = triton_helpers.max2(_tmp5, 1)[:, None]
        tl.store(out_ptr1 + (x0), tmp5, xmask)
        _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp7 = tl.load(out_ptr0 + (r1 + (128*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp8 = tmp7 - tmp5
            tmp9 = tl_math.exp(tmp8)
            tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
            tmp12 = _tmp11 + tmp10
            _tmp11 = tl.where(rmask & xmask, tmp12, _tmp11)
        tmp11 = tl.sum(_tmp11, 1)[:, None]
        tl.store(out_ptr2 + (x0), tmp11, xmask)


op751_op752_op756_op757_op758: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op751_op752_op756_op757_op758.writes = 
    [   MemoryDep('buf751', 0, {}, None),
        MemoryDep('buf752', 0, {}, None),
        MemoryDep('buf756', 0, {}, None),
        MemoryDep('buf757', 0, {}, None),
        MemoryDep('buf758', 0, {}, None)]
op751_op752_op756_op757_op758.unmet_dependencies = 
    [   MemoryDep('buf748', 128*c0 + tmp20, {c0: 128}, None),
        MemoryDep('buf749', c0, {c0: 128}, None),
        MemoryDep('buf750', c0, {c0: 128}, None),
        MemoryDep('buf753', 128*c0 + tmp20, {c0: 128}, None),
        MemoryDep('buf754', c0, {c0: 128}, None),
        MemoryDep('buf755', c0, {c0: 128}, None)]
op751_op752_op756_op757_op758.met_dependencies = 
    [   MemoryDep('arg1115_1', c0, {c0: 128}, None),
        MemoryDep('arg1116_1', c0, {c0: 128}, None)]
op751_op752_op756_op757_op758.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf751.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf752.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf756.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
    buf757: ComputedBuffer
    buf757.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf758.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op751_op752_op756_op757_op758.snodes[0] =
op751: SchedulerNode(ComputedBuffer)
op751.writes = [MemoryDep('buf751', 0, {}, None)]
op751.unmet_dependencies = 
    [   MemoryDep('buf748', 128*c0 + tmp20, {c0: 128}, None),
        MemoryDep('buf749', c0, {c0: 128}, None),
        MemoryDep('buf750', c0, {c0: 128}, None)]
op751.met_dependencies = [MemoryDep('arg1115_1', c0, {c0: 128}, None)]
op751.outputs = [
    buf751: ComputedBuffer
    buf751.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf751.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op751.group.device = cuda:0
op751.group.iteration = (1, 128)
op751.sizes = ([], [128])
arg1115_1_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf748_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf749_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf750_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf751_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op751_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = indirect0 + 128*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1115_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(128, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(128, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg1115_1', get_index_1)
        constant_3 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(load_1, constant_3)
        constant_4 = ops.constant(128, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        constant_5 = ops.constant(128, torch.int64)
        ne_1 = ops.ne(minimum_1, constant_5)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg1115_1', get_index_2)
        constant_6 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(load_2, constant_6)
        constant_7 = ops.constant(128, torch.int64)
        minimum_2 = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, minimum_2, constant_8)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf748', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf749', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf750', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_9 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_9)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf751', get_index_6, reduction)
        return store_reduction
op751 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp13 = tl.load(in_ptr2 + (r0), None)
        tmp15 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 128, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tl.where(tmp5, tmp4, tmp1)
        tmp7 = tl.full([XBLOCK, RBLOCK], 128, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert((0 <= tmp10) & (tmp10 < 128), "index out of bounds: 0 <= tmp10 < 128")
        tmp12 = tl.load(in_ptr1 + (tmp10 + (128*r0)), None, eviction_policy='evict_last')
        tmp14 = tmp12 - tmp13
        tmp16 = tl_math.log(tmp15)
        tmp17 = tmp14 - tmp16
        tmp18 = -tmp17
        tmp19 = 0.0
        tmp20 = tl.where(tmp5, tmp18, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = tl.sum(tmp21, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp23, None)
op751_op752_op756_op757_op758.snodes[1] =
op752: SchedulerNode(ComputedBuffer)
op752.writes = [MemoryDep('buf752', 0, {}, None)]
op752.unmet_dependencies = []
op752.met_dependencies = [MemoryDep('arg1115_1', c0, {c0: 128}, None)]
op752.outputs = [
    buf752: ComputedBuffer
    buf752.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf752.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op752.group.device = cuda:0
op752.group.iteration = (1, 128)
op752.sizes = ([], [128])
arg1115_1_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf752_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op752_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1115_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(128, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(128, torch.int64)
        ne = ops.ne(minimum, constant_2)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf752', get_index_1, reduction)
        return store_reduction
op752 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 128, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp9, None)
op751_op752_op756_op757_op758.snodes[2] =
op756: SchedulerNode(ComputedBuffer)
op756.writes = [MemoryDep('buf756', 0, {}, None)]
op756.unmet_dependencies = 
    [   MemoryDep('buf753', 128*c0 + tmp20, {c0: 128}, None),
        MemoryDep('buf754', c0, {c0: 128}, None),
        MemoryDep('buf755', c0, {c0: 128}, None)]
op756.met_dependencies = [MemoryDep('arg1116_1', c0, {c0: 128}, None)]
op756.outputs = [
    buf756: ComputedBuffer
    buf756.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf756.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op756.group.device = cuda:0
op756.group.iteration = (1, 128)
op756.sizes = ([], [128])
arg1116_1_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf753_layout = FixedLayout('cuda', torch.float32, size=[128, 128], stride=[128, 1])
buf754_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf755_layout = FixedLayout('cuda', torch.float32, size=[128, 1], stride=[1, 128])
buf756_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op756_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = indirect0 + 128*z0
    index2 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1116_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(128, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(128, torch.int64)
        ne = ops.ne(minimum, constant_2)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg1116_1', get_index_1)
        constant_3 = ops.constant(0, torch.int64)
        maximum_1 = ops.maximum(load_1, constant_3)
        constant_4 = ops.constant(128, torch.int64)
        minimum_1 = ops.minimum(maximum_1, constant_4)
        constant_5 = ops.constant(128, torch.int64)
        ne_1 = ops.ne(minimum_1, constant_5)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg1116_1', get_index_2)
        constant_6 = ops.constant(0, torch.int64)
        maximum_2 = ops.maximum(load_2, constant_6)
        constant_7 = ops.constant(128, torch.int64)
        minimum_2 = ops.minimum(maximum_2, constant_7)
        constant_8 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, minimum_2, constant_8)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf753', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf754', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf755', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_9 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_9)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf756', get_index_6, reduction)
        return store_reduction
op756 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {5: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=(5,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp13 = tl.load(in_ptr2 + (r0), None)
        tmp15 = tl.load(in_ptr3 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 128, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tl.where(tmp5, tmp4, tmp1)
        tmp7 = tl.full([XBLOCK, RBLOCK], 128, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert((0 <= tmp10) & (tmp10 < 128), "index out of bounds: 0 <= tmp10 < 128")
        tmp12 = tl.load(in_ptr1 + (tmp10 + (128*r0)), None, eviction_policy='evict_last')
        tmp14 = tmp12 - tmp13
        tmp16 = tl_math.log(tmp15)
        tmp17 = tmp14 - tmp16
        tmp18 = -tmp17
        tmp19 = 0.0
        tmp20 = tl.where(tmp5, tmp18, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = tl.sum(tmp21, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp23, None)
op751_op752_op756_op757_op758.snodes[3] =
op757: SchedulerNode(ComputedBuffer)
op757.writes = [MemoryDep('buf757', 0, {}, None)]
op757.unmet_dependencies = []
op757.met_dependencies = [MemoryDep('arg1116_1', c0, {c0: 128}, None)]
op757.outputs = [
    buf757: ComputedBuffer
    buf757.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf757.users = [NodeUser(node=SchedulerNode(name='op758'), can_inplace=True, is_weak=False)]
]
op757.group.device = cuda:0
op757.group.iteration = (1, 128)
op757.sizes = ([], [128])
arg1116_1_layout = FixedLayout('cuda', torch.int64, size=[128], stride=[1])
buf757_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op757_loop_body:
    var_ranges = {z0: 128}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1116_1', get_index)
        constant = ops.constant(0, torch.int64)
        maximum = ops.maximum(load, constant)
        constant_1 = ops.constant(128, torch.int64)
        minimum = ops.minimum(maximum, constant_1)
        constant_2 = ops.constant(128, torch.int64)
        ne = ops.ne(minimum, constant_2)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf757', get_index_1, reduction)
        return store_reduction
op757 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 128, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tmp5.to(tl.int64)
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK, RBLOCK])
        tmp9 = tl.sum(tmp7, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp9, None)
op751_op752_op756_op757_op758.snodes[4] =
op758: SchedulerNode(ComputedBuffer)
op758.writes = [MemoryDep('buf758', 0, {}, None)]
op758.unmet_dependencies = 
    [   MemoryDep('buf751', 0, {}, None),
        MemoryDep('buf752', 0, {}, None),
        MemoryDep('buf756', 0, {}, None),
        MemoryDep('buf757', 0, {}, None)]
op758.met_dependencies = []
op758.outputs = [
    buf758: ComputedBuffer
    buf758.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf758.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op758.group.device = cuda:0
op758.group.iteration = (1, 1)
op758.sizes = ([], [])
buf751_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf752_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf756_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf757_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf758_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op758_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf751', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf752', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf756', get_index_2)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf757', get_index_3)
        to_dtype_1 = ops.to_dtype(load_3, torch.float32, src_dtype = torch.int64)
        truediv_1 = ops.truediv(load_2, to_dtype_1)
        add = ops.add(truediv, truediv_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf758', get_index_4, mul, None)
        return store
op758 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*i64', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {4: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(4,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp6 = tl.load(in_ptr1 + (0))
        tmp7 = tl.broadcast_to(tmp6, [XBLOCK])
        tmp8 = tl.load(in_ptr2 + (0))
        tmp9 = tl.broadcast_to(tmp8, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tmp10 = tmp9.to(tl.float32)
        tmp11 = tmp7 / tmp10
        tmp12 = tmp5 + tmp11
        tmp13 = 0.5
        tmp14 = tmp12 * tmp13
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp14, None)
op751_op752_op756_op757_op758 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 128],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*i64', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32', 10: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {9: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 10), equal_to_1=(9,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 4, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 128
        RBLOCK: tl.constexpr = 128
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp13 = tl.load(in_ptr2 + (r0), None)
        tmp15 = tl.load(in_ptr3 + (r0), None)
        tmp28 = tl.load(in_ptr4 + (r0), None)
        tmp38 = tl.load(in_ptr6 + (r0), None)
        tmp40 = tl.load(in_ptr7 + (r0), None)
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = triton_helpers.maximum(tmp0, tmp1)
        tmp3 = tl.full([1, 1], 128, tl.int64)
        tmp4 = triton_helpers.minimum(tmp2, tmp3)
        tmp5 = tmp4 != tmp3
        tmp6 = tl.where(tmp5, tmp4, tmp1)
        tmp7 = tl.full([XBLOCK, RBLOCK], 128, tl.int32)
        tmp8 = tmp6 + tmp7
        tmp9 = tmp6 < 0
        tmp10 = tl.where(tmp9, tmp8, tmp6)
        tl.device_assert((0 <= tmp10) & (tmp10 < 128), "index out of bounds: 0 <= tmp10 < 128")
        tmp12 = tl.load(in_ptr1 + (tmp10 + (128*r0)), None, eviction_policy='evict_last')
        tmp14 = tmp12 - tmp13
        tmp16 = tl_math.log(tmp15)
        tmp17 = tmp14 - tmp16
        tmp18 = -tmp17
        tmp19 = 0.0
        tmp20 = tl.where(tmp5, tmp18, tmp19)
        tmp21 = tl.broadcast_to(tmp20, [XBLOCK, RBLOCK])
        tmp23 = tl.sum(tmp21, 1)[:, None]
        tmp24 = tmp5.to(tl.int64)
        tmp25 = tl.broadcast_to(tmp24, [XBLOCK, RBLOCK])
        tmp27 = tl.sum(tmp25, 1)[:, None]
        tmp29 = triton_helpers.maximum(tmp28, tmp1)
        tmp30 = triton_helpers.minimum(tmp29, tmp3)
        tmp31 = tmp30 != tmp3
        tmp32 = tl.where(tmp31, tmp30, tmp1)
        tmp33 = tmp32 + tmp7
        tmp34 = tmp32 < 0
        tmp35 = tl.where(tmp34, tmp33, tmp32)
        tl.device_assert((0 <= tmp35) & (tmp35 < 128), "index out of bounds: 0 <= tmp35 < 128")
        tmp37 = tl.load(in_ptr5 + (tmp35 + (128*r0)), None, eviction_policy='evict_last')
        tmp39 = tmp37 - tmp38
        tmp41 = tl_math.log(tmp40)
        tmp42 = tmp39 - tmp41
        tmp43 = -tmp42
        tmp44 = tl.where(tmp31, tmp43, tmp19)
        tmp45 = tl.broadcast_to(tmp44, [XBLOCK, RBLOCK])
        tmp47 = tl.sum(tmp45, 1)[:, None]
        tmp48 = tmp31.to(tl.int64)
        tmp49 = tl.broadcast_to(tmp48, [XBLOCK, RBLOCK])
        tmp51 = tl.sum(tmp49, 1)[:, None]
        tmp52 = tmp27.to(tl.float32)
        tmp53 = tmp23 / tmp52
        tmp54 = tmp51.to(tl.float32)
        tmp55 = tmp47 / tmp54
        tmp56 = tmp53 + tmp55
        tmp57 = 0.5
        tmp58 = tmp56 * tmp57
        tl.debug_barrier()
        tl.store(in_out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp58, None)



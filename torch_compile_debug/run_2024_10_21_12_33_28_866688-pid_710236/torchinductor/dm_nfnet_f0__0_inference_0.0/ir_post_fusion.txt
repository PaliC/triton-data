op0_op1_op172: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op0_op1_op172.writes = 
    [   MemoryDep('buf0', c0, {c0: 16}, None),
        MemoryDep('buf1', c0, {c0: 16}, None),
        MemoryDep('buf172', c0, {c0: 432}, None)]
op0_op1_op172.unmet_dependencies = []
op0_op1_op172.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 432}, None),
        MemoryDep('arg2_1', c0, {c0: 16}, None)]
op0_op1_op172.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
    buf0.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
    buf1.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op0_op1_op172.snodes[0] =
op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 16}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 432}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
    buf0.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op0.group.device = cuda:0
op0.group.iteration = (16, 27)
op0.sizes = ([16], [27])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
class op0_loop_body:
    var_ranges = {z0: 16, z1: 27}
    index0 = 27*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf0', get_index_1, getitem)
        return store_reduction
op0_op1_op172.snodes[1] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 16}, None)]
op1.unmet_dependencies = []
op1.met_dependencies = [MemoryDep('arg1_1', c0, {c0: 432}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
    buf1.users = [NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (16, 27)
op1.sizes = ([16], [27])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
class op1_loop_body:
    var_ranges = {z0: 16, z1: 27}
    index0 = 27*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1', get_index_1, getitem_1)
        return store_reduction
op0_op1_op172.snodes[2] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 432}, None)]
op172.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 16}, None), MemoryDep('buf1', c0, {c0: 16}, None)]
op172.met_dependencies = 
    [   MemoryDep('arg1_1', c0, {c0: 432}, None),
        MemoryDep('arg2_1', c0, {c0: 16}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
    buf172.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (432, 1)
op172.sizes = ([16, 27], [])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
buf1_layout = FixedLayout('cuda', torch.float32, size=[1, 16, 1], stride=[16, 1, 16])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[16, 1, 1, 1], stride=[1, 1, 1, 1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[16, 3, 3, 3], stride=[27, 9, 3, 1])
class op172_loop_body:
    var_ranges = {z0: 16, z1: 27}
    index0 = 27*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg1_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf0', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf1', get_index_2)
        constant = ops.constant(27.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg2_1', get_index_3)
        constant_2 = ops.constant(0.19245008972987526, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf172', get_index_4, mul_2, None)
        return store


op3_op4_op175: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op3_op4_op175.writes = 
    [   MemoryDep('buf175', c0, {c0: 4608}, None),
        MemoryDep('buf3', c0, {c0: 32}, None),
        MemoryDep('buf4', c0, {c0: 32}, None)]
op3_op4_op175.unmet_dependencies = []
op3_op4_op175.met_dependencies = 
    [   MemoryDep('arg4_1', c0, {c0: 4608}, None),
        MemoryDep('arg5_1', c0, {c0: 32}, None)]
op3_op4_op175.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
    buf3.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
    buf4.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op3_op4_op175.snodes[0] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 32}, None)]
op3.unmet_dependencies = []
op3.met_dependencies = [MemoryDep('arg4_1', c0, {c0: 4608}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
    buf3.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op3.group.device = cuda:0
op3.group.iteration = (32, 144)
op3.sizes = ([32], [144])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
class op3_loop_body:
    var_ranges = {z0: 32, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf3', get_index_1, getitem)
        return store_reduction
op3_op4_op175.snodes[1] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 32}, None)]
op4.unmet_dependencies = []
op4.met_dependencies = [MemoryDep('arg4_1', c0, {c0: 4608}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
    buf4.users = [NodeUser(node=SchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (32, 144)
op4.sizes = ([32], [144])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
class op4_loop_body:
    var_ranges = {z0: 32, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_1, getitem_1)
        return store_reduction
op3_op4_op175.snodes[2] =
op175: SchedulerNode(ComputedBuffer)
op175.writes = [MemoryDep('buf175', c0, {c0: 4608}, None)]
op175.unmet_dependencies = [MemoryDep('buf3', c0, {c0: 32}, None), MemoryDep('buf4', c0, {c0: 32}, None)]
op175.met_dependencies = 
    [   MemoryDep('arg4_1', c0, {c0: 4608}, None),
        MemoryDep('arg5_1', c0, {c0: 32}, None)]
op175.outputs = [
    buf175: ComputedBuffer
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.group.device = cuda:0
op175.group.iteration = (4608, 1)
op175.sizes = ([32, 144], [])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
buf4_layout = FixedLayout('cuda', torch.float32, size=[1, 32, 1], stride=[32, 1, 32])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[32, 1, 1, 1], stride=[1, 1, 1, 1])
buf175_layout = FixedLayout('cuda', torch.float32, size=[32, 16, 3, 3], stride=[144, 9, 3, 1])
class op175_loop_body:
    var_ranges = {z0: 32, z1: 144}
    index0 = 144*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg4_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf3', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf4', get_index_2)
        constant = ops.constant(144.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg5_1', get_index_3)
        constant_2 = ops.constant(0.08333333333333333, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf175', get_index_4, mul_2, None)
        return store


op6_op7_op178: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op6_op7_op178.writes = 
    [   MemoryDep('buf178', c0, {c0: 18432}, None),
        MemoryDep('buf6', c0, {c0: 64}, None),
        MemoryDep('buf7', c0, {c0: 64}, None)]
op6_op7_op178.unmet_dependencies = []
op6_op7_op178.met_dependencies = 
    [   MemoryDep('arg7_1', c0, {c0: 18432}, None),
        MemoryDep('arg8_1', c0, {c0: 64}, None)]
op6_op7_op178.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
    buf6.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
    buf7.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op6_op7_op178.snodes[0] =
op6: SchedulerNode(ComputedBuffer)
op6.writes = [MemoryDep('buf6', c0, {c0: 64}, None)]
op6.unmet_dependencies = []
op6.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 18432}, None)]
op6.outputs = [
    buf6: ComputedBuffer
    buf6.layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
    buf6.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op6.group.device = cuda:0
op6.group.iteration = (64, 288)
op6.sizes = ([64], [288])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
class op6_loop_body:
    var_ranges = {z0: 64, z1: 288}
    index0 = 288*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf6', get_index_1, getitem)
        return store_reduction
op6_op7_op178.snodes[1] =
op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 64}, None)]
op7.unmet_dependencies = []
op7.met_dependencies = [MemoryDep('arg7_1', c0, {c0: 18432}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
    buf7.users = [NodeUser(node=SchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (64, 288)
op7.sizes = ([64], [288])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
class op7_loop_body:
    var_ranges = {z0: 64, z1: 288}
    index0 = 288*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf7', get_index_1, getitem_1)
        return store_reduction
op6_op7_op178.snodes[2] =
op178: SchedulerNode(ComputedBuffer)
op178.writes = [MemoryDep('buf178', c0, {c0: 18432}, None)]
op178.unmet_dependencies = [MemoryDep('buf6', c0, {c0: 64}, None), MemoryDep('buf7', c0, {c0: 64}, None)]
op178.met_dependencies = 
    [   MemoryDep('arg7_1', c0, {c0: 18432}, None),
        MemoryDep('arg8_1', c0, {c0: 64}, None)]
op178.outputs = [
    buf178: ComputedBuffer
    buf178.layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
    buf178.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op178.group.device = cuda:0
op178.group.iteration = (18432, 1)
op178.sizes = ([64, 288], [])
arg7_1_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
buf6_layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
buf7_layout = FixedLayout('cuda', torch.float32, size=[1, 64, 1], stride=[64, 1, 64])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[64, 1, 1, 1], stride=[1, 1, 1, 1])
buf178_layout = FixedLayout('cuda', torch.float32, size=[64, 32, 3, 3], stride=[288, 9, 3, 1])
class op178_loop_body:
    var_ranges = {z0: 64, z1: 288}
    index0 = 288*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg7_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf6', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf7', get_index_2)
        constant = ops.constant(288.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg8_1', get_index_3)
        constant_2 = ops.constant(0.05892556509887896, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf178', get_index_4, mul_2, None)
        return store


op9_op10_op181: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op9_op10_op181.writes = 
    [   MemoryDep('buf10', c0, {c0: 128}, None),
        MemoryDep('buf181', c0, {c0: 73728}, None),
        MemoryDep('buf9', c0, {c0: 128}, None)]
op9_op10_op181.unmet_dependencies = []
op9_op10_op181.met_dependencies = 
    [   MemoryDep('arg10_1', c0, {c0: 73728}, None),
        MemoryDep('arg11_1', c0, {c0: 128}, None)]
op9_op10_op181.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf9.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf10.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op9_op10_op181.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 128}, None)]
op9.unmet_dependencies = []
op9.met_dependencies = [MemoryDep('arg10_1', c0, {c0: 73728}, None)]
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf9.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (128, 576)
op9.sizes = ([128], [576])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op9_loop_body:
    var_ranges = {z0: 128, z1: 576}
    index0 = 576*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_1, getitem)
        return store_reduction
op9_op10_op181.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 128}, None)]
op10.unmet_dependencies = []
op10.met_dependencies = [MemoryDep('arg10_1', c0, {c0: 73728}, None)]
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf10.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (128, 576)
op10.sizes = ([128], [576])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op10_loop_body:
    var_ranges = {z0: 128, z1: 576}
    index0 = 576*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_1, getitem_1)
        return store_reduction
op9_op10_op181.snodes[2] =
op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 73728}, None)]
op181.unmet_dependencies = 
    [   MemoryDep('buf10', c0, {c0: 128}, None),
        MemoryDep('buf9', c0, {c0: 128}, None)]
op181.met_dependencies = 
    [   MemoryDep('arg10_1', c0, {c0: 73728}, None),
        MemoryDep('arg11_1', c0, {c0: 128}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (73728, 1)
op181.sizes = ([128, 576], [])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
buf10_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[128, 1, 1, 1], stride=[1, 1, 1, 1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[128, 64, 3, 3], stride=[576, 9, 3, 1])
class op181_loop_body:
    var_ranges = {z0: 128, z1: 576}
    index0 = 576*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg10_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf9', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf10', get_index_2)
        constant = ops.constant(576.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg11_1', get_index_3)
        constant_2 = ops.constant(0.041666666666666664, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf181', get_index_4, mul_2, None)
        return store


op12_op13_op200: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op12_op13_op200.writes = 
    [   MemoryDep('buf12', c0, {c0: 256}, None),
        MemoryDep('buf13', c0, {c0: 256}, None),
        MemoryDep('buf200', c0, {c0: 32768}, None)]
op12_op13_op200.unmet_dependencies = []
op12_op13_op200.met_dependencies = 
    [   MemoryDep('arg13_1', c0, {c0: 32768}, None),
        MemoryDep('arg14_1', c0, {c0: 256}, None)]
op12_op13_op200.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf12.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf13.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op12_op13_op200.snodes[0] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 256}, None)]
op12.unmet_dependencies = []
op12.met_dependencies = [MemoryDep('arg13_1', c0, {c0: 32768}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf12.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (256, 128)
op12.sizes = ([256], [128])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op12_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg13_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf12', get_index_1, getitem)
        return store_reduction
op12_op13_op200.snodes[1] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 256}, None)]
op13.unmet_dependencies = []
op13.met_dependencies = [MemoryDep('arg13_1', c0, {c0: 32768}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf13.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (256, 128)
op13.sizes = ([256], [128])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op13_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg13_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf13', get_index_1, getitem_1)
        return store_reduction
op12_op13_op200.snodes[2] =
op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 32768}, None)]
op200.unmet_dependencies = 
    [   MemoryDep('buf12', c0, {c0: 256}, None),
        MemoryDep('buf13', c0, {c0: 256}, None)]
op200.met_dependencies = 
    [   MemoryDep('arg13_1', c0, {c0: 32768}, None),
        MemoryDep('arg14_1', c0, {c0: 256}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (32768, 1)
op200.sizes = ([256, 128], [])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf13_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg14_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
class op200_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg13_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf12', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf13', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg14_1', get_index_3)
        constant_2 = ops.constant(0.08838834764831845, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf200', get_index_4, mul_2, None)
        return store


op15_op16_op184: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op15_op16_op184.writes = 
    [   MemoryDep('buf15', c0, {c0: 128}, None),
        MemoryDep('buf16', c0, {c0: 128}, None),
        MemoryDep('buf184', c0, {c0: 16384}, None)]
op15_op16_op184.unmet_dependencies = []
op15_op16_op184.met_dependencies = 
    [   MemoryDep('arg16_1', c0, {c0: 16384}, None),
        MemoryDep('arg17_1', c0, {c0: 128}, None)]
op15_op16_op184.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf15.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op15_op16_op184.snodes[0] =
op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', c0, {c0: 128}, None)]
op15.unmet_dependencies = []
op15.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 16384}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf15.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op15.group.device = cuda:0
op15.group.iteration = (128, 128)
op15.sizes = ([128], [128])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op15_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf15', get_index_1, getitem)
        return store_reduction
op15_op16_op184.snodes[1] =
op16: SchedulerNode(ComputedBuffer)
op16.writes = [MemoryDep('buf16', c0, {c0: 128}, None)]
op16.unmet_dependencies = []
op16.met_dependencies = [MemoryDep('arg16_1', c0, {c0: 16384}, None)]
op16.outputs = [
    buf16: ComputedBuffer
    buf16.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf16.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op16.group.device = cuda:0
op16.group.iteration = (128, 128)
op16.sizes = ([128], [128])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
buf16_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op16_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf16', get_index_1, getitem_1)
        return store_reduction
op15_op16_op184.snodes[2] =
op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 16384}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf15', c0, {c0: 128}, None),
        MemoryDep('buf16', c0, {c0: 128}, None)]
op184.met_dependencies = 
    [   MemoryDep('arg16_1', c0, {c0: 16384}, None),
        MemoryDep('arg17_1', c0, {c0: 128}, None)]
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (16384, 1)
op184.sizes = ([128, 128], [])
arg16_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
buf16_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[128, 1, 1, 1], stride=[1, 1, 1, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 1, 1], stride=[128, 1, 1, 1])
class op184_loop_body:
    var_ranges = {z0: 128, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg16_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf15', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf16', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg17_1', get_index_3)
        constant_2 = ops.constant(0.08838834764831845, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf184', get_index_4, mul_2, None)
        return store


op18_op19_op187: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op18_op19_op187.writes = 
    [   MemoryDep('buf18', c0, {c0: 128}, None),
        MemoryDep('buf187', c0, {c0: 147456}, None),
        MemoryDep('buf19', c0, {c0: 128}, None)]
op18_op19_op187.unmet_dependencies = []
op18_op19_op187.met_dependencies = 
    [   MemoryDep('arg19_1', c0, {c0: 147456}, None),
        MemoryDep('arg20_1', c0, {c0: 128}, None)]
op18_op19_op187.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf19.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op18_op19_op187.snodes[0] =
op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 128}, None)]
op18.unmet_dependencies = []
op18.met_dependencies = [MemoryDep('arg19_1', c0, {c0: 147456}, None)]
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf18.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (128, 1152)
op18.sizes = ([128], [1152])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op18_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg19_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf18', get_index_1, getitem)
        return store_reduction
op18_op19_op187.snodes[1] =
op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 128}, None)]
op19.unmet_dependencies = []
op19.met_dependencies = [MemoryDep('arg19_1', c0, {c0: 147456}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf19.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False)]
]
op19.group.device = cuda:0
op19.group.iteration = (128, 1152)
op19.sizes = ([128], [1152])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op19_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg19_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf19', get_index_1, getitem_1)
        return store_reduction
op18_op19_op187.snodes[2] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 147456}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 128}, None),
        MemoryDep('buf19', c0, {c0: 128}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg19_1', c0, {c0: 147456}, None),
        MemoryDep('arg20_1', c0, {c0: 128}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf187.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (147456, 1)
op187.sizes = ([128, 1152], [])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
buf19_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
arg20_1_layout = FixedLayout('cuda', torch.float32, size=[128, 1, 1, 1], stride=[1, 1, 1, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
class op187_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg19_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf18', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf19', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg20_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf187', get_index_4, mul_2, None)
        return store


op21_op22_op190: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op21_op22_op190.writes = 
    [   MemoryDep('buf190', c0, {c0: 147456}, None),
        MemoryDep('buf21', c0, {c0: 128}, None),
        MemoryDep('buf22', c0, {c0: 128}, None)]
op21_op22_op190.unmet_dependencies = []
op21_op22_op190.met_dependencies = 
    [   MemoryDep('arg22_1', c0, {c0: 147456}, None),
        MemoryDep('arg23_1', c0, {c0: 128}, None)]
op21_op22_op190.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf21.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf22.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op21_op22_op190.snodes[0] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 128}, None)]
op21.unmet_dependencies = []
op21.met_dependencies = [MemoryDep('arg22_1', c0, {c0: 147456}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf21.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (128, 1152)
op21.sizes = ([128], [1152])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op21_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg22_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_1, getitem)
        return store_reduction
op21_op22_op190.snodes[1] =
op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 128}, None)]
op22.unmet_dependencies = []
op22.met_dependencies = [MemoryDep('arg22_1', c0, {c0: 147456}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
    buf22.users = [NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (128, 1152)
op22.sizes = ([128], [1152])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf22_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
class op22_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg22_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf22', get_index_1, getitem_1)
        return store_reduction
op21_op22_op190.snodes[2] =
op190: SchedulerNode(ComputedBuffer)
op190.writes = [MemoryDep('buf190', c0, {c0: 147456}, None)]
op190.unmet_dependencies = 
    [   MemoryDep('buf21', c0, {c0: 128}, None),
        MemoryDep('buf22', c0, {c0: 128}, None)]
op190.met_dependencies = 
    [   MemoryDep('arg22_1', c0, {c0: 147456}, None),
        MemoryDep('arg23_1', c0, {c0: 128}, None)]
op190.outputs = [
    buf190: ComputedBuffer
    buf190.layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf190.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op190.group.device = cuda:0
op190.group.iteration = (147456, 1)
op190.sizes = ([128, 1152], [])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
buf22_layout = FixedLayout('cuda', torch.float32, size=[1, 128, 1], stride=[128, 1, 128])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[128, 1, 1, 1], stride=[1, 1, 1, 1])
buf190_layout = FixedLayout('cuda', torch.float32, size=[128, 128, 3, 3], stride=[1152, 9, 3, 1])
class op190_loop_body:
    var_ranges = {z0: 128, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg22_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf21', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf22', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg23_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf190', get_index_4, mul_2, None)
        return store


op24_op25_op193: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op24_op25_op193.writes = 
    [   MemoryDep('buf193', c0, {c0: 32768}, None),
        MemoryDep('buf24', c0, {c0: 256}, None),
        MemoryDep('buf25', c0, {c0: 256}, None)]
op24_op25_op193.unmet_dependencies = []
op24_op25_op193.met_dependencies = 
    [   MemoryDep('arg25_1', c0, {c0: 32768}, None),
        MemoryDep('arg26_1', c0, {c0: 256}, None)]
op24_op25_op193.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf24.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op24_op25_op193.snodes[0] =
op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 256}, None)]
op24.unmet_dependencies = []
op24.met_dependencies = [MemoryDep('arg25_1', c0, {c0: 32768}, None)]
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf24.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (256, 128)
op24.sizes = ([256], [128])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op24_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf24', get_index_1, getitem)
        return store_reduction
op24_op25_op193.snodes[1] =
op25: SchedulerNode(ComputedBuffer)
op25.writes = [MemoryDep('buf25', c0, {c0: 256}, None)]
op25.unmet_dependencies = []
op25.met_dependencies = [MemoryDep('arg25_1', c0, {c0: 32768}, None)]
op25.outputs = [
    buf25: ComputedBuffer
    buf25.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf25.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False)]
]
op25.group.device = cuda:0
op25.group.iteration = (256, 128)
op25.sizes = ([256], [128])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf25_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op25_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf25', get_index_1, getitem_1)
        return store_reduction
op24_op25_op193.snodes[2] =
op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 32768}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf24', c0, {c0: 256}, None),
        MemoryDep('buf25', c0, {c0: 256}, None)]
op193.met_dependencies = 
    [   MemoryDep('arg25_1', c0, {c0: 32768}, None),
        MemoryDep('arg26_1', c0, {c0: 256}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (32768, 1)
op193.sizes = ([256, 128], [])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf25_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg26_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 1, 1], stride=[128, 1, 1, 1])
class op193_loop_body:
    var_ranges = {z0: 256, z1: 128}
    index0 = 128*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg25_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf24', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf25', get_index_2)
        constant = ops.constant(128.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg26_1', get_index_3)
        constant_2 = ops.constant(0.08838834764831845, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, mul_2, None)
        return store


op27_op28_op221: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op27_op28_op221.writes = 
    [   MemoryDep('buf221', c0, {c0: 131072}, None),
        MemoryDep('buf27', c0, {c0: 512}, None),
        MemoryDep('buf28', c0, {c0: 512}, None)]
op27_op28_op221.unmet_dependencies = []
op27_op28_op221.met_dependencies = 
    [   MemoryDep('arg33_1', c0, {c0: 131072}, None),
        MemoryDep('arg34_1', c0, {c0: 512}, None)]
op27_op28_op221.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf27.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf28.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op27_op28_op221.snodes[0] =
op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 512}, None)]
op27.unmet_dependencies = []
op27.met_dependencies = [MemoryDep('arg33_1', c0, {c0: 131072}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf27.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (512, 256)
op27.sizes = ([512], [256])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op27_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg33_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf27', get_index_1, getitem)
        return store_reduction
op27_op28_op221.snodes[1] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 512}, None)]
op28.unmet_dependencies = []
op28.met_dependencies = [MemoryDep('arg33_1', c0, {c0: 131072}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf28.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op28.group.device = cuda:0
op28.group.iteration = (512, 256)
op28.sizes = ([512], [256])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op28_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg33_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf28', get_index_1, getitem_1)
        return store_reduction
op27_op28_op221.snodes[2] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 131072}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf27', c0, {c0: 512}, None),
        MemoryDep('buf28', c0, {c0: 512}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg33_1', c0, {c0: 131072}, None),
        MemoryDep('arg34_1', c0, {c0: 512}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf221.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (131072, 1)
op221.sizes = ([512, 256], [])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1, 1, 1], stride=[1, 1, 1, 1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
class op221_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg33_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf27', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf28', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg34_1', get_index_3)
        constant_2 = ops.constant(0.0625, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf221', get_index_4, mul_2, None)
        return store


op30_op31_op204: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op30_op31_op204.writes = 
    [   MemoryDep('buf204', c0, {c0: 65536}, None),
        MemoryDep('buf30', c0, {c0: 256}, None),
        MemoryDep('buf31', c0, {c0: 256}, None)]
op30_op31_op204.unmet_dependencies = []
op30_op31_op204.met_dependencies = 
    [   MemoryDep('arg36_1', c0, {c0: 65536}, None),
        MemoryDep('arg37_1', c0, {c0: 256}, None)]
op30_op31_op204.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf30.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf31.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op30_op31_op204.snodes[0] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 256}, None)]
op30.unmet_dependencies = []
op30.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 65536}, None)]
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf30.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (256, 256)
op30.sizes = ([256], [256])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op30_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf30', get_index_1, getitem)
        return store_reduction
op30_op31_op204.snodes[1] =
op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 256}, None)]
op31.unmet_dependencies = []
op31.met_dependencies = [MemoryDep('arg36_1', c0, {c0: 65536}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf31.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (256, 256)
op31.sizes = ([256], [256])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op31_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf31', get_index_1, getitem_1)
        return store_reduction
op30_op31_op204.snodes[2] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 65536}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf30', c0, {c0: 256}, None),
        MemoryDep('buf31', c0, {c0: 256}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg36_1', c0, {c0: 65536}, None),
        MemoryDep('arg37_1', c0, {c0: 256}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
    buf204.users = [NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False)]
]
op204.group.device = cuda:0
op204.group.iteration = (65536, 1)
op204.sizes = ([256, 256], [])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf31_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[256, 256, 1, 1], stride=[256, 1, 1, 1])
class op204_loop_body:
    var_ranges = {z0: 256, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg36_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf30', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf31', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        constant_2 = ops.constant(0.0625, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf204', get_index_4, mul_2, None)
        return store


op33_op34_op207: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op33_op34_op207.writes = 
    [   MemoryDep('buf207', c0, {c0: 294912}, None),
        MemoryDep('buf33', c0, {c0: 256}, None),
        MemoryDep('buf34', c0, {c0: 256}, None)]
op33_op34_op207.unmet_dependencies = []
op33_op34_op207.met_dependencies = 
    [   MemoryDep('arg39_1', c0, {c0: 294912}, None),
        MemoryDep('arg40_1', c0, {c0: 256}, None)]
op33_op34_op207.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf33.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf34.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op33_op34_op207.snodes[0] =
op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 256}, None)]
op33.unmet_dependencies = []
op33.met_dependencies = [MemoryDep('arg39_1', c0, {c0: 294912}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf33.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (256, 1152)
op33.sizes = ([256], [1152])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op33_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg39_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf33', get_index_1, getitem)
        return store_reduction
op33_op34_op207.snodes[1] =
op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 256}, None)]
op34.unmet_dependencies = []
op34.met_dependencies = [MemoryDep('arg39_1', c0, {c0: 294912}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf34.users = [NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (256, 1152)
op34.sizes = ([256], [1152])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op34_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg39_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf34', get_index_1, getitem_1)
        return store_reduction
op33_op34_op207.snodes[2] =
op207: SchedulerNode(ComputedBuffer)
op207.writes = [MemoryDep('buf207', c0, {c0: 294912}, None)]
op207.unmet_dependencies = 
    [   MemoryDep('buf33', c0, {c0: 256}, None),
        MemoryDep('buf34', c0, {c0: 256}, None)]
op207.met_dependencies = 
    [   MemoryDep('arg39_1', c0, {c0: 294912}, None),
        MemoryDep('arg40_1', c0, {c0: 256}, None)]
op207.outputs = [
    buf207: ComputedBuffer
    buf207.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.group.device = cuda:0
op207.group.iteration = (294912, 1)
op207.sizes = ([256, 1152], [])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf207_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
class op207_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg39_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf33', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf34', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg40_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf207', get_index_4, mul_2, None)
        return store


op36_op37_op210: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op36_op37_op210.writes = 
    [   MemoryDep('buf210', c0, {c0: 294912}, None),
        MemoryDep('buf36', c0, {c0: 256}, None),
        MemoryDep('buf37', c0, {c0: 256}, None)]
op36_op37_op210.unmet_dependencies = []
op36_op37_op210.met_dependencies = 
    [   MemoryDep('arg42_1', c0, {c0: 294912}, None),
        MemoryDep('arg43_1', c0, {c0: 256}, None)]
op36_op37_op210.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf36.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf37.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op36_op37_op210.snodes[0] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 256}, None)]
op36.unmet_dependencies = []
op36.met_dependencies = [MemoryDep('arg42_1', c0, {c0: 294912}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf36.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (256, 1152)
op36.sizes = ([256], [1152])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op36_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf36', get_index_1, getitem)
        return store_reduction
op36_op37_op210.snodes[1] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 256}, None)]
op37.unmet_dependencies = []
op37.met_dependencies = [MemoryDep('arg42_1', c0, {c0: 294912}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf37.users = [NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (256, 1152)
op37.sizes = ([256], [1152])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op37_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf37', get_index_1, getitem_1)
        return store_reduction
op36_op37_op210.snodes[2] =
op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 294912}, None)]
op210.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 256}, None),
        MemoryDep('buf37', c0, {c0: 256}, None)]
op210.met_dependencies = 
    [   MemoryDep('arg42_1', c0, {c0: 294912}, None),
        MemoryDep('arg43_1', c0, {c0: 256}, None)]
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (294912, 1)
op210.sizes = ([256, 1152], [])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf37_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg43_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
class op210_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg42_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf36', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf37', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg43_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf210', get_index_4, mul_2, None)
        return store


op39_op40_op213: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op39_op40_op213.writes = 
    [   MemoryDep('buf213', c0, {c0: 131072}, None),
        MemoryDep('buf39', c0, {c0: 512}, None),
        MemoryDep('buf40', c0, {c0: 512}, None)]
op39_op40_op213.unmet_dependencies = []
op39_op40_op213.met_dependencies = 
    [   MemoryDep('arg45_1', c0, {c0: 131072}, None),
        MemoryDep('arg46_1', c0, {c0: 512}, None)]
op39_op40_op213.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf39.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf40.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op39_op40_op213.snodes[0] =
op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 512}, None)]
op39.unmet_dependencies = []
op39.met_dependencies = [MemoryDep('arg45_1', c0, {c0: 131072}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf39.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op39.group.device = cuda:0
op39.group.iteration = (512, 256)
op39.sizes = ([512], [256])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op39_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg45_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf39', get_index_1, getitem)
        return store_reduction
op39_op40_op213.snodes[1] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 512}, None)]
op40.unmet_dependencies = []
op40.met_dependencies = [MemoryDep('arg45_1', c0, {c0: 131072}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf40.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (512, 256)
op40.sizes = ([512], [256])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op40_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg45_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf40', get_index_1, getitem_1)
        return store_reduction
op39_op40_op213.snodes[2] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 131072}, None)]
op213.unmet_dependencies = 
    [   MemoryDep('buf39', c0, {c0: 512}, None),
        MemoryDep('buf40', c0, {c0: 512}, None)]
op213.met_dependencies = 
    [   MemoryDep('arg45_1', c0, {c0: 131072}, None),
        MemoryDep('arg46_1', c0, {c0: 512}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (131072, 1)
op213.sizes = ([512, 256], [])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1, 1, 1], stride=[1, 1, 1, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
class op213_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg45_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf39', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf40', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg46_1', get_index_3)
        constant_2 = ops.constant(0.0625, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf213', get_index_4, mul_2, None)
        return store


op42_op43_op225: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op225.writes = 
    [   MemoryDep('buf225', c0, {c0: 131072}, None),
        MemoryDep('buf42', c0, {c0: 256}, None),
        MemoryDep('buf43', c0, {c0: 256}, None)]
op42_op43_op225.unmet_dependencies = []
op42_op43_op225.met_dependencies = 
    [   MemoryDep('arg53_1', c0, {c0: 131072}, None),
        MemoryDep('arg54_1', c0, {c0: 256}, None)]
op42_op43_op225.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf42.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf43.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op42_op43_op225.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 256}, None)]
op42.unmet_dependencies = []
op42.met_dependencies = [MemoryDep('arg53_1', c0, {c0: 131072}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf42.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (256, 512)
op42.sizes = ([256], [512])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op42_loop_body:
    var_ranges = {z0: 256, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg53_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf42', get_index_1, getitem)
        return store_reduction
op42_op43_op225.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 256}, None)]
op43.unmet_dependencies = []
op43.met_dependencies = [MemoryDep('arg53_1', c0, {c0: 131072}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf43.users = [NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (256, 512)
op43.sizes = ([256], [512])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op43_loop_body:
    var_ranges = {z0: 256, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg53_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf43', get_index_1, getitem_1)
        return store_reduction
op42_op43_op225.snodes[2] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 131072}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf42', c0, {c0: 256}, None),
        MemoryDep('buf43', c0, {c0: 256}, None)]
op225.met_dependencies = 
    [   MemoryDep('arg53_1', c0, {c0: 131072}, None),
        MemoryDep('arg54_1', c0, {c0: 256}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
    buf225.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (131072, 1)
op225.sizes = ([256, 512], [])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf43_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg54_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[256, 512, 1, 1], stride=[512, 1, 1, 1])
class op225_loop_body:
    var_ranges = {z0: 256, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg53_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf42', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf43', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg54_1', get_index_3)
        constant_2 = ops.constant(0.04419417382415922, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf225', get_index_4, mul_2, None)
        return store


op45_op46_op228: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op45_op46_op228.writes = 
    [   MemoryDep('buf228', c0, {c0: 294912}, None),
        MemoryDep('buf45', c0, {c0: 256}, None),
        MemoryDep('buf46', c0, {c0: 256}, None)]
op45_op46_op228.unmet_dependencies = []
op45_op46_op228.met_dependencies = 
    [   MemoryDep('arg56_1', c0, {c0: 294912}, None),
        MemoryDep('arg57_1', c0, {c0: 256}, None)]
op45_op46_op228.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf45.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf46.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op45_op46_op228.snodes[0] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 256}, None)]
op45.unmet_dependencies = []
op45.met_dependencies = [MemoryDep('arg56_1', c0, {c0: 294912}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf45.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (256, 1152)
op45.sizes = ([256], [1152])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op45_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf45', get_index_1, getitem)
        return store_reduction
op45_op46_op228.snodes[1] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 256}, None)]
op46.unmet_dependencies = []
op46.met_dependencies = [MemoryDep('arg56_1', c0, {c0: 294912}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf46.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (256, 1152)
op46.sizes = ([256], [1152])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op46_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf46', get_index_1, getitem_1)
        return store_reduction
op45_op46_op228.snodes[2] =
op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 294912}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf45', c0, {c0: 256}, None),
        MemoryDep('buf46', c0, {c0: 256}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg56_1', c0, {c0: 294912}, None),
        MemoryDep('arg57_1', c0, {c0: 256}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf228.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op228.group.device = cuda:0
op228.group.iteration = (294912, 1)
op228.sizes = ([256, 1152], [])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf46_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
class op228_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg56_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf45', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf46', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg57_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf228', get_index_4, mul_2, None)
        return store


op48_op49_op231: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op48_op49_op231.writes = 
    [   MemoryDep('buf231', c0, {c0: 294912}, None),
        MemoryDep('buf48', c0, {c0: 256}, None),
        MemoryDep('buf49', c0, {c0: 256}, None)]
op48_op49_op231.unmet_dependencies = []
op48_op49_op231.met_dependencies = 
    [   MemoryDep('arg59_1', c0, {c0: 294912}, None),
        MemoryDep('arg60_1', c0, {c0: 256}, None)]
op48_op49_op231.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf49.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op48_op49_op231.snodes[0] =
op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 256}, None)]
op48.unmet_dependencies = []
op48.met_dependencies = [MemoryDep('arg59_1', c0, {c0: 294912}, None)]
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf48.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (256, 1152)
op48.sizes = ([256], [1152])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op48_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg59_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf48', get_index_1, getitem)
        return store_reduction
op48_op49_op231.snodes[1] =
op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 256}, None)]
op49.unmet_dependencies = []
op49.met_dependencies = [MemoryDep('arg59_1', c0, {c0: 294912}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
    buf49.users = [NodeUser(node=SchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (256, 1152)
op49.sizes = ([256], [1152])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
class op49_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg59_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf49', get_index_1, getitem_1)
        return store_reduction
op48_op49_op231.snodes[2] =
op231: SchedulerNode(ComputedBuffer)
op231.writes = [MemoryDep('buf231', c0, {c0: 294912}, None)]
op231.unmet_dependencies = 
    [   MemoryDep('buf48', c0, {c0: 256}, None),
        MemoryDep('buf49', c0, {c0: 256}, None)]
op231.met_dependencies = 
    [   MemoryDep('arg59_1', c0, {c0: 294912}, None),
        MemoryDep('arg60_1', c0, {c0: 256}, None)]
op231.outputs = [
    buf231: ComputedBuffer
    buf231.layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.group.device = cuda:0
op231.group.iteration = (294912, 1)
op231.sizes = ([256, 1152], [])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
buf49_layout = FixedLayout('cuda', torch.float32, size=[1, 256, 1], stride=[256, 1, 256])
arg60_1_layout = FixedLayout('cuda', torch.float32, size=[256, 1, 1, 1], stride=[1, 1, 1, 1])
buf231_layout = FixedLayout('cuda', torch.float32, size=[256, 128, 3, 3], stride=[1152, 9, 3, 1])
class op231_loop_body:
    var_ranges = {z0: 256, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg59_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf48', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf49', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg60_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf231', get_index_4, mul_2, None)
        return store


op51_op52_op234: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op51_op52_op234.writes = 
    [   MemoryDep('buf234', c0, {c0: 131072}, None),
        MemoryDep('buf51', c0, {c0: 512}, None),
        MemoryDep('buf52', c0, {c0: 512}, None)]
op51_op52_op234.unmet_dependencies = []
op51_op52_op234.met_dependencies = 
    [   MemoryDep('arg62_1', c0, {c0: 131072}, None),
        MemoryDep('arg63_1', c0, {c0: 512}, None)]
op51_op52_op234.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf52.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op51_op52_op234.snodes[0] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 512}, None)]
op51.unmet_dependencies = []
op51.met_dependencies = [MemoryDep('arg62_1', c0, {c0: 131072}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf51.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op51.group.device = cuda:0
op51.group.iteration = (512, 256)
op51.sizes = ([512], [256])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op51_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg62_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, getitem)
        return store_reduction
op51_op52_op234.snodes[1] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 512}, None)]
op52.unmet_dependencies = []
op52.met_dependencies = [MemoryDep('arg62_1', c0, {c0: 131072}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
    buf52.users = [NodeUser(node=SchedulerNode(name='op234'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (512, 256)
op52.sizes = ([512], [256])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf52_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
class op52_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg62_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_1, getitem_1)
        return store_reduction
op51_op52_op234.snodes[2] =
op234: SchedulerNode(ComputedBuffer)
op234.writes = [MemoryDep('buf234', c0, {c0: 131072}, None)]
op234.unmet_dependencies = 
    [   MemoryDep('buf51', c0, {c0: 512}, None),
        MemoryDep('buf52', c0, {c0: 512}, None)]
op234.met_dependencies = 
    [   MemoryDep('arg62_1', c0, {c0: 131072}, None),
        MemoryDep('arg63_1', c0, {c0: 512}, None)]
op234.outputs = [
    buf234: ComputedBuffer
    buf234.layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
    buf234.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op234.group.device = cuda:0
op234.group.iteration = (131072, 1)
op234.sizes = ([512, 256], [])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
buf52_layout = FixedLayout('cuda', torch.float32, size=[1, 512, 1], stride=[512, 1, 512])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[512, 1, 1, 1], stride=[1, 1, 1, 1])
buf234_layout = FixedLayout('cuda', torch.float32, size=[512, 256, 1, 1], stride=[256, 1, 1, 1])
class op234_loop_body:
    var_ranges = {z0: 512, z1: 256}
    index0 = 256*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg62_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg63_1', get_index_3)
        constant_2 = ops.constant(0.0625, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf234', get_index_4, mul_2, None)
        return store


op54_op55_op260: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op54_op55_op260.writes = 
    [   MemoryDep('buf260', c0, {c0: 786432}, None),
        MemoryDep('buf54', c0, {c0: 1536}, None),
        MemoryDep('buf55', c0, {c0: 1536}, None)]
op54_op55_op260.unmet_dependencies = []
op54_op55_op260.met_dependencies = 
    [   MemoryDep('arg70_1', c0, {c0: 786432}, None),
        MemoryDep('arg71_1', c0, {c0: 1536}, None)]
op54_op55_op260.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf54.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf55.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op54_op55_op260.snodes[0] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 1536}, None)]
op54.unmet_dependencies = []
op54.met_dependencies = [MemoryDep('arg70_1', c0, {c0: 786432}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf54.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1536, 512)
op54.sizes = ([1536], [512])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op54_loop_body:
    var_ranges = {z0: 1536, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf54', get_index_1, getitem)
        return store_reduction
op54_op55_op260.snodes[1] =
op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 1536}, None)]
op55.unmet_dependencies = []
op55.met_dependencies = [MemoryDep('arg70_1', c0, {c0: 786432}, None)]
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf55.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (1536, 512)
op55.sizes = ([1536], [512])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op55_loop_body:
    var_ranges = {z0: 1536, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf55', get_index_1, getitem_1)
        return store_reduction
op54_op55_op260.snodes[2] =
op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 786432}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf54', c0, {c0: 1536}, None),
        MemoryDep('buf55', c0, {c0: 1536}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg70_1', c0, {c0: 786432}, None),
        MemoryDep('arg71_1', c0, {c0: 1536}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
    buf260.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op260.group.device = cuda:0
op260.group.iteration = (786432, 1)
op260.sizes = ([1536, 512], [])
arg70_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
buf54_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf55_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[1536, 512, 1, 1], stride=[512, 1, 1, 1])
class op260_loop_body:
    var_ranges = {z0: 1536, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg70_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf54', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf55', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        constant_2 = ops.constant(0.04419417382415922, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf260', get_index_4, mul_2, None)
        return store


op57_op58_op243: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op57_op58_op243.writes = 
    [   MemoryDep('buf243', c0, {c0: 393216}, None),
        MemoryDep('buf57', c0, {c0: 768}, None),
        MemoryDep('buf58', c0, {c0: 768}, None)]
op57_op58_op243.unmet_dependencies = []
op57_op58_op243.met_dependencies = 
    [   MemoryDep('arg73_1', c0, {c0: 393216}, None),
        MemoryDep('arg74_1', c0, {c0: 768}, None)]
op57_op58_op243.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf57.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf58.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op57_op58_op243.snodes[0] =
op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 768}, None)]
op57.unmet_dependencies = []
op57.met_dependencies = [MemoryDep('arg73_1', c0, {c0: 393216}, None)]
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf57.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (768, 512)
op57.sizes = ([768], [512])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op57_loop_body:
    var_ranges = {z0: 768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg73_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf57', get_index_1, getitem)
        return store_reduction
op57_op58_op243.snodes[1] =
op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 768}, None)]
op58.unmet_dependencies = []
op58.met_dependencies = [MemoryDep('arg73_1', c0, {c0: 393216}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf58.users = [NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (768, 512)
op58.sizes = ([768], [512])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op58_loop_body:
    var_ranges = {z0: 768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg73_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf58', get_index_1, getitem_1)
        return store_reduction
op57_op58_op243.snodes[2] =
op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 393216}, None)]
op243.unmet_dependencies = 
    [   MemoryDep('buf57', c0, {c0: 768}, None),
        MemoryDep('buf58', c0, {c0: 768}, None)]
op243.met_dependencies = 
    [   MemoryDep('arg73_1', c0, {c0: 393216}, None),
        MemoryDep('arg74_1', c0, {c0: 768}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
    buf243.users = [NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op243.group.device = cuda:0
op243.group.iteration = (393216, 1)
op243.sizes = ([768, 512], [])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[768, 512, 1, 1], stride=[512, 1, 1, 1])
class op243_loop_body:
    var_ranges = {z0: 768, z1: 512}
    index0 = 512*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg73_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf57', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf58', get_index_2)
        constant = ops.constant(512.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg74_1', get_index_3)
        constant_2 = ops.constant(0.04419417382415922, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf243', get_index_4, mul_2, None)
        return store


op60_op61_op246: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op60_op61_op246.writes = 
    [   MemoryDep('buf246', c0, {c0: 884736}, None),
        MemoryDep('buf60', c0, {c0: 768}, None),
        MemoryDep('buf61', c0, {c0: 768}, None)]
op60_op61_op246.unmet_dependencies = []
op60_op61_op246.met_dependencies = 
    [   MemoryDep('arg76_1', c0, {c0: 884736}, None),
        MemoryDep('arg77_1', c0, {c0: 768}, None)]
op60_op61_op246.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf60.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf61.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op60_op61_op246.snodes[0] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 768}, None)]
op60.unmet_dependencies = []
op60.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 884736}, None)]
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf60.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (768, 1152)
op60.sizes = ([768], [1152])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op60_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf60', get_index_1, getitem)
        return store_reduction
op60_op61_op246.snodes[1] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 768}, None)]
op61.unmet_dependencies = []
op61.met_dependencies = [MemoryDep('arg76_1', c0, {c0: 884736}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf61.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (768, 1152)
op61.sizes = ([768], [1152])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op61_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_1, getitem_1)
        return store_reduction
op60_op61_op246.snodes[2] =
op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 884736}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf60', c0, {c0: 768}, None),
        MemoryDep('buf61', c0, {c0: 768}, None)]
op246.met_dependencies = 
    [   MemoryDep('arg76_1', c0, {c0: 884736}, None),
        MemoryDep('arg77_1', c0, {c0: 768}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (884736, 1)
op246.sizes = ([768, 1152], [])
arg76_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf61_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op246_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg76_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf246', get_index_4, mul_2, None)
        return store


op63_op64_op249: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op63_op64_op249.writes = 
    [   MemoryDep('buf249', c0, {c0: 884736}, None),
        MemoryDep('buf63', c0, {c0: 768}, None),
        MemoryDep('buf64', c0, {c0: 768}, None)]
op63_op64_op249.unmet_dependencies = []
op63_op64_op249.met_dependencies = 
    [   MemoryDep('arg79_1', c0, {c0: 884736}, None),
        MemoryDep('arg80_1', c0, {c0: 768}, None)]
op63_op64_op249.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf63.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf64.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op63_op64_op249.snodes[0] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 768}, None)]
op63.unmet_dependencies = []
op63.met_dependencies = [MemoryDep('arg79_1', c0, {c0: 884736}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf63.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (768, 1152)
op63.sizes = ([768], [1152])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op63_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf63', get_index_1, getitem)
        return store_reduction
op63_op64_op249.snodes[1] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 768}, None)]
op64.unmet_dependencies = []
op64.met_dependencies = [MemoryDep('arg79_1', c0, {c0: 884736}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf64.users = [NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (768, 1152)
op64.sizes = ([768], [1152])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op64_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf64', get_index_1, getitem_1)
        return store_reduction
op63_op64_op249.snodes[2] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 884736}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf63', c0, {c0: 768}, None),
        MemoryDep('buf64', c0, {c0: 768}, None)]
op249.met_dependencies = 
    [   MemoryDep('arg79_1', c0, {c0: 884736}, None),
        MemoryDep('arg80_1', c0, {c0: 768}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf249.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (884736, 1)
op249.sizes = ([768, 1152], [])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op249_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg79_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf63', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf64', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg80_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf249', get_index_4, mul_2, None)
        return store


op66_op67_op252: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op66_op67_op252.writes = 
    [   MemoryDep('buf252', c0, {c0: 1179648}, None),
        MemoryDep('buf66', c0, {c0: 1536}, None),
        MemoryDep('buf67', c0, {c0: 1536}, None)]
op66_op67_op252.unmet_dependencies = []
op66_op67_op252.met_dependencies = 
    [   MemoryDep('arg82_1', c0, {c0: 1179648}, None),
        MemoryDep('arg83_1', c0, {c0: 1536}, None)]
op66_op67_op252.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf66.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf67.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op66_op67_op252.snodes[0] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 1536}, None)]
op66.unmet_dependencies = []
op66.met_dependencies = [MemoryDep('arg82_1', c0, {c0: 1179648}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf66.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (1536, 768)
op66.sizes = ([1536], [768])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op66_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg82_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf66', get_index_1, getitem)
        return store_reduction
op66_op67_op252.snodes[1] =
op67: SchedulerNode(ComputedBuffer)
op67.writes = [MemoryDep('buf67', c0, {c0: 1536}, None)]
op67.unmet_dependencies = []
op67.met_dependencies = [MemoryDep('arg82_1', c0, {c0: 1179648}, None)]
op67.outputs = [
    buf67: ComputedBuffer
    buf67.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf67.users = [NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op67.group.device = cuda:0
op67.group.iteration = (1536, 768)
op67.sizes = ([1536], [768])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op67_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg82_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf67', get_index_1, getitem_1)
        return store_reduction
op66_op67_op252.snodes[2] =
op252: SchedulerNode(ComputedBuffer)
op252.writes = [MemoryDep('buf252', c0, {c0: 1179648}, None)]
op252.unmet_dependencies = 
    [   MemoryDep('buf66', c0, {c0: 1536}, None),
        MemoryDep('buf67', c0, {c0: 1536}, None)]
op252.met_dependencies = 
    [   MemoryDep('arg82_1', c0, {c0: 1179648}, None),
        MemoryDep('arg83_1', c0, {c0: 1536}, None)]
op252.outputs = [
    buf252: ComputedBuffer
    buf252.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf252.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op252.group.device = cuda:0
op252.group.iteration = (1179648, 1)
op252.sizes = ([1536, 768], [])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf67_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf252_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op252_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg82_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf66', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf67', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg83_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf252', get_index_4, mul_2, None)
        return store


op69_op70_op264: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op69_op70_op264.writes = 
    [   MemoryDep('buf264', c0, {c0: 1179648}, None),
        MemoryDep('buf69', c0, {c0: 768}, None),
        MemoryDep('buf70', c0, {c0: 768}, None)]
op69_op70_op264.unmet_dependencies = []
op69_op70_op264.met_dependencies = 
    [   MemoryDep('arg90_1', c0, {c0: 1179648}, None),
        MemoryDep('arg91_1', c0, {c0: 768}, None)]
op69_op70_op264.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf69.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf70.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op69_op70_op264.snodes[0] =
op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 768}, None)]
op69.unmet_dependencies = []
op69.met_dependencies = [MemoryDep('arg90_1', c0, {c0: 1179648}, None)]
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf69.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (768, 1536)
op69.sizes = ([768], [1536])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op69_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg90_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf69', get_index_1, getitem)
        return store_reduction
op69_op70_op264.snodes[1] =
op70: SchedulerNode(ComputedBuffer)
op70.writes = [MemoryDep('buf70', c0, {c0: 768}, None)]
op70.unmet_dependencies = []
op70.met_dependencies = [MemoryDep('arg90_1', c0, {c0: 1179648}, None)]
op70.outputs = [
    buf70: ComputedBuffer
    buf70.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf70.users = [NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op70.group.device = cuda:0
op70.group.iteration = (768, 1536)
op70.sizes = ([768], [1536])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf70_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op70_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg90_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf70', get_index_1, getitem_1)
        return store_reduction
op69_op70_op264.snodes[2] =
op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 1179648}, None)]
op264.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 768}, None),
        MemoryDep('buf70', c0, {c0: 768}, None)]
op264.met_dependencies = 
    [   MemoryDep('arg90_1', c0, {c0: 1179648}, None),
        MemoryDep('arg91_1', c0, {c0: 768}, None)]
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (1179648, 1)
op264.sizes = ([768, 1536], [])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf70_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op264_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg90_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf69', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf70', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg91_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf264', get_index_4, mul_2, None)
        return store


op72_op73_op267: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op72_op73_op267.writes = 
    [   MemoryDep('buf267', c0, {c0: 884736}, None),
        MemoryDep('buf72', c0, {c0: 768}, None),
        MemoryDep('buf73', c0, {c0: 768}, None)]
op72_op73_op267.unmet_dependencies = []
op72_op73_op267.met_dependencies = 
    [   MemoryDep('arg93_1', c0, {c0: 884736}, None),
        MemoryDep('arg94_1', c0, {c0: 768}, None)]
op72_op73_op267.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf72.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf73.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op72_op73_op267.snodes[0] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 768}, None)]
op72.unmet_dependencies = []
op72.met_dependencies = [MemoryDep('arg93_1', c0, {c0: 884736}, None)]
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf72.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (768, 1152)
op72.sizes = ([768], [1152])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op72_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_1, getitem)
        return store_reduction
op72_op73_op267.snodes[1] =
op73: SchedulerNode(ComputedBuffer)
op73.writes = [MemoryDep('buf73', c0, {c0: 768}, None)]
op73.unmet_dependencies = []
op73.met_dependencies = [MemoryDep('arg93_1', c0, {c0: 884736}, None)]
op73.outputs = [
    buf73: ComputedBuffer
    buf73.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf73.users = [NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False)]
]
op73.group.device = cuda:0
op73.group.iteration = (768, 1152)
op73.sizes = ([768], [1152])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op73_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf73', get_index_1, getitem_1)
        return store_reduction
op72_op73_op267.snodes[2] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', c0, {c0: 884736}, None)]
op267.unmet_dependencies = 
    [   MemoryDep('buf72', c0, {c0: 768}, None),
        MemoryDep('buf73', c0, {c0: 768}, None)]
op267.met_dependencies = 
    [   MemoryDep('arg93_1', c0, {c0: 884736}, None),
        MemoryDep('arg94_1', c0, {c0: 768}, None)]
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf267.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op267.group.device = cuda:0
op267.group.iteration = (884736, 1)
op267.sizes = ([768, 1152], [])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf73_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op267_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg93_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf72', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf73', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf267', get_index_4, mul_2, None)
        return store


op75_op76_op270: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op75_op76_op270.writes = 
    [   MemoryDep('buf270', c0, {c0: 884736}, None),
        MemoryDep('buf75', c0, {c0: 768}, None),
        MemoryDep('buf76', c0, {c0: 768}, None)]
op75_op76_op270.unmet_dependencies = []
op75_op76_op270.met_dependencies = 
    [   MemoryDep('arg96_1', c0, {c0: 884736}, None),
        MemoryDep('arg97_1', c0, {c0: 768}, None)]
op75_op76_op270.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf75.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf76.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op75_op76_op270.snodes[0] =
op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 768}, None)]
op75.unmet_dependencies = []
op75.met_dependencies = [MemoryDep('arg96_1', c0, {c0: 884736}, None)]
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf75.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (768, 1152)
op75.sizes = ([768], [1152])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op75_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf75', get_index_1, getitem)
        return store_reduction
op75_op76_op270.snodes[1] =
op76: SchedulerNode(ComputedBuffer)
op76.writes = [MemoryDep('buf76', c0, {c0: 768}, None)]
op76.unmet_dependencies = []
op76.met_dependencies = [MemoryDep('arg96_1', c0, {c0: 884736}, None)]
op76.outputs = [
    buf76: ComputedBuffer
    buf76.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf76.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op76.group.device = cuda:0
op76.group.iteration = (768, 1152)
op76.sizes = ([768], [1152])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf76_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op76_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf76', get_index_1, getitem_1)
        return store_reduction
op75_op76_op270.snodes[2] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 884736}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf75', c0, {c0: 768}, None),
        MemoryDep('buf76', c0, {c0: 768}, None)]
op270.met_dependencies = 
    [   MemoryDep('arg96_1', c0, {c0: 884736}, None),
        MemoryDep('arg97_1', c0, {c0: 768}, None)]
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (884736, 1)
op270.sizes = ([768, 1152], [])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf76_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op270_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg96_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf75', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf76', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg97_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf270', get_index_4, mul_2, None)
        return store


op78_op79_op273: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op78_op79_op273.writes = 
    [   MemoryDep('buf273', c0, {c0: 1179648}, None),
        MemoryDep('buf78', c0, {c0: 1536}, None),
        MemoryDep('buf79', c0, {c0: 1536}, None)]
op78_op79_op273.unmet_dependencies = []
op78_op79_op273.met_dependencies = 
    [   MemoryDep('arg100_1', c0, {c0: 1536}, None),
        MemoryDep('arg99_1', c0, {c0: 1179648}, None)]
op78_op79_op273.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf78.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf79.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op78_op79_op273.snodes[0] =
op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 1536}, None)]
op78.unmet_dependencies = []
op78.met_dependencies = [MemoryDep('arg99_1', c0, {c0: 1179648}, None)]
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf78.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (1536, 768)
op78.sizes = ([1536], [768])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op78_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg99_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf78', get_index_1, getitem)
        return store_reduction
op78_op79_op273.snodes[1] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 1536}, None)]
op79.unmet_dependencies = []
op79.met_dependencies = [MemoryDep('arg99_1', c0, {c0: 1179648}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf79.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op79.group.device = cuda:0
op79.group.iteration = (1536, 768)
op79.sizes = ([1536], [768])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op79_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg99_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf79', get_index_1, getitem_1)
        return store_reduction
op78_op79_op273.snodes[2] =
op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 1179648}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf78', c0, {c0: 1536}, None),
        MemoryDep('buf79', c0, {c0: 1536}, None)]
op273.met_dependencies = 
    [   MemoryDep('arg100_1', c0, {c0: 1536}, None),
        MemoryDep('arg99_1', c0, {c0: 1179648}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (1179648, 1)
op273.sizes = ([1536, 768], [])
arg99_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg100_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op273_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg99_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf78', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf79', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg100_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf273', get_index_4, mul_2, None)
        return store


op81_op82_op282: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op81_op82_op282.writes = 
    [   MemoryDep('buf282', c0, {c0: 1179648}, None),
        MemoryDep('buf81', c0, {c0: 768}, None),
        MemoryDep('buf82', c0, {c0: 768}, None)]
op81_op82_op282.unmet_dependencies = []
op81_op82_op282.met_dependencies = 
    [   MemoryDep('arg107_1', c0, {c0: 1179648}, None),
        MemoryDep('arg108_1', c0, {c0: 768}, None)]
op81_op82_op282.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf81.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf82.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op81_op82_op282.snodes[0] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 768}, None)]
op81.unmet_dependencies = []
op81.met_dependencies = [MemoryDep('arg107_1', c0, {c0: 1179648}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf81.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (768, 1536)
op81.sizes = ([768], [1536])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op81_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, getitem)
        return store_reduction
op81_op82_op282.snodes[1] =
op82: SchedulerNode(ComputedBuffer)
op82.writes = [MemoryDep('buf82', c0, {c0: 768}, None)]
op82.unmet_dependencies = []
op82.met_dependencies = [MemoryDep('arg107_1', c0, {c0: 1179648}, None)]
op82.outputs = [
    buf82: ComputedBuffer
    buf82.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf82.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op82.group.device = cuda:0
op82.group.iteration = (768, 1536)
op82.sizes = ([768], [1536])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf82_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op82_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf82', get_index_1, getitem_1)
        return store_reduction
op81_op82_op282.snodes[2] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 1179648}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf81', c0, {c0: 768}, None),
        MemoryDep('buf82', c0, {c0: 768}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg107_1', c0, {c0: 1179648}, None),
        MemoryDep('arg108_1', c0, {c0: 768}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf282.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (1179648, 1)
op282.sizes = ([768, 1536], [])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf82_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op282_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg107_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf81', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf82', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg108_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf282', get_index_4, mul_2, None)
        return store


op84_op85_op285: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op84_op85_op285.writes = 
    [   MemoryDep('buf285', c0, {c0: 884736}, None),
        MemoryDep('buf84', c0, {c0: 768}, None),
        MemoryDep('buf85', c0, {c0: 768}, None)]
op84_op85_op285.unmet_dependencies = []
op84_op85_op285.met_dependencies = 
    [   MemoryDep('arg110_1', c0, {c0: 884736}, None),
        MemoryDep('arg111_1', c0, {c0: 768}, None)]
op84_op85_op285.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf84.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf85.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op84_op85_op285.snodes[0] =
op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 768}, None)]
op84.unmet_dependencies = []
op84.met_dependencies = [MemoryDep('arg110_1', c0, {c0: 884736}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf84.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (768, 1152)
op84.sizes = ([768], [1152])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op84_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf84', get_index_1, getitem)
        return store_reduction
op84_op85_op285.snodes[1] =
op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 768}, None)]
op85.unmet_dependencies = []
op85.met_dependencies = [MemoryDep('arg110_1', c0, {c0: 884736}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf85.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (768, 1152)
op85.sizes = ([768], [1152])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op85_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf85', get_index_1, getitem_1)
        return store_reduction
op84_op85_op285.snodes[2] =
op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 884736}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf84', c0, {c0: 768}, None),
        MemoryDep('buf85', c0, {c0: 768}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg110_1', c0, {c0: 884736}, None),
        MemoryDep('arg111_1', c0, {c0: 768}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (884736, 1)
op285.sizes = ([768, 1152], [])
arg110_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf84_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf85_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op285_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg110_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf84', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf85', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg111_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf285', get_index_4, mul_2, None)
        return store


op87_op88_op288: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op87_op88_op288.writes = 
    [   MemoryDep('buf288', c0, {c0: 884736}, None),
        MemoryDep('buf87', c0, {c0: 768}, None),
        MemoryDep('buf88', c0, {c0: 768}, None)]
op87_op88_op288.unmet_dependencies = []
op87_op88_op288.met_dependencies = 
    [   MemoryDep('arg113_1', c0, {c0: 884736}, None),
        MemoryDep('arg114_1', c0, {c0: 768}, None)]
op87_op88_op288.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf87.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf88.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op87_op88_op288.snodes[0] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 768}, None)]
op87.unmet_dependencies = []
op87.met_dependencies = [MemoryDep('arg113_1', c0, {c0: 884736}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf87.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (768, 1152)
op87.sizes = ([768], [1152])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op87_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg113_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf87', get_index_1, getitem)
        return store_reduction
op87_op88_op288.snodes[1] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 768}, None)]
op88.unmet_dependencies = []
op88.met_dependencies = [MemoryDep('arg113_1', c0, {c0: 884736}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf88.users = [NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (768, 1152)
op88.sizes = ([768], [1152])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op88_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg113_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf88', get_index_1, getitem_1)
        return store_reduction
op87_op88_op288.snodes[2] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 884736}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf87', c0, {c0: 768}, None),
        MemoryDep('buf88', c0, {c0: 768}, None)]
op288.met_dependencies = 
    [   MemoryDep('arg113_1', c0, {c0: 884736}, None),
        MemoryDep('arg114_1', c0, {c0: 768}, None)]
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf288.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (884736, 1)
op288.sizes = ([768, 1152], [])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf288_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op288_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg113_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf87', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf88', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg114_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf288', get_index_4, mul_2, None)
        return store


op90_op91_op291: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op90_op91_op291.writes = 
    [   MemoryDep('buf291', c0, {c0: 1179648}, None),
        MemoryDep('buf90', c0, {c0: 1536}, None),
        MemoryDep('buf91', c0, {c0: 1536}, None)]
op90_op91_op291.unmet_dependencies = []
op90_op91_op291.met_dependencies = 
    [   MemoryDep('arg116_1', c0, {c0: 1179648}, None),
        MemoryDep('arg117_1', c0, {c0: 1536}, None)]
op90_op91_op291.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf90.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf91.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op90_op91_op291.snodes[0] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 1536}, None)]
op90.unmet_dependencies = []
op90.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 1179648}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf90.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (1536, 768)
op90.sizes = ([1536], [768])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op90_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf90', get_index_1, getitem)
        return store_reduction
op90_op91_op291.snodes[1] =
op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 1536}, None)]
op91.unmet_dependencies = []
op91.met_dependencies = [MemoryDep('arg116_1', c0, {c0: 1179648}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf91.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (1536, 768)
op91.sizes = ([1536], [768])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op91_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf91', get_index_1, getitem_1)
        return store_reduction
op90_op91_op291.snodes[2] =
op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 1179648}, None)]
op291.unmet_dependencies = 
    [   MemoryDep('buf90', c0, {c0: 1536}, None),
        MemoryDep('buf91', c0, {c0: 1536}, None)]
op291.met_dependencies = 
    [   MemoryDep('arg116_1', c0, {c0: 1179648}, None),
        MemoryDep('arg117_1', c0, {c0: 1536}, None)]
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (1179648, 1)
op291.sizes = ([1536, 768], [])
arg116_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op291_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg116_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf90', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf91', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf291', get_index_4, mul_2, None)
        return store


op93_op94_op300: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op93_op94_op300.writes = 
    [   MemoryDep('buf300', c0, {c0: 1179648}, None),
        MemoryDep('buf93', c0, {c0: 768}, None),
        MemoryDep('buf94', c0, {c0: 768}, None)]
op93_op94_op300.unmet_dependencies = []
op93_op94_op300.met_dependencies = 
    [   MemoryDep('arg124_1', c0, {c0: 1179648}, None),
        MemoryDep('arg125_1', c0, {c0: 768}, None)]
op93_op94_op300.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf93.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf94.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op93_op94_op300.snodes[0] =
op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 768}, None)]
op93.unmet_dependencies = []
op93.met_dependencies = [MemoryDep('arg124_1', c0, {c0: 1179648}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf93.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op93.group.device = cuda:0
op93.group.iteration = (768, 1536)
op93.sizes = ([768], [1536])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op93_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf93', get_index_1, getitem)
        return store_reduction
op93_op94_op300.snodes[1] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 768}, None)]
op94.unmet_dependencies = []
op94.met_dependencies = [MemoryDep('arg124_1', c0, {c0: 1179648}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf94.users = [NodeUser(node=SchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (768, 1536)
op94.sizes = ([768], [1536])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op94_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf94', get_index_1, getitem_1)
        return store_reduction
op93_op94_op300.snodes[2] =
op300: SchedulerNode(ComputedBuffer)
op300.writes = [MemoryDep('buf300', c0, {c0: 1179648}, None)]
op300.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 768}, None),
        MemoryDep('buf94', c0, {c0: 768}, None)]
op300.met_dependencies = 
    [   MemoryDep('arg124_1', c0, {c0: 1179648}, None),
        MemoryDep('arg125_1', c0, {c0: 768}, None)]
op300.outputs = [
    buf300: ComputedBuffer
    buf300.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf300.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op300.group.device = cuda:0
op300.group.iteration = (1179648, 1)
op300.sizes = ([768, 1536], [])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf94_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf300_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op300_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg124_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf94', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg125_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf300', get_index_4, mul_2, None)
        return store


op96_op97_op303: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op96_op97_op303.writes = 
    [   MemoryDep('buf303', c0, {c0: 884736}, None),
        MemoryDep('buf96', c0, {c0: 768}, None),
        MemoryDep('buf97', c0, {c0: 768}, None)]
op96_op97_op303.unmet_dependencies = []
op96_op97_op303.met_dependencies = 
    [   MemoryDep('arg127_1', c0, {c0: 884736}, None),
        MemoryDep('arg128_1', c0, {c0: 768}, None)]
op96_op97_op303.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf96.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf97.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op96_op97_op303.snodes[0] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 768}, None)]
op96.unmet_dependencies = []
op96.met_dependencies = [MemoryDep('arg127_1', c0, {c0: 884736}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf96.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op96.group.device = cuda:0
op96.group.iteration = (768, 1152)
op96.sizes = ([768], [1152])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op96_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg127_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf96', get_index_1, getitem)
        return store_reduction
op96_op97_op303.snodes[1] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 768}, None)]
op97.unmet_dependencies = []
op97.met_dependencies = [MemoryDep('arg127_1', c0, {c0: 884736}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf97.users = [NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (768, 1152)
op97.sizes = ([768], [1152])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op97_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg127_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, getitem_1)
        return store_reduction
op96_op97_op303.snodes[2] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 884736}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf96', c0, {c0: 768}, None),
        MemoryDep('buf97', c0, {c0: 768}, None)]
op303.met_dependencies = 
    [   MemoryDep('arg127_1', c0, {c0: 884736}, None),
        MemoryDep('arg128_1', c0, {c0: 768}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (884736, 1)
op303.sizes = ([768, 1152], [])
arg127_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf97_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op303_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg127_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf96', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf97', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg128_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf303', get_index_4, mul_2, None)
        return store


op99_op100_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op99_op100_op306.writes = 
    [   MemoryDep('buf100', c0, {c0: 768}, None),
        MemoryDep('buf306', c0, {c0: 884736}, None),
        MemoryDep('buf99', c0, {c0: 768}, None)]
op99_op100_op306.unmet_dependencies = []
op99_op100_op306.met_dependencies = 
    [   MemoryDep('arg130_1', c0, {c0: 884736}, None),
        MemoryDep('arg131_1', c0, {c0: 768}, None)]
op99_op100_op306.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf99.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf100.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op99_op100_op306.snodes[0] =
op99: SchedulerNode(ComputedBuffer)
op99.writes = [MemoryDep('buf99', c0, {c0: 768}, None)]
op99.unmet_dependencies = []
op99.met_dependencies = [MemoryDep('arg130_1', c0, {c0: 884736}, None)]
op99.outputs = [
    buf99: ComputedBuffer
    buf99.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf99.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op99.group.device = cuda:0
op99.group.iteration = (768, 1152)
op99.sizes = ([768], [1152])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op99_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg130_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf99', get_index_1, getitem)
        return store_reduction
op99_op100_op306.snodes[1] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 768}, None)]
op100.unmet_dependencies = []
op100.met_dependencies = [MemoryDep('arg130_1', c0, {c0: 884736}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf100.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op100.group.device = cuda:0
op100.group.iteration = (768, 1152)
op100.sizes = ([768], [1152])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op100_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg130_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf100', get_index_1, getitem_1)
        return store_reduction
op99_op100_op306.snodes[2] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 884736}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 768}, None),
        MemoryDep('buf99', c0, {c0: 768}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg130_1', c0, {c0: 884736}, None),
        MemoryDep('arg131_1', c0, {c0: 768}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (884736, 1)
op306.sizes = ([768, 1152], [])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf99_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf100_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op306_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg130_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf99', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf100', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg131_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf306', get_index_4, mul_2, None)
        return store


op102_op103_op309: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op102_op103_op309.writes = 
    [   MemoryDep('buf102', c0, {c0: 1536}, None),
        MemoryDep('buf103', c0, {c0: 1536}, None),
        MemoryDep('buf309', c0, {c0: 1179648}, None)]
op102_op103_op309.unmet_dependencies = []
op102_op103_op309.met_dependencies = 
    [   MemoryDep('arg133_1', c0, {c0: 1179648}, None),
        MemoryDep('arg134_1', c0, {c0: 1536}, None)]
op102_op103_op309.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf102.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf103.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op102_op103_op309.snodes[0] =
op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 1536}, None)]
op102.unmet_dependencies = []
op102.met_dependencies = [MemoryDep('arg133_1', c0, {c0: 1179648}, None)]
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf102.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (1536, 768)
op102.sizes = ([1536], [768])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op102_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg133_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf102', get_index_1, getitem)
        return store_reduction
op102_op103_op309.snodes[1] =
op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 1536}, None)]
op103.unmet_dependencies = []
op103.met_dependencies = [MemoryDep('arg133_1', c0, {c0: 1179648}, None)]
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf103.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (1536, 768)
op103.sizes = ([1536], [768])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op103_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg133_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf103', get_index_1, getitem_1)
        return store_reduction
op102_op103_op309.snodes[2] =
op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 1179648}, None)]
op309.unmet_dependencies = 
    [   MemoryDep('buf102', c0, {c0: 1536}, None),
        MemoryDep('buf103', c0, {c0: 1536}, None)]
op309.met_dependencies = 
    [   MemoryDep('arg133_1', c0, {c0: 1179648}, None),
        MemoryDep('arg134_1', c0, {c0: 1536}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (1179648, 1)
op309.sizes = ([1536, 768], [])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf103_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op309_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg133_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf102', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf103', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg134_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf309', get_index_4, mul_2, None)
        return store


op105_op106_op318: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op105_op106_op318.writes = 
    [   MemoryDep('buf105', c0, {c0: 768}, None),
        MemoryDep('buf106', c0, {c0: 768}, None),
        MemoryDep('buf318', c0, {c0: 1179648}, None)]
op105_op106_op318.unmet_dependencies = []
op105_op106_op318.met_dependencies = 
    [   MemoryDep('arg141_1', c0, {c0: 1179648}, None),
        MemoryDep('arg142_1', c0, {c0: 768}, None)]
op105_op106_op318.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf105.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf106.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op105_op106_op318.snodes[0] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', c0, {c0: 768}, None)]
op105.unmet_dependencies = []
op105.met_dependencies = [MemoryDep('arg141_1', c0, {c0: 1179648}, None)]
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf105.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op105.group.device = cuda:0
op105.group.iteration = (768, 1536)
op105.sizes = ([768], [1536])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op105_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, getitem)
        return store_reduction
op105_op106_op318.snodes[1] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', c0, {c0: 768}, None)]
op106.unmet_dependencies = []
op106.met_dependencies = [MemoryDep('arg141_1', c0, {c0: 1179648}, None)]
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf106.users = [NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (768, 1536)
op106.sizes = ([768], [1536])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op106_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_1, getitem_1)
        return store_reduction
op105_op106_op318.snodes[2] =
op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 1179648}, None)]
op318.unmet_dependencies = 
    [   MemoryDep('buf105', c0, {c0: 768}, None),
        MemoryDep('buf106', c0, {c0: 768}, None)]
op318.met_dependencies = 
    [   MemoryDep('arg141_1', c0, {c0: 1179648}, None),
        MemoryDep('arg142_1', c0, {c0: 768}, None)]
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (1179648, 1)
op318.sizes = ([768, 1536], [])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf106_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op318_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg141_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf106', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg142_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf318', get_index_4, mul_2, None)
        return store


op108_op109_op321: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op108_op109_op321.writes = 
    [   MemoryDep('buf108', c0, {c0: 768}, None),
        MemoryDep('buf109', c0, {c0: 768}, None),
        MemoryDep('buf321', c0, {c0: 884736}, None)]
op108_op109_op321.unmet_dependencies = []
op108_op109_op321.met_dependencies = 
    [   MemoryDep('arg144_1', c0, {c0: 884736}, None),
        MemoryDep('arg145_1', c0, {c0: 768}, None)]
op108_op109_op321.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf108.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf109.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op108_op109_op321.snodes[0] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', c0, {c0: 768}, None)]
op108.unmet_dependencies = []
op108.met_dependencies = [MemoryDep('arg144_1', c0, {c0: 884736}, None)]
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf108.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (768, 1152)
op108.sizes = ([768], [1152])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op108_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg144_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf108', get_index_1, getitem)
        return store_reduction
op108_op109_op321.snodes[1] =
op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 768}, None)]
op109.unmet_dependencies = []
op109.met_dependencies = [MemoryDep('arg144_1', c0, {c0: 884736}, None)]
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf109.users = [NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (768, 1152)
op109.sizes = ([768], [1152])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op109_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg144_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf109', get_index_1, getitem_1)
        return store_reduction
op108_op109_op321.snodes[2] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 884736}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf108', c0, {c0: 768}, None),
        MemoryDep('buf109', c0, {c0: 768}, None)]
op321.met_dependencies = 
    [   MemoryDep('arg144_1', c0, {c0: 884736}, None),
        MemoryDep('arg145_1', c0, {c0: 768}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf321.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (884736, 1)
op321.sizes = ([768, 1152], [])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf108_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf109_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op321_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg144_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf108', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf109', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg145_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf321', get_index_4, mul_2, None)
        return store


op111_op112_op324: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op111_op112_op324.writes = 
    [   MemoryDep('buf111', c0, {c0: 768}, None),
        MemoryDep('buf112', c0, {c0: 768}, None),
        MemoryDep('buf324', c0, {c0: 884736}, None)]
op111_op112_op324.unmet_dependencies = []
op111_op112_op324.met_dependencies = 
    [   MemoryDep('arg147_1', c0, {c0: 884736}, None),
        MemoryDep('arg148_1', c0, {c0: 768}, None)]
op111_op112_op324.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf111.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf112.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op111_op112_op324.snodes[0] =
op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 768}, None)]
op111.unmet_dependencies = []
op111.met_dependencies = [MemoryDep('arg147_1', c0, {c0: 884736}, None)]
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf111.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (768, 1152)
op111.sizes = ([768], [1152])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op111_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf111', get_index_1, getitem)
        return store_reduction
op111_op112_op324.snodes[1] =
op112: SchedulerNode(ComputedBuffer)
op112.writes = [MemoryDep('buf112', c0, {c0: 768}, None)]
op112.unmet_dependencies = []
op112.met_dependencies = [MemoryDep('arg147_1', c0, {c0: 884736}, None)]
op112.outputs = [
    buf112: ComputedBuffer
    buf112.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf112.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op112.group.device = cuda:0
op112.group.iteration = (768, 1152)
op112.sizes = ([768], [1152])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op112_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf112', get_index_1, getitem_1)
        return store_reduction
op111_op112_op324.snodes[2] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 884736}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf111', c0, {c0: 768}, None),
        MemoryDep('buf112', c0, {c0: 768}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg147_1', c0, {c0: 884736}, None),
        MemoryDep('arg148_1', c0, {c0: 768}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (884736, 1)
op324.sizes = ([768, 1152], [])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg148_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op324_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg147_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf111', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf112', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg148_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf324', get_index_4, mul_2, None)
        return store


op114_op115_op327: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op114_op115_op327.writes = 
    [   MemoryDep('buf114', c0, {c0: 1536}, None),
        MemoryDep('buf115', c0, {c0: 1536}, None),
        MemoryDep('buf327', c0, {c0: 1179648}, None)]
op114_op115_op327.unmet_dependencies = []
op114_op115_op327.met_dependencies = 
    [   MemoryDep('arg150_1', c0, {c0: 1179648}, None),
        MemoryDep('arg151_1', c0, {c0: 1536}, None)]
op114_op115_op327.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf114.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf115.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op114_op115_op327.snodes[0] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 1536}, None)]
op114.unmet_dependencies = []
op114.met_dependencies = [MemoryDep('arg150_1', c0, {c0: 1179648}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf114.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (1536, 768)
op114.sizes = ([1536], [768])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op114_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg150_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf114', get_index_1, getitem)
        return store_reduction
op114_op115_op327.snodes[1] =
op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 1536}, None)]
op115.unmet_dependencies = []
op115.met_dependencies = [MemoryDep('arg150_1', c0, {c0: 1179648}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf115.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op115.group.device = cuda:0
op115.group.iteration = (1536, 768)
op115.sizes = ([1536], [768])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op115_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg150_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf115', get_index_1, getitem_1)
        return store_reduction
op114_op115_op327.snodes[2] =
op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 1179648}, None)]
op327.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 1536}, None),
        MemoryDep('buf115', c0, {c0: 1536}, None)]
op327.met_dependencies = 
    [   MemoryDep('arg150_1', c0, {c0: 1179648}, None),
        MemoryDep('arg151_1', c0, {c0: 1536}, None)]
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (1179648, 1)
op327.sizes = ([1536, 768], [])
arg150_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf115_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op327_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg150_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf114', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf115', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg151_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf327', get_index_4, mul_2, None)
        return store


op117_op118_op336: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op117_op118_op336.writes = 
    [   MemoryDep('buf117', c0, {c0: 768}, None),
        MemoryDep('buf118', c0, {c0: 768}, None),
        MemoryDep('buf336', c0, {c0: 1179648}, None)]
op117_op118_op336.unmet_dependencies = []
op117_op118_op336.met_dependencies = 
    [   MemoryDep('arg158_1', c0, {c0: 1179648}, None),
        MemoryDep('arg159_1', c0, {c0: 768}, None)]
op117_op118_op336.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf117.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf118.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op117_op118_op336.snodes[0] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 768}, None)]
op117.unmet_dependencies = []
op117.met_dependencies = [MemoryDep('arg158_1', c0, {c0: 1179648}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf117.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (768, 1536)
op117.sizes = ([768], [1536])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op117_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg158_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf117', get_index_1, getitem)
        return store_reduction
op117_op118_op336.snodes[1] =
op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 768}, None)]
op118.unmet_dependencies = []
op118.met_dependencies = [MemoryDep('arg158_1', c0, {c0: 1179648}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf118.users = [NodeUser(node=SchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (768, 1536)
op118.sizes = ([768], [1536])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op118_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg158_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf118', get_index_1, getitem_1)
        return store_reduction
op117_op118_op336.snodes[2] =
op336: SchedulerNode(ComputedBuffer)
op336.writes = [MemoryDep('buf336', c0, {c0: 1179648}, None)]
op336.unmet_dependencies = 
    [   MemoryDep('buf117', c0, {c0: 768}, None),
        MemoryDep('buf118', c0, {c0: 768}, None)]
op336.met_dependencies = 
    [   MemoryDep('arg158_1', c0, {c0: 1179648}, None),
        MemoryDep('arg159_1', c0, {c0: 768}, None)]
op336.outputs = [
    buf336: ComputedBuffer
    buf336.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf336.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.group.device = cuda:0
op336.group.iteration = (1179648, 1)
op336.sizes = ([768, 1536], [])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf118_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf336_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op336_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg158_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf117', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf118', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg159_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf336', get_index_4, mul_2, None)
        return store


op120_op121_op339: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op120_op121_op339.writes = 
    [   MemoryDep('buf120', c0, {c0: 768}, None),
        MemoryDep('buf121', c0, {c0: 768}, None),
        MemoryDep('buf339', c0, {c0: 884736}, None)]
op120_op121_op339.unmet_dependencies = []
op120_op121_op339.met_dependencies = 
    [   MemoryDep('arg161_1', c0, {c0: 884736}, None),
        MemoryDep('arg162_1', c0, {c0: 768}, None)]
op120_op121_op339.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf120.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf121.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op120_op121_op339.snodes[0] =
op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 768}, None)]
op120.unmet_dependencies = []
op120.met_dependencies = [MemoryDep('arg161_1', c0, {c0: 884736}, None)]
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf120.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (768, 1152)
op120.sizes = ([768], [1152])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op120_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf120', get_index_1, getitem)
        return store_reduction
op120_op121_op339.snodes[1] =
op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 768}, None)]
op121.unmet_dependencies = []
op121.met_dependencies = [MemoryDep('arg161_1', c0, {c0: 884736}, None)]
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf121.users = [NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (768, 1152)
op121.sizes = ([768], [1152])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op121_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf121', get_index_1, getitem_1)
        return store_reduction
op120_op121_op339.snodes[2] =
op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 884736}, None)]
op339.unmet_dependencies = 
    [   MemoryDep('buf120', c0, {c0: 768}, None),
        MemoryDep('buf121', c0, {c0: 768}, None)]
op339.met_dependencies = 
    [   MemoryDep('arg161_1', c0, {c0: 884736}, None),
        MemoryDep('arg162_1', c0, {c0: 768}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf339.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op339.group.device = cuda:0
op339.group.iteration = (884736, 1)
op339.sizes = ([768, 1152], [])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf121_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg162_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op339_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg161_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf120', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf121', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg162_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf339', get_index_4, mul_2, None)
        return store


op123_op124_op342: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op123_op124_op342.writes = 
    [   MemoryDep('buf123', c0, {c0: 768}, None),
        MemoryDep('buf124', c0, {c0: 768}, None),
        MemoryDep('buf342', c0, {c0: 884736}, None)]
op123_op124_op342.unmet_dependencies = []
op123_op124_op342.met_dependencies = 
    [   MemoryDep('arg164_1', c0, {c0: 884736}, None),
        MemoryDep('arg165_1', c0, {c0: 768}, None)]
op123_op124_op342.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf123.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf124.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op123_op124_op342.snodes[0] =
op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 768}, None)]
op123.unmet_dependencies = []
op123.met_dependencies = [MemoryDep('arg164_1', c0, {c0: 884736}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf123.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (768, 1152)
op123.sizes = ([768], [1152])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op123_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf123', get_index_1, getitem)
        return store_reduction
op123_op124_op342.snodes[1] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 768}, None)]
op124.unmet_dependencies = []
op124.met_dependencies = [MemoryDep('arg164_1', c0, {c0: 884736}, None)]
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf124.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op124.group.device = cuda:0
op124.group.iteration = (768, 1152)
op124.sizes = ([768], [1152])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op124_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_1, getitem_1)
        return store_reduction
op123_op124_op342.snodes[2] =
op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 884736}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 768}, None),
        MemoryDep('buf124', c0, {c0: 768}, None)]
op342.met_dependencies = 
    [   MemoryDep('arg164_1', c0, {c0: 884736}, None),
        MemoryDep('arg165_1', c0, {c0: 768}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (884736, 1)
op342.sizes = ([768, 1152], [])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf342_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op342_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg164_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf123', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf124', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg165_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf342', get_index_4, mul_2, None)
        return store


op126_op127_op345: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op126_op127_op345.writes = 
    [   MemoryDep('buf126', c0, {c0: 1536}, None),
        MemoryDep('buf127', c0, {c0: 1536}, None),
        MemoryDep('buf345', c0, {c0: 1179648}, None)]
op126_op127_op345.unmet_dependencies = []
op126_op127_op345.met_dependencies = 
    [   MemoryDep('arg167_1', c0, {c0: 1179648}, None),
        MemoryDep('arg168_1', c0, {c0: 1536}, None)]
op126_op127_op345.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf126.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf127.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op126_op127_op345.snodes[0] =
op126: SchedulerNode(ComputedBuffer)
op126.writes = [MemoryDep('buf126', c0, {c0: 1536}, None)]
op126.unmet_dependencies = []
op126.met_dependencies = [MemoryDep('arg167_1', c0, {c0: 1179648}, None)]
op126.outputs = [
    buf126: ComputedBuffer
    buf126.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf126.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op126.group.device = cuda:0
op126.group.iteration = (1536, 768)
op126.sizes = ([1536], [768])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op126_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg167_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf126', get_index_1, getitem)
        return store_reduction
op126_op127_op345.snodes[1] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 1536}, None)]
op127.unmet_dependencies = []
op127.met_dependencies = [MemoryDep('arg167_1', c0, {c0: 1179648}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf127.users = [NodeUser(node=SchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (1536, 768)
op127.sizes = ([1536], [768])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op127_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg167_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf127', get_index_1, getitem_1)
        return store_reduction
op126_op127_op345.snodes[2] =
op345: SchedulerNode(ComputedBuffer)
op345.writes = [MemoryDep('buf345', c0, {c0: 1179648}, None)]
op345.unmet_dependencies = 
    [   MemoryDep('buf126', c0, {c0: 1536}, None),
        MemoryDep('buf127', c0, {c0: 1536}, None)]
op345.met_dependencies = 
    [   MemoryDep('arg167_1', c0, {c0: 1179648}, None),
        MemoryDep('arg168_1', c0, {c0: 1536}, None)]
op345.outputs = [
    buf345: ComputedBuffer
    buf345.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf345.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.group.device = cuda:0
op345.group.iteration = (1179648, 1)
op345.sizes = ([1536, 768], [])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf126_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf345_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op345_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg167_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf126', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf127', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg168_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf345', get_index_4, mul_2, None)
        return store


op129_op130_op371: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op129_op130_op371.writes = 
    [   MemoryDep('buf129', c0, {c0: 1536}, None),
        MemoryDep('buf130', c0, {c0: 1536}, None),
        MemoryDep('buf371', c0, {c0: 2359296}, None)]
op129_op130_op371.unmet_dependencies = []
op129_op130_op371.met_dependencies = 
    [   MemoryDep('arg175_1', c0, {c0: 2359296}, None),
        MemoryDep('arg176_1', c0, {c0: 1536}, None)]
op129_op130_op371.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf129.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf130.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op129_op130_op371.snodes[0] =
op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 1536}, None)]
op129.unmet_dependencies = []
op129.met_dependencies = [MemoryDep('arg175_1', c0, {c0: 2359296}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf129.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (1536, 1536)
op129.sizes = ([1536], [1536])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op129_loop_body:
    var_ranges = {z0: 1536, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg175_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf129', get_index_1, getitem)
        return store_reduction
op129_op130_op371.snodes[1] =
op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 1536}, None)]
op130.unmet_dependencies = []
op130.met_dependencies = [MemoryDep('arg175_1', c0, {c0: 2359296}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf130.users = [NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (1536, 1536)
op130.sizes = ([1536], [1536])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op130_loop_body:
    var_ranges = {z0: 1536, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg175_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf130', get_index_1, getitem_1)
        return store_reduction
op129_op130_op371.snodes[2] =
op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 2359296}, None)]
op371.unmet_dependencies = 
    [   MemoryDep('buf129', c0, {c0: 1536}, None),
        MemoryDep('buf130', c0, {c0: 1536}, None)]
op371.met_dependencies = 
    [   MemoryDep('arg175_1', c0, {c0: 2359296}, None),
        MemoryDep('arg176_1', c0, {c0: 1536}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf371.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op371.group.device = cuda:0
op371.group.iteration = (2359296, 1)
op371.sizes = ([1536, 1536], [])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg176_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[1536, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op371_loop_body:
    var_ranges = {z0: 1536, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg175_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf129', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf130', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg176_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf371', get_index_4, mul_2, None)
        return store


op132_op133_op354: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op132_op133_op354.writes = 
    [   MemoryDep('buf132', c0, {c0: 768}, None),
        MemoryDep('buf133', c0, {c0: 768}, None),
        MemoryDep('buf354', c0, {c0: 1179648}, None)]
op132_op133_op354.unmet_dependencies = []
op132_op133_op354.met_dependencies = 
    [   MemoryDep('arg178_1', c0, {c0: 1179648}, None),
        MemoryDep('arg179_1', c0, {c0: 768}, None)]
op132_op133_op354.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf132.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf133.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op132_op133_op354.snodes[0] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 768}, None)]
op132.unmet_dependencies = []
op132.met_dependencies = [MemoryDep('arg178_1', c0, {c0: 1179648}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf132.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op132.group.device = cuda:0
op132.group.iteration = (768, 1536)
op132.sizes = ([768], [1536])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op132_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg178_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf132', get_index_1, getitem)
        return store_reduction
op132_op133_op354.snodes[1] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 768}, None)]
op133.unmet_dependencies = []
op133.met_dependencies = [MemoryDep('arg178_1', c0, {c0: 1179648}, None)]
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf133.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (768, 1536)
op133.sizes = ([768], [1536])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op133_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg178_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem_1)
        return store_reduction
op132_op133_op354.snodes[2] =
op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 1179648}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 768}, None),
        MemoryDep('buf133', c0, {c0: 768}, None)]
op354.met_dependencies = 
    [   MemoryDep('arg178_1', c0, {c0: 1179648}, None),
        MemoryDep('arg179_1', c0, {c0: 768}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (1179648, 1)
op354.sizes = ([768, 1536], [])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op354_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg178_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf132', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf133', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg179_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf354', get_index_4, mul_2, None)
        return store


op135_op136_op357: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op135_op136_op357.writes = 
    [   MemoryDep('buf135', c0, {c0: 768}, None),
        MemoryDep('buf136', c0, {c0: 768}, None),
        MemoryDep('buf357', c0, {c0: 884736}, None)]
op135_op136_op357.unmet_dependencies = []
op135_op136_op357.met_dependencies = 
    [   MemoryDep('arg181_1', c0, {c0: 884736}, None),
        MemoryDep('arg182_1', c0, {c0: 768}, None)]
op135_op136_op357.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf135.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf136.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op135_op136_op357.snodes[0] =
op135: SchedulerNode(ComputedBuffer)
op135.writes = [MemoryDep('buf135', c0, {c0: 768}, None)]
op135.unmet_dependencies = []
op135.met_dependencies = [MemoryDep('arg181_1', c0, {c0: 884736}, None)]
op135.outputs = [
    buf135: ComputedBuffer
    buf135.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf135.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op135.group.device = cuda:0
op135.group.iteration = (768, 1152)
op135.sizes = ([768], [1152])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op135_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf135', get_index_1, getitem)
        return store_reduction
op135_op136_op357.snodes[1] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 768}, None)]
op136.unmet_dependencies = []
op136.met_dependencies = [MemoryDep('arg181_1', c0, {c0: 884736}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf136.users = [NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (768, 1152)
op136.sizes = ([768], [1152])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op136_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf136', get_index_1, getitem_1)
        return store_reduction
op135_op136_op357.snodes[2] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 884736}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf135', c0, {c0: 768}, None),
        MemoryDep('buf136', c0, {c0: 768}, None)]
op357.met_dependencies = 
    [   MemoryDep('arg181_1', c0, {c0: 884736}, None),
        MemoryDep('arg182_1', c0, {c0: 768}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf357.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (884736, 1)
op357.sizes = ([768, 1152], [])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf135_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op357_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg181_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf135', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf136', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg182_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf357', get_index_4, mul_2, None)
        return store


op138_op139_op360: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op138_op139_op360.writes = 
    [   MemoryDep('buf138', c0, {c0: 768}, None),
        MemoryDep('buf139', c0, {c0: 768}, None),
        MemoryDep('buf360', c0, {c0: 884736}, None)]
op138_op139_op360.unmet_dependencies = []
op138_op139_op360.met_dependencies = 
    [   MemoryDep('arg184_1', c0, {c0: 884736}, None),
        MemoryDep('arg185_1', c0, {c0: 768}, None)]
op138_op139_op360.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf138.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf139.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op138_op139_op360.snodes[0] =
op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 768}, None)]
op138.unmet_dependencies = []
op138.met_dependencies = [MemoryDep('arg184_1', c0, {c0: 884736}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf138.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (768, 1152)
op138.sizes = ([768], [1152])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op138_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg184_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf138', get_index_1, getitem)
        return store_reduction
op138_op139_op360.snodes[1] =
op139: SchedulerNode(ComputedBuffer)
op139.writes = [MemoryDep('buf139', c0, {c0: 768}, None)]
op139.unmet_dependencies = []
op139.met_dependencies = [MemoryDep('arg184_1', c0, {c0: 884736}, None)]
op139.outputs = [
    buf139: ComputedBuffer
    buf139.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf139.users = [NodeUser(node=SchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op139.group.device = cuda:0
op139.group.iteration = (768, 1152)
op139.sizes = ([768], [1152])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op139_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg184_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf139', get_index_1, getitem_1)
        return store_reduction
op138_op139_op360.snodes[2] =
op360: SchedulerNode(ComputedBuffer)
op360.writes = [MemoryDep('buf360', c0, {c0: 884736}, None)]
op360.unmet_dependencies = 
    [   MemoryDep('buf138', c0, {c0: 768}, None),
        MemoryDep('buf139', c0, {c0: 768}, None)]
op360.met_dependencies = 
    [   MemoryDep('arg184_1', c0, {c0: 884736}, None),
        MemoryDep('arg185_1', c0, {c0: 768}, None)]
op360.outputs = [
    buf360: ComputedBuffer
    buf360.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf360.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op360.group.device = cuda:0
op360.group.iteration = (884736, 1)
op360.sizes = ([768, 1152], [])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf139_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf360_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op360_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg184_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf138', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf139', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg185_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf360', get_index_4, mul_2, None)
        return store


op141_op142_op363: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op141_op142_op363.writes = 
    [   MemoryDep('buf141', c0, {c0: 1536}, None),
        MemoryDep('buf142', c0, {c0: 1536}, None),
        MemoryDep('buf363', c0, {c0: 1179648}, None)]
op141_op142_op363.unmet_dependencies = []
op141_op142_op363.met_dependencies = 
    [   MemoryDep('arg187_1', c0, {c0: 1179648}, None),
        MemoryDep('arg188_1', c0, {c0: 1536}, None)]
op141_op142_op363.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf141.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf142.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op141_op142_op363.snodes[0] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 1536}, None)]
op141.unmet_dependencies = []
op141.met_dependencies = [MemoryDep('arg187_1', c0, {c0: 1179648}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf141.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (1536, 768)
op141.sizes = ([1536], [768])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op141_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg187_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf141', get_index_1, getitem)
        return store_reduction
op141_op142_op363.snodes[1] =
op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 1536}, None)]
op142.unmet_dependencies = []
op142.met_dependencies = [MemoryDep('arg187_1', c0, {c0: 1179648}, None)]
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf142.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (1536, 768)
op142.sizes = ([1536], [768])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op142_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg187_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf142', get_index_1, getitem_1)
        return store_reduction
op141_op142_op363.snodes[2] =
op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 1179648}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf141', c0, {c0: 1536}, None),
        MemoryDep('buf142', c0, {c0: 1536}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg187_1', c0, {c0: 1179648}, None),
        MemoryDep('arg188_1', c0, {c0: 1536}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf363.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op363.group.device = cuda:0
op363.group.iteration = (1179648, 1)
op363.sizes = ([1536, 768], [])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf142_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op363_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg187_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf141', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf142', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg188_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf363', get_index_4, mul_2, None)
        return store


op144_op145_op375: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op144_op145_op375.writes = 
    [   MemoryDep('buf144', c0, {c0: 768}, None),
        MemoryDep('buf145', c0, {c0: 768}, None),
        MemoryDep('buf375', c0, {c0: 1179648}, None)]
op144_op145_op375.unmet_dependencies = []
op144_op145_op375.met_dependencies = 
    [   MemoryDep('arg195_1', c0, {c0: 1179648}, None),
        MemoryDep('arg196_1', c0, {c0: 768}, None)]
op144_op145_op375.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf144.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf145.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op144_op145_op375.snodes[0] =
op144: SchedulerNode(ComputedBuffer)
op144.writes = [MemoryDep('buf144', c0, {c0: 768}, None)]
op144.unmet_dependencies = []
op144.met_dependencies = [MemoryDep('arg195_1', c0, {c0: 1179648}, None)]
op144.outputs = [
    buf144: ComputedBuffer
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf144.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op144.group.device = cuda:0
op144.group.iteration = (768, 1536)
op144.sizes = ([768], [1536])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op144_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg195_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf144', get_index_1, getitem)
        return store_reduction
op144_op145_op375.snodes[1] =
op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 768}, None)]
op145.unmet_dependencies = []
op145.met_dependencies = [MemoryDep('arg195_1', c0, {c0: 1179648}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf145.users = [NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (768, 1536)
op145.sizes = ([768], [1536])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op145_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg195_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf145', get_index_1, getitem_1)
        return store_reduction
op144_op145_op375.snodes[2] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', c0, {c0: 1179648}, None)]
op375.unmet_dependencies = 
    [   MemoryDep('buf144', c0, {c0: 768}, None),
        MemoryDep('buf145', c0, {c0: 768}, None)]
op375.met_dependencies = 
    [   MemoryDep('arg195_1', c0, {c0: 1179648}, None),
        MemoryDep('arg196_1', c0, {c0: 768}, None)]
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf375.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.group.device = cuda:0
op375.group.iteration = (1179648, 1)
op375.sizes = ([768, 1536], [])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf145_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op375_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg195_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf144', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf145', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg196_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf375', get_index_4, mul_2, None)
        return store


op147_op148_op378: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op147_op148_op378.writes = 
    [   MemoryDep('buf147', c0, {c0: 768}, None),
        MemoryDep('buf148', c0, {c0: 768}, None),
        MemoryDep('buf378', c0, {c0: 884736}, None)]
op147_op148_op378.unmet_dependencies = []
op147_op148_op378.met_dependencies = 
    [   MemoryDep('arg198_1', c0, {c0: 884736}, None),
        MemoryDep('arg199_1', c0, {c0: 768}, None)]
op147_op148_op378.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf147.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf148.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op147_op148_op378.snodes[0] =
op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 768}, None)]
op147.unmet_dependencies = []
op147.met_dependencies = [MemoryDep('arg198_1', c0, {c0: 884736}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf147.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op147.group.device = cuda:0
op147.group.iteration = (768, 1152)
op147.sizes = ([768], [1152])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op147_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg198_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf147', get_index_1, getitem)
        return store_reduction
op147_op148_op378.snodes[1] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 768}, None)]
op148.unmet_dependencies = []
op148.met_dependencies = [MemoryDep('arg198_1', c0, {c0: 884736}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf148.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (768, 1152)
op148.sizes = ([768], [1152])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op148_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg198_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf148', get_index_1, getitem_1)
        return store_reduction
op147_op148_op378.snodes[2] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 884736}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf147', c0, {c0: 768}, None),
        MemoryDep('buf148', c0, {c0: 768}, None)]
op378.met_dependencies = 
    [   MemoryDep('arg198_1', c0, {c0: 884736}, None),
        MemoryDep('arg199_1', c0, {c0: 768}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (884736, 1)
op378.sizes = ([768, 1152], [])
arg198_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg199_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op378_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg198_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf147', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf148', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg199_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf378', get_index_4, mul_2, None)
        return store


op150_op151_op381: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op381.writes = 
    [   MemoryDep('buf150', c0, {c0: 768}, None),
        MemoryDep('buf151', c0, {c0: 768}, None),
        MemoryDep('buf381', c0, {c0: 884736}, None)]
op150_op151_op381.unmet_dependencies = []
op150_op151_op381.met_dependencies = 
    [   MemoryDep('arg201_1', c0, {c0: 884736}, None),
        MemoryDep('arg202_1', c0, {c0: 768}, None)]
op150_op151_op381.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf150.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf151.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op150_op151_op381.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 768}, None)]
op150.unmet_dependencies = []
op150.met_dependencies = [MemoryDep('arg201_1', c0, {c0: 884736}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf150.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (768, 1152)
op150.sizes = ([768], [1152])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op150_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg201_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf150', get_index_1, getitem)
        return store_reduction
op150_op151_op381.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 768}, None)]
op151.unmet_dependencies = []
op151.met_dependencies = [MemoryDep('arg201_1', c0, {c0: 884736}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf151.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (768, 1152)
op151.sizes = ([768], [1152])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op151_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg201_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf151', get_index_1, getitem_1)
        return store_reduction
op150_op151_op381.snodes[2] =
op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 884736}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf150', c0, {c0: 768}, None),
        MemoryDep('buf151', c0, {c0: 768}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg201_1', c0, {c0: 884736}, None),
        MemoryDep('arg202_1', c0, {c0: 768}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (884736, 1)
op381.sizes = ([768, 1152], [])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf151_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op381_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg201_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf150', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf151', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg202_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf381', get_index_4, mul_2, None)
        return store


op153_op154_op384: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op153_op154_op384.writes = 
    [   MemoryDep('buf153', c0, {c0: 1536}, None),
        MemoryDep('buf154', c0, {c0: 1536}, None),
        MemoryDep('buf384', c0, {c0: 1179648}, None)]
op153_op154_op384.unmet_dependencies = []
op153_op154_op384.met_dependencies = 
    [   MemoryDep('arg204_1', c0, {c0: 1179648}, None),
        MemoryDep('arg205_1', c0, {c0: 1536}, None)]
op153_op154_op384.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf153.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf154.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op153_op154_op384.snodes[0] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 1536}, None)]
op153.unmet_dependencies = []
op153.met_dependencies = [MemoryDep('arg204_1', c0, {c0: 1179648}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf153.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (1536, 768)
op153.sizes = ([1536], [768])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op153_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg204_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf153', get_index_1, getitem)
        return store_reduction
op153_op154_op384.snodes[1] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 1536}, None)]
op154.unmet_dependencies = []
op154.met_dependencies = [MemoryDep('arg204_1', c0, {c0: 1179648}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf154.users = [NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (1536, 768)
op154.sizes = ([1536], [768])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op154_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg204_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf154', get_index_1, getitem_1)
        return store_reduction
op153_op154_op384.snodes[2] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 1179648}, None)]
op384.unmet_dependencies = 
    [   MemoryDep('buf153', c0, {c0: 1536}, None),
        MemoryDep('buf154', c0, {c0: 1536}, None)]
op384.met_dependencies = 
    [   MemoryDep('arg204_1', c0, {c0: 1179648}, None),
        MemoryDep('arg205_1', c0, {c0: 1536}, None)]
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf384.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (1179648, 1)
op384.sizes = ([1536, 768], [])
arg204_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf154_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op384_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg204_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf153', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf154', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf384', get_index_4, mul_2, None)
        return store


op156_op157_op393: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op156_op157_op393.writes = 
    [   MemoryDep('buf156', c0, {c0: 768}, None),
        MemoryDep('buf157', c0, {c0: 768}, None),
        MemoryDep('buf393', c0, {c0: 1179648}, None)]
op156_op157_op393.unmet_dependencies = []
op156_op157_op393.met_dependencies = 
    [   MemoryDep('arg212_1', c0, {c0: 1179648}, None),
        MemoryDep('arg213_1', c0, {c0: 768}, None)]
op156_op157_op393.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf156.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf157.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op156_op157_op393.snodes[0] =
op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 768}, None)]
op156.unmet_dependencies = []
op156.met_dependencies = [MemoryDep('arg212_1', c0, {c0: 1179648}, None)]
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf156.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (768, 1536)
op156.sizes = ([768], [1536])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op156_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg212_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf156', get_index_1, getitem)
        return store_reduction
op156_op157_op393.snodes[1] =
op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 768}, None)]
op157.unmet_dependencies = []
op157.met_dependencies = [MemoryDep('arg212_1', c0, {c0: 1179648}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf157.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (768, 1536)
op157.sizes = ([768], [1536])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op157_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg212_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf157', get_index_1, getitem_1)
        return store_reduction
op156_op157_op393.snodes[2] =
op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 1179648}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf156', c0, {c0: 768}, None),
        MemoryDep('buf157', c0, {c0: 768}, None)]
op393.met_dependencies = 
    [   MemoryDep('arg212_1', c0, {c0: 1179648}, None),
        MemoryDep('arg213_1', c0, {c0: 768}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (1179648, 1)
op393.sizes = ([768, 1536], [])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf157_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[768, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op393_loop_body:
    var_ranges = {z0: 768, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg212_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf156', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf157', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg213_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf393', get_index_4, mul_2, None)
        return store


op159_op160_op396: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op159_op160_op396.writes = 
    [   MemoryDep('buf159', c0, {c0: 768}, None),
        MemoryDep('buf160', c0, {c0: 768}, None),
        MemoryDep('buf396', c0, {c0: 884736}, None)]
op159_op160_op396.unmet_dependencies = []
op159_op160_op396.met_dependencies = 
    [   MemoryDep('arg215_1', c0, {c0: 884736}, None),
        MemoryDep('arg216_1', c0, {c0: 768}, None)]
op159_op160_op396.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf159.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf160.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op159_op160_op396.snodes[0] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 768}, None)]
op159.unmet_dependencies = []
op159.met_dependencies = [MemoryDep('arg215_1', c0, {c0: 884736}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf159.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (768, 1152)
op159.sizes = ([768], [1152])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op159_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg215_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, getitem)
        return store_reduction
op159_op160_op396.snodes[1] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', c0, {c0: 768}, None)]
op160.unmet_dependencies = []
op160.met_dependencies = [MemoryDep('arg215_1', c0, {c0: 884736}, None)]
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf160.users = [NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (768, 1152)
op160.sizes = ([768], [1152])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf160_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op160_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg215_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_1, getitem_1)
        return store_reduction
op159_op160_op396.snodes[2] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 884736}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf159', c0, {c0: 768}, None),
        MemoryDep('buf160', c0, {c0: 768}, None)]
op396.met_dependencies = 
    [   MemoryDep('arg215_1', c0, {c0: 884736}, None),
        MemoryDep('arg216_1', c0, {c0: 768}, None)]
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf396.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (884736, 1)
op396.sizes = ([768, 1152], [])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf160_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg216_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op396_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg215_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf160', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg216_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf396', get_index_4, mul_2, None)
        return store


op162_op163_op399: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op162_op163_op399.writes = 
    [   MemoryDep('buf162', c0, {c0: 768}, None),
        MemoryDep('buf163', c0, {c0: 768}, None),
        MemoryDep('buf399', c0, {c0: 884736}, None)]
op162_op163_op399.unmet_dependencies = []
op162_op163_op399.met_dependencies = 
    [   MemoryDep('arg218_1', c0, {c0: 884736}, None),
        MemoryDep('arg219_1', c0, {c0: 768}, None)]
op162_op163_op399.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf162.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf163.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op162_op163_op399.snodes[0] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 768}, None)]
op162.unmet_dependencies = []
op162.met_dependencies = [MemoryDep('arg218_1', c0, {c0: 884736}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf162.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (768, 1152)
op162.sizes = ([768], [1152])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op162_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg218_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf162', get_index_1, getitem)
        return store_reduction
op162_op163_op399.snodes[1] =
op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 768}, None)]
op163.unmet_dependencies = []
op163.met_dependencies = [MemoryDep('arg218_1', c0, {c0: 884736}, None)]
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
    buf163.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (768, 1152)
op163.sizes = ([768], [1152])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
class op163_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg218_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf163', get_index_1, getitem_1)
        return store_reduction
op162_op163_op399.snodes[2] =
op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 884736}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf162', c0, {c0: 768}, None),
        MemoryDep('buf163', c0, {c0: 768}, None)]
op399.met_dependencies = 
    [   MemoryDep('arg218_1', c0, {c0: 884736}, None),
        MemoryDep('arg219_1', c0, {c0: 768}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (884736, 1)
op399.sizes = ([768, 1152], [])
arg218_1_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
buf163_layout = FixedLayout('cuda', torch.float32, size=[1, 768, 1], stride=[768, 1, 768])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[768, 1, 1, 1], stride=[1, 1, 1, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[768, 128, 3, 3], stride=[1152, 9, 3, 1])
class op399_loop_body:
    var_ranges = {z0: 768, z1: 1152}
    index0 = 1152*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg218_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf162', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf163', get_index_2)
        constant = ops.constant(1152.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg219_1', get_index_3)
        constant_2 = ops.constant(0.02946278254943948, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf399', get_index_4, mul_2, None)
        return store


op165_op166_op402: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op165_op166_op402.writes = 
    [   MemoryDep('buf165', c0, {c0: 1536}, None),
        MemoryDep('buf166', c0, {c0: 1536}, None),
        MemoryDep('buf402', c0, {c0: 1179648}, None)]
op165_op166_op402.unmet_dependencies = []
op165_op166_op402.met_dependencies = 
    [   MemoryDep('arg221_1', c0, {c0: 1179648}, None),
        MemoryDep('arg222_1', c0, {c0: 1536}, None)]
op165_op166_op402.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf165.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf166.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf402.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op165_op166_op402.snodes[0] =
op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 1536}, None)]
op165.unmet_dependencies = []
op165.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 1179648}, None)]
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf165.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (1536, 768)
op165.sizes = ([1536], [768])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op165_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf165', get_index_1, getitem)
        return store_reduction
op165_op166_op402.snodes[1] =
op166: SchedulerNode(ComputedBuffer)
op166.writes = [MemoryDep('buf166', c0, {c0: 1536}, None)]
op166.unmet_dependencies = []
op166.met_dependencies = [MemoryDep('arg221_1', c0, {c0: 1179648}, None)]
op166.outputs = [
    buf166: ComputedBuffer
    buf166.layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
    buf166.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op166.group.device = cuda:0
op166.group.iteration = (1536, 768)
op166.sizes = ([1536], [768])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
class op166_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf166', get_index_1, getitem_1)
        return store_reduction
op165_op166_op402.snodes[2] =
op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', c0, {c0: 1179648}, None)]
op402.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 1536}, None),
        MemoryDep('buf166', c0, {c0: 1536}, None)]
op402.met_dependencies = 
    [   MemoryDep('arg221_1', c0, {c0: 1179648}, None),
        MemoryDep('arg222_1', c0, {c0: 1536}, None)]
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
    buf402.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (1179648, 1)
op402.sizes = ([1536, 768], [])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
buf166_layout = FixedLayout('cuda', torch.float32, size=[1, 1536, 1], stride=[1536, 1, 1536])
arg222_1_layout = FixedLayout('cuda', torch.float32, size=[1536, 1, 1, 1], stride=[1, 1, 1, 1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[1536, 768, 1, 1], stride=[768, 1, 1, 1])
class op402_loop_body:
    var_ranges = {z0: 1536, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg221_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf165', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf166', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg222_1', get_index_3)
        constant_2 = ops.constant(0.03608439182435161, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf402', get_index_4, mul_2, None)
        return store


op168_op169_op410: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op168_op169_op410.writes = 
    [   MemoryDep('buf168', c0, {c0: 3072}, None),
        MemoryDep('buf169', c0, {c0: 3072}, None),
        MemoryDep('buf410', c0, {c0: 4718592}, None)]
op168_op169_op410.unmet_dependencies = []
op168_op169_op410.met_dependencies = 
    [   MemoryDep('arg229_1', c0, {c0: 4718592}, None),
        MemoryDep('arg230_1', c0, {c0: 3072}, None)]
op168_op169_op410.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
    buf168.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
    buf169.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op168_op169_op410.snodes[0] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 3072}, None)]
op168.unmet_dependencies = []
op168.met_dependencies = [MemoryDep('arg229_1', c0, {c0: 4718592}, None)]
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
    buf168.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (3072, 1536)
op168.sizes = ([3072], [1536])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
class op168_loop_body:
    var_ranges = {z0: 3072, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg229_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op168_op169_op410.snodes[1] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 3072}, None)]
op169.unmet_dependencies = []
op169.met_dependencies = [MemoryDep('arg229_1', c0, {c0: 4718592}, None)]
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
    buf169.users = [NodeUser(node=SchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (3072, 1536)
op169.sizes = ([3072], [1536])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
class op169_loop_body:
    var_ranges = {z0: 3072, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg229_1', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op168_op169_op410.snodes[2] =
op410: SchedulerNode(ComputedBuffer)
op410.writes = [MemoryDep('buf410', c0, {c0: 4718592}, None)]
op410.unmet_dependencies = 
    [   MemoryDep('buf168', c0, {c0: 3072}, None),
        MemoryDep('buf169', c0, {c0: 3072}, None)]
op410.met_dependencies = 
    [   MemoryDep('arg229_1', c0, {c0: 4718592}, None),
        MemoryDep('arg230_1', c0, {c0: 3072}, None)]
op410.outputs = [
    buf410: ComputedBuffer
    buf410.layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf410.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op410.group.device = cuda:0
op410.group.iteration = (4718592, 1)
op410.sizes = ([3072, 1536], [])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
buf169_layout = FixedLayout('cuda', torch.float32, size=[1, 3072, 1], stride=[3072, 1, 3072])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[3072, 1, 1, 1], stride=[1, 1, 1, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[3072, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op410_loop_body:
    var_ranges = {z0: 3072, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg229_1', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(1536.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg230_1', get_index_3)
        constant_2 = ops.constant(0.02551551815399144, torch.float32)
        mul_1 = ops.mul(load_3, constant_2)
        mul_2 = ops.mul(mul, mul_1)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf410', get_index_4, mul_2, None)
        return store


op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 1585176}, None)]
op171.unmet_dependencies = []
op171.met_dependencies = [MemoryDep('arg0_1', 65536*c0 + 256*c1 + c2, {c0: 24, c1: 257, c2: 257}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[8, 3, 257, 257], stride=[198147, 66049, 257, 1])
    buf171.users = [NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (1585176, 1)
op171.sizes = ([24, 257, 257], [])
arg0_1_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 256, 256], stride=[196608, 65536, 256, 1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[8, 3, 257, 257], stride=[198147, 66049, 257, 1])
class op171_loop_body:
    var_ranges = {z0: 24, z1: 257, z2: 257}
    index0 = z1
    index1 = z2
    index2 = 65536*z0 + 256*z1 + z2
    index3 = 66049*z0 + 257*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(256, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(256, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index3')
        store = ops.store('buf171', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('arg0_1', get_index)
        return load


op173: ExternKernelSchedulerNode(ExternKernelAlloc)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf171', mode=None), StarDep(name='buf172', mode=None)]
op173.met_dependencies = []
op173.outputs = [
    buf173: ExternKernelAlloc
    buf173.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False)]
]
op173.node.kernel = extern_kernels.convolution


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 2097152}, None)]
op174.unmet_dependencies = [MemoryDep('buf173', c0, {c0: 2097152}, None)]
op174.met_dependencies = [MemoryDep('arg3_1', c1, {c0: 8, c1: 16}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 16384, 128, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (2097152, 1)
op174.sizes = ([8, 16, 16384], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 16384, 128, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[16], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[8, 16, 128, 128], stride=[262144, 16384, 128, 1])
class op174_loop_body:
    var_ranges = {z0: 8, z1: 16, z2: 16384}
    index0 = 262144*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg3_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf173', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg3_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf174', get_index_4, mul_3, None)
        return store


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf174', mode=None), StarDep(name='buf175', mode=None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 16384, 128, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 4194304}, None)]
op177.unmet_dependencies = [MemoryDep('buf176', c0, {c0: 4194304}, None)]
op177.met_dependencies = [MemoryDep('arg6_1', c1, {c0: 8, c1: 32}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 16384, 128, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op179'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (4194304, 1)
op177.sizes = ([8, 32, 16384], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 16384, 128, 1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[32], stride=[1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[8, 32, 128, 128], stride=[524288, 16384, 128, 1])
class op177_loop_body:
    var_ranges = {z0: 8, z1: 32, z2: 16384}
    index0 = 524288*z0 + 16384*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg6_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf176', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg6_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf177', get_index_4, mul_3, None)
        return store


op179: ExternKernelSchedulerNode(ExternKernelAlloc)
op179.writes = [StarDep(name='buf179', mode=None)]
op179.unmet_dependencies = [StarDep(name='buf177', mode=None), StarDep(name='buf178', mode=None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ExternKernelAlloc
    buf179.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
    buf179.users = [NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False)]
]
op179.node.kernel = extern_kernels.convolution


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 8520192}, None)]
op180.unmet_dependencies = [MemoryDep('buf179', 16384*c0 + 128*c1 + c2, {c0: 512, c1: 129, c2: 129}, None)]
op180.met_dependencies = [MemoryDep('arg9_1', c1, {c0: 8, c1: 64}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[8, 64, 129, 129], stride=[1065024, 16641, 129, 1])
    buf180.users = [NodeUser(node=ExternKernelSchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (8520192, 1)
op180.sizes = ([8, 64, 129, 129], [])
buf179_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 128, 128], stride=[1048576, 16384, 128, 1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[64], stride=[1])
buf180_layout = FixedLayout('cuda', torch.float32, size=[8, 64, 129, 129], stride=[1065024, 16641, 129, 1])
class op180_loop_body:
    var_ranges = {z0: 8, z1: 64, z2: 129, z3: 129}
    index0 = z2
    index1 = z3
    index2 = 1048576*z0 + 16384*z1 + 128*z2 + z3
    index3 = z1
    index4 = 1065024*z0 + 16641*z1 + 129*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(128, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(128, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf180', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf179', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg9_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg9_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        return mul_3


op182: ExternKernelSchedulerNode(ExternKernelAlloc)
op182.writes = [StarDep(name='buf182', mode=None)]
op182.unmet_dependencies = [StarDep(name='buf180', mode=None), StarDep(name='buf181', mode=None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ExternKernelAlloc
    buf182.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf182.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=True, is_weak=False)]
]
op182.node.kernel = extern_kernels.convolution


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 4194304}, None)]
op183.unmet_dependencies = [MemoryDep('buf182', c0, {c0: 4194304}, None)]
op183.met_dependencies = [MemoryDep('arg12_1', c1, {c0: 8, c1: 128}, None)]
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf183.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
    ]
]
op183.group.device = cuda:0
op183.group.iteration = (4194304, 1)
op183.sizes = ([8, 128, 4096], [])
buf182_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op183_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf182', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg12_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf182', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg12_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(1.0, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf183', get_index_4, mul_4, None)
        return store


op185: ExternKernelSchedulerNode(ExternKernelAlloc)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf183', mode=None), StarDep(name='buf184', mode=None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ExternKernelAlloc
    buf185.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf185.users = [NodeUser(node=SchedulerNode(name='op186'), can_inplace=True, is_weak=False)]
]
op185.node.kernel = extern_kernels.convolution


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 4194304}, None)]
op186.unmet_dependencies = [MemoryDep('buf185', c0, {c0: 4194304}, None)]
op186.met_dependencies = [MemoryDep('arg18_1', c1, {c0: 8, c1: 128}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf186.users = [NodeUser(node=ExternKernelSchedulerNode(name='op188'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (4194304, 1)
op186.sizes = ([8, 128, 4096], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op186_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg18_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf185', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg18_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf186', get_index_4, mul_3, None)
        return store


op188: ExternKernelSchedulerNode(ExternKernelAlloc)
op188.writes = [StarDep(name='buf188', mode=None)]
op188.unmet_dependencies = [StarDep(name='buf186', mode=None), StarDep(name='buf187', mode=None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ExternKernelAlloc
    buf188.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf188.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False)]
]
op188.node.kernel = extern_kernels.convolution


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 4194304}, None)]
op189.unmet_dependencies = [MemoryDep('buf188', c0, {c0: 4194304}, None)]
op189.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 8, c1: 128}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf189.users = [NodeUser(node=ExternKernelSchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (4194304, 1)
op189.sizes = ([8, 128, 4096], [])
buf188_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op189_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf188', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf188', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf189', get_index_4, mul_3, None)
        return store


op191: ExternKernelSchedulerNode(ExternKernelAlloc)
op191.writes = [StarDep(name='buf191', mode=None)]
op191.unmet_dependencies = [StarDep(name='buf189', mode=None), StarDep(name='buf190', mode=None)]
op191.met_dependencies = []
op191.outputs = [
    buf191: ExternKernelAlloc
    buf191.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf191.users = [NodeUser(node=SchedulerNode(name='op192'), can_inplace=True, is_weak=False)]
]
op191.node.kernel = extern_kernels.convolution


op192: SchedulerNode(ComputedBuffer)
op192.writes = [MemoryDep('buf192', c0, {c0: 4194304}, None)]
op192.unmet_dependencies = [MemoryDep('buf191', c0, {c0: 4194304}, None)]
op192.met_dependencies = [MemoryDep('arg24_1', c1, {c0: 8, c1: 128}, None)]
op192.outputs = [
    buf192: ComputedBuffer
    buf192.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
    buf192.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op192.group.device = cuda:0
op192.group.iteration = (4194304, 1)
op192.sizes = ([8, 128, 4096], [])
buf191_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf192_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 64, 64], stride=[524288, 4096, 64, 1])
class op192_loop_body:
    var_ranges = {z0: 8, z1: 128, z2: 4096}
    index0 = 524288*z0 + 4096*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf191', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg24_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf191', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg24_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf192', get_index_4, mul_3, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelAlloc)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf192', mode=None), StarDep(name='buf193', mode=None)]
op194.met_dependencies = []
op194.outputs = [
    buf194: ExternKernelAlloc
    buf194.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
    ]
]
op194.node.kernel = extern_kernels.convolution


op195_op196: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op195_op196.writes = 
    [   MemoryDep('buf195', c0, {c0: 2048}, None),
        MemoryDep('buf196', c0, {c0: 2048}, None)]
op195_op196.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 8388608}, None)]
op195_op196.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 8, c1: 256}, None)]
op195_op196.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op195_op196.snodes[0] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 2048}, None)]
op195.unmet_dependencies = [MemoryDep('buf194', c0, {c0: 8388608}, None)]
op195.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 8, c1: 256}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
    buf195.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (2048, 4096)
op195.sizes = ([8, 256], [4096])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
class op195_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    index2 = 256*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_2, reduction)
        return store_reduction
op195_op196.snodes[1] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 2048}, None)]
op196.unmet_dependencies = [MemoryDep('buf195', c0, {c0: 2048}, None)]
op196.met_dependencies = []
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf196.users = [NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (2048, 1)
op196.sizes = ([2048], [])
buf195_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 2048, 2048])
buf196_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op196_loop_body:
    var_ranges = {z0: 2048}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf195', get_index)
        constant = ops.constant(4096.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf196', get_index_1, truediv, None)
        return store


op197: ExternKernelSchedulerNode(ExternKernelAlloc)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg28_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelAlloc
    buf197.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf197.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False)]
]
op197.node.kernel = extern_kernels.convolution


op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 1024}, None)]
op198.unmet_dependencies = [MemoryDep('buf197', c0, {c0: 1024}, None)]
op198.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 8, c1: 128}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (1024, 1)
op198.sizes = ([8, 128], [])
buf197_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[128], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 128, 1, 1], stride=[128, 1, 1, 1])
class op198_loop_body:
    var_ranges = {z0: 8, z1: 128}
    index0 = 128*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf197', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf198', get_index_2, relu, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelAlloc)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelAlloc
    buf199.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.convolution


op201: ExternKernelSchedulerNode(ExternKernelAlloc)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf183', mode=None), StarDep(name='buf200', mode=None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: ExternKernelAlloc
    buf201.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False)]
]
op201.node.kernel = extern_kernels.convolution


op202_op203: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op202_op203.writes = 
    [   MemoryDep('buf202', c0, {c0: 8388608}, None),
        MemoryDep('buf203', c0, {c0: 8388608}, None)]
op202_op203.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 8388608}, None),
        MemoryDep('buf199', c0, {c0: 2048}, None),
        MemoryDep('buf201', c0, {c0: 8388608}, None)]
op202_op203.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg31_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg32_1', 0, {}, None)]
op202_op203.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
    ]
]
op202_op203.snodes[0] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 8388608}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf194', c0, {c0: 8388608}, None),
        MemoryDep('buf199', c0, {c0: 2048}, None),
        MemoryDep('buf201', c0, {c0: 8388608}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg15_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg27_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg31_1', c1, {c0: 8, c1: 256}, None),
        MemoryDep('arg32_1', 0, {}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf202.users = [NodeUser(node=SchedulerNode(name='op203'), can_inplace=True, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (8388608, 1)
op202.sizes = ([8, 256, 4096], [])
buf194_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf199_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg31_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
arg32_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf201_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg15_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op202_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 4096}
    index0 = 1048576*z0 + 4096*z1 + z2
    index1 = z1
    index2 = 256*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf194', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf199', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg31_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg32_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf201', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg15_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        add_3 = ops.add(mul_3, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf202', get_index_7, add_3, None)
        return store
op202_op203.snodes[1] =
op203: SchedulerNode(ComputedBuffer)
op203.writes = [MemoryDep('buf203', c0, {c0: 8388608}, None)]
op203.unmet_dependencies = [MemoryDep('buf202', c0, {c0: 8388608}, None)]
op203.met_dependencies = []
op203.outputs = [
    buf203: ComputedBuffer
    buf203.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf203.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
    ]
]
op203.group.device = cuda:0
op203.group.iteration = (8388608, 1)
op203.sizes = ([8388608], [])
buf202_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
class op203_loop_body:
    var_ranges = {z0: 8388608}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf202', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf202', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9805806756909201, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf203', get_index_2, mul_4, None)
        return store


op205: ExternKernelSchedulerNode(ExternKernelAlloc)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf203', mode=None), StarDep(name='buf204', mode=None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ExternKernelAlloc
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.convolution


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 8652800}, None)]
op206.unmet_dependencies = [MemoryDep('buf205', 4096*c0 + 64*c1 + c2, {c0: 2048, c1: 65, c2: 65}, None)]
op206.met_dependencies = [MemoryDep('arg38_1', c1, {c0: 8, c1: 256}, None)]
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 65, 65], stride=[1081600, 4225, 65, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (8652800, 1)
op206.sizes = ([8, 256, 65, 65], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
arg38_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 65, 65], stride=[1081600, 4225, 65, 1])
class op206_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 65, z3: 65}
    index0 = z2
    index1 = z3
    index2 = 1048576*z0 + 4096*z1 + 64*z2 + z3
    index3 = z1
    index4 = 1081600*z0 + 4225*z1 + 65*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(64, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(64, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf206', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg38_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf205', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg38_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        return mul_3


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf206', mode=None), StarDep(name='buf207', mode=None)]
op208.met_dependencies = []
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False)]
]
op208.node.kernel = extern_kernels.convolution


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 2097152}, None)]
op209.unmet_dependencies = [MemoryDep('buf208', c0, {c0: 2097152}, None)]
op209.met_dependencies = [MemoryDep('arg41_1', c1, {c0: 8, c1: 256}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op211'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (2097152, 1)
op209.sizes = ([8, 256, 1024], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op209_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg41_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf208', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg41_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf209', get_index_4, mul_3, None)
        return store


op211: ExternKernelSchedulerNode(ExternKernelAlloc)
op211.writes = [StarDep(name='buf211', mode=None)]
op211.unmet_dependencies = [StarDep(name='buf209', mode=None), StarDep(name='buf210', mode=None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ExternKernelAlloc
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf211.users = [NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False)]
]
op211.node.kernel = extern_kernels.convolution


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 2097152}, None)]
op212.unmet_dependencies = [MemoryDep('buf211', c0, {c0: 2097152}, None)]
op212.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 8, c1: 256}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf212.users = [NodeUser(node=ExternKernelSchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (2097152, 1)
op212.sizes = ([8, 256, 1024], [])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf212_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op212_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf211', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf211', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg44_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf212', get_index_4, mul_3, None)
        return store


op214: ExternKernelSchedulerNode(ExternKernelAlloc)
op214.writes = [StarDep(name='buf214', mode=None)]
op214.unmet_dependencies = [StarDep(name='buf212', mode=None), StarDep(name='buf213', mode=None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ExternKernelAlloc
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf214.users = [
        NodeUser(node=SchedulerNode(name='op215'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False),
    ]
]
op214.node.kernel = extern_kernels.convolution


op215_op216: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op215_op216.writes = 
    [   MemoryDep('buf215', c0, {c0: 4096}, None),
        MemoryDep('buf216', c0, {c0: 4096}, None)]
op215_op216.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 4194304}, None)]
op215_op216.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 8, c1: 512}, None)]
op215_op216.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215_op216.snodes[0] =
op215: SchedulerNode(ComputedBuffer)
op215.writes = [MemoryDep('buf215', c0, {c0: 4096}, None)]
op215.unmet_dependencies = [MemoryDep('buf214', c0, {c0: 4194304}, None)]
op215.met_dependencies = [MemoryDep('arg47_1', c1, {c0: 8, c1: 512}, None)]
op215.outputs = [
    buf215: ComputedBuffer
    buf215.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=True, is_weak=False)]
]
op215.group.device = cuda:0
op215.group.iteration = (4096, 1024)
op215.sizes = ([8, 512], [1024])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op215_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf215', get_index_2, reduction)
        return store_reduction
op215_op216.snodes[1] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 4096}, None)]
op216.unmet_dependencies = [MemoryDep('buf215', c0, {c0: 4096}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (4096, 1)
op216.sizes = ([4096], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op216_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf216', get_index_1, truediv, None)
        return store


op217: ExternKernelSchedulerNode(ExternKernelAlloc)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelAlloc
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf217.users = [NodeUser(node=SchedulerNode(name='op218'), can_inplace=True, is_weak=False)]
]
op217.node.kernel = extern_kernels.convolution


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 2048}, None)]
op218.unmet_dependencies = [MemoryDep('buf217', c0, {c0: 2048}, None)]
op218.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 8, c1: 256}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf218.users = [NodeUser(node=ExternKernelSchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (2048, 1)
op218.sizes = ([8, 256], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op218_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf218', get_index_2, relu, None)
        return store


op219: ExternKernelSchedulerNode(ExternKernelAlloc)
op219.writes = [StarDep(name='buf219', mode=None)]
op219.unmet_dependencies = [StarDep(name='buf218', mode=None)]
op219.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op219.outputs = [
    buf219: ExternKernelAlloc
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf219.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False)]
]
op219.node.kernel = extern_kernels.convolution


op220: SchedulerNode(ComputedBuffer)
op220.writes = [MemoryDep('buf220', c0, {c0: 2097152}, None)]
op220.unmet_dependencies = 
    [   MemoryDep('buf203', 128*c0 + 2*c1 + 1, {c0: 65536, c1: 32}, None),
        MemoryDep('buf203', 128*c0 + 2*c1 + 64, {c0: 65536, c1: 32}, None),
        MemoryDep('buf203', 128*c0 + 2*c1 + 65, {c0: 65536, c1: 32}, None),
        MemoryDep('buf203', 128*c0 + 2*c1, {c0: 65536, c1: 32}, None)]
op220.met_dependencies = []
op220.outputs = [
    buf220: ComputedBuffer
    buf220.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf220.users = [NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False)]
]
op220.group.device = cuda:0
op220.group.iteration = (2097152, 1)
op220.sizes = ([65536, 32], [])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 64, 64], stride=[1048576, 4096, 64, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op220_loop_body:
    var_ranges = {z0: 65536, z1: 32}
    index0 = 128*z0 + 2*z1
    index1 = 128*z0 + 2*z1 + 1
    index2 = 128*z0 + 2*z1 + 64
    index3 = 128*z0 + 2*z1 + 65
    index4 = 32*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf203', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf203', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf203', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf203', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf220', get_index_4, mul, None)
        return store


op222: ExternKernelSchedulerNode(ExternKernelAlloc)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf220', mode=None), StarDep(name='buf221', mode=None)]
op222.met_dependencies = []
op222.outputs = [
    buf222: ExternKernelAlloc
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.convolution


op223_op224: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op223_op224.writes = 
    [   MemoryDep('buf223', c0, {c0: 4194304}, None),
        MemoryDep('buf224', c0, {c0: 4194304}, None)]
op223_op224.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 4194304}, None),
        MemoryDep('buf219', c0, {c0: 4096}, None),
        MemoryDep('buf222', c0, {c0: 4194304}, None)]
op223_op224.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg47_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg51_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg52_1', 0, {}, None)]
op223_op224.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op223_op224.snodes[0] =
op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 4194304}, None)]
op223.unmet_dependencies = 
    [   MemoryDep('buf214', c0, {c0: 4194304}, None),
        MemoryDep('buf219', c0, {c0: 4096}, None),
        MemoryDep('buf222', c0, {c0: 4194304}, None)]
op223.met_dependencies = 
    [   MemoryDep('arg35_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg47_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg51_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg52_1', 0, {}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf223.users = [
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op223.group.device = cuda:0
op223.group.iteration = (4194304, 1)
op223.sizes = ([8, 512, 1024], [])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op223_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    index2 = 512*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf214', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg47_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf219', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg51_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg52_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf222', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg35_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        add_3 = ops.add(mul_3, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf223', get_index_7, add_3, None)
        return store
op223_op224.snodes[1] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 4194304}, None)]
op224.unmet_dependencies = [MemoryDep('buf223', c0, {c0: 4194304}, None)]
op224.met_dependencies = []
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf224.users = [NodeUser(node=ExternKernelSchedulerNode(name='op226'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (4194304, 1)
op224.sizes = ([4194304], [])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op224_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf223', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf223', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9805806756909201, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf224', get_index_2, mul_4, None)
        return store


op226: ExternKernelSchedulerNode(ExternKernelAlloc)
op226.writes = [StarDep(name='buf226', mode=None)]
op226.unmet_dependencies = [StarDep(name='buf224', mode=None), StarDep(name='buf225', mode=None)]
op226.met_dependencies = []
op226.outputs = [
    buf226: ExternKernelAlloc
    buf226.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf226.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False)]
]
op226.node.kernel = extern_kernels.convolution


op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 2097152}, None)]
op227.unmet_dependencies = [MemoryDep('buf226', c0, {c0: 2097152}, None)]
op227.met_dependencies = [MemoryDep('arg55_1', c1, {c0: 8, c1: 256}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf227.users = [NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False)]
]
op227.group.device = cuda:0
op227.group.iteration = (2097152, 1)
op227.sizes = ([8, 256, 1024], [])
buf226_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op227_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf226', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg55_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf226', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg55_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf227', get_index_4, mul_3, None)
        return store


op229: ExternKernelSchedulerNode(ExternKernelAlloc)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf227', mode=None), StarDep(name='buf228', mode=None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ExternKernelAlloc
    buf229.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf229.users = [NodeUser(node=SchedulerNode(name='op230'), can_inplace=True, is_weak=False)]
]
op229.node.kernel = extern_kernels.convolution


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 2097152}, None)]
op230.unmet_dependencies = [MemoryDep('buf229', c0, {c0: 2097152}, None)]
op230.met_dependencies = [MemoryDep('arg58_1', c1, {c0: 8, c1: 256}, None)]
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (2097152, 1)
op230.sizes = ([8, 256, 1024], [])
buf229_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg58_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op230_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf229', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg58_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf229', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg58_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf230', get_index_4, mul_3, None)
        return store


op232: ExternKernelSchedulerNode(ExternKernelAlloc)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = [StarDep(name='buf230', mode=None), StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ExternKernelAlloc
    buf232.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf232.users = [NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False)]
]
op232.node.kernel = extern_kernels.convolution


op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 2097152}, None)]
op233.unmet_dependencies = [MemoryDep('buf232', c0, {c0: 2097152}, None)]
op233.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 8, c1: 256}, None)]
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
    buf233.users = [NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (2097152, 1)
op233.sizes = ([8, 256, 1024], [])
buf232_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf233_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 32, 32], stride=[262144, 1024, 32, 1])
class op233_loop_body:
    var_ranges = {z0: 8, z1: 256, z2: 1024}
    index0 = 262144*z0 + 1024*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf232', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg61_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf232', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg61_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf233', get_index_4, mul_3, None)
        return store


op235: ExternKernelSchedulerNode(ExternKernelAlloc)
op235.writes = [StarDep(name='buf235', mode=None)]
op235.unmet_dependencies = [StarDep(name='buf233', mode=None), StarDep(name='buf234', mode=None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ExternKernelAlloc
    buf235.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf235.users = [
        NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op235.node.kernel = extern_kernels.convolution


op236_op237: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op236_op237.writes = 
    [   MemoryDep('buf236', c0, {c0: 4096}, None),
        MemoryDep('buf237', c0, {c0: 4096}, None)]
op236_op237.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 4194304}, None)]
op236_op237.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 8, c1: 512}, None)]
op236_op237.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op236_op237.snodes[0] =
op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 4096}, None)]
op236.unmet_dependencies = [MemoryDep('buf235', c0, {c0: 4194304}, None)]
op236.met_dependencies = [MemoryDep('arg64_1', c1, {c0: 8, c1: 512}, None)]
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
    buf236.users = [NodeUser(node=SchedulerNode(name='op237'), can_inplace=True, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (4096, 1024)
op236.sizes = ([8, 512], [1024])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
class op236_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    index2 = 512*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf236', get_index_2, reduction)
        return store_reduction
op236_op237.snodes[1] =
op237: SchedulerNode(ComputedBuffer)
op237.writes = [MemoryDep('buf237', c0, {c0: 4096}, None)]
op237.unmet_dependencies = [MemoryDep('buf236', c0, {c0: 4096}, None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ComputedBuffer
    buf237.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf237.users = [NodeUser(node=ExternKernelSchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.group.device = cuda:0
op237.group.iteration = (4096, 1)
op237.sizes = ([4096], [])
buf236_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 4096, 4096])
buf237_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
class op237_loop_body:
    var_ranges = {z0: 4096}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf236', get_index)
        constant = ops.constant(1024.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf237', get_index_1, truediv, None)
        return store


op238: ExternKernelSchedulerNode(ExternKernelAlloc)
op238.writes = [StarDep(name='buf238', mode=None)]
op238.unmet_dependencies = [StarDep(name='buf237', mode=None)]
op238.met_dependencies = [StarDep(name='arg65_1', mode=None)]
op238.outputs = [
    buf238: ExternKernelAlloc
    buf238.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf238.users = [NodeUser(node=SchedulerNode(name='op239'), can_inplace=True, is_weak=False)]
]
op238.node.kernel = extern_kernels.convolution


op239: SchedulerNode(ComputedBuffer)
op239.writes = [MemoryDep('buf239', c0, {c0: 2048}, None)]
op239.unmet_dependencies = [MemoryDep('buf238', c0, {c0: 2048}, None)]
op239.met_dependencies = [MemoryDep('arg66_1', c1, {c0: 8, c1: 256}, None)]
op239.outputs = [
    buf239: ComputedBuffer
    buf239.layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.group.device = cuda:0
op239.group.iteration = (2048, 1)
op239.sizes = ([8, 256], [])
buf238_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
arg66_1_layout = FixedLayout('cuda', torch.float32, size=[256], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[8, 256, 1, 1], stride=[256, 1, 1, 1])
class op239_loop_body:
    var_ranges = {z0: 8, z1: 256}
    index0 = 256*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf238', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg66_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf239', get_index_2, relu, None)
        return store


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg67_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241_op242: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op241_op242.writes = 
    [   MemoryDep('buf241', c0, {c0: 4194304}, None),
        MemoryDep('buf242', c0, {c0: 4194304}, None)]
op241_op242.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 4194304}, None),
        MemoryDep('buf235', c0, {c0: 4194304}, None),
        MemoryDep('buf240', c0, {c0: 4096}, None)]
op241_op242.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg69_1', 0, {}, None)]
op241_op242.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op241_op242.snodes[0] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 4194304}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf223', c0, {c0: 4194304}, None),
        MemoryDep('buf235', c0, {c0: 4194304}, None),
        MemoryDep('buf240', c0, {c0: 4096}, None)]
op241.met_dependencies = 
    [   MemoryDep('arg64_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg68_1', c1, {c0: 8, c1: 512}, None),
        MemoryDep('arg69_1', 0, {}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf241.users = [NodeUser(node=SchedulerNode(name='op242'), can_inplace=True, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (4194304, 1)
op241.sizes = ([8, 512, 1024], [])
buf235_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
arg64_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 1, 1], stride=[512, 1, 1, 1])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[512], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf223_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op241_loop_body:
    var_ranges = {z0: 8, z1: 512, z2: 1024}
    index0 = 524288*z0 + 1024*z1 + z2
    index1 = z1
    index2 = 512*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf235', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg64_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf240', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg68_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg69_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf223', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf241', get_index_6, add_2, None)
        return store
op241_op242.snodes[1] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 4194304}, None)]
op242.unmet_dependencies = [MemoryDep('buf241', c0, {c0: 4194304}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
    buf242.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
    ]
]
op242.group.device = cuda:0
op242.group.iteration = (4194304, 1)
op242.sizes = ([4194304], [])
buf241_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
class op242_loop_body:
    var_ranges = {z0: 4194304}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf241', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf241', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9622504486493761, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf242', get_index_2, mul_4, None)
        return store


op244: ExternKernelSchedulerNode(ExternKernelAlloc)
op244.writes = [StarDep(name='buf244', mode=None)]
op244.unmet_dependencies = [StarDep(name='buf242', mode=None), StarDep(name='buf243', mode=None)]
op244.met_dependencies = []
op244.outputs = [
    buf244: ExternKernelAlloc
    buf244.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 32, 32], stride=[786432, 1024, 32, 1])
    buf244.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.node.kernel = extern_kernels.convolution


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 6690816}, None)]
op245.unmet_dependencies = [MemoryDep('buf244', 1024*c0 + 32*c1 + c2, {c0: 6144, c1: 33, c2: 33}, None)]
op245.met_dependencies = [MemoryDep('arg75_1', c1, {c0: 8, c1: 768}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 33, 33], stride=[836352, 1089, 33, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (6690816, 1)
op245.sizes = ([8, 768, 33, 33], [])
buf244_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 32, 32], stride=[786432, 1024, 32, 1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 33, 33], stride=[836352, 1089, 33, 1])
class op245_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 33, z3: 33}
    index0 = z2
    index1 = z3
    index2 = 786432*z0 + 1024*z1 + 32*z2 + z3
    index3 = z1
    index4 = 836352*z0 + 1089*z1 + 33*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(32, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(32, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf245', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf244', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg75_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf244', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg75_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        return mul_3


op247: ExternKernelSchedulerNode(ExternKernelAlloc)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None), StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ExternKernelAlloc
    buf247.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=True, is_weak=False)]
]
op247.node.kernel = extern_kernels.convolution


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 1572864}, None)]
op248.unmet_dependencies = [MemoryDep('buf247', c0, {c0: 1572864}, None)]
op248.met_dependencies = [MemoryDep('arg78_1', c1, {c0: 8, c1: 768}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op250'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (1572864, 1)
op248.sizes = ([8, 768, 256], [])
buf247_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg78_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op248_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf247', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg78_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf247', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg78_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf248', get_index_4, mul_3, None)
        return store


op250: ExternKernelSchedulerNode(ExternKernelAlloc)
op250.writes = [StarDep(name='buf250', mode=None)]
op250.unmet_dependencies = [StarDep(name='buf248', mode=None), StarDep(name='buf249', mode=None)]
op250.met_dependencies = []
op250.outputs = [
    buf250: ExternKernelAlloc
    buf250.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf250.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False)]
]
op250.node.kernel = extern_kernels.convolution


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 1572864}, None)]
op251.unmet_dependencies = [MemoryDep('buf250', c0, {c0: 1572864}, None)]
op251.met_dependencies = [MemoryDep('arg81_1', c1, {c0: 8, c1: 768}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (1572864, 1)
op251.sizes = ([8, 768, 256], [])
buf250_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op251_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf250', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg81_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf250', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg81_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf251', get_index_4, mul_3, None)
        return store


op253: ExternKernelSchedulerNode(ExternKernelAlloc)
op253.writes = [StarDep(name='buf253', mode=None)]
op253.unmet_dependencies = [StarDep(name='buf251', mode=None), StarDep(name='buf252', mode=None)]
op253.met_dependencies = []
op253.outputs = [
    buf253: ExternKernelAlloc
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf253.users = [
        NodeUser(node=SchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False),
    ]
]
op253.node.kernel = extern_kernels.convolution


op254_op255: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op254_op255.writes = 
    [   MemoryDep('buf254', c0, {c0: 12288}, None),
        MemoryDep('buf255', c0, {c0: 12288}, None)]
op254_op255.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 3145728}, None)]
op254_op255.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 8, c1: 1536}, None)]
op254_op255.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op254_op255.snodes[0] =
op254: SchedulerNode(ComputedBuffer)
op254.writes = [MemoryDep('buf254', c0, {c0: 12288}, None)]
op254.unmet_dependencies = [MemoryDep('buf253', c0, {c0: 3145728}, None)]
op254.met_dependencies = [MemoryDep('arg84_1', c1, {c0: 8, c1: 1536}, None)]
op254.outputs = [
    buf254: ComputedBuffer
    buf254.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.group.device = cuda:0
op254.group.iteration = (12288, 256)
op254.sizes = ([8, 1536], [256])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op254_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf254', get_index_2, reduction)
        return store_reduction
op254_op255.snodes[1] =
op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 12288}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 12288}, None)]
op255.met_dependencies = []
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (12288, 1)
op255.sizes = ([12288], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op255_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf255', get_index_1, truediv, None)
        return store


op256: ExternKernelSchedulerNode(ExternKernelAlloc)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelAlloc
    buf256.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf256.users = [NodeUser(node=SchedulerNode(name='op257'), can_inplace=True, is_weak=False)]
]
op256.node.kernel = extern_kernels.convolution


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 6144}, None)]
op257.unmet_dependencies = [MemoryDep('buf256', c0, {c0: 6144}, None)]
op257.met_dependencies = [MemoryDep('arg86_1', c1, {c0: 8, c1: 768}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf257.users = [NodeUser(node=ExternKernelSchedulerNode(name='op258'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (6144, 1)
op257.sizes = ([8, 768], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op257_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf257', get_index_2, relu, None)
        return store


op258: ExternKernelSchedulerNode(ExternKernelAlloc)
op258.writes = [StarDep(name='buf258', mode=None)]
op258.unmet_dependencies = [StarDep(name='buf257', mode=None)]
op258.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op258.outputs = [
    buf258: ExternKernelAlloc
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf258.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=False, is_weak=False)]
]
op258.node.kernel = extern_kernels.convolution


op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1048576}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf242', 64*c0 + 2*c1 + 1, {c0: 65536, c1: 16}, None),
        MemoryDep('buf242', 64*c0 + 2*c1 + 32, {c0: 65536, c1: 16}, None),
        MemoryDep('buf242', 64*c0 + 2*c1 + 33, {c0: 65536, c1: 16}, None),
        MemoryDep('buf242', 64*c0 + 2*c1, {c0: 65536, c1: 16}, None)]
op259.met_dependencies = []
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
    buf259.users = [NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (1048576, 1)
op259.sizes = ([65536, 16], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 32, 32], stride=[524288, 1024, 32, 1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 512, 16, 16], stride=[131072, 256, 16, 1])
class op259_loop_body:
    var_ranges = {z0: 65536, z1: 16}
    index0 = 64*z0 + 2*z1
    index1 = 64*z0 + 2*z1 + 1
    index2 = 64*z0 + 2*z1 + 32
    index3 = 64*z0 + 2*z1 + 33
    index4 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf242', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf242', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf242', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf259', get_index_4, mul, None)
        return store


op261: ExternKernelSchedulerNode(ExternKernelAlloc)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf259', mode=None), StarDep(name='buf260', mode=None)]
op261.met_dependencies = []
op261.outputs = [
    buf261: ExternKernelAlloc
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False)]
]
op261.node.kernel = extern_kernels.convolution


op262_op263: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op262_op263.writes = 
    [   MemoryDep('buf262', c0, {c0: 3145728}, None),
        MemoryDep('buf263', c0, {c0: 3145728}, None)]
op262_op263.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 3145728}, None),
        MemoryDep('buf258', c0, {c0: 12288}, None),
        MemoryDep('buf261', c0, {c0: 3145728}, None)]
op262_op263.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg89_1', 0, {}, None)]
op262_op263.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
    ]
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op262_op263.snodes[0] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 3145728}, None)]
op262.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 3145728}, None),
        MemoryDep('buf258', c0, {c0: 12288}, None),
        MemoryDep('buf261', c0, {c0: 3145728}, None)]
op262.met_dependencies = 
    [   MemoryDep('arg72_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg84_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg88_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg89_1', 0, {}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf262.users = [
        NodeUser(node=SchedulerNode(name='op263'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (3145728, 1)
op262.sizes = ([8, 1536, 256], [])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg72_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op262_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf253', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg84_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf258', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg88_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg89_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf261', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg72_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        add_3 = ops.add(mul_3, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf262', get_index_7, add_3, None)
        return store
op262_op263.snodes[1] =
op263: SchedulerNode(ComputedBuffer)
op263.writes = [MemoryDep('buf263', c0, {c0: 3145728}, None)]
op263.unmet_dependencies = [MemoryDep('buf262', c0, {c0: 3145728}, None)]
op263.met_dependencies = []
op263.outputs = [
    buf263: ComputedBuffer
    buf263.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False)]
]
op263.group.device = cuda:0
op263.group.iteration = (3145728, 1)
op263.sizes = ([3145728], [])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf263_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op263_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf262', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf262', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9805806756909201, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf263', get_index_2, mul_4, None)
        return store


op265: ExternKernelSchedulerNode(ExternKernelAlloc)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf263', mode=None), StarDep(name='buf264', mode=None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ExternKernelAlloc
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf265.users = [NodeUser(node=SchedulerNode(name='op266'), can_inplace=True, is_weak=False)]
]
op265.node.kernel = extern_kernels.convolution


op266: SchedulerNode(ComputedBuffer)
op266.writes = [MemoryDep('buf266', c0, {c0: 1572864}, None)]
op266.unmet_dependencies = [MemoryDep('buf265', c0, {c0: 1572864}, None)]
op266.met_dependencies = [MemoryDep('arg92_1', c1, {c0: 8, c1: 768}, None)]
op266.outputs = [
    buf266: ComputedBuffer
    buf266.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf266.users = [NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False)]
]
op266.group.device = cuda:0
op266.group.iteration = (1572864, 1)
op266.sizes = ([8, 768, 256], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf266_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op266_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf265', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg92_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf265', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg92_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf266', get_index_4, mul_3, None)
        return store


op268: ExternKernelSchedulerNode(ExternKernelAlloc)
op268.writes = [StarDep(name='buf268', mode=None)]
op268.unmet_dependencies = [StarDep(name='buf266', mode=None), StarDep(name='buf267', mode=None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ExternKernelAlloc
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf268.users = [NodeUser(node=SchedulerNode(name='op269'), can_inplace=True, is_weak=False)]
]
op268.node.kernel = extern_kernels.convolution


op269: SchedulerNode(ComputedBuffer)
op269.writes = [MemoryDep('buf269', c0, {c0: 1572864}, None)]
op269.unmet_dependencies = [MemoryDep('buf268', c0, {c0: 1572864}, None)]
op269.met_dependencies = [MemoryDep('arg95_1', c1, {c0: 8, c1: 768}, None)]
op269.outputs = [
    buf269: ComputedBuffer
    buf269.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf269.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.group.device = cuda:0
op269.group.iteration = (1572864, 1)
op269.sizes = ([8, 768, 256], [])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf269_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op269_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf268', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg95_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf268', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg95_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf269', get_index_4, mul_3, None)
        return store


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf269', mode=None), StarDep(name='buf270', mode=None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf271.users = [NodeUser(node=SchedulerNode(name='op272'), can_inplace=True, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: SchedulerNode(ComputedBuffer)
op272.writes = [MemoryDep('buf272', c0, {c0: 1572864}, None)]
op272.unmet_dependencies = [MemoryDep('buf271', c0, {c0: 1572864}, None)]
op272.met_dependencies = [MemoryDep('arg98_1', c1, {c0: 8, c1: 768}, None)]
op272.outputs = [
    buf272: ComputedBuffer
    buf272.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf272.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op272.group.device = cuda:0
op272.group.iteration = (1572864, 1)
op272.sizes = ([8, 768, 256], [])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf272_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op272_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf271', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg98_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf271', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg98_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf272', get_index_4, mul_3, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelAlloc)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf272', mode=None), StarDep(name='buf273', mode=None)]
op274.met_dependencies = []
op274.outputs = [
    buf274: ExternKernelAlloc
    buf274.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.convolution


op275_op276: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op275_op276.writes = 
    [   MemoryDep('buf275', c0, {c0: 12288}, None),
        MemoryDep('buf276', c0, {c0: 12288}, None)]
op275_op276.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 3145728}, None)]
op275_op276.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8, c1: 1536}, None)]
op275_op276.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op275_op276.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 12288}, None)]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 3145728}, None)]
op275.met_dependencies = [MemoryDep('arg101_1', c1, {c0: 8, c1: 1536}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf275.users = [NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False)]
]
op275.group.device = cuda:0
op275.group.iteration = (12288, 256)
op275.sizes = ([8, 1536], [256])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_2, reduction)
        return store_reduction
op275_op276.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 12288}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 12288}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf276.users = [NodeUser(node=ExternKernelSchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (12288, 1)
op276.sizes = ([12288], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op276_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf276', get_index_1, truediv, None)
        return store


op277: ExternKernelSchedulerNode(ExternKernelAlloc)
op277.writes = [StarDep(name='buf277', mode=None)]
op277.unmet_dependencies = [StarDep(name='buf276', mode=None)]
op277.met_dependencies = [StarDep(name='arg102_1', mode=None)]
op277.outputs = [
    buf277: ExternKernelAlloc
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf277.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False)]
]
op277.node.kernel = extern_kernels.convolution


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 6144}, None)]
op278.unmet_dependencies = [MemoryDep('buf277', c0, {c0: 6144}, None)]
op278.met_dependencies = [MemoryDep('arg103_1', c1, {c0: 8, c1: 768}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (6144, 1)
op278.sizes = ([8, 768], [])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf278_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op278_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf277', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg103_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf278', get_index_2, relu, None)
        return store


op279: ExternKernelSchedulerNode(ExternKernelAlloc)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf278', mode=None)]
op279.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op279.outputs = [
    buf279: ExternKernelAlloc
    buf279.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.convolution


op280_op281: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op280_op281.writes = 
    [   MemoryDep('buf280', c0, {c0: 3145728}, None),
        MemoryDep('buf281', c0, {c0: 3145728}, None)]
op280_op281.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 3145728}, None),
        MemoryDep('buf274', c0, {c0: 3145728}, None),
        MemoryDep('buf279', c0, {c0: 12288}, None)]
op280_op281.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg106_1', 0, {}, None)]
op280_op281.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op280_op281.snodes[0] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 3145728}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf262', c0, {c0: 3145728}, None),
        MemoryDep('buf274', c0, {c0: 3145728}, None),
        MemoryDep('buf279', c0, {c0: 12288}, None)]
op280.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg105_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg106_1', 0, {}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf280.users = [
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op280.group.device = cuda:0
op280.group.iteration = (3145728, 1)
op280.sizes = ([8, 1536, 256], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg106_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op280_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg101_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf279', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg105_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg106_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf262', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf280', get_index_6, add_2, None)
        return store
op280_op281.snodes[1] =
op281: SchedulerNode(ComputedBuffer)
op281.writes = [MemoryDep('buf281', c0, {c0: 3145728}, None)]
op281.unmet_dependencies = [MemoryDep('buf280', c0, {c0: 3145728}, None)]
op281.met_dependencies = []
op281.outputs = [
    buf281: ComputedBuffer
    buf281.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf281.users = [NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False)]
]
op281.group.device = cuda:0
op281.group.iteration = (3145728, 1)
op281.sizes = ([3145728], [])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf281_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op281_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf280', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf280', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9622504486493761, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf281', get_index_2, mul_4, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelAlloc)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf281', mode=None), StarDep(name='buf282', mode=None)]
op283.met_dependencies = []
op283.outputs = [
    buf283: ExternKernelAlloc
    buf283.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf283.users = [NodeUser(node=SchedulerNode(name='op284'), can_inplace=True, is_weak=False)]
]
op283.node.kernel = extern_kernels.convolution


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 1572864}, None)]
op284.unmet_dependencies = [MemoryDep('buf283', c0, {c0: 1572864}, None)]
op284.met_dependencies = [MemoryDep('arg109_1', c1, {c0: 8, c1: 768}, None)]
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (1572864, 1)
op284.sizes = ([8, 768, 256], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op284_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf283', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg109_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf284', get_index_4, mul_3, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelAlloc)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf284', mode=None), StarDep(name='buf285', mode=None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ExternKernelAlloc
    buf286.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False)]
]
op286.node.kernel = extern_kernels.convolution


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 1572864}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1572864}, None)]
op287.met_dependencies = [MemoryDep('arg112_1', c1, {c0: 8, c1: 768}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (1572864, 1)
op287.sizes = ([8, 768, 256], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op287_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg112_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg112_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf287', get_index_4, mul_3, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelAlloc)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf287', mode=None), StarDep(name='buf288', mode=None)]
op289.met_dependencies = []
op289.outputs = [
    buf289: ExternKernelAlloc
    buf289.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False)]
]
op289.node.kernel = extern_kernels.convolution


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 1572864}, None)]
op290.unmet_dependencies = [MemoryDep('buf289', c0, {c0: 1572864}, None)]
op290.met_dependencies = [MemoryDep('arg115_1', c1, {c0: 8, c1: 768}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (1572864, 1)
op290.sizes = ([8, 768, 256], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op290_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg115_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf289', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg115_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf290', get_index_4, mul_3, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelAlloc)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None), StarDep(name='buf291', mode=None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ExternKernelAlloc
    buf292.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf292.users = [
        NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=True, is_weak=False),
    ]
]
op292.node.kernel = extern_kernels.convolution


op293_op294: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op293_op294.writes = 
    [   MemoryDep('buf293', c0, {c0: 12288}, None),
        MemoryDep('buf294', c0, {c0: 12288}, None)]
op293_op294.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 3145728}, None)]
op293_op294.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 8, c1: 1536}, None)]
op293_op294.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op293_op294.snodes[0] =
op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 12288}, None)]
op293.unmet_dependencies = [MemoryDep('buf292', c0, {c0: 3145728}, None)]
op293.met_dependencies = [MemoryDep('arg118_1', c1, {c0: 8, c1: 1536}, None)]
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf293.users = [NodeUser(node=SchedulerNode(name='op294'), can_inplace=True, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (12288, 256)
op293.sizes = ([8, 1536], [256])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op293_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf293', get_index_2, reduction)
        return store_reduction
op293_op294.snodes[1] =
op294: SchedulerNode(ComputedBuffer)
op294.writes = [MemoryDep('buf294', c0, {c0: 12288}, None)]
op294.unmet_dependencies = [MemoryDep('buf293', c0, {c0: 12288}, None)]
op294.met_dependencies = []
op294.outputs = [
    buf294: ComputedBuffer
    buf294.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False)]
]
op294.group.device = cuda:0
op294.group.iteration = (12288, 1)
op294.sizes = ([12288], [])
buf293_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf294_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op294_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf293', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf294', get_index_1, truediv, None)
        return store


op295: ExternKernelSchedulerNode(ExternKernelAlloc)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf294', mode=None)]
op295.met_dependencies = [StarDep(name='arg119_1', mode=None)]
op295.outputs = [
    buf295: ExternKernelAlloc
    buf295.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf295.users = [NodeUser(node=SchedulerNode(name='op296'), can_inplace=True, is_weak=False)]
]
op295.node.kernel = extern_kernels.convolution


op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 6144}, None)]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 6144}, None)]
op296.met_dependencies = [MemoryDep('arg120_1', c1, {c0: 8, c1: 768}, None)]
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf296.users = [NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (6144, 1)
op296.sizes = ([8, 768], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op296_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg120_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf296', get_index_2, relu, None)
        return store


op297: ExternKernelSchedulerNode(ExternKernelAlloc)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = [StarDep(name='arg121_1', mode=None)]
op297.outputs = [
    buf297: ExternKernelAlloc
    buf297.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = extern_kernels.convolution


op298_op299: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op298_op299.writes = 
    [   MemoryDep('buf298', c0, {c0: 3145728}, None),
        MemoryDep('buf299', c0, {c0: 3145728}, None)]
op298_op299.unmet_dependencies = 
    [   MemoryDep('buf280', c0, {c0: 3145728}, None),
        MemoryDep('buf292', c0, {c0: 3145728}, None),
        MemoryDep('buf297', c0, {c0: 12288}, None)]
op298_op299.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg123_1', 0, {}, None)]
op298_op299.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op298_op299.snodes[0] =
op298: SchedulerNode(ComputedBuffer)
op298.writes = [MemoryDep('buf298', c0, {c0: 3145728}, None)]
op298.unmet_dependencies = 
    [   MemoryDep('buf280', c0, {c0: 3145728}, None),
        MemoryDep('buf292', c0, {c0: 3145728}, None),
        MemoryDep('buf297', c0, {c0: 12288}, None)]
op298.met_dependencies = 
    [   MemoryDep('arg118_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg122_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg123_1', 0, {}, None)]
op298.outputs = [
    buf298: ComputedBuffer
    buf298.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf298.users = [
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
]
op298.group.device = cuda:0
op298.group.iteration = (3145728, 1)
op298.sizes = ([8, 1536, 256], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg122_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf280_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op298_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg118_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf297', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg122_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg123_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf280', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf298', get_index_6, add_2, None)
        return store
op298_op299.snodes[1] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 3145728}, None)]
op299.unmet_dependencies = [MemoryDep('buf298', c0, {c0: 3145728}, None)]
op299.met_dependencies = []
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (3145728, 1)
op299.sizes = ([3145728], [])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op299_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf298', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf298', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9449111825230679, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf299', get_index_2, mul_4, None)
        return store


op301: ExternKernelSchedulerNode(ExternKernelAlloc)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf299', mode=None), StarDep(name='buf300', mode=None)]
op301.met_dependencies = []
op301.outputs = [
    buf301: ExternKernelAlloc
    buf301.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op302'), can_inplace=True, is_weak=False)]
]
op301.node.kernel = extern_kernels.convolution


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 1572864}, None)]
op302.unmet_dependencies = [MemoryDep('buf301', c0, {c0: 1572864}, None)]
op302.met_dependencies = [MemoryDep('arg126_1', c1, {c0: 8, c1: 768}, None)]
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (1572864, 1)
op302.sizes = ([8, 768, 256], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg126_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op302_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg126_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf301', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg126_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf302', get_index_4, mul_3, None)
        return store


op304: ExternKernelSchedulerNode(ExternKernelAlloc)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf302', mode=None), StarDep(name='buf303', mode=None)]
op304.met_dependencies = []
op304.outputs = [
    buf304: ExternKernelAlloc
    buf304.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False)]
]
op304.node.kernel = extern_kernels.convolution


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 1572864}, None)]
op305.unmet_dependencies = [MemoryDep('buf304', c0, {c0: 1572864}, None)]
op305.met_dependencies = [MemoryDep('arg129_1', c1, {c0: 8, c1: 768}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (1572864, 1)
op305.sizes = ([8, 768, 256], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op305_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg129_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf304', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg129_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf305', get_index_4, mul_3, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelAlloc)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf305', mode=None), StarDep(name='buf306', mode=None)]
op307.met_dependencies = []
op307.outputs = [
    buf307: ExternKernelAlloc
    buf307.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.convolution


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 1572864}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 1572864}, None)]
op308.met_dependencies = [MemoryDep('arg132_1', c1, {c0: 8, c1: 768}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (1572864, 1)
op308.sizes = ([8, 768, 256], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op308_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf307', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg132_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf308', get_index_4, mul_3, None)
        return store


op310: ExternKernelSchedulerNode(ExternKernelAlloc)
op310.writes = [StarDep(name='buf310', mode=None)]
op310.unmet_dependencies = [StarDep(name='buf308', mode=None), StarDep(name='buf309', mode=None)]
op310.met_dependencies = []
op310.outputs = [
    buf310: ExternKernelAlloc
    buf310.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf310.users = [
        NodeUser(node=SchedulerNode(name='op311'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
    ]
]
op310.node.kernel = extern_kernels.convolution


op311_op312: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op311_op312.writes = 
    [   MemoryDep('buf311', c0, {c0: 12288}, None),
        MemoryDep('buf312', c0, {c0: 12288}, None)]
op311_op312.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 3145728}, None)]
op311_op312.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 8, c1: 1536}, None)]
op311_op312.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op311_op312.snodes[0] =
op311: SchedulerNode(ComputedBuffer)
op311.writes = [MemoryDep('buf311', c0, {c0: 12288}, None)]
op311.unmet_dependencies = [MemoryDep('buf310', c0, {c0: 3145728}, None)]
op311.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 8, c1: 1536}, None)]
op311.outputs = [
    buf311: ComputedBuffer
    buf311.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=True, is_weak=False)]
]
op311.group.device = cuda:0
op311.group.iteration = (12288, 256)
op311.sizes = ([8, 1536], [256])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op311_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf311', get_index_2, reduction)
        return store_reduction
op311_op312.snodes[1] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 12288}, None)]
op312.unmet_dependencies = [MemoryDep('buf311', c0, {c0: 12288}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (12288, 1)
op312.sizes = ([12288], [])
buf311_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op312_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf311', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf312', get_index_1, truediv, None)
        return store


op313: ExternKernelSchedulerNode(ExternKernelAlloc)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg136_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelAlloc
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf313.users = [NodeUser(node=SchedulerNode(name='op314'), can_inplace=True, is_weak=False)]
]
op313.node.kernel = extern_kernels.convolution


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 6144}, None)]
op314.unmet_dependencies = [MemoryDep('buf313', c0, {c0: 6144}, None)]
op314.met_dependencies = [MemoryDep('arg137_1', c1, {c0: 8, c1: 768}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf314.users = [NodeUser(node=ExternKernelSchedulerNode(name='op315'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (6144, 1)
op314.sizes = ([8, 768], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op314_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg137_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf314', get_index_2, relu, None)
        return store


op315: ExternKernelSchedulerNode(ExternKernelAlloc)
op315.writes = [StarDep(name='buf315', mode=None)]
op315.unmet_dependencies = [StarDep(name='buf314', mode=None)]
op315.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op315.outputs = [
    buf315: ExternKernelAlloc
    buf315.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf315.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op315.node.kernel = extern_kernels.convolution


op316_op317: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op316_op317.writes = 
    [   MemoryDep('buf316', c0, {c0: 3145728}, None),
        MemoryDep('buf317', c0, {c0: 3145728}, None)]
op316_op317.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 3145728}, None),
        MemoryDep('buf310', c0, {c0: 3145728}, None),
        MemoryDep('buf315', c0, {c0: 12288}, None)]
op316_op317.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg140_1', 0, {}, None)]
op316_op317.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
    ]
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op316_op317.snodes[0] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 3145728}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf298', c0, {c0: 3145728}, None),
        MemoryDep('buf310', c0, {c0: 3145728}, None),
        MemoryDep('buf315', c0, {c0: 12288}, None)]
op316.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg139_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg140_1', 0, {}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf316.users = [
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (3145728, 1)
op316.sizes = ([8, 1536, 256], [])
buf310_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf298_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op316_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf310', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg135_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf315', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg139_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg140_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf298', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf316', get_index_6, add_2, None)
        return store
op316_op317.snodes[1] =
op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 3145728}, None)]
op317.unmet_dependencies = [MemoryDep('buf316', c0, {c0: 3145728}, None)]
op317.met_dependencies = []
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf317.users = [NodeUser(node=ExternKernelSchedulerNode(name='op319'), can_inplace=False, is_weak=False)]
]
op317.group.device = cuda:0
op317.group.iteration = (3145728, 1)
op317.sizes = ([3145728], [])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op317_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf316', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf316', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9284766908852592, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf317', get_index_2, mul_4, None)
        return store


op319: ExternKernelSchedulerNode(ExternKernelAlloc)
op319.writes = [StarDep(name='buf319', mode=None)]
op319.unmet_dependencies = [StarDep(name='buf317', mode=None), StarDep(name='buf318', mode=None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ExternKernelAlloc
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf319.users = [NodeUser(node=SchedulerNode(name='op320'), can_inplace=True, is_weak=False)]
]
op319.node.kernel = extern_kernels.convolution


op320: SchedulerNode(ComputedBuffer)
op320.writes = [MemoryDep('buf320', c0, {c0: 1572864}, None)]
op320.unmet_dependencies = [MemoryDep('buf319', c0, {c0: 1572864}, None)]
op320.met_dependencies = [MemoryDep('arg143_1', c1, {c0: 8, c1: 768}, None)]
op320.outputs = [
    buf320: ComputedBuffer
    buf320.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf320.users = [NodeUser(node=ExternKernelSchedulerNode(name='op322'), can_inplace=False, is_weak=False)]
]
op320.group.device = cuda:0
op320.group.iteration = (1572864, 1)
op320.sizes = ([8, 768, 256], [])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf320_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op320_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf319', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg143_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf319', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg143_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf320', get_index_4, mul_3, None)
        return store


op322: ExternKernelSchedulerNode(ExternKernelAlloc)
op322.writes = [StarDep(name='buf322', mode=None)]
op322.unmet_dependencies = [StarDep(name='buf320', mode=None), StarDep(name='buf321', mode=None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ExternKernelAlloc
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf322.users = [NodeUser(node=SchedulerNode(name='op323'), can_inplace=True, is_weak=False)]
]
op322.node.kernel = extern_kernels.convolution


op323: SchedulerNode(ComputedBuffer)
op323.writes = [MemoryDep('buf323', c0, {c0: 1572864}, None)]
op323.unmet_dependencies = [MemoryDep('buf322', c0, {c0: 1572864}, None)]
op323.met_dependencies = [MemoryDep('arg146_1', c1, {c0: 8, c1: 768}, None)]
op323.outputs = [
    buf323: ComputedBuffer
    buf323.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf323.users = [NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op323.group.device = cuda:0
op323.group.iteration = (1572864, 1)
op323.sizes = ([8, 768, 256], [])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf323_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op323_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf322', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg146_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf322', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg146_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf323', get_index_4, mul_3, None)
        return store


op325: ExternKernelSchedulerNode(ExternKernelAlloc)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf323', mode=None), StarDep(name='buf324', mode=None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ExternKernelAlloc
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf325.users = [NodeUser(node=SchedulerNode(name='op326'), can_inplace=True, is_weak=False)]
]
op325.node.kernel = extern_kernels.convolution


op326: SchedulerNode(ComputedBuffer)
op326.writes = [MemoryDep('buf326', c0, {c0: 1572864}, None)]
op326.unmet_dependencies = [MemoryDep('buf325', c0, {c0: 1572864}, None)]
op326.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 8, c1: 768}, None)]
op326.outputs = [
    buf326: ComputedBuffer
    buf326.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.group.device = cuda:0
op326.group.iteration = (1572864, 1)
op326.sizes = ([8, 768, 256], [])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf326_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op326_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf325', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf325', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf326', get_index_4, mul_3, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelAlloc)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf326', mode=None), StarDep(name='buf327', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: ExternKernelAlloc
    buf328.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=True, is_weak=False),
    ]
]
op328.node.kernel = extern_kernels.convolution


op329_op330: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op329_op330.writes = 
    [   MemoryDep('buf329', c0, {c0: 12288}, None),
        MemoryDep('buf330', c0, {c0: 12288}, None)]
op329_op330.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 3145728}, None)]
op329_op330.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 8, c1: 1536}, None)]
op329_op330.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op329_op330.snodes[0] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 12288}, None)]
op329.unmet_dependencies = [MemoryDep('buf328', c0, {c0: 3145728}, None)]
op329.met_dependencies = [MemoryDep('arg152_1', c1, {c0: 8, c1: 1536}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf329.users = [NodeUser(node=SchedulerNode(name='op330'), can_inplace=True, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (12288, 256)
op329.sizes = ([8, 1536], [256])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op329_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf329', get_index_2, reduction)
        return store_reduction
op329_op330.snodes[1] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 12288}, None)]
op330.unmet_dependencies = [MemoryDep('buf329', c0, {c0: 12288}, None)]
op330.met_dependencies = []
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf330.users = [NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (12288, 1)
op330.sizes = ([12288], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op330_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf329', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf330', get_index_1, truediv, None)
        return store


op331: ExternKernelSchedulerNode(ExternKernelAlloc)
op331.writes = [StarDep(name='buf331', mode=None)]
op331.unmet_dependencies = [StarDep(name='buf330', mode=None)]
op331.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op331.outputs = [
    buf331: ExternKernelAlloc
    buf331.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf331.users = [NodeUser(node=SchedulerNode(name='op332'), can_inplace=True, is_weak=False)]
]
op331.node.kernel = extern_kernels.convolution


op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 6144}, None)]
op332.unmet_dependencies = [MemoryDep('buf331', c0, {c0: 6144}, None)]
op332.met_dependencies = [MemoryDep('arg154_1', c1, {c0: 8, c1: 768}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf332.users = [NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (6144, 1)
op332.sizes = ([8, 768], [])
buf331_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg154_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op332_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf331', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg154_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf332', get_index_2, relu, None)
        return store


op333: ExternKernelSchedulerNode(ExternKernelAlloc)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf332', mode=None)]
op333.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelAlloc
    buf333.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False)]
]
op333.node.kernel = extern_kernels.convolution


op334_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op334_op335.writes = 
    [   MemoryDep('buf334', c0, {c0: 3145728}, None),
        MemoryDep('buf335', c0, {c0: 3145728}, None)]
op334_op335.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 3145728}, None),
        MemoryDep('buf328', c0, {c0: 3145728}, None),
        MemoryDep('buf333', c0, {c0: 12288}, None)]
op334_op335.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg157_1', 0, {}, None)]
op334_op335.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op334_op335.snodes[0] =
op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 3145728}, None)]
op334.unmet_dependencies = 
    [   MemoryDep('buf316', c0, {c0: 3145728}, None),
        MemoryDep('buf328', c0, {c0: 3145728}, None),
        MemoryDep('buf333', c0, {c0: 12288}, None)]
op334.met_dependencies = 
    [   MemoryDep('arg152_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg156_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg157_1', 0, {}, None)]
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf334.users = [
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op334.group.device = cuda:0
op334.group.iteration = (3145728, 1)
op334.sizes = ([8, 1536, 256], [])
buf328_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg156_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op334_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf328', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg152_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf333', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg156_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg157_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf316', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf334', get_index_6, add_2, None)
        return store
op334_op335.snodes[1] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 3145728}, None)]
op335.unmet_dependencies = [MemoryDep('buf334', c0, {c0: 3145728}, None)]
op335.met_dependencies = []
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op335.group.device = cuda:0
op335.group.iteration = (3145728, 1)
op335.sizes = ([3145728], [])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op335_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf334', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf334', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9128709291752768, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf335', get_index_2, mul_4, None)
        return store


op337: ExternKernelSchedulerNode(ExternKernelAlloc)
op337.writes = [StarDep(name='buf337', mode=None)]
op337.unmet_dependencies = [StarDep(name='buf335', mode=None), StarDep(name='buf336', mode=None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ExternKernelAlloc
    buf337.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf337.users = [NodeUser(node=SchedulerNode(name='op338'), can_inplace=True, is_weak=False)]
]
op337.node.kernel = extern_kernels.convolution


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 1572864}, None)]
op338.unmet_dependencies = [MemoryDep('buf337', c0, {c0: 1572864}, None)]
op338.met_dependencies = [MemoryDep('arg160_1', c1, {c0: 8, c1: 768}, None)]
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op340'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (1572864, 1)
op338.sizes = ([8, 768, 256], [])
buf337_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op338_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf337', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg160_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf337', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg160_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf338', get_index_4, mul_3, None)
        return store


op340: ExternKernelSchedulerNode(ExternKernelAlloc)
op340.writes = [StarDep(name='buf340', mode=None)]
op340.unmet_dependencies = [StarDep(name='buf338', mode=None), StarDep(name='buf339', mode=None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ExternKernelAlloc
    buf340.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf340.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False)]
]
op340.node.kernel = extern_kernels.convolution


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 1572864}, None)]
op341.unmet_dependencies = [MemoryDep('buf340', c0, {c0: 1572864}, None)]
op341.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 8, c1: 768}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (1572864, 1)
op341.sizes = ([8, 768, 256], [])
buf340_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op341_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf340', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf340', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf341', get_index_4, mul_3, None)
        return store


op343: ExternKernelSchedulerNode(ExternKernelAlloc)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf341', mode=None), StarDep(name='buf342', mode=None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ExternKernelAlloc
    buf343.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=True, is_weak=False)]
]
op343.node.kernel = extern_kernels.convolution


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 1572864}, None)]
op344.unmet_dependencies = [MemoryDep('buf343', c0, {c0: 1572864}, None)]
op344.met_dependencies = [MemoryDep('arg166_1', c1, {c0: 8, c1: 768}, None)]
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (1572864, 1)
op344.sizes = ([8, 768, 256], [])
buf343_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
class op344_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 256}
    index0 = 196608*z0 + 256*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf343', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg166_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf343', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg166_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf344', get_index_4, mul_3, None)
        return store


op346: ExternKernelSchedulerNode(ExternKernelAlloc)
op346.writes = [StarDep(name='buf346', mode=None)]
op346.unmet_dependencies = [StarDep(name='buf344', mode=None), StarDep(name='buf345', mode=None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ExternKernelAlloc
    buf346.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf346.users = [
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
    ]
]
op346.node.kernel = extern_kernels.convolution


op347_op348: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op347_op348.writes = 
    [   MemoryDep('buf347', c0, {c0: 12288}, None),
        MemoryDep('buf348', c0, {c0: 12288}, None)]
op347_op348.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 3145728}, None)]
op347_op348.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 8, c1: 1536}, None)]
op347_op348.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf347.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False)]
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op347_op348.snodes[0] =
op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 12288}, None)]
op347.unmet_dependencies = [MemoryDep('buf346', c0, {c0: 3145728}, None)]
op347.met_dependencies = [MemoryDep('arg169_1', c1, {c0: 8, c1: 1536}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf347.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (12288, 256)
op347.sizes = ([8, 1536], [256])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op347_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf347', get_index_2, reduction)
        return store_reduction
op347_op348.snodes[1] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 12288}, None)]
op348.unmet_dependencies = [MemoryDep('buf347', c0, {c0: 12288}, None)]
op348.met_dependencies = []
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf348.users = [NodeUser(node=ExternKernelSchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op348.group.device = cuda:0
op348.group.iteration = (12288, 1)
op348.sizes = ([12288], [])
buf347_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf348_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op348_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf347', get_index)
        constant = ops.constant(256.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf348', get_index_1, truediv, None)
        return store


op349: ExternKernelSchedulerNode(ExternKernelAlloc)
op349.writes = [StarDep(name='buf349', mode=None)]
op349.unmet_dependencies = [StarDep(name='buf348', mode=None)]
op349.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op349.outputs = [
    buf349: ExternKernelAlloc
    buf349.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf349.users = [NodeUser(node=SchedulerNode(name='op350'), can_inplace=True, is_weak=False)]
]
op349.node.kernel = extern_kernels.convolution


op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 6144}, None)]
op350.unmet_dependencies = [MemoryDep('buf349', c0, {c0: 6144}, None)]
op350.met_dependencies = [MemoryDep('arg171_1', c1, {c0: 8, c1: 768}, None)]
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf350.users = [NodeUser(node=ExternKernelSchedulerNode(name='op351'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (6144, 1)
op350.sizes = ([8, 768], [])
buf349_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg171_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op350_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf349', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg171_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf350', get_index_2, relu, None)
        return store


op351: ExternKernelSchedulerNode(ExternKernelAlloc)
op351.writes = [StarDep(name='buf351', mode=None)]
op351.unmet_dependencies = [StarDep(name='buf350', mode=None)]
op351.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op351.outputs = [
    buf351: ExternKernelAlloc
    buf351.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf351.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.node.kernel = extern_kernels.convolution


op352_op353: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op352_op353.writes = 
    [   MemoryDep('buf352', c0, {c0: 3145728}, None),
        MemoryDep('buf353', c0, {c0: 3145728}, None)]
op352_op353.unmet_dependencies = 
    [   MemoryDep('buf334', c0, {c0: 3145728}, None),
        MemoryDep('buf346', c0, {c0: 3145728}, None),
        MemoryDep('buf351', c0, {c0: 12288}, None)]
op352_op353.met_dependencies = 
    [   MemoryDep('arg169_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg174_1', 0, {}, None)]
op352_op353.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
    ]
]
op352_op353.snodes[0] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 3145728}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf334', c0, {c0: 3145728}, None),
        MemoryDep('buf346', c0, {c0: 3145728}, None),
        MemoryDep('buf351', c0, {c0: 12288}, None)]
op352.met_dependencies = 
    [   MemoryDep('arg169_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg173_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg174_1', 0, {}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf352.users = [NodeUser(node=SchedulerNode(name='op353'), can_inplace=True, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (3145728, 1)
op352.sizes = ([8, 1536, 256], [])
buf346_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf334_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op352_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 256}
    index0 = 393216*z0 + 256*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf346', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg169_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf351', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg173_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg174_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf334', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf352', get_index_6, add_2, None)
        return store
op352_op353.snodes[1] =
op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 3145728}, None)]
op353.unmet_dependencies = [MemoryDep('buf352', c0, {c0: 3145728}, None)]
op353.met_dependencies = []
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
    buf353.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op370'), can_inplace=False, is_weak=False),
    ]
]
op353.group.device = cuda:0
op353.group.iteration = (3145728, 1)
op353.sizes = ([3145728], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
class op353_loop_body:
    var_ranges = {z0: 3145728}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf352', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.8980265101338745, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf353', get_index_2, mul_4, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelAlloc)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf353', mode=None), StarDep(name='buf354', mode=None)]
op355.met_dependencies = []
op355.outputs = [
    buf355: ExternKernelAlloc
    buf355.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
    buf355.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op355.node.kernel = extern_kernels.convolution


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 1775616}, None)]
op356.unmet_dependencies = [MemoryDep('buf355', 256*c0 + 16*c1 + c2, {c0: 6144, c1: 17, c2: 17}, None)]
op356.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 8, c1: 768}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 17, 17], stride=[221952, 289, 17, 1])
    buf356.users = [NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (1775616, 1)
op356.sizes = ([8, 768, 17, 17], [])
buf355_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 16, 16], stride=[196608, 256, 16, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 17, 17], stride=[221952, 289, 17, 1])
class op356_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 17, z3: 17}
    index0 = z2
    index1 = z3
    index2 = 196608*z0 + 256*z1 + 16*z2 + z3
    index3 = z1
    index4 = 221952*z0 + 289*z1 + 17*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(16, torch.int64)
        lt = ops.lt(index_expr, constant)
        get_index_1 = self.get_index('index1')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(16, torch.int64)
        lt_1 = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(lt, lt_1)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_2 = self.get_index('index4')
        store = ops.store('buf356', get_index_2, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf355', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf355', get_index_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg180_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        return mul_3


op358: ExternKernelSchedulerNode(ExternKernelAlloc)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None), StarDep(name='buf357', mode=None)]
op358.met_dependencies = []
op358.outputs = [
    buf358: ExternKernelAlloc
    buf358.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf358.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False)]
]
op358.node.kernel = extern_kernels.convolution


op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 393216}, None)]
op359.unmet_dependencies = [MemoryDep('buf358', c0, {c0: 393216}, None)]
op359.met_dependencies = [MemoryDep('arg183_1', c1, {c0: 8, c1: 768}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (393216, 1)
op359.sizes = ([8, 768, 64], [])
buf358_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op359_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf358', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg183_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf358', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg183_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf359', get_index_4, mul_3, None)
        return store


op361: ExternKernelSchedulerNode(ExternKernelAlloc)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf359', mode=None), StarDep(name='buf360', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: ExternKernelAlloc
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op362'), can_inplace=True, is_weak=False)]
]
op361.node.kernel = extern_kernels.convolution


op362: SchedulerNode(ComputedBuffer)
op362.writes = [MemoryDep('buf362', c0, {c0: 393216}, None)]
op362.unmet_dependencies = [MemoryDep('buf361', c0, {c0: 393216}, None)]
op362.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 8, c1: 768}, None)]
op362.outputs = [
    buf362: ComputedBuffer
    buf362.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf362.users = [NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op362.group.device = cuda:0
op362.group.iteration = (393216, 1)
op362.sizes = ([8, 768, 64], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op362_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf361', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf361', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf362', get_index_4, mul_3, None)
        return store


op364: ExternKernelSchedulerNode(ExternKernelAlloc)
op364.writes = [StarDep(name='buf364', mode=None)]
op364.unmet_dependencies = [StarDep(name='buf362', mode=None), StarDep(name='buf363', mode=None)]
op364.met_dependencies = []
op364.outputs = [
    buf364: ExternKernelAlloc
    buf364.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf364.users = [
        NodeUser(node=SchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False),
    ]
]
op364.node.kernel = extern_kernels.convolution


op365_op366: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op365_op366.writes = 
    [   MemoryDep('buf365', c0, {c0: 12288}, None),
        MemoryDep('buf366', c0, {c0: 12288}, None)]
op365_op366.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 786432}, None)]
op365_op366.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 8, c1: 1536}, None)]
op365_op366.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False)]
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op365_op366.snodes[0] =
op365: SchedulerNode(ComputedBuffer)
op365.writes = [MemoryDep('buf365', c0, {c0: 12288}, None)]
op365.unmet_dependencies = [MemoryDep('buf364', c0, {c0: 786432}, None)]
op365.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 8, c1: 1536}, None)]
op365.outputs = [
    buf365: ComputedBuffer
    buf365.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf365.users = [NodeUser(node=SchedulerNode(name='op366'), can_inplace=True, is_weak=False)]
]
op365.group.device = cuda:0
op365.group.iteration = (12288, 64)
op365.sizes = ([8, 1536], [64])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op365_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf365', get_index_2, reduction)
        return store_reduction
op365_op366.snodes[1] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 12288}, None)]
op366.unmet_dependencies = [MemoryDep('buf365', c0, {c0: 12288}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (12288, 1)
op366.sizes = ([12288], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op366_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf365', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf366', get_index_1, truediv, None)
        return store


op367: ExternKernelSchedulerNode(ExternKernelAlloc)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelAlloc
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf367.users = [NodeUser(node=SchedulerNode(name='op368'), can_inplace=True, is_weak=False)]
]
op367.node.kernel = extern_kernels.convolution


op368: SchedulerNode(ComputedBuffer)
op368.writes = [MemoryDep('buf368', c0, {c0: 6144}, None)]
op368.unmet_dependencies = [MemoryDep('buf367', c0, {c0: 6144}, None)]
op368.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 8, c1: 768}, None)]
op368.outputs = [
    buf368: ComputedBuffer
    buf368.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf368.users = [NodeUser(node=ExternKernelSchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.group.device = cuda:0
op368.group.iteration = (6144, 1)
op368.sizes = ([8, 768], [])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf368_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op368_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf367', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg191_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf368', get_index_2, relu, None)
        return store


op369: ExternKernelSchedulerNode(ExternKernelAlloc)
op369.writes = [StarDep(name='buf369', mode=None)]
op369.unmet_dependencies = [StarDep(name='buf368', mode=None)]
op369.met_dependencies = [StarDep(name='arg192_1', mode=None)]
op369.outputs = [
    buf369: ExternKernelAlloc
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op369.node.kernel = extern_kernels.convolution


op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 786432}, None)]
op370.unmet_dependencies = 
    [   MemoryDep('buf353', 32*c0 + 2*c1 + 1, {c0: 98304, c1: 8}, None),
        MemoryDep('buf353', 32*c0 + 2*c1 + 16, {c0: 98304, c1: 8}, None),
        MemoryDep('buf353', 32*c0 + 2*c1 + 17, {c0: 98304, c1: 8}, None),
        MemoryDep('buf353', 32*c0 + 2*c1, {c0: 98304, c1: 8}, None)]
op370.met_dependencies = []
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf370.users = [NodeUser(node=ExternKernelSchedulerNode(name='op372'), can_inplace=False, is_weak=False)]
]
op370.group.device = cuda:0
op370.group.iteration = (786432, 1)
op370.sizes = ([98304, 8], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 16, 16], stride=[393216, 256, 16, 1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op370_loop_body:
    var_ranges = {z0: 98304, z1: 8}
    index0 = 32*z0 + 2*z1
    index1 = 32*z0 + 2*z1 + 1
    index2 = 32*z0 + 2*z1 + 16
    index3 = 32*z0 + 2*z1 + 17
    index4 = 8*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf353', get_index_1)
        add = ops.add(load_1, load)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf353', get_index_2)
        add_1 = ops.add(load_2, add)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('buf353', get_index_3)
        add_2 = ops.add(load_3, add_1)
        constant = ops.constant(0.25, torch.float32)
        mul = ops.mul(add_2, constant)
        get_index_4 = self.get_index('index4')
        store = ops.store('buf370', get_index_4, mul, None)
        return store


op372: ExternKernelSchedulerNode(ExternKernelAlloc)
op372.writes = [StarDep(name='buf372', mode=None)]
op372.unmet_dependencies = [StarDep(name='buf370', mode=None), StarDep(name='buf371', mode=None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ExternKernelAlloc
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf372.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=True, is_weak=False)]
]
op372.node.kernel = extern_kernels.convolution


op373_op374: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op373_op374.writes = 
    [   MemoryDep('buf373', c0, {c0: 786432}, None),
        MemoryDep('buf374', c0, {c0: 786432}, None)]
op373_op374.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 786432}, None),
        MemoryDep('buf369', c0, {c0: 12288}, None),
        MemoryDep('buf372', c0, {c0: 786432}, None)]
op373_op374.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg193_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg194_1', 0, {}, None)]
op373_op374.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
    ]
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op373_op374.snodes[0] =
op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 786432}, None)]
op373.unmet_dependencies = 
    [   MemoryDep('buf364', c0, {c0: 786432}, None),
        MemoryDep('buf369', c0, {c0: 12288}, None),
        MemoryDep('buf372', c0, {c0: 786432}, None)]
op373.met_dependencies = 
    [   MemoryDep('arg177_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg189_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg193_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg194_1', 0, {}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf373.users = [
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
    ]
]
op373.group.device = cuda:0
op373.group.iteration = (786432, 1)
op373.sizes = ([8, 1536, 64], [])
buf364_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg194_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op373_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf364', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf369', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg193_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg194_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf372', get_index_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg177_1', get_index_6)
        add_2 = ops.add(load_5, load_6)
        add_3 = ops.add(mul_3, add_2)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf373', get_index_7, add_3, None)
        return store
op373_op374.snodes[1] =
op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 786432}, None)]
op374.unmet_dependencies = [MemoryDep('buf373', c0, {c0: 786432}, None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (786432, 1)
op374.sizes = ([786432], [])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
buf374_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op374_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf373', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf373', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9805806756909201, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf374', get_index_2, mul_4, None)
        return store


op376: ExternKernelSchedulerNode(ExternKernelAlloc)
op376.writes = [StarDep(name='buf376', mode=None)]
op376.unmet_dependencies = [StarDep(name='buf374', mode=None), StarDep(name='buf375', mode=None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ExternKernelAlloc
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf376.users = [NodeUser(node=SchedulerNode(name='op377'), can_inplace=True, is_weak=False)]
]
op376.node.kernel = extern_kernels.convolution


op377: SchedulerNode(ComputedBuffer)
op377.writes = [MemoryDep('buf377', c0, {c0: 393216}, None)]
op377.unmet_dependencies = [MemoryDep('buf376', c0, {c0: 393216}, None)]
op377.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 8, c1: 768}, None)]
op377.outputs = [
    buf377: ComputedBuffer
    buf377.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf377.users = [NodeUser(node=ExternKernelSchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op377.group.device = cuda:0
op377.group.iteration = (393216, 1)
op377.sizes = ([8, 768, 64], [])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf377_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op377_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf376', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf376', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg197_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf377', get_index_4, mul_3, None)
        return store


op379: ExternKernelSchedulerNode(ExternKernelAlloc)
op379.writes = [StarDep(name='buf379', mode=None)]
op379.unmet_dependencies = [StarDep(name='buf377', mode=None), StarDep(name='buf378', mode=None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ExternKernelAlloc
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf379.users = [NodeUser(node=SchedulerNode(name='op380'), can_inplace=True, is_weak=False)]
]
op379.node.kernel = extern_kernels.convolution


op380: SchedulerNode(ComputedBuffer)
op380.writes = [MemoryDep('buf380', c0, {c0: 393216}, None)]
op380.unmet_dependencies = [MemoryDep('buf379', c0, {c0: 393216}, None)]
op380.met_dependencies = [MemoryDep('arg200_1', c1, {c0: 8, c1: 768}, None)]
op380.outputs = [
    buf380: ComputedBuffer
    buf380.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf380.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op380.group.device = cuda:0
op380.group.iteration = (393216, 1)
op380.sizes = ([8, 768, 64], [])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg200_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf380_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op380_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf379', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg200_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf379', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg200_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf380', get_index_4, mul_3, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelAlloc)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf380', mode=None), StarDep(name='buf381', mode=None)]
op382.met_dependencies = []
op382.outputs = [
    buf382: ExternKernelAlloc
    buf382.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op382.node.kernel = extern_kernels.convolution


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 393216}, None)]
op383.unmet_dependencies = [MemoryDep('buf382', c0, {c0: 393216}, None)]
op383.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 8, c1: 768}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op385'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (393216, 1)
op383.sizes = ([8, 768, 64], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op383_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf382', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg203_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf383', get_index_4, mul_3, None)
        return store


op385: ExternKernelSchedulerNode(ExternKernelAlloc)
op385.writes = [StarDep(name='buf385', mode=None)]
op385.unmet_dependencies = [StarDep(name='buf383', mode=None), StarDep(name='buf384', mode=None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ExternKernelAlloc
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf385.users = [
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=True, is_weak=False),
    ]
]
op385.node.kernel = extern_kernels.convolution


op386_op387: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op386_op387.writes = 
    [   MemoryDep('buf386', c0, {c0: 12288}, None),
        MemoryDep('buf387', c0, {c0: 12288}, None)]
op386_op387.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 786432}, None)]
op386_op387.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 8, c1: 1536}, None)]
op386_op387.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op386_op387.snodes[0] =
op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 12288}, None)]
op386.unmet_dependencies = [MemoryDep('buf385', c0, {c0: 786432}, None)]
op386.met_dependencies = [MemoryDep('arg206_1', c1, {c0: 8, c1: 1536}, None)]
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf386.users = [NodeUser(node=SchedulerNode(name='op387'), can_inplace=True, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (12288, 64)
op386.sizes = ([8, 1536], [64])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op386_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf386', get_index_2, reduction)
        return store_reduction
op386_op387.snodes[1] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 12288}, None)]
op387.unmet_dependencies = [MemoryDep('buf386', c0, {c0: 12288}, None)]
op387.met_dependencies = []
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf387.users = [NodeUser(node=ExternKernelSchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (12288, 1)
op387.sizes = ([12288], [])
buf386_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf387_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op387_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf386', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf387', get_index_1, truediv, None)
        return store


op388: ExternKernelSchedulerNode(ExternKernelAlloc)
op388.writes = [StarDep(name='buf388', mode=None)]
op388.unmet_dependencies = [StarDep(name='buf387', mode=None)]
op388.met_dependencies = [StarDep(name='arg207_1', mode=None)]
op388.outputs = [
    buf388: ExternKernelAlloc
    buf388.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf388.users = [NodeUser(node=SchedulerNode(name='op389'), can_inplace=True, is_weak=False)]
]
op388.node.kernel = extern_kernels.convolution


op389: SchedulerNode(ComputedBuffer)
op389.writes = [MemoryDep('buf389', c0, {c0: 6144}, None)]
op389.unmet_dependencies = [MemoryDep('buf388', c0, {c0: 6144}, None)]
op389.met_dependencies = [MemoryDep('arg208_1', c1, {c0: 8, c1: 768}, None)]
op389.outputs = [
    buf389: ComputedBuffer
    buf389.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf389.users = [NodeUser(node=ExternKernelSchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op389.group.device = cuda:0
op389.group.iteration = (6144, 1)
op389.sizes = ([8, 768], [])
buf388_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf389_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op389_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf388', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg208_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf389', get_index_2, relu, None)
        return store


op390: ExternKernelSchedulerNode(ExternKernelAlloc)
op390.writes = [StarDep(name='buf390', mode=None)]
op390.unmet_dependencies = [StarDep(name='buf389', mode=None)]
op390.met_dependencies = [StarDep(name='arg209_1', mode=None)]
op390.outputs = [
    buf390: ExternKernelAlloc
    buf390.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf390.users = [NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False)]
]
op390.node.kernel = extern_kernels.convolution


op391_op392: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op391_op392.writes = 
    [   MemoryDep('buf391', c0, {c0: 786432}, None),
        MemoryDep('buf392', c0, {c0: 786432}, None)]
op391_op392.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 786432}, None),
        MemoryDep('buf385', c0, {c0: 786432}, None),
        MemoryDep('buf390', c0, {c0: 12288}, None)]
op391_op392.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg210_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg211_1', 0, {}, None)]
op391_op392.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
    ]
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op391_op392.snodes[0] =
op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 786432}, None)]
op391.unmet_dependencies = 
    [   MemoryDep('buf373', c0, {c0: 786432}, None),
        MemoryDep('buf385', c0, {c0: 786432}, None),
        MemoryDep('buf390', c0, {c0: 12288}, None)]
op391.met_dependencies = 
    [   MemoryDep('arg206_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg210_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg211_1', 0, {}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
    ]
]
op391.group.device = cuda:0
op391.group.iteration = (786432, 1)
op391.sizes = ([8, 1536, 64], [])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg210_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op391_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf385', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg206_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf390', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg210_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg211_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf373', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf391', get_index_6, add_2, None)
        return store
op391_op392.snodes[1] =
op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 786432}, None)]
op392.unmet_dependencies = [MemoryDep('buf391', c0, {c0: 786432}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (786432, 1)
op392.sizes = ([786432], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op392_loop_body:
    var_ranges = {z0: 786432}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf391', get_index_1)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(load_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        constant_4 = ops.constant(0.9622504486493761, torch.float32)
        mul_4 = ops.mul(mul_3, constant_4)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf392', get_index_2, mul_4, None)
        return store


op394: ExternKernelSchedulerNode(ExternKernelAlloc)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf392', mode=None), StarDep(name='buf393', mode=None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ExternKernelAlloc
    buf394.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf394.users = [NodeUser(node=SchedulerNode(name='op395'), can_inplace=True, is_weak=False)]
]
op394.node.kernel = extern_kernels.convolution


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 393216}, None)]
op395.unmet_dependencies = [MemoryDep('buf394', c0, {c0: 393216}, None)]
op395.met_dependencies = [MemoryDep('arg214_1', c1, {c0: 8, c1: 768}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (393216, 1)
op395.sizes = ([8, 768, 64], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op395_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg214_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf394', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg214_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf395', get_index_4, mul_3, None)
        return store


op397: ExternKernelSchedulerNode(ExternKernelAlloc)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf395', mode=None), StarDep(name='buf396', mode=None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ExternKernelAlloc
    buf397.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False)]
]
op397.node.kernel = extern_kernels.convolution


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 393216}, None)]
op398.unmet_dependencies = [MemoryDep('buf397', c0, {c0: 393216}, None)]
op398.met_dependencies = [MemoryDep('arg217_1', c1, {c0: 8, c1: 768}, None)]
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (393216, 1)
op398.sizes = ([8, 768, 64], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf398_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op398_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf397', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg217_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf398', get_index_4, mul_3, None)
        return store


op400: ExternKernelSchedulerNode(ExternKernelAlloc)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf398', mode=None), StarDep(name='buf399', mode=None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ExternKernelAlloc
    buf400.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=True, is_weak=False)]
]
op400.node.kernel = extern_kernels.convolution


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 393216}, None)]
op401.unmet_dependencies = [MemoryDep('buf400', c0, {c0: 393216}, None)]
op401.met_dependencies = [MemoryDep('arg220_1', c1, {c0: 8, c1: 768}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op403'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (393216, 1)
op401.sizes = ([8, 768, 64], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 8, 8], stride=[49152, 64, 8, 1])
class op401_loop_body:
    var_ranges = {z0: 8, z1: 768, z2: 64}
    index0 = 49152*z0 + 64*z1 + z2
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg220_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf400', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg220_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf401', get_index_4, mul_3, None)
        return store


op403: ExternKernelSchedulerNode(ExternKernelAlloc)
op403.writes = [StarDep(name='buf403', mode=None)]
op403.unmet_dependencies = [StarDep(name='buf401', mode=None), StarDep(name='buf402', mode=None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ExternKernelAlloc
    buf403.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf403.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False),
    ]
]
op403.node.kernel = extern_kernels.convolution


op404_op405: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op404_op405.writes = 
    [   MemoryDep('buf404', c0, {c0: 12288}, None),
        MemoryDep('buf405', c0, {c0: 12288}, None)]
op404_op405.unmet_dependencies = [MemoryDep('buf403', c0, {c0: 786432}, None)]
op404_op405.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 8, c1: 1536}, None)]
op404_op405.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op404_op405.snodes[0] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 12288}, None)]
op404.unmet_dependencies = [MemoryDep('buf403', c0, {c0: 786432}, None)]
op404.met_dependencies = [MemoryDep('arg223_1', c1, {c0: 8, c1: 1536}, None)]
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
    buf404.users = [NodeUser(node=SchedulerNode(name='op405'), can_inplace=True, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (12288, 64)
op404.sizes = ([8, 1536], [64])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
class op404_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg223_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf404', get_index_2, reduction)
        return store_reduction
op404_op405.snodes[1] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 12288}, None)]
op405.unmet_dependencies = [MemoryDep('buf404', c0, {c0: 12288}, None)]
op405.met_dependencies = []
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf405.users = [NodeUser(node=ExternKernelSchedulerNode(name='op406'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (12288, 1)
op405.sizes = ([12288], [])
buf404_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 12288, 12288])
buf405_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
class op405_loop_body:
    var_ranges = {z0: 12288}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf404', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf405', get_index_1, truediv, None)
        return store


op406: ExternKernelSchedulerNode(ExternKernelAlloc)
op406.writes = [StarDep(name='buf406', mode=None)]
op406.unmet_dependencies = [StarDep(name='buf405', mode=None)]
op406.met_dependencies = [StarDep(name='arg224_1', mode=None)]
op406.outputs = [
    buf406: ExternKernelAlloc
    buf406.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf406.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False)]
]
op406.node.kernel = extern_kernels.convolution


op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 6144}, None)]
op407.unmet_dependencies = [MemoryDep('buf406', c0, {c0: 6144}, None)]
op407.met_dependencies = [MemoryDep('arg225_1', c1, {c0: 8, c1: 768}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (6144, 1)
op407.sizes = ([8, 768], [])
buf406_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[8, 768, 1, 1], stride=[768, 1, 1, 1])
class op407_loop_body:
    var_ranges = {z0: 8, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf406', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg225_1', get_index_1)
        add = ops.add(load, load_1)
        relu = ops.relu(add)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf407', get_index_2, relu, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelAlloc)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelAlloc
    buf408.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=False, is_weak=False)]
]
op408.node.kernel = extern_kernels.convolution


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 786432}, None)]
op409.unmet_dependencies = 
    [   MemoryDep('buf391', c0, {c0: 786432}, None),
        MemoryDep('buf403', c0, {c0: 786432}, None),
        MemoryDep('buf408', c0, {c0: 12288}, None)]
op409.met_dependencies = 
    [   MemoryDep('arg223_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg227_1', c1, {c0: 8, c1: 1536}, None),
        MemoryDep('arg228_1', 0, {}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op411'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (786432, 1)
op409.sizes = ([8, 1536, 64], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf408_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 1, 1], stride=[1536, 1, 1, 1])
arg227_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf391_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[8, 1536, 8, 8], stride=[98304, 64, 8, 1])
class op409_loop_body:
    var_ranges = {z0: 8, z1: 1536, z2: 64}
    index0 = 98304*z0 + 64*z1 + z2
    index1 = z1
    index2 = 1536*z0 + z1
    index3 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg223_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg227_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        sigmoid = ops.sigmoid(add_1)
        mul = ops.mul(add, sigmoid)
        constant = ops.constant(2.0, torch.float32)
        mul_1 = ops.mul(mul, constant)
        get_index_4 = self.get_index('index3')
        load_4 = ops.load('arg228_1', get_index_4)
        mul_2 = ops.mul(mul_1, load_4)
        constant_1 = ops.constant(0.2, torch.float32)
        mul_3 = ops.mul(mul_2, constant_1)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf391', get_index_5)
        add_2 = ops.add(mul_3, load_5)
        get_index_6 = self.get_index('index0')
        store = ops.store('buf409', get_index_6, add_2, None)
        return store


op411: ExternKernelSchedulerNode(ExternKernelAlloc)
op411.writes = [StarDep(name='buf411', mode=None)]
op411.unmet_dependencies = [StarDep(name='buf409', mode=None), StarDep(name='buf410', mode=None)]
op411.met_dependencies = []
op411.outputs = [
    buf411: ExternKernelAlloc
    buf411.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 8, 8], stride=[196608, 64, 8, 1])
    buf411.users = [NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False)]
]
op411.node.kernel = extern_kernels.convolution


op412_op413: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op412_op413.writes = 
    [   MemoryDep('buf412', c0, {c0: 24576}, None),
        MemoryDep('buf413', c0, {c0: 24576}, None)]
op412_op413.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 1572864}, None)]
op412_op413.met_dependencies = [MemoryDep('arg231_1', c1, {c0: 8, c1: 3072}, None)]
op412_op413.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op412_op413.snodes[0] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 24576}, None)]
op412.unmet_dependencies = [MemoryDep('buf411', c0, {c0: 1572864}, None)]
op412.met_dependencies = [MemoryDep('arg231_1', c1, {c0: 8, c1: 3072}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
    buf412.users = [NodeUser(node=SchedulerNode(name='op413'), can_inplace=True, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (24576, 64)
op412.sizes = ([8, 3072], [64])
buf411_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 8, 8], stride=[196608, 64, 8, 1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
class op412_loop_body:
    var_ranges = {z0: 8, z1: 3072, z2: 64}
    index0 = 196608*z0 + 64*z1 + z2
    index1 = z1
    index2 = 3072*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf411', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg231_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf411', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg231_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        constant_3 = ops.constant(1.7015043497085571, torch.float32)
        mul_3 = ops.mul(mul_2, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', mul_3)
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf412', get_index_4, reduction)
        return store_reduction
op412_op413.snodes[1] =
op413: SchedulerNode(ComputedBuffer)
op413.writes = [MemoryDep('buf413', c0, {c0: 24576}, None)]
op413.unmet_dependencies = [MemoryDep('buf412', c0, {c0: 24576}, None)]
op413.met_dependencies = []
op413.outputs = [
    buf413: ComputedBuffer
    buf413.layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
    buf413.users = [NodeUser(node=ExternKernelSchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op413.group.device = cuda:0
op413.group.iteration = (24576, 1)
op413.sizes = ([24576], [])
buf412_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
buf413_layout = FixedLayout('cuda', torch.float32, size=[8, 3072, 1, 1], stride=[3072, 1, 24576, 24576])
class op413_loop_body:
    var_ranges = {z0: 24576}
    index0 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf412', get_index)
        constant = ops.constant(64.0, torch.float32)
        truediv = ops.truediv(load, constant)
        get_index_1 = self.get_index('index0')
        store = ops.store('buf413', get_index_1, truediv, None)
        return store


op414: ExternKernelSchedulerNode(ExternKernelOut)
op414.writes = [StarDep(name='buf414', mode=None)]
op414.unmet_dependencies = [StarDep(name='buf413', mode=None)]
op414.met_dependencies = [StarDep(name='arg232_1', mode=None), StarDep(name='arg233_1', mode=None)]
op414.outputs = [
    buf414: ExternKernelOut
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf414.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op414.node.kernel = extern_kernels.addmm



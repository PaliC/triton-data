op0: SchedulerNode(ComputedBuffer)
op0.writes = [MemoryDep('buf0', c0, {c0: 12582912}, None)]
op0.unmet_dependencies = []
op0.met_dependencies = 
    [   MemoryDep('arg0_1', c0, {c0: 16384}, None),
        MemoryDep('arg1_1', c1, {c0: 32, c1: 512}, None),
        MemoryDep('arg283_1', c1, {c0: 32, c1: 512}, None),
        MemoryDep('arg2_1', c1 + 768*tmp0, {c0: 16384, c1: 768}, None),
        MemoryDep('arg3_1', c1 + 768*tmp2, {c0: 16384, c1: 768}, None),
        MemoryDep('arg4_1', c1 + 768*tmp5, {c0: 16384, c1: 768}, None)]
op0.outputs = [
    buf0: ComputedBuffer
    buf0.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=True, is_weak=False),
    ]
]
op0.group.device = cuda:0
op0.group.iteration = (12582912, 1)
op0.sizes = ([32, 512, 768], [])
arg0_1_layout = FixedLayout('cuda', torch.int64, size=[32, 512], stride=[512, 1])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 768], stride=[768, 1])
arg283_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[512, 768], stride=[768, 1])
arg1_1_layout = FixedLayout('cuda', torch.int64, size=[1, 512], stride=[512, 1])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[2, 768], stride=[768, 1])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op0_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 768}
    index0 = 512*z0 + z1
    index1 = 768*indirect0 + z2
    index2 = z1
    index3 = 768*indirect1 + z2
    index4 = 768*indirect2 + z2
    index5 = 393216*z0 + 768*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg0_1', get_index)
        set_indirect0 = self.set_indirect0(load)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg2_1', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg283_1', get_index_2)
        set_indirect1 = self.set_indirect1(load_2)
        get_index_3 = self.get_index('index3')
        load_3 = ops.load('arg3_1', get_index_3)
        add = ops.add(load_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg1_1', get_index_4)
        set_indirect2 = self.set_indirect2(load_4)
        get_index_5 = self.get_index('index4')
        load_5 = ops.load('arg4_1', get_index_5)
        add_1 = ops.add(add, load_5)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf0', get_index_6, add_1, None)
        return store
op0 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*i64', 3: '*fp32', 4: '*i64', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x3 = (xindex // 768)
        x0 = xindex % 768
        x1 = (xindex // 768) % 512
        x4 = xindex
        tmp0 = tl.load(in_ptr0 + (x3), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp15 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp1 = tl.full([XBLOCK], 30522, tl.int32)
        tmp2 = tmp0 + tmp1
        tmp3 = tmp0 < 0
        tmp4 = tl.where(tmp3, tmp2, tmp0)
        tl.device_assert((0 <= tmp4) & (tmp4 < 30522), "index out of bounds: 0 <= tmp4 < 30522")
        tmp6 = tl.load(in_ptr1 + (x0 + (768*tmp4)), None)
        tmp8 = tl.full([XBLOCK], 512, tl.int32)
        tmp9 = tmp7 + tmp8
        tmp10 = tmp7 < 0
        tmp11 = tl.where(tmp10, tmp9, tmp7)
        tl.device_assert((0 <= tmp11) & (tmp11 < 512), "index out of bounds: 0 <= tmp11 < 512")
        tmp13 = tl.load(in_ptr3 + (x0 + (768*tmp11)), None)
        tmp14 = tmp6 + tmp13
        tmp16 = tl.full([XBLOCK], 2, tl.int32)
        tmp17 = tmp15 + tmp16
        tmp18 = tmp15 < 0
        tmp19 = tl.where(tmp18, tmp17, tmp15)
        tl.device_assert((0 <= tmp19) & (tmp19 < 2), "index out of bounds: 0 <= tmp19 < 2")
        tmp21 = tl.load(in_ptr5 + (x0 + (768*tmp19)), None)
        tmp22 = tmp14 + tmp21
        tl.store(out_ptr0 + (x4), tmp22, None)


op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 16384}, None)]
op1.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 12582912}, None)]
op1.met_dependencies = []
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf1.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op1.group.device = cuda:0
op1.group.iteration = (16384, 768)
op1.sizes = ([16384], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op1_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf1', get_index_1, getitem)
        return store_reduction
op1 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp6 = tl.where(rmask, tmp4, 0)
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp8 = tl.full([1], 768, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp1 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = tl.where(rmask, tmp13, 0)
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp10, None)


op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 16384}, None)]
op2.unmet_dependencies = [MemoryDep('buf0', c0, {c0: 12582912}, None)]
op2.met_dependencies = []
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf2.users = [NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False)]
]
op2.group.device = cuda:0
op2.group.iteration = (16384, 768)
op2.sizes = ([16384], [768])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op2_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf2', get_index_1, getitem_1)
        return store_reduction
op2 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 1, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.broadcast_to(tmp0, [RBLOCK])
        tmp3 = tl.where(rmask, tmp1, 0)
        tmp4 = tl.broadcast_to(tmp1, [RBLOCK])
        tmp6 = tl.where(rmask, tmp4, 0)
        tmp7 = triton_helpers.promote_to_tensor(tl.sum(tmp6, 0))
        tmp8 = tl.full([1], 768, tl.int32)
        tmp9 = tmp8.to(tl.float32)
        tmp10 = tmp7 / tmp9
        tmp11 = tmp1 - tmp10
        tmp12 = tmp11 * tmp11
        tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
        tmp15 = tl.where(rmask, tmp13, 0)
        tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
        tl.store(out_ptr0 + (x0), tmp16, None)


op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 12582912}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf0', c0, {c0: 12582912}, None),
        MemoryDep('buf1', c0, {c0: 16384}, None),
        MemoryDep('buf2', c0, {c0: 16384}, None)]
op4.met_dependencies = 
    [   MemoryDep('arg5_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg6_1', c1, {c0: 16384, c1: 768}, None)]
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf4.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op6'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op4.group.device = cuda:0
op4.group.iteration = (12582912, 1)
op4.sizes = ([16384, 768], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf2_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg6_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op4_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf0', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf1', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf2', get_index_2)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg5_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg6_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf4', get_index_5, add_1, None)
        return store
op4 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 5, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 768)
        x0 = xindex % 768
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp10 = tl.load(in_ptr3 + (x0), None, eviction_policy='evict_last')
        tmp12 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 - tmp1
        tmp4 = 768.0
        tmp5 = tmp3 / tmp4
        tmp6 = 1e-12
        tmp7 = tmp5 + tmp6
        tmp8 = libdevice.rsqrt(tmp7)
        tmp9 = tmp2 * tmp8
        tmp11 = tmp9 * tmp10
        tmp13 = tmp11 + tmp12
        tl.store(out_ptr0 + (x2), tmp13, None)


op5: ExternKernelSchedulerNode(ExternKernelOut)
op5.writes = [StarDep(name='buf5', mode=None)]
op5.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op5.met_dependencies = [StarDep(name='arg7_1', mode=None), StarDep(name='arg8_1', mode=None)]
op5.outputs = [
    buf5: ExternKernelOut
    buf5.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf5.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=True, is_weak=False),
    ]
]
op5.node.kernel = extern_kernels.addmm


op6: ExternKernelSchedulerNode(ExternKernelOut)
op6.writes = [StarDep(name='buf6', mode=None)]
op6.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op6.met_dependencies = [StarDep(name='arg10_1', mode=None), StarDep(name='arg9_1', mode=None)]
op6.outputs = [
    buf6: ExternKernelOut
    buf6.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf6.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op6.node.kernel = extern_kernels.addmm


op7: ExternKernelSchedulerNode(ExternKernelOut)
op7.writes = [StarDep(name='buf7', mode=None)]
op7.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op7.met_dependencies = [StarDep(name='arg11_1', mode=None), StarDep(name='arg12_1', mode=None)]
op7.outputs = [
    buf7: ExternKernelOut
    buf7.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.node.kernel = extern_kernels.addmm


op8: ExternKernelSchedulerNode(FallbackKernel)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = 
    [   StarDep(name='buf5', mode=None),
        StarDep(name='buf6', mode=None),
        StarDep(name='buf7', mode=None)]
op8.met_dependencies = []
op8.outputs = [
    buf8: FallbackKernel
    buf8.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf8.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op12'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op9: ExternKernelSchedulerNode(MultiOutput)
op9.writes = [StarDep(name='buf9', mode=None)]
op9.unmet_dependencies = [StarDep(name='buf8', mode=None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: MultiOutput
    buf9.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf9.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op9.node.kernel = None


op13: ExternKernelSchedulerNode(ExternKernelOut)
op13.writes = [StarDep(name='buf13', mode=None)]
op13.unmet_dependencies = [StarDep(name='buf4', mode=None)]
op13.met_dependencies = [StarDep(name='arg18_1', mode=None)]
op13.outputs = [
    buf13: ExternKernelOut
    buf13.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf13.users = [NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False)]
]
op13.node.kernel = extern_kernels.mm


op14: SchedulerNode(ComputedBuffer)
op14.writes = [MemoryDep('buf14', c0, {c0: 12582912}, None)]
op14.unmet_dependencies = [MemoryDep('buf4', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op14.met_dependencies = []
op14.outputs = [
    buf14: ComputedBuffer
    buf14.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf14.users = [NodeUser(node=ExternKernelSchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op14.group.device = cuda:0
op14.group.iteration = (12582912, 1)
op14.sizes = ([32, 768, 512], [])
buf4_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf14_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op14_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf4', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf14', get_index_1, load, None)
        return store
op14 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op15: ExternKernelSchedulerNode(ExternKernelAlloc)
op15.writes = [StarDep(name='buf15', mode=None)]
op15.unmet_dependencies = [StarDep(name='buf14', mode=None)]
op15.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op15.outputs = [
    buf15: ExternKernelAlloc
    buf15.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf15.users = [NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False)]
]
op15.node.kernel = extern_kernels.convolution


op16: ExternKernelSchedulerNode(ExternKernelAlloc)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelAlloc
    buf16.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf16.users = [NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False)]
]
op16.node.kernel = extern_kernels.convolution


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 6291456}, None)]
op17.unmet_dependencies = 
    [   MemoryDep('buf16', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None),
        MemoryDep('buf5', c0, {c0: 6291456}, None)]
op17.met_dependencies = [MemoryDep('arg13_1', c1, {c0: 16384, c1: 384}, None)]
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op18'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (6291456, 1)
op17.sizes = ([32, 512, 384], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op17_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg13_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf5', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf17', get_index_3, mul, None)
        return store
op17 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op18: ExternKernelSchedulerNode(ExternKernelOut)
op18.writes = [StarDep(name='buf18', mode=None)]
op18.unmet_dependencies = [StarDep(name='buf17', mode=None)]
op18.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op18.outputs = [
    buf18: ExternKernelOut
    buf18.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf18.users = [
        NodeUser(node=SchedulerNode(name='op19'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=True, is_weak=False),
    ]
]
op18.node.kernel = extern_kernels.mm


op19: SchedulerNode(ComputedBuffer)
op19.writes = [MemoryDep('buf19', c0, {c0: 98304}, None)]
op19.unmet_dependencies = [MemoryDep('buf18', c0, {c0: 884736}, None)]
op19.met_dependencies = [MemoryDep('arg17_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op19.outputs = [
    buf19: ComputedBuffer
    buf19.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False),
    ]
]
op19.group.device = cuda:0
op19.group.iteration = (98304, 9)
op19.sizes = ([98304], [9])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op19_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf19', get_index_2, reduction)
        return store_reduction
op19 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 98304}, None)]
op20.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 884736}, None),
        MemoryDep('buf19', c0, {c0: 98304}, None)]
op20.met_dependencies = [MemoryDep('arg17_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf20.users = [NodeUser(node=SchedulerNode(name='op22'), can_inplace=False, is_weak=False)]
]
op20.group.device = cuda:0
op20.group.iteration = (98304, 9)
op20.sizes = ([98304], [9])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf20_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op20_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf19', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf20', get_index_3, reduction)
        return store_reduction
op20 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 56623104}, None)]
op21.unmet_dependencies = [MemoryDep('buf13', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op21.met_dependencies = [MemoryDep('arg19_1', c1, {c0: 16384, c1: 384}, None)]
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf21.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (56623104, 1)
op21.sizes = ([32, 512, 384, 9], [])
buf13_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf21_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op21_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf21', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf13', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg19_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op21 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op22: SchedulerNode(ComputedBuffer)
op22.writes = [MemoryDep('buf22', c0, {c0: 884736}, None)]
op22.unmet_dependencies = 
    [   MemoryDep('buf18', c0, {c0: 884736}, None),
        MemoryDep('buf19', c0, {c0: 98304}, None),
        MemoryDep('buf20', c0, {c0: 98304}, None)]
op22.met_dependencies = [MemoryDep('arg17_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op22.outputs = [
    buf22: ComputedBuffer
    buf22.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf22.users = [NodeUser(node=ExternKernelSchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op22.group.device = cuda:0
op22.group.iteration = (884736, 1)
op22.sizes = ([98304, 9], [])
buf18_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf19_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf20_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf22_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op22_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf18', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg17_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf19', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf20', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf22', get_index_4, truediv, None)
        return store
op22 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op23: ExternKernelSchedulerNode(ExternKernelOut)
op23.writes = [StarDep(name='buf23', mode=None)]
op23.unmet_dependencies = [StarDep(name='buf21', mode=None), StarDep(name='buf22', mode=None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ExternKernelOut
    buf23.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf23.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op23.node.kernel = extern_kernels.bmm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 12582912}, None)]
op24.unmet_dependencies = 
    [   MemoryDep('buf23', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf9', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (12582912, 1)
op24.sizes = ([16384, 12, 64], [])
buf9_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf23_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op24_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf24', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf9', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf23', get_index)
        return load
op24 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf24', mode=None)]
op25.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf25.users = [
        NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op27'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=True, is_weak=False),
    ]
]
op25.node.kernel = extern_kernels.mm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 16384}, None)]
op26.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 12582912}, None),
        MemoryDep('buf4', c0, {c0: 12582912}, None)]
op26.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 16384, c1: 768}, None)]
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf26.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (16384, 768)
op26.sizes = ([16384], [768])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op26_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf26', get_index_3, getitem)
        return store_reduction
op26 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op27: SchedulerNode(ComputedBuffer)
op27.writes = [MemoryDep('buf27', c0, {c0: 16384}, None)]
op27.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 12582912}, None),
        MemoryDep('buf4', c0, {c0: 12582912}, None)]
op27.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 16384, c1: 768}, None)]
op27.outputs = [
    buf27: ComputedBuffer
    buf27.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf27.users = [NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False)]
]
op27.group.device = cuda:0
op27.group.iteration = (16384, 768)
op27.sizes = ([16384], [768])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op27_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf27', get_index_3, getitem_1)
        return store_reduction
op27 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 12582912}, None)]
op29.unmet_dependencies = 
    [   MemoryDep('buf25', c0, {c0: 12582912}, None),
        MemoryDep('buf26', c0, {c0: 16384}, None),
        MemoryDep('buf27', c0, {c0: 16384}, None),
        MemoryDep('buf4', c0, {c0: 12582912}, None)]
op29.met_dependencies = 
    [   MemoryDep('arg21_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg22_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg23_1', c1, {c0: 16384, c1: 768}, None)]
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf29.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op29.group.device = cuda:0
op29.group.iteration = (12582912, 1)
op29.sizes = ([16384, 768], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf27_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg22_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op29_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf4', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf26', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf27', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg22_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg23_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf29', get_index_7, add_3, None)
        return store
op29 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op30: ExternKernelSchedulerNode(ExternKernelOut)
op30.writes = [StarDep(name='buf30', mode=None)]
op30.unmet_dependencies = [StarDep(name='buf29', mode=None)]
op30.met_dependencies = [StarDep(name='arg24_1', mode=None)]
op30.outputs = [
    buf30: ExternKernelOut
    buf30.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf30.users = [NodeUser(node=SchedulerNode(name='op31'), can_inplace=True, is_weak=False)]
]
op30.node.kernel = extern_kernels.mm


op31: SchedulerNode(ComputedBuffer)
op31.writes = [MemoryDep('buf31', c0, {c0: 50331648}, None)]
op31.unmet_dependencies = [MemoryDep('buf30', c0, {c0: 50331648}, None)]
op31.met_dependencies = [MemoryDep('arg25_1', c1, {c0: 16384, c1: 3072}, None)]
op31.outputs = [
    buf31: ComputedBuffer
    buf31.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf31.users = [NodeUser(node=ExternKernelSchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op31.group.device = cuda:0
op31.group.iteration = (50331648, 1)
op31.sizes = ([16384, 3072], [])
buf30_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf31_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op31_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf30', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg25_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf30', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg25_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf31', get_index_4, mul_2, None)
        return store
op31 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op32: ExternKernelSchedulerNode(ExternKernelOut)
op32.writes = [StarDep(name='buf32', mode=None)]
op32.unmet_dependencies = [StarDep(name='buf31', mode=None)]
op32.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op32.outputs = [
    buf32: ExternKernelOut
    buf32.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf32.users = [
        NodeUser(node=SchedulerNode(name='op33'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op34'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op35'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=True, is_weak=False),
    ]
]
op32.node.kernel = extern_kernels.mm


op33: SchedulerNode(ComputedBuffer)
op33.writes = [MemoryDep('buf33', c0, {c0: 16384}, None)]
op33.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 12582912}, None),
        MemoryDep('buf32', c0, {c0: 12582912}, None)]
op33.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 16384, c1: 768}, None)]
op33.outputs = [
    buf33: ComputedBuffer
    buf33.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf33.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op33.group.device = cuda:0
op33.group.iteration = (16384, 768)
op33.sizes = ([16384], [768])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op33_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf33', get_index_3, getitem)
        return store_reduction
op33 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 16384}, None)]
op34.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 12582912}, None),
        MemoryDep('buf32', c0, {c0: 12582912}, None)]
op34.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 16384, c1: 768}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf34.users = [NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (16384, 768)
op34.sizes = ([16384], [768])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op34_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf34', get_index_3, getitem_1)
        return store_reduction
op34 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 12582912}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf29', c0, {c0: 12582912}, None),
        MemoryDep('buf32', c0, {c0: 12582912}, None),
        MemoryDep('buf33', c0, {c0: 16384}, None),
        MemoryDep('buf34', c0, {c0: 16384}, None)]
op36.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg28_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg29_1', c1, {c0: 16384, c1: 768}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf36.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op39'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op46'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op36.group.device = cuda:0
op36.group.iteration = (12582912, 1)
op36.sizes = ([16384, 768], [])
buf32_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf33_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf34_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op36_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf32', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg27_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf29', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf33', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf34', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg28_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg29_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf36', get_index_7, add_3, None)
        return store
op36 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op37: ExternKernelSchedulerNode(ExternKernelOut)
op37.writes = [StarDep(name='buf37', mode=None)]
op37.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op37.met_dependencies = [StarDep(name='arg30_1', mode=None), StarDep(name='arg31_1', mode=None)]
op37.outputs = [
    buf37: ExternKernelOut
    buf37.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf37.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=True, is_weak=False),
    ]
]
op37.node.kernel = extern_kernels.addmm


op38: ExternKernelSchedulerNode(ExternKernelOut)
op38.writes = [StarDep(name='buf38', mode=None)]
op38.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op38.met_dependencies = [StarDep(name='arg32_1', mode=None), StarDep(name='arg33_1', mode=None)]
op38.outputs = [
    buf38: ExternKernelOut
    buf38.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf38.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op38.node.kernel = extern_kernels.addmm


op39: ExternKernelSchedulerNode(ExternKernelOut)
op39.writes = [StarDep(name='buf39', mode=None)]
op39.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op39.met_dependencies = [StarDep(name='arg34_1', mode=None), StarDep(name='arg35_1', mode=None)]
op39.outputs = [
    buf39: ExternKernelOut
    buf39.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf39.users = [NodeUser(node=ExternKernelSchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op39.node.kernel = extern_kernels.addmm


op40: ExternKernelSchedulerNode(FallbackKernel)
op40.writes = [StarDep(name='buf40', mode=None)]
op40.unmet_dependencies = 
    [   StarDep(name='buf37', mode=None),
        StarDep(name='buf38', mode=None),
        StarDep(name='buf39', mode=None)]
op40.met_dependencies = []
op40.outputs = [
    buf40: FallbackKernel
    buf40.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf40.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op44'), can_inplace=False, is_weak=False),
    ]
]
op40.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op41: ExternKernelSchedulerNode(MultiOutput)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = []
op41.outputs = [
    buf41: MultiOutput
    buf41.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf41.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op41.node.kernel = None


op45: ExternKernelSchedulerNode(ExternKernelOut)
op45.writes = [StarDep(name='buf45', mode=None)]
op45.unmet_dependencies = [StarDep(name='buf36', mode=None)]
op45.met_dependencies = [StarDep(name='arg41_1', mode=None)]
op45.outputs = [
    buf45: ExternKernelOut
    buf45.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op53'), can_inplace=False, is_weak=False)]
]
op45.node.kernel = extern_kernels.mm


op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 12582912}, None)]
op46.unmet_dependencies = [MemoryDep('buf36', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op46.met_dependencies = []
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf46.users = [NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False)]
]
op46.group.device = cuda:0
op46.group.iteration = (12582912, 1)
op46.sizes = ([32, 768, 512], [])
buf36_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op46_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf36', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf46', get_index_1, load, None)
        return store
op46 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op47: ExternKernelSchedulerNode(ExternKernelAlloc)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg37_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelAlloc
    buf47.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf47.users = [NodeUser(node=ExternKernelSchedulerNode(name='op48'), can_inplace=False, is_weak=False)]
]
op47.node.kernel = extern_kernels.convolution


op48: ExternKernelSchedulerNode(ExternKernelAlloc)
op48.writes = [StarDep(name='buf48', mode=None)]
op48.unmet_dependencies = [StarDep(name='buf47', mode=None)]
op48.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op48.outputs = [
    buf48: ExternKernelAlloc
    buf48.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf48.users = [NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False)]
]
op48.node.kernel = extern_kernels.convolution


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 6291456}, None)]
op49.unmet_dependencies = 
    [   MemoryDep('buf37', c0, {c0: 6291456}, None),
        MemoryDep('buf48', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op49.met_dependencies = [MemoryDep('arg36_1', c1, {c0: 16384, c1: 384}, None)]
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (6291456, 1)
op49.sizes = ([32, 512, 384], [])
buf48_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg36_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op49_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf48', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg36_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf37', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf49', get_index_3, mul, None)
        return store
op49 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf49', mode=None)]
op50.met_dependencies = [StarDep(name='arg39_1', mode=None)]
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=True, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.mm


op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', c0, {c0: 98304}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 884736}, None)]
op51.met_dependencies = [MemoryDep('arg40_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (98304, 9)
op51.sizes = ([98304], [9])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op51_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf51', get_index_2, reduction)
        return store_reduction
op51 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', c0, {c0: 98304}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 884736}, None),
        MemoryDep('buf51', c0, {c0: 98304}, None)]
op52.met_dependencies = [MemoryDep('arg40_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (98304, 9)
op52.sizes = ([98304], [9])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf52_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op52_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf51', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf52', get_index_3, reduction)
        return store_reduction
op52 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op53: SchedulerNode(ComputedBuffer)
op53.writes = [MemoryDep('buf53', c0, {c0: 56623104}, None)]
op53.unmet_dependencies = [MemoryDep('buf45', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op53.met_dependencies = [MemoryDep('arg42_1', c1, {c0: 16384, c1: 384}, None)]
op53.outputs = [
    buf53: ComputedBuffer
    buf53.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf53.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.group.device = cuda:0
op53.group.iteration = (56623104, 1)
op53.sizes = ([32, 512, 384, 9], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg42_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf53_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op53_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf53', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg42_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op53 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', c0, {c0: 884736}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 884736}, None),
        MemoryDep('buf51', c0, {c0: 98304}, None),
        MemoryDep('buf52', c0, {c0: 98304}, None)]
op54.met_dependencies = [MemoryDep('arg40_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (884736, 1)
op54.sizes = ([98304, 9], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf52_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf54_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op54_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg40_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf51', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf52', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf54', get_index_4, truediv, None)
        return store
op54 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op55: ExternKernelSchedulerNode(ExternKernelOut)
op55.writes = [StarDep(name='buf55', mode=None)]
op55.unmet_dependencies = [StarDep(name='buf53', mode=None), StarDep(name='buf54', mode=None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ExternKernelOut
    buf55.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf55.users = [NodeUser(node=SchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.node.kernel = extern_kernels.bmm


op56: SchedulerNode(ComputedBuffer)
op56.writes = [MemoryDep('buf56', c0, {c0: 12582912}, None)]
op56.unmet_dependencies = 
    [   MemoryDep('buf41', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf55', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ComputedBuffer
    buf56.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf56.users = [NodeUser(node=ExternKernelSchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.group.device = cuda:0
op56.group.iteration = (12582912, 1)
op56.sizes = ([16384, 12, 64], [])
buf41_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf56_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op56_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf56', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf41', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf55', get_index)
        return load
op56 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op57: ExternKernelSchedulerNode(ExternKernelOut)
op57.writes = [StarDep(name='buf57', mode=None)]
op57.unmet_dependencies = [StarDep(name='buf56', mode=None)]
op57.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op57.outputs = [
    buf57: ExternKernelOut
    buf57.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf57.users = [
        NodeUser(node=SchedulerNode(name='op58'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=True, is_weak=False),
    ]
]
op57.node.kernel = extern_kernels.mm


op58: SchedulerNode(ComputedBuffer)
op58.writes = [MemoryDep('buf58', c0, {c0: 16384}, None)]
op58.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 12582912}, None),
        MemoryDep('buf57', c0, {c0: 12582912}, None)]
op58.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 16384, c1: 768}, None)]
op58.outputs = [
    buf58: ComputedBuffer
    buf58.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf58.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op58.group.device = cuda:0
op58.group.iteration = (16384, 768)
op58.sizes = ([16384], [768])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op58_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf58', get_index_3, getitem)
        return store_reduction
op58 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 16384}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 12582912}, None),
        MemoryDep('buf57', c0, {c0: 12582912}, None)]
op59.met_dependencies = [MemoryDep('arg44_1', c1, {c0: 16384, c1: 768}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf59.users = [NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False)]
]
op59.group.device = cuda:0
op59.group.iteration = (16384, 768)
op59.sizes = ([16384], [768])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op59_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf59', get_index_3, getitem_1)
        return store_reduction
op59 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 12582912}, None)]
op61.unmet_dependencies = 
    [   MemoryDep('buf36', c0, {c0: 12582912}, None),
        MemoryDep('buf57', c0, {c0: 12582912}, None),
        MemoryDep('buf58', c0, {c0: 16384}, None),
        MemoryDep('buf59', c0, {c0: 16384}, None)]
op61.met_dependencies = 
    [   MemoryDep('arg44_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg45_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg46_1', c1, {c0: 16384, c1: 768}, None)]
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf61.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op61.group.device = cuda:0
op61.group.iteration = (12582912, 1)
op61.sizes = ([16384, 768], [])
buf57_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg44_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf59_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op61_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf57', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg44_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf36', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf58', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf59', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg45_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg46_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf61', get_index_7, add_3, None)
        return store
op61 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op62: ExternKernelSchedulerNode(ExternKernelOut)
op62.writes = [StarDep(name='buf62', mode=None)]
op62.unmet_dependencies = [StarDep(name='buf61', mode=None)]
op62.met_dependencies = [StarDep(name='arg47_1', mode=None)]
op62.outputs = [
    buf62: ExternKernelOut
    buf62.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf62.users = [NodeUser(node=SchedulerNode(name='op63'), can_inplace=True, is_weak=False)]
]
op62.node.kernel = extern_kernels.mm


op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 50331648}, None)]
op63.unmet_dependencies = [MemoryDep('buf62', c0, {c0: 50331648}, None)]
op63.met_dependencies = [MemoryDep('arg48_1', c1, {c0: 16384, c1: 3072}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf63.users = [NodeUser(node=ExternKernelSchedulerNode(name='op64'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (50331648, 1)
op63.sizes = ([16384, 3072], [])
buf62_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg48_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op63_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf62', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg48_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf62', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg48_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf63', get_index_4, mul_2, None)
        return store
op63 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op64: ExternKernelSchedulerNode(ExternKernelOut)
op64.writes = [StarDep(name='buf64', mode=None)]
op64.unmet_dependencies = [StarDep(name='buf63', mode=None)]
op64.met_dependencies = [StarDep(name='arg49_1', mode=None)]
op64.outputs = [
    buf64: ExternKernelOut
    buf64.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf64.users = [
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=True, is_weak=False),
    ]
]
op64.node.kernel = extern_kernels.mm


op65: SchedulerNode(ComputedBuffer)
op65.writes = [MemoryDep('buf65', c0, {c0: 16384}, None)]
op65.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 12582912}, None),
        MemoryDep('buf64', c0, {c0: 12582912}, None)]
op65.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 16384, c1: 768}, None)]
op65.outputs = [
    buf65: ComputedBuffer
    buf65.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf65.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op65.group.device = cuda:0
op65.group.iteration = (16384, 768)
op65.sizes = ([16384], [768])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op65_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf65', get_index_3, getitem)
        return store_reduction
op65 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 16384}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 12582912}, None),
        MemoryDep('buf64', c0, {c0: 12582912}, None)]
op66.met_dependencies = [MemoryDep('arg50_1', c1, {c0: 16384, c1: 768}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf66.users = [NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False)]
]
op66.group.device = cuda:0
op66.group.iteration = (16384, 768)
op66.sizes = ([16384], [768])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op66_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf66', get_index_3, getitem_1)
        return store_reduction
op66 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 12582912}, None)]
op68.unmet_dependencies = 
    [   MemoryDep('buf61', c0, {c0: 12582912}, None),
        MemoryDep('buf64', c0, {c0: 12582912}, None),
        MemoryDep('buf65', c0, {c0: 16384}, None),
        MemoryDep('buf66', c0, {c0: 16384}, None)]
op68.met_dependencies = 
    [   MemoryDep('arg50_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg51_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg52_1', c1, {c0: 16384, c1: 768}, None)]
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf68.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op69'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op77'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op78'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op68.group.device = cuda:0
op68.group.iteration = (12582912, 1)
op68.sizes = ([16384, 768], [])
buf64_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg50_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf65_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf66_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op68_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf64', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg50_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf61', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf65', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf66', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg51_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg52_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf68', get_index_7, add_3, None)
        return store
op68 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op69: ExternKernelSchedulerNode(ExternKernelOut)
op69.writes = [StarDep(name='buf69', mode=None)]
op69.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op69.met_dependencies = [StarDep(name='arg53_1', mode=None), StarDep(name='arg54_1', mode=None)]
op69.outputs = [
    buf69: ExternKernelOut
    buf69.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf69.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=True, is_weak=False),
    ]
]
op69.node.kernel = extern_kernels.addmm


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op70.met_dependencies = [StarDep(name='arg55_1', mode=None), StarDep(name='arg56_1', mode=None)]
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf70.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op70.node.kernel = extern_kernels.addmm


op71: ExternKernelSchedulerNode(ExternKernelOut)
op71.writes = [StarDep(name='buf71', mode=None)]
op71.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op71.met_dependencies = [StarDep(name='arg57_1', mode=None), StarDep(name='arg58_1', mode=None)]
op71.outputs = [
    buf71: ExternKernelOut
    buf71.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf71.users = [NodeUser(node=ExternKernelSchedulerNode(name='op72'), can_inplace=False, is_weak=False)]
]
op71.node.kernel = extern_kernels.addmm


op72: ExternKernelSchedulerNode(FallbackKernel)
op72.writes = [StarDep(name='buf72', mode=None)]
op72.unmet_dependencies = 
    [   StarDep(name='buf69', mode=None),
        StarDep(name='buf70', mode=None),
        StarDep(name='buf71', mode=None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: FallbackKernel
    buf72.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf72.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op74'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op75'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False),
    ]
]
op72.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op73: ExternKernelSchedulerNode(MultiOutput)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf72', mode=None)]
op73.met_dependencies = []
op73.outputs = [
    buf73: MultiOutput
    buf73.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = None


op77: ExternKernelSchedulerNode(ExternKernelOut)
op77.writes = [StarDep(name='buf77', mode=None)]
op77.unmet_dependencies = [StarDep(name='buf68', mode=None)]
op77.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op77.outputs = [
    buf77: ExternKernelOut
    buf77.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf77.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=False, is_weak=False)]
]
op77.node.kernel = extern_kernels.mm


op78: SchedulerNode(ComputedBuffer)
op78.writes = [MemoryDep('buf78', c0, {c0: 12582912}, None)]
op78.unmet_dependencies = [MemoryDep('buf68', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op78.met_dependencies = []
op78.outputs = [
    buf78: ComputedBuffer
    buf78.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf78.users = [NodeUser(node=ExternKernelSchedulerNode(name='op79'), can_inplace=False, is_weak=False)]
]
op78.group.device = cuda:0
op78.group.iteration = (12582912, 1)
op78.sizes = ([32, 768, 512], [])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op78_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf68', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf78', get_index_1, load, None)
        return store
op78 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op79: ExternKernelSchedulerNode(ExternKernelAlloc)
op79.writes = [StarDep(name='buf79', mode=None)]
op79.unmet_dependencies = [StarDep(name='buf78', mode=None)]
op79.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op79.outputs = [
    buf79: ExternKernelAlloc
    buf79.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf79.users = [NodeUser(node=ExternKernelSchedulerNode(name='op80'), can_inplace=False, is_weak=False)]
]
op79.node.kernel = extern_kernels.convolution


op80: ExternKernelSchedulerNode(ExternKernelAlloc)
op80.writes = [StarDep(name='buf80', mode=None)]
op80.unmet_dependencies = [StarDep(name='buf79', mode=None)]
op80.met_dependencies = [StarDep(name='arg61_1', mode=None)]
op80.outputs = [
    buf80: ExternKernelAlloc
    buf80.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf80.users = [NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False)]
]
op80.node.kernel = extern_kernels.convolution


op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 6291456}, None)]
op81.unmet_dependencies = 
    [   MemoryDep('buf69', c0, {c0: 6291456}, None),
        MemoryDep('buf80', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op81.met_dependencies = [MemoryDep('arg59_1', c1, {c0: 16384, c1: 384}, None)]
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf81.users = [NodeUser(node=ExternKernelSchedulerNode(name='op82'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (6291456, 1)
op81.sizes = ([32, 512, 384], [])
buf80_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg59_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op81_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf80', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg59_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf69', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf81', get_index_3, mul, None)
        return store
op81 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op82: ExternKernelSchedulerNode(ExternKernelOut)
op82.writes = [StarDep(name='buf82', mode=None)]
op82.unmet_dependencies = [StarDep(name='buf81', mode=None)]
op82.met_dependencies = [StarDep(name='arg62_1', mode=None)]
op82.outputs = [
    buf82: ExternKernelOut
    buf82.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf82.users = [
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=True, is_weak=False),
    ]
]
op82.node.kernel = extern_kernels.mm


op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 98304}, None)]
op83.unmet_dependencies = [MemoryDep('buf82', c0, {c0: 884736}, None)]
op83.met_dependencies = [MemoryDep('arg63_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf83.users = [
        NodeUser(node=SchedulerNode(name='op84'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False),
    ]
]
op83.group.device = cuda:0
op83.group.iteration = (98304, 9)
op83.sizes = ([98304], [9])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op83_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf83', get_index_2, reduction)
        return store_reduction
op83 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op84: SchedulerNode(ComputedBuffer)
op84.writes = [MemoryDep('buf84', c0, {c0: 98304}, None)]
op84.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 884736}, None),
        MemoryDep('buf83', c0, {c0: 98304}, None)]
op84.met_dependencies = [MemoryDep('arg63_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op84.outputs = [
    buf84: ComputedBuffer
    buf84.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf84.users = [NodeUser(node=SchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op84.group.device = cuda:0
op84.group.iteration = (98304, 9)
op84.sizes = ([98304], [9])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf84_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op84_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf84', get_index_3, reduction)
        return store_reduction
op84 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 56623104}, None)]
op85.unmet_dependencies = [MemoryDep('buf77', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op85.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 16384, c1: 384}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (56623104, 1)
op85.sizes = ([32, 512, 384, 9], [])
buf77_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op85_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf85', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf77', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op85 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op86: SchedulerNode(ComputedBuffer)
op86.writes = [MemoryDep('buf86', c0, {c0: 884736}, None)]
op86.unmet_dependencies = 
    [   MemoryDep('buf82', c0, {c0: 884736}, None),
        MemoryDep('buf83', c0, {c0: 98304}, None),
        MemoryDep('buf84', c0, {c0: 98304}, None)]
op86.met_dependencies = [MemoryDep('arg63_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op86.outputs = [
    buf86: ComputedBuffer
    buf86.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf86.users = [NodeUser(node=ExternKernelSchedulerNode(name='op87'), can_inplace=False, is_weak=False)]
]
op86.group.device = cuda:0
op86.group.iteration = (884736, 1)
op86.sizes = ([98304, 9], [])
buf82_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf84_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf86_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op86_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf82', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg63_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf83', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf84', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf86', get_index_4, truediv, None)
        return store
op86 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op87: ExternKernelSchedulerNode(ExternKernelOut)
op87.writes = [StarDep(name='buf87', mode=None)]
op87.unmet_dependencies = [StarDep(name='buf85', mode=None), StarDep(name='buf86', mode=None)]
op87.met_dependencies = []
op87.outputs = [
    buf87: ExternKernelOut
    buf87.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf87.users = [NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False)]
]
op87.node.kernel = extern_kernels.bmm


op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 12582912}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf73', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf87', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op88.met_dependencies = []
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf88.users = [NodeUser(node=ExternKernelSchedulerNode(name='op89'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (12582912, 1)
op88.sizes = ([16384, 12, 64], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op88_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf88', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf73', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf87', get_index)
        return load
op88 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op89: ExternKernelSchedulerNode(ExternKernelOut)
op89.writes = [StarDep(name='buf89', mode=None)]
op89.unmet_dependencies = [StarDep(name='buf88', mode=None)]
op89.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op89.outputs = [
    buf89: ExternKernelOut
    buf89.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf89.users = [
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op91'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op92'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op93'), can_inplace=True, is_weak=False),
    ]
]
op89.node.kernel = extern_kernels.mm


op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 16384}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 12582912}, None),
        MemoryDep('buf89', c0, {c0: 12582912}, None)]
op90.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 16384, c1: 768}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf90.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (16384, 768)
op90.sizes = ([16384], [768])
buf89_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op90_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf90', get_index_3, getitem)
        return store_reduction
op90 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op91: SchedulerNode(ComputedBuffer)
op91.writes = [MemoryDep('buf91', c0, {c0: 16384}, None)]
op91.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 12582912}, None),
        MemoryDep('buf89', c0, {c0: 12582912}, None)]
op91.met_dependencies = [MemoryDep('arg67_1', c1, {c0: 16384, c1: 768}, None)]
op91.outputs = [
    buf91: ComputedBuffer
    buf91.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf91.users = [NodeUser(node=SchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op91.group.device = cuda:0
op91.group.iteration = (16384, 768)
op91.sizes = ([16384], [768])
buf89_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf91_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op91_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf91', get_index_3, getitem_1)
        return store_reduction
op91 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op93: SchedulerNode(ComputedBuffer)
op93.writes = [MemoryDep('buf93', c0, {c0: 12582912}, None)]
op93.unmet_dependencies = 
    [   MemoryDep('buf68', c0, {c0: 12582912}, None),
        MemoryDep('buf89', c0, {c0: 12582912}, None),
        MemoryDep('buf90', c0, {c0: 16384}, None),
        MemoryDep('buf91', c0, {c0: 16384}, None)]
op93.met_dependencies = 
    [   MemoryDep('arg67_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg68_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg69_1', c1, {c0: 16384, c1: 768}, None)]
op93.outputs = [
    buf93: ComputedBuffer
    buf93.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf93.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op94'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op93.group.device = cuda:0
op93.group.iteration = (12582912, 1)
op93.sizes = ([16384, 768], [])
buf89_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf91_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op93_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf89', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg67_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf68', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf90', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf91', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg68_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg69_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf93', get_index_7, add_3, None)
        return store
op93 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op94: ExternKernelSchedulerNode(ExternKernelOut)
op94.writes = [StarDep(name='buf94', mode=None)]
op94.unmet_dependencies = [StarDep(name='buf93', mode=None)]
op94.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op94.outputs = [
    buf94: ExternKernelOut
    buf94.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf94.users = [NodeUser(node=SchedulerNode(name='op95'), can_inplace=True, is_weak=False)]
]
op94.node.kernel = extern_kernels.mm


op95: SchedulerNode(ComputedBuffer)
op95.writes = [MemoryDep('buf95', c0, {c0: 50331648}, None)]
op95.unmet_dependencies = [MemoryDep('buf94', c0, {c0: 50331648}, None)]
op95.met_dependencies = [MemoryDep('arg71_1', c1, {c0: 16384, c1: 3072}, None)]
op95.outputs = [
    buf95: ComputedBuffer
    buf95.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf95.users = [NodeUser(node=ExternKernelSchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.group.device = cuda:0
op95.group.iteration = (50331648, 1)
op95.sizes = ([16384, 3072], [])
buf94_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg71_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op95_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf94', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg71_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf94', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg71_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf95', get_index_4, mul_2, None)
        return store
op95 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op96: ExternKernelSchedulerNode(ExternKernelOut)
op96.writes = [StarDep(name='buf96', mode=None)]
op96.unmet_dependencies = [StarDep(name='buf95', mode=None)]
op96.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op96.outputs = [
    buf96: ExternKernelOut
    buf96.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
    ]
]
op96.node.kernel = extern_kernels.mm


op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 16384}, None)]
op97.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 12582912}, None),
        MemoryDep('buf96', c0, {c0: 12582912}, None)]
op97.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 16384, c1: 768}, None)]
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (16384, 768)
op97.sizes = ([16384], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op97_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf97', get_index_3, getitem)
        return store_reduction
op97 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 16384}, None)]
op98.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 12582912}, None),
        MemoryDep('buf96', c0, {c0: 12582912}, None)]
op98.met_dependencies = [MemoryDep('arg73_1', c1, {c0: 16384, c1: 768}, None)]
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (16384, 768)
op98.sizes = ([16384], [768])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op98_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf98', get_index_3, getitem_1)
        return store_reduction
op98 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 12582912}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf93', c0, {c0: 12582912}, None),
        MemoryDep('buf96', c0, {c0: 12582912}, None),
        MemoryDep('buf97', c0, {c0: 16384}, None),
        MemoryDep('buf98', c0, {c0: 16384}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg73_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg74_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg75_1', c1, {c0: 16384, c1: 768}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op103'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op109'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op110'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (12582912, 1)
op100.sizes = ([16384, 768], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf98_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op100_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg73_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf93', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf97', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf98', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg74_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg75_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf100', get_index_7, add_3, None)
        return store
op100 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg76_1', mode=None), StarDep(name='arg77_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf101.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=True, is_weak=False),
    ]
]
op101.node.kernel = extern_kernels.addmm


op102: ExternKernelSchedulerNode(ExternKernelOut)
op102.writes = [StarDep(name='buf102', mode=None)]
op102.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op102.met_dependencies = [StarDep(name='arg78_1', mode=None), StarDep(name='arg79_1', mode=None)]
op102.outputs = [
    buf102: ExternKernelOut
    buf102.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.node.kernel = extern_kernels.addmm


op103: ExternKernelSchedulerNode(ExternKernelOut)
op103.writes = [StarDep(name='buf103', mode=None)]
op103.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op103.met_dependencies = [StarDep(name='arg80_1', mode=None), StarDep(name='arg81_1', mode=None)]
op103.outputs = [
    buf103: ExternKernelOut
    buf103.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.node.kernel = extern_kernels.addmm


op104: ExternKernelSchedulerNode(FallbackKernel)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = 
    [   StarDep(name='buf101', mode=None),
        StarDep(name='buf102', mode=None),
        StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: FallbackKernel
    buf104.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf104.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op104.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op105: ExternKernelSchedulerNode(MultiOutput)
op105.writes = [StarDep(name='buf105', mode=None)]
op105.unmet_dependencies = [StarDep(name='buf104', mode=None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: MultiOutput
    buf105.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf105.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op105.node.kernel = None


op109: ExternKernelSchedulerNode(ExternKernelOut)
op109.writes = [StarDep(name='buf109', mode=None)]
op109.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op109.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op109.outputs = [
    buf109: ExternKernelOut
    buf109.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf109.users = [NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False)]
]
op109.node.kernel = extern_kernels.mm


op110: SchedulerNode(ComputedBuffer)
op110.writes = [MemoryDep('buf110', c0, {c0: 12582912}, None)]
op110.unmet_dependencies = [MemoryDep('buf100', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ComputedBuffer
    buf110.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf110.users = [NodeUser(node=ExternKernelSchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.group.device = cuda:0
op110.group.iteration = (12582912, 1)
op110.sizes = ([32, 768, 512], [])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf110_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op110_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf100', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf110', get_index_1, load, None)
        return store
op110 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op111: ExternKernelSchedulerNode(ExternKernelAlloc)
op111.writes = [StarDep(name='buf111', mode=None)]
op111.unmet_dependencies = [StarDep(name='buf110', mode=None)]
op111.met_dependencies = [StarDep(name='arg83_1', mode=None)]
op111.outputs = [
    buf111: ExternKernelAlloc
    buf111.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.node.kernel = extern_kernels.convolution


op112: ExternKernelSchedulerNode(ExternKernelAlloc)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg84_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelAlloc
    buf112.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf112.users = [NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False)]
]
op112.node.kernel = extern_kernels.convolution


op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 6291456}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf101', c0, {c0: 6291456}, None),
        MemoryDep('buf112', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op113.met_dependencies = [MemoryDep('arg82_1', c1, {c0: 16384, c1: 384}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf113.users = [NodeUser(node=ExternKernelSchedulerNode(name='op114'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (6291456, 1)
op113.sizes = ([32, 512, 384], [])
buf112_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg82_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf101_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op113_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf112', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg82_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf101', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf113', get_index_3, mul, None)
        return store
op113 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op114: ExternKernelSchedulerNode(ExternKernelOut)
op114.writes = [StarDep(name='buf114', mode=None)]
op114.unmet_dependencies = [StarDep(name='buf113', mode=None)]
op114.met_dependencies = [StarDep(name='arg85_1', mode=None)]
op114.outputs = [
    buf114: ExternKernelOut
    buf114.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf114.users = [
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=True, is_weak=False),
    ]
]
op114.node.kernel = extern_kernels.mm


op115: SchedulerNode(ComputedBuffer)
op115.writes = [MemoryDep('buf115', c0, {c0: 98304}, None)]
op115.unmet_dependencies = [MemoryDep('buf114', c0, {c0: 884736}, None)]
op115.met_dependencies = [MemoryDep('arg86_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op115.outputs = [
    buf115: ComputedBuffer
    buf115.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf115.users = [
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
    ]
]
op115.group.device = cuda:0
op115.group.iteration = (98304, 9)
op115.sizes = ([98304], [9])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op115_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf115', get_index_2, reduction)
        return store_reduction
op115 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 98304}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 884736}, None),
        MemoryDep('buf115', c0, {c0: 98304}, None)]
op116.met_dependencies = [MemoryDep('arg86_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf116.users = [NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (98304, 9)
op116.sizes = ([98304], [9])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf116_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op116_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf115', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, reduction)
        return store_reduction
op116 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 56623104}, None)]
op117.unmet_dependencies = [MemoryDep('buf109', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op117.met_dependencies = [MemoryDep('arg88_1', c1, {c0: 16384, c1: 384}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf117.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (56623104, 1)
op117.sizes = ([32, 512, 384, 9], [])
buf109_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg88_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op117_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf117', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf109', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg88_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op117 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op118: SchedulerNode(ComputedBuffer)
op118.writes = [MemoryDep('buf118', c0, {c0: 884736}, None)]
op118.unmet_dependencies = 
    [   MemoryDep('buf114', c0, {c0: 884736}, None),
        MemoryDep('buf115', c0, {c0: 98304}, None),
        MemoryDep('buf116', c0, {c0: 98304}, None)]
op118.met_dependencies = [MemoryDep('arg86_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op118.outputs = [
    buf118: ComputedBuffer
    buf118.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf118.users = [NodeUser(node=ExternKernelSchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op118.group.device = cuda:0
op118.group.iteration = (884736, 1)
op118.sizes = ([98304, 9], [])
buf114_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg86_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf115_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf116_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf118_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op118_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf114', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg86_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf115', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf116', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf118', get_index_4, truediv, None)
        return store
op118 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op119: ExternKernelSchedulerNode(ExternKernelOut)
op119.writes = [StarDep(name='buf119', mode=None)]
op119.unmet_dependencies = [StarDep(name='buf117', mode=None), StarDep(name='buf118', mode=None)]
op119.met_dependencies = []
op119.outputs = [
    buf119: ExternKernelOut
    buf119.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf119.users = [NodeUser(node=SchedulerNode(name='op120'), can_inplace=False, is_weak=False)]
]
op119.node.kernel = extern_kernels.bmm


op120: SchedulerNode(ComputedBuffer)
op120.writes = [MemoryDep('buf120', c0, {c0: 12582912}, None)]
op120.unmet_dependencies = 
    [   MemoryDep('buf105', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf119', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op120.met_dependencies = []
op120.outputs = [
    buf120: ComputedBuffer
    buf120.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf120.users = [NodeUser(node=ExternKernelSchedulerNode(name='op121'), can_inplace=False, is_weak=False)]
]
op120.group.device = cuda:0
op120.group.iteration = (12582912, 1)
op120.sizes = ([16384, 12, 64], [])
buf105_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf120_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op120_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf120', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf105', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf119', get_index)
        return load
op120 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op121: ExternKernelSchedulerNode(ExternKernelOut)
op121.writes = [StarDep(name='buf121', mode=None)]
op121.unmet_dependencies = [StarDep(name='buf120', mode=None)]
op121.met_dependencies = [StarDep(name='arg89_1', mode=None)]
op121.outputs = [
    buf121: ExternKernelOut
    buf121.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf121.users = [
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op123'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
    ]
]
op121.node.kernel = extern_kernels.mm


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 16384}, None)]
op122.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 12582912}, None),
        MemoryDep('buf121', c0, {c0: 12582912}, None)]
op122.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 16384, c1: 768}, None)]
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf122.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (16384, 768)
op122.sizes = ([16384], [768])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op122_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf100', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf122', get_index_3, getitem)
        return store_reduction
op122 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op123: SchedulerNode(ComputedBuffer)
op123.writes = [MemoryDep('buf123', c0, {c0: 16384}, None)]
op123.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 12582912}, None),
        MemoryDep('buf121', c0, {c0: 12582912}, None)]
op123.met_dependencies = [MemoryDep('arg90_1', c1, {c0: 16384, c1: 768}, None)]
op123.outputs = [
    buf123: ComputedBuffer
    buf123.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf123.users = [NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False)]
]
op123.group.device = cuda:0
op123.group.iteration = (16384, 768)
op123.sizes = ([16384], [768])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf123_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op123_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf100', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf123', get_index_3, getitem_1)
        return store_reduction
op123 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 12582912}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf100', c0, {c0: 12582912}, None),
        MemoryDep('buf121', c0, {c0: 12582912}, None),
        MemoryDep('buf122', c0, {c0: 16384}, None),
        MemoryDep('buf123', c0, {c0: 16384}, None)]
op125.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg91_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg92_1', c1, {c0: 16384, c1: 768}, None)]
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf125.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op125.group.device = cuda:0
op125.group.iteration = (12582912, 1)
op125.sizes = ([16384, 768], [])
buf121_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf123_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg92_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op125_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf121', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg90_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf100', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf122', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf123', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg91_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg92_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf125', get_index_7, add_3, None)
        return store
op125 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf125', mode=None)]
op126.met_dependencies = [StarDep(name='arg93_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 50331648}, None)]
op127.unmet_dependencies = [MemoryDep('buf126', c0, {c0: 50331648}, None)]
op127.met_dependencies = [MemoryDep('arg94_1', c1, {c0: 16384, c1: 3072}, None)]
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (50331648, 1)
op127.sizes = ([16384, 3072], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg94_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf127_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op127_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg94_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf126', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg94_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf127', get_index_4, mul_2, None)
        return store
op127 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op128: ExternKernelSchedulerNode(ExternKernelOut)
op128.writes = [StarDep(name='buf128', mode=None)]
op128.unmet_dependencies = [StarDep(name='buf127', mode=None)]
op128.met_dependencies = [StarDep(name='arg95_1', mode=None)]
op128.outputs = [
    buf128: ExternKernelOut
    buf128.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf128.users = [
        NodeUser(node=SchedulerNode(name='op129'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op131'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op128.node.kernel = extern_kernels.mm


op129: SchedulerNode(ComputedBuffer)
op129.writes = [MemoryDep('buf129', c0, {c0: 16384}, None)]
op129.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 12582912}, None),
        MemoryDep('buf128', c0, {c0: 12582912}, None)]
op129.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 16384, c1: 768}, None)]
op129.outputs = [
    buf129: ComputedBuffer
    buf129.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf129.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op129.group.device = cuda:0
op129.group.iteration = (16384, 768)
op129.sizes = ([16384], [768])
buf128_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op129_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf129', get_index_3, getitem)
        return store_reduction
op129 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 16384}, None)]
op130.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 12582912}, None),
        MemoryDep('buf128', c0, {c0: 12582912}, None)]
op130.met_dependencies = [MemoryDep('arg96_1', c1, {c0: 16384, c1: 768}, None)]
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf130.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (16384, 768)
op130.sizes = ([16384], [768])
buf128_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op130_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf130', get_index_3, getitem_1)
        return store_reduction
op130 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 12582912}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf125', c0, {c0: 12582912}, None),
        MemoryDep('buf128', c0, {c0: 12582912}, None),
        MemoryDep('buf129', c0, {c0: 16384}, None),
        MemoryDep('buf130', c0, {c0: 16384}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg96_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg97_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg98_1', c1, {c0: 16384, c1: 768}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf132.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (12582912, 1)
op132.sizes = ([16384, 768], [])
buf128_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf125_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf129_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf130_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg98_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op132_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf128', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg96_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf125', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf129', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf130', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg97_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg98_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf132', get_index_7, add_3, None)
        return store
op132 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op133: ExternKernelSchedulerNode(ExternKernelOut)
op133.writes = [StarDep(name='buf133', mode=None)]
op133.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op133.met_dependencies = [StarDep(name='arg100_1', mode=None), StarDep(name='arg99_1', mode=None)]
op133.outputs = [
    buf133: ExternKernelOut
    buf133.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf133.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False),
    ]
]
op133.node.kernel = extern_kernels.addmm


op134: ExternKernelSchedulerNode(ExternKernelOut)
op134.writes = [StarDep(name='buf134', mode=None)]
op134.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op134.met_dependencies = [StarDep(name='arg101_1', mode=None), StarDep(name='arg102_1', mode=None)]
op134.outputs = [
    buf134: ExternKernelOut
    buf134.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf134.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.node.kernel = extern_kernels.addmm


op135: ExternKernelSchedulerNode(ExternKernelOut)
op135.writes = [StarDep(name='buf135', mode=None)]
op135.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op135.met_dependencies = [StarDep(name='arg103_1', mode=None), StarDep(name='arg104_1', mode=None)]
op135.outputs = [
    buf135: ExternKernelOut
    buf135.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf135.users = [NodeUser(node=ExternKernelSchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op135.node.kernel = extern_kernels.addmm


op136: ExternKernelSchedulerNode(FallbackKernel)
op136.writes = [StarDep(name='buf136', mode=None)]
op136.unmet_dependencies = 
    [   StarDep(name='buf133', mode=None),
        StarDep(name='buf134', mode=None),
        StarDep(name='buf135', mode=None)]
op136.met_dependencies = []
op136.outputs = [
    buf136: FallbackKernel
    buf136.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf136.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op138'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op140'), can_inplace=False, is_weak=False),
    ]
]
op136.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op137: ExternKernelSchedulerNode(MultiOutput)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = []
op137.outputs = [
    buf137: MultiOutput
    buf137.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op137.node.kernel = None


op141: ExternKernelSchedulerNode(ExternKernelOut)
op141.writes = [StarDep(name='buf141', mode=None)]
op141.unmet_dependencies = [StarDep(name='buf132', mode=None)]
op141.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op141.outputs = [
    buf141: ExternKernelOut
    buf141.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf141.users = [NodeUser(node=SchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op141.node.kernel = extern_kernels.mm


op142: SchedulerNode(ComputedBuffer)
op142.writes = [MemoryDep('buf142', c0, {c0: 12582912}, None)]
op142.unmet_dependencies = [MemoryDep('buf132', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op142.met_dependencies = []
op142.outputs = [
    buf142: ComputedBuffer
    buf142.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf142.users = [NodeUser(node=ExternKernelSchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op142.group.device = cuda:0
op142.group.iteration = (12582912, 1)
op142.sizes = ([32, 768, 512], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf142_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op142_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf142', get_index_1, load, None)
        return store
op142 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op143: ExternKernelSchedulerNode(ExternKernelAlloc)
op143.writes = [StarDep(name='buf143', mode=None)]
op143.unmet_dependencies = [StarDep(name='buf142', mode=None)]
op143.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op143.outputs = [
    buf143: ExternKernelAlloc
    buf143.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.node.kernel = extern_kernels.convolution


op144: ExternKernelSchedulerNode(ExternKernelAlloc)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg107_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelAlloc
    buf144.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=False, is_weak=False)]
]
op144.node.kernel = extern_kernels.convolution


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 6291456}, None)]
op145.unmet_dependencies = 
    [   MemoryDep('buf133', c0, {c0: 6291456}, None),
        MemoryDep('buf144', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op145.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 16384, c1: 384}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (6291456, 1)
op145.sizes = ([32, 512, 384], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op145_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf133', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf145', get_index_3, mul, None)
        return store
op145 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg108_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf146.users = [
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=True, is_weak=False),
    ]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 98304}, None)]
op147.unmet_dependencies = [MemoryDep('buf146', c0, {c0: 884736}, None)]
op147.met_dependencies = [MemoryDep('arg109_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (98304, 9)
op147.sizes = ([98304], [9])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op147_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf147', get_index_2, reduction)
        return store_reduction
op147 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 98304}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 884736}, None),
        MemoryDep('buf147', c0, {c0: 98304}, None)]
op148.met_dependencies = [MemoryDep('arg109_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf148.users = [NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (98304, 9)
op148.sizes = ([98304], [9])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf148_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op148_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf147', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf148', get_index_3, reduction)
        return store_reduction
op148 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op149: SchedulerNode(ComputedBuffer)
op149.writes = [MemoryDep('buf149', c0, {c0: 56623104}, None)]
op149.unmet_dependencies = [MemoryDep('buf141', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op149.met_dependencies = [MemoryDep('arg111_1', c1, {c0: 16384, c1: 384}, None)]
op149.outputs = [
    buf149: ComputedBuffer
    buf149.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf149.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op149.group.device = cuda:0
op149.group.iteration = (56623104, 1)
op149.sizes = ([32, 512, 384, 9], [])
buf141_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op149_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf149', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf141', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg111_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op149 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 884736}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf146', c0, {c0: 884736}, None),
        MemoryDep('buf147', c0, {c0: 98304}, None),
        MemoryDep('buf148', c0, {c0: 98304}, None)]
op150.met_dependencies = [MemoryDep('arg109_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf150.users = [NodeUser(node=ExternKernelSchedulerNode(name='op151'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (884736, 1)
op150.sizes = ([98304, 9], [])
buf146_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf148_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf150_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op150_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf146', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg109_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf147', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf148', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf150', get_index_4, truediv, None)
        return store
op150 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op151: ExternKernelSchedulerNode(ExternKernelOut)
op151.writes = [StarDep(name='buf151', mode=None)]
op151.unmet_dependencies = [StarDep(name='buf149', mode=None), StarDep(name='buf150', mode=None)]
op151.met_dependencies = []
op151.outputs = [
    buf151: ExternKernelOut
    buf151.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf151.users = [NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False)]
]
op151.node.kernel = extern_kernels.bmm


op152: SchedulerNode(ComputedBuffer)
op152.writes = [MemoryDep('buf152', c0, {c0: 12582912}, None)]
op152.unmet_dependencies = 
    [   MemoryDep('buf137', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf151', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op152.met_dependencies = []
op152.outputs = [
    buf152: ComputedBuffer
    buf152.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf152.users = [NodeUser(node=ExternKernelSchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op152.group.device = cuda:0
op152.group.iteration = (12582912, 1)
op152.sizes = ([16384, 12, 64], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf152_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op152_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf152', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf137', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf151', get_index)
        return load
op152 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op153: ExternKernelSchedulerNode(ExternKernelOut)
op153.writes = [StarDep(name='buf153', mode=None)]
op153.unmet_dependencies = [StarDep(name='buf152', mode=None)]
op153.met_dependencies = [StarDep(name='arg112_1', mode=None)]
op153.outputs = [
    buf153: ExternKernelOut
    buf153.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf153.users = [
        NodeUser(node=SchedulerNode(name='op154'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=True, is_weak=False),
    ]
]
op153.node.kernel = extern_kernels.mm


op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 16384}, None)]
op154.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 12582912}, None),
        MemoryDep('buf153', c0, {c0: 12582912}, None)]
op154.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 16384, c1: 768}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf154.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op154.group.device = cuda:0
op154.group.iteration = (16384, 768)
op154.sizes = ([16384], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op154_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf154', get_index_3, getitem)
        return store_reduction
op154 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op155: SchedulerNode(ComputedBuffer)
op155.writes = [MemoryDep('buf155', c0, {c0: 16384}, None)]
op155.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 12582912}, None),
        MemoryDep('buf153', c0, {c0: 12582912}, None)]
op155.met_dependencies = [MemoryDep('arg113_1', c1, {c0: 16384, c1: 768}, None)]
op155.outputs = [
    buf155: ComputedBuffer
    buf155.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf155.users = [NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False)]
]
op155.group.device = cuda:0
op155.group.iteration = (16384, 768)
op155.sizes = ([16384], [768])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf155_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op155_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf155', get_index_3, getitem_1)
        return store_reduction
op155 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 12582912}, None)]
op157.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 12582912}, None),
        MemoryDep('buf153', c0, {c0: 12582912}, None),
        MemoryDep('buf154', c0, {c0: 16384}, None),
        MemoryDep('buf155', c0, {c0: 16384}, None)]
op157.met_dependencies = 
    [   MemoryDep('arg113_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg114_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg115_1', c1, {c0: 16384, c1: 768}, None)]
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf157.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op157.group.device = cuda:0
op157.group.iteration = (12582912, 1)
op157.sizes = ([16384, 768], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf155_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg114_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg115_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op157_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg113_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf132', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf154', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf155', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg114_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg115_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf157', get_index_7, add_3, None)
        return store
op157 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf157', mode=None)]
op158.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf158.users = [NodeUser(node=SchedulerNode(name='op159'), can_inplace=True, is_weak=False)]
]
op158.node.kernel = extern_kernels.mm


op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', c0, {c0: 50331648}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 50331648}, None)]
op159.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 16384, c1: 3072}, None)]
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf159.users = [NodeUser(node=ExternKernelSchedulerNode(name='op160'), can_inplace=False, is_weak=False)]
]
op159.group.device = cuda:0
op159.group.iteration = (50331648, 1)
op159.sizes = ([16384, 3072], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op159_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg117_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf158', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg117_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf159', get_index_4, mul_2, None)
        return store
op159 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op160: ExternKernelSchedulerNode(ExternKernelOut)
op160.writes = [StarDep(name='buf160', mode=None)]
op160.unmet_dependencies = [StarDep(name='buf159', mode=None)]
op160.met_dependencies = [StarDep(name='arg118_1', mode=None)]
op160.outputs = [
    buf160: ExternKernelOut
    buf160.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf160.users = [
        NodeUser(node=SchedulerNode(name='op161'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op164'), can_inplace=True, is_weak=False),
    ]
]
op160.node.kernel = extern_kernels.mm


op161: SchedulerNode(ComputedBuffer)
op161.writes = [MemoryDep('buf161', c0, {c0: 16384}, None)]
op161.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 12582912}, None),
        MemoryDep('buf160', c0, {c0: 12582912}, None)]
op161.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 16384, c1: 768}, None)]
op161.outputs = [
    buf161: ComputedBuffer
    buf161.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf161.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op161.group.device = cuda:0
op161.group.iteration = (16384, 768)
op161.sizes = ([16384], [768])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op161_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf161', get_index_3, getitem)
        return store_reduction
op161 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', c0, {c0: 16384}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 12582912}, None),
        MemoryDep('buf160', c0, {c0: 12582912}, None)]
op162.met_dependencies = [MemoryDep('arg119_1', c1, {c0: 16384, c1: 768}, None)]
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf162.users = [NodeUser(node=SchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (16384, 768)
op162.sizes = ([16384], [768])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf162_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op162_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf162', get_index_3, getitem_1)
        return store_reduction
op162 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op164: SchedulerNode(ComputedBuffer)
op164.writes = [MemoryDep('buf164', c0, {c0: 12582912}, None)]
op164.unmet_dependencies = 
    [   MemoryDep('buf157', c0, {c0: 12582912}, None),
        MemoryDep('buf160', c0, {c0: 12582912}, None),
        MemoryDep('buf161', c0, {c0: 16384}, None),
        MemoryDep('buf162', c0, {c0: 16384}, None)]
op164.met_dependencies = 
    [   MemoryDep('arg119_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg120_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg121_1', c1, {c0: 16384, c1: 768}, None)]
op164.outputs = [
    buf164: ComputedBuffer
    buf164.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf164.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op165'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op167'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op164.group.device = cuda:0
op164.group.iteration = (12582912, 1)
op164.sizes = ([16384, 768], [])
buf160_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf161_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf162_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg120_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op164_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf160', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg119_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf157', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf161', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf162', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg120_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg121_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf164', get_index_7, add_3, None)
        return store
op164 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op165: ExternKernelSchedulerNode(ExternKernelOut)
op165.writes = [StarDep(name='buf165', mode=None)]
op165.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op165.met_dependencies = [StarDep(name='arg122_1', mode=None), StarDep(name='arg123_1', mode=None)]
op165.outputs = [
    buf165: ExternKernelOut
    buf165.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf165.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=True, is_weak=False),
    ]
]
op165.node.kernel = extern_kernels.addmm


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op166.met_dependencies = [StarDep(name='arg124_1', mode=None), StarDep(name='arg125_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf166.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op166.node.kernel = extern_kernels.addmm


op167: ExternKernelSchedulerNode(ExternKernelOut)
op167.writes = [StarDep(name='buf167', mode=None)]
op167.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op167.met_dependencies = [StarDep(name='arg126_1', mode=None), StarDep(name='arg127_1', mode=None)]
op167.outputs = [
    buf167: ExternKernelOut
    buf167.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf167.users = [NodeUser(node=ExternKernelSchedulerNode(name='op168'), can_inplace=False, is_weak=False)]
]
op167.node.kernel = extern_kernels.addmm


op168: ExternKernelSchedulerNode(FallbackKernel)
op168.writes = [StarDep(name='buf168', mode=None)]
op168.unmet_dependencies = 
    [   StarDep(name='buf165', mode=None),
        StarDep(name='buf166', mode=None),
        StarDep(name='buf167', mode=None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: FallbackKernel
    buf168.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf168.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op172'), can_inplace=False, is_weak=False),
    ]
]
op168.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op169: ExternKernelSchedulerNode(MultiOutput)
op169.writes = [StarDep(name='buf169', mode=None)]
op169.unmet_dependencies = [StarDep(name='buf168', mode=None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: MultiOutput
    buf169.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf169.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op169.node.kernel = None


op173: ExternKernelSchedulerNode(ExternKernelOut)
op173.writes = [StarDep(name='buf173', mode=None)]
op173.unmet_dependencies = [StarDep(name='buf164', mode=None)]
op173.met_dependencies = [StarDep(name='arg133_1', mode=None)]
op173.outputs = [
    buf173: ExternKernelOut
    buf173.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf173.users = [NodeUser(node=SchedulerNode(name='op181'), can_inplace=False, is_weak=False)]
]
op173.node.kernel = extern_kernels.mm


op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 12582912}, None)]
op174.unmet_dependencies = [MemoryDep('buf164', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op174.met_dependencies = []
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf174.users = [NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False)]
]
op174.group.device = cuda:0
op174.group.iteration = (12582912, 1)
op174.sizes = ([32, 768, 512], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op174_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf174', get_index_1, load, None)
        return store
op174 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op175: ExternKernelSchedulerNode(ExternKernelAlloc)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg129_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelAlloc
    buf175.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf175.users = [NodeUser(node=ExternKernelSchedulerNode(name='op176'), can_inplace=False, is_weak=False)]
]
op175.node.kernel = extern_kernels.convolution


op176: ExternKernelSchedulerNode(ExternKernelAlloc)
op176.writes = [StarDep(name='buf176', mode=None)]
op176.unmet_dependencies = [StarDep(name='buf175', mode=None)]
op176.met_dependencies = [StarDep(name='arg130_1', mode=None)]
op176.outputs = [
    buf176: ExternKernelAlloc
    buf176.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf176.users = [NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False)]
]
op176.node.kernel = extern_kernels.convolution


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 6291456}, None)]
op177.unmet_dependencies = 
    [   MemoryDep('buf165', c0, {c0: 6291456}, None),
        MemoryDep('buf176', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op177.met_dependencies = [MemoryDep('arg128_1', c1, {c0: 16384, c1: 384}, None)]
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (6291456, 1)
op177.sizes = ([32, 512, 384], [])
buf176_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg128_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op177_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf176', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg128_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf165', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf177', get_index_3, mul, None)
        return store
op177 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf177', mode=None)]
op178.met_dependencies = [StarDep(name='arg131_1', mode=None)]
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.mm


op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 98304}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 884736}, None)]
op179.met_dependencies = [MemoryDep('arg132_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (98304, 9)
op179.sizes = ([98304], [9])
buf178_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op179_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf179', get_index_2, reduction)
        return store_reduction
op179 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 98304}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 884736}, None),
        MemoryDep('buf179', c0, {c0: 98304}, None)]
op180.met_dependencies = [MemoryDep('arg132_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (98304, 9)
op180.sizes = ([98304], [9])
buf178_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf180_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op180_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf180', get_index_3, reduction)
        return store_reduction
op180 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op181: SchedulerNode(ComputedBuffer)
op181.writes = [MemoryDep('buf181', c0, {c0: 56623104}, None)]
op181.unmet_dependencies = [MemoryDep('buf173', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op181.met_dependencies = [MemoryDep('arg134_1', c1, {c0: 16384, c1: 384}, None)]
op181.outputs = [
    buf181: ComputedBuffer
    buf181.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf181.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.group.device = cuda:0
op181.group.iteration = (56623104, 1)
op181.sizes = ([32, 512, 384, 9], [])
buf173_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg134_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf181_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op181_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf181', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf173', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg134_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op181 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 884736}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 884736}, None),
        MemoryDep('buf179', c0, {c0: 98304}, None),
        MemoryDep('buf180', c0, {c0: 98304}, None)]
op182.met_dependencies = [MemoryDep('arg132_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (884736, 1)
op182.sizes = ([98304, 9], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg132_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf180_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf182_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op182_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg132_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf179', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf180', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf182', get_index_4, truediv, None)
        return store
op182 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op183: ExternKernelSchedulerNode(ExternKernelOut)
op183.writes = [StarDep(name='buf183', mode=None)]
op183.unmet_dependencies = [StarDep(name='buf181', mode=None), StarDep(name='buf182', mode=None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ExternKernelOut
    buf183.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf183.users = [NodeUser(node=SchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.node.kernel = extern_kernels.bmm


op184: SchedulerNode(ComputedBuffer)
op184.writes = [MemoryDep('buf184', c0, {c0: 12582912}, None)]
op184.unmet_dependencies = 
    [   MemoryDep('buf169', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf183', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ComputedBuffer
    buf184.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf184.users = [NodeUser(node=ExternKernelSchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.group.device = cuda:0
op184.group.iteration = (12582912, 1)
op184.sizes = ([16384, 12, 64], [])
buf169_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf184_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op184_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf184', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf169', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf183', get_index)
        return load
op184 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op185: ExternKernelSchedulerNode(ExternKernelOut)
op185.writes = [StarDep(name='buf185', mode=None)]
op185.unmet_dependencies = [StarDep(name='buf184', mode=None)]
op185.met_dependencies = [StarDep(name='arg135_1', mode=None)]
op185.outputs = [
    buf185: ExternKernelOut
    buf185.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf185.users = [
        NodeUser(node=SchedulerNode(name='op186'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=True, is_weak=False),
    ]
]
op185.node.kernel = extern_kernels.mm


op186: SchedulerNode(ComputedBuffer)
op186.writes = [MemoryDep('buf186', c0, {c0: 16384}, None)]
op186.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 12582912}, None),
        MemoryDep('buf185', c0, {c0: 12582912}, None)]
op186.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 16384, c1: 768}, None)]
op186.outputs = [
    buf186: ComputedBuffer
    buf186.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf186.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op186.group.device = cuda:0
op186.group.iteration = (16384, 768)
op186.sizes = ([16384], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op186_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf186', get_index_3, getitem)
        return store_reduction
op186 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 16384}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 12582912}, None),
        MemoryDep('buf185', c0, {c0: 12582912}, None)]
op187.met_dependencies = [MemoryDep('arg136_1', c1, {c0: 16384, c1: 768}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf187.users = [NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False)]
]
op187.group.device = cuda:0
op187.group.iteration = (16384, 768)
op187.sizes = ([16384], [768])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op187_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf187', get_index_3, getitem_1)
        return store_reduction
op187 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 12582912}, None)]
op189.unmet_dependencies = 
    [   MemoryDep('buf164', c0, {c0: 12582912}, None),
        MemoryDep('buf185', c0, {c0: 12582912}, None),
        MemoryDep('buf186', c0, {c0: 16384}, None),
        MemoryDep('buf187', c0, {c0: 16384}, None)]
op189.met_dependencies = 
    [   MemoryDep('arg136_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg137_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg138_1', c1, {c0: 16384, c1: 768}, None)]
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf189.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op189.group.device = cuda:0
op189.group.iteration = (12582912, 1)
op189.sizes = ([16384, 768], [])
buf185_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf164_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf187_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg138_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op189_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf185', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg136_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf164', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf186', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf187', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg137_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg138_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf189', get_index_7, add_3, None)
        return store
op189 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op190: ExternKernelSchedulerNode(ExternKernelOut)
op190.writes = [StarDep(name='buf190', mode=None)]
op190.unmet_dependencies = [StarDep(name='buf189', mode=None)]
op190.met_dependencies = [StarDep(name='arg139_1', mode=None)]
op190.outputs = [
    buf190: ExternKernelOut
    buf190.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf190.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False)]
]
op190.node.kernel = extern_kernels.mm


op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 50331648}, None)]
op191.unmet_dependencies = [MemoryDep('buf190', c0, {c0: 50331648}, None)]
op191.met_dependencies = [MemoryDep('arg140_1', c1, {c0: 16384, c1: 3072}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (50331648, 1)
op191.sizes = ([16384, 3072], [])
buf190_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op191_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf190', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg140_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf190', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg140_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf191', get_index_4, mul_2, None)
        return store
op191 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg141_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf192.users = [
        NodeUser(node=SchedulerNode(name='op193'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op194'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=True, is_weak=False),
    ]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 16384}, None)]
op193.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 12582912}, None),
        MemoryDep('buf192', c0, {c0: 12582912}, None)]
op193.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 16384, c1: 768}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf193.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (16384, 768)
op193.sizes = ([16384], [768])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op193_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf193', get_index_3, getitem)
        return store_reduction
op193 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op194: SchedulerNode(ComputedBuffer)
op194.writes = [MemoryDep('buf194', c0, {c0: 16384}, None)]
op194.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 12582912}, None),
        MemoryDep('buf192', c0, {c0: 12582912}, None)]
op194.met_dependencies = [MemoryDep('arg142_1', c1, {c0: 16384, c1: 768}, None)]
op194.outputs = [
    buf194: ComputedBuffer
    buf194.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf194.users = [NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False)]
]
op194.group.device = cuda:0
op194.group.iteration = (16384, 768)
op194.sizes = ([16384], [768])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op194_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf194', get_index_3, getitem_1)
        return store_reduction
op194 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 12582912}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf189', c0, {c0: 12582912}, None),
        MemoryDep('buf192', c0, {c0: 12582912}, None),
        MemoryDep('buf193', c0, {c0: 16384}, None),
        MemoryDep('buf194', c0, {c0: 16384}, None)]
op196.met_dependencies = 
    [   MemoryDep('arg142_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg143_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg144_1', c1, {c0: 16384, c1: 768}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf196.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op198'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op196.group.device = cuda:0
op196.group.iteration = (12582912, 1)
op196.sizes = ([16384, 768], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg142_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf194_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg143_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg144_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op196_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg142_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf189', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf193', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf194', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg143_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg144_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf196', get_index_7, add_3, None)
        return store
op196 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op197: ExternKernelSchedulerNode(ExternKernelOut)
op197.writes = [StarDep(name='buf197', mode=None)]
op197.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op197.met_dependencies = [StarDep(name='arg145_1', mode=None), StarDep(name='arg146_1', mode=None)]
op197.outputs = [
    buf197: ExternKernelOut
    buf197.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf197.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op209'), can_inplace=True, is_weak=False),
    ]
]
op197.node.kernel = extern_kernels.addmm


op198: ExternKernelSchedulerNode(ExternKernelOut)
op198.writes = [StarDep(name='buf198', mode=None)]
op198.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op198.met_dependencies = [StarDep(name='arg147_1', mode=None), StarDep(name='arg148_1', mode=None)]
op198.outputs = [
    buf198: ExternKernelOut
    buf198.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op198.node.kernel = extern_kernels.addmm


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op199.met_dependencies = [StarDep(name='arg149_1', mode=None), StarDep(name='arg150_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf199.users = [NodeUser(node=ExternKernelSchedulerNode(name='op200'), can_inplace=False, is_weak=False)]
]
op199.node.kernel = extern_kernels.addmm


op200: ExternKernelSchedulerNode(FallbackKernel)
op200.writes = [StarDep(name='buf200', mode=None)]
op200.unmet_dependencies = 
    [   StarDep(name='buf197', mode=None),
        StarDep(name='buf198', mode=None),
        StarDep(name='buf199', mode=None)]
op200.met_dependencies = []
op200.outputs = [
    buf200: FallbackKernel
    buf200.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf200.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op202'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op200.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op201: ExternKernelSchedulerNode(MultiOutput)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = []
op201.outputs = [
    buf201: MultiOutput
    buf201.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op201.node.kernel = None


op205: ExternKernelSchedulerNode(ExternKernelOut)
op205.writes = [StarDep(name='buf205', mode=None)]
op205.unmet_dependencies = [StarDep(name='buf196', mode=None)]
op205.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op205.outputs = [
    buf205: ExternKernelOut
    buf205.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf205.users = [NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False)]
]
op205.node.kernel = extern_kernels.mm


op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 12582912}, None)]
op206.unmet_dependencies = [MemoryDep('buf196', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf206.users = [NodeUser(node=ExternKernelSchedulerNode(name='op207'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (12582912, 1)
op206.sizes = ([32, 768, 512], [])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op206_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf196', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf206', get_index_1, load, None)
        return store
op206 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op207: ExternKernelSchedulerNode(ExternKernelAlloc)
op207.writes = [StarDep(name='buf207', mode=None)]
op207.unmet_dependencies = [StarDep(name='buf206', mode=None)]
op207.met_dependencies = [StarDep(name='arg152_1', mode=None)]
op207.outputs = [
    buf207: ExternKernelAlloc
    buf207.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf207.users = [NodeUser(node=ExternKernelSchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op207.node.kernel = extern_kernels.convolution


op208: ExternKernelSchedulerNode(ExternKernelAlloc)
op208.writes = [StarDep(name='buf208', mode=None)]
op208.unmet_dependencies = [StarDep(name='buf207', mode=None)]
op208.met_dependencies = [StarDep(name='arg153_1', mode=None)]
op208.outputs = [
    buf208: ExternKernelAlloc
    buf208.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf208.users = [NodeUser(node=SchedulerNode(name='op209'), can_inplace=False, is_weak=False)]
]
op208.node.kernel = extern_kernels.convolution


op209: SchedulerNode(ComputedBuffer)
op209.writes = [MemoryDep('buf209', c0, {c0: 6291456}, None)]
op209.unmet_dependencies = 
    [   MemoryDep('buf197', c0, {c0: 6291456}, None),
        MemoryDep('buf208', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op209.met_dependencies = [MemoryDep('arg151_1', c1, {c0: 16384, c1: 384}, None)]
op209.outputs = [
    buf209: ComputedBuffer
    buf209.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf209.users = [NodeUser(node=ExternKernelSchedulerNode(name='op210'), can_inplace=False, is_weak=False)]
]
op209.group.device = cuda:0
op209.group.iteration = (6291456, 1)
op209.sizes = ([32, 512, 384], [])
buf208_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf197_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf209_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op209_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf208', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg151_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf197', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf209', get_index_3, mul, None)
        return store
op209 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op210: ExternKernelSchedulerNode(ExternKernelOut)
op210.writes = [StarDep(name='buf210', mode=None)]
op210.unmet_dependencies = [StarDep(name='buf209', mode=None)]
op210.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op210.outputs = [
    buf210: ExternKernelOut
    buf210.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf210.users = [
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
    ]
]
op210.node.kernel = extern_kernels.mm


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 98304}, None)]
op211.unmet_dependencies = [MemoryDep('buf210', c0, {c0: 884736}, None)]
op211.met_dependencies = [MemoryDep('arg155_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf211.users = [
        NodeUser(node=SchedulerNode(name='op212'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
    ]
]
op211.group.device = cuda:0
op211.group.iteration = (98304, 9)
op211.sizes = ([98304], [9])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op211_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf211', get_index_2, reduction)
        return store_reduction
op211 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op212: SchedulerNode(ComputedBuffer)
op212.writes = [MemoryDep('buf212', c0, {c0: 98304}, None)]
op212.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 884736}, None),
        MemoryDep('buf211', c0, {c0: 98304}, None)]
op212.met_dependencies = [MemoryDep('arg155_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op212.outputs = [
    buf212: ComputedBuffer
    buf212.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf212.users = [NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False)]
]
op212.group.device = cuda:0
op212.group.iteration = (98304, 9)
op212.sizes = ([98304], [9])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf212_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op212_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf211', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf212', get_index_3, reduction)
        return store_reduction
op212 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', c0, {c0: 56623104}, None)]
op213.unmet_dependencies = [MemoryDep('buf205', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op213.met_dependencies = [MemoryDep('arg157_1', c1, {c0: 16384, c1: 384}, None)]
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf213.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op213.group.device = cuda:0
op213.group.iteration = (56623104, 1)
op213.sizes = ([32, 512, 384, 9], [])
buf205_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op213_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf213', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf205', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg157_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op213 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', c0, {c0: 884736}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf210', c0, {c0: 884736}, None),
        MemoryDep('buf211', c0, {c0: 98304}, None),
        MemoryDep('buf212', c0, {c0: 98304}, None)]
op214.met_dependencies = [MemoryDep('arg155_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf214.users = [NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (884736, 1)
op214.sizes = ([98304, 9], [])
buf210_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg155_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf212_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf214_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op214_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf210', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg155_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf211', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf212', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf214', get_index_4, truediv, None)
        return store
op214 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf213', mode=None), StarDep(name='buf214', mode=None)]
op215.met_dependencies = []
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.bmm


op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', c0, {c0: 12582912}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf201', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf215', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (12582912, 1)
op216.sizes = ([16384, 12, 64], [])
buf201_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf215_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf216_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op216_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf216', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf201', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf215', get_index)
        return load
op216 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op217: ExternKernelSchedulerNode(ExternKernelOut)
op217.writes = [StarDep(name='buf217', mode=None)]
op217.unmet_dependencies = [StarDep(name='buf216', mode=None)]
op217.met_dependencies = [StarDep(name='arg158_1', mode=None)]
op217.outputs = [
    buf217: ExternKernelOut
    buf217.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf217.users = [
        NodeUser(node=SchedulerNode(name='op218'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op220'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=True, is_weak=False),
    ]
]
op217.node.kernel = extern_kernels.mm


op218: SchedulerNode(ComputedBuffer)
op218.writes = [MemoryDep('buf218', c0, {c0: 16384}, None)]
op218.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 12582912}, None),
        MemoryDep('buf217', c0, {c0: 12582912}, None)]
op218.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 16384, c1: 768}, None)]
op218.outputs = [
    buf218: ComputedBuffer
    buf218.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf218.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op218.group.device = cuda:0
op218.group.iteration = (16384, 768)
op218.sizes = ([16384], [768])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op218_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf218', get_index_3, getitem)
        return store_reduction
op218 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 16384}, None)]
op219.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 12582912}, None),
        MemoryDep('buf217', c0, {c0: 12582912}, None)]
op219.met_dependencies = [MemoryDep('arg159_1', c1, {c0: 16384, c1: 768}, None)]
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf219.users = [NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (16384, 768)
op219.sizes = ([16384], [768])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op219_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf219', get_index_3, getitem_1)
        return store_reduction
op219 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 12582912}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf196', c0, {c0: 12582912}, None),
        MemoryDep('buf217', c0, {c0: 12582912}, None),
        MemoryDep('buf218', c0, {c0: 16384}, None),
        MemoryDep('buf219', c0, {c0: 16384}, None)]
op221.met_dependencies = 
    [   MemoryDep('arg159_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg160_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg161_1', c1, {c0: 16384, c1: 768}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf221.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
    ]
]
op221.group.device = cuda:0
op221.group.iteration = (12582912, 1)
op221.sizes = ([16384, 768], [])
buf217_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf218_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf219_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg160_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op221_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf217', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg159_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf196', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf218', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf219', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg160_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg161_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf221', get_index_7, add_3, None)
        return store
op221 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op222: ExternKernelSchedulerNode(ExternKernelOut)
op222.writes = [StarDep(name='buf222', mode=None)]
op222.unmet_dependencies = [StarDep(name='buf221', mode=None)]
op222.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op222.outputs = [
    buf222: ExternKernelOut
    buf222.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf222.users = [NodeUser(node=SchedulerNode(name='op223'), can_inplace=True, is_weak=False)]
]
op222.node.kernel = extern_kernels.mm


op223: SchedulerNode(ComputedBuffer)
op223.writes = [MemoryDep('buf223', c0, {c0: 50331648}, None)]
op223.unmet_dependencies = [MemoryDep('buf222', c0, {c0: 50331648}, None)]
op223.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 16384, c1: 3072}, None)]
op223.outputs = [
    buf223: ComputedBuffer
    buf223.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf223.users = [NodeUser(node=ExternKernelSchedulerNode(name='op224'), can_inplace=False, is_weak=False)]
]
op223.group.device = cuda:0
op223.group.iteration = (50331648, 1)
op223.sizes = ([16384, 3072], [])
buf222_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf223_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op223_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf222', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg163_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf222', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg163_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf223', get_index_4, mul_2, None)
        return store
op223 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op224: ExternKernelSchedulerNode(ExternKernelOut)
op224.writes = [StarDep(name='buf224', mode=None)]
op224.unmet_dependencies = [StarDep(name='buf223', mode=None)]
op224.met_dependencies = [StarDep(name='arg164_1', mode=None)]
op224.outputs = [
    buf224: ExternKernelOut
    buf224.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf224.users = [
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op228'), can_inplace=True, is_weak=False),
    ]
]
op224.node.kernel = extern_kernels.mm


op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 16384}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 12582912}, None),
        MemoryDep('buf224', c0, {c0: 12582912}, None)]
op225.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 16384, c1: 768}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf225.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (16384, 768)
op225.sizes = ([16384], [768])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op225_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem)
        return store_reduction
op225 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op226: SchedulerNode(ComputedBuffer)
op226.writes = [MemoryDep('buf226', c0, {c0: 16384}, None)]
op226.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 12582912}, None),
        MemoryDep('buf224', c0, {c0: 12582912}, None)]
op226.met_dependencies = [MemoryDep('arg165_1', c1, {c0: 16384, c1: 768}, None)]
op226.outputs = [
    buf226: ComputedBuffer
    buf226.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf226.users = [NodeUser(node=SchedulerNode(name='op228'), can_inplace=False, is_weak=False)]
]
op226.group.device = cuda:0
op226.group.iteration = (16384, 768)
op226.sizes = ([16384], [768])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op226_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf226', get_index_3, getitem_1)
        return store_reduction
op226 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op228: SchedulerNode(ComputedBuffer)
op228.writes = [MemoryDep('buf228', c0, {c0: 12582912}, None)]
op228.unmet_dependencies = 
    [   MemoryDep('buf221', c0, {c0: 12582912}, None),
        MemoryDep('buf224', c0, {c0: 12582912}, None),
        MemoryDep('buf225', c0, {c0: 16384}, None),
        MemoryDep('buf226', c0, {c0: 16384}, None)]
op228.met_dependencies = 
    [   MemoryDep('arg165_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg166_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg167_1', c1, {c0: 16384, c1: 768}, None)]
op228.outputs = [
    buf228: ComputedBuffer
    buf228.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf228.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op230'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
    ]
]
op228.group.device = cuda:0
op228.group.iteration = (12582912, 1)
op228.sizes = ([16384, 768], [])
buf224_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf226_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg166_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op228_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf224', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg165_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf221', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf225', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf226', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg166_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg167_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf228', get_index_7, add_3, None)
        return store
op228 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op229: ExternKernelSchedulerNode(ExternKernelOut)
op229.writes = [StarDep(name='buf229', mode=None)]
op229.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op229.met_dependencies = [StarDep(name='arg168_1', mode=None), StarDep(name='arg169_1', mode=None)]
op229.outputs = [
    buf229: ExternKernelOut
    buf229.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf229.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=True, is_weak=False),
    ]
]
op229.node.kernel = extern_kernels.addmm


op230: ExternKernelSchedulerNode(ExternKernelOut)
op230.writes = [StarDep(name='buf230', mode=None)]
op230.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op230.met_dependencies = [StarDep(name='arg170_1', mode=None), StarDep(name='arg171_1', mode=None)]
op230.outputs = [
    buf230: ExternKernelOut
    buf230.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op230.node.kernel = extern_kernels.addmm


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op231.met_dependencies = [StarDep(name='arg172_1', mode=None), StarDep(name='arg173_1', mode=None)]
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf231.users = [NodeUser(node=ExternKernelSchedulerNode(name='op232'), can_inplace=False, is_weak=False)]
]
op231.node.kernel = extern_kernels.addmm


op232: ExternKernelSchedulerNode(FallbackKernel)
op232.writes = [StarDep(name='buf232', mode=None)]
op232.unmet_dependencies = 
    [   StarDep(name='buf229', mode=None),
        StarDep(name='buf230', mode=None),
        StarDep(name='buf231', mode=None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: FallbackKernel
    buf232.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf232.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op235'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op236'), can_inplace=False, is_weak=False),
    ]
]
op232.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op233: ExternKernelSchedulerNode(MultiOutput)
op233.writes = [StarDep(name='buf233', mode=None)]
op233.unmet_dependencies = [StarDep(name='buf232', mode=None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: MultiOutput
    buf233.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf233.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op233.node.kernel = None


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf228', mode=None)]
op237.met_dependencies = [StarDep(name='arg179_1', mode=None)]
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.mm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 12582912}, None)]
op238.unmet_dependencies = [MemoryDep('buf228', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (12582912, 1)
op238.sizes = ([32, 768, 512], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op238_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf238', get_index_1, load, None)
        return store
op238 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op239: ExternKernelSchedulerNode(ExternKernelAlloc)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg175_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelAlloc
    buf239.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf239.users = [NodeUser(node=ExternKernelSchedulerNode(name='op240'), can_inplace=False, is_weak=False)]
]
op239.node.kernel = extern_kernels.convolution


op240: ExternKernelSchedulerNode(ExternKernelAlloc)
op240.writes = [StarDep(name='buf240', mode=None)]
op240.unmet_dependencies = [StarDep(name='buf239', mode=None)]
op240.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op240.outputs = [
    buf240: ExternKernelAlloc
    buf240.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf240.users = [NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False)]
]
op240.node.kernel = extern_kernels.convolution


op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 6291456}, None)]
op241.unmet_dependencies = 
    [   MemoryDep('buf229', c0, {c0: 6291456}, None),
        MemoryDep('buf240', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op241.met_dependencies = [MemoryDep('arg174_1', c1, {c0: 16384, c1: 384}, None)]
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf241.users = [NodeUser(node=ExternKernelSchedulerNode(name='op242'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (6291456, 1)
op241.sizes = ([32, 512, 384], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op241_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg174_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf229', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf241', get_index_3, mul, None)
        return store
op241 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op242: ExternKernelSchedulerNode(ExternKernelOut)
op242.writes = [StarDep(name='buf242', mode=None)]
op242.unmet_dependencies = [StarDep(name='buf241', mode=None)]
op242.met_dependencies = [StarDep(name='arg177_1', mode=None)]
op242.outputs = [
    buf242: ExternKernelOut
    buf242.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf242.users = [
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False),
    ]
]
op242.node.kernel = extern_kernels.mm


op243: SchedulerNode(ComputedBuffer)
op243.writes = [MemoryDep('buf243', c0, {c0: 98304}, None)]
op243.unmet_dependencies = [MemoryDep('buf242', c0, {c0: 884736}, None)]
op243.met_dependencies = [MemoryDep('arg178_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op243.outputs = [
    buf243: ComputedBuffer
    buf243.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf243.users = [
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False),
    ]
]
op243.group.device = cuda:0
op243.group.iteration = (98304, 9)
op243.sizes = ([98304], [9])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op243_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf243', get_index_2, reduction)
        return store_reduction
op243 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 98304}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 884736}, None),
        MemoryDep('buf243', c0, {c0: 98304}, None)]
op244.met_dependencies = [MemoryDep('arg178_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf244.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (98304, 9)
op244.sizes = ([98304], [9])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf244_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op244_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf243', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf244', get_index_3, reduction)
        return store_reduction
op244 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op245: SchedulerNode(ComputedBuffer)
op245.writes = [MemoryDep('buf245', c0, {c0: 56623104}, None)]
op245.unmet_dependencies = [MemoryDep('buf237', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op245.met_dependencies = [MemoryDep('arg180_1', c1, {c0: 16384, c1: 384}, None)]
op245.outputs = [
    buf245: ComputedBuffer
    buf245.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf245.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op245.group.device = cuda:0
op245.group.iteration = (56623104, 1)
op245.sizes = ([32, 512, 384, 9], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf245_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op245_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf245', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg180_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op245 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 884736}, None)]
op246.unmet_dependencies = 
    [   MemoryDep('buf242', c0, {c0: 884736}, None),
        MemoryDep('buf243', c0, {c0: 98304}, None),
        MemoryDep('buf244', c0, {c0: 98304}, None)]
op246.met_dependencies = [MemoryDep('arg178_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (884736, 1)
op246.sizes = ([98304, 9], [])
buf242_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg178_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf243_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf244_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf246_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op246_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf242', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg178_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf243', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf244', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf246', get_index_4, truediv, None)
        return store
op246 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf245', mode=None), StarDep(name='buf246', mode=None)]
op247.met_dependencies = []
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf247.users = [NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False)]
]
op247.node.kernel = extern_kernels.bmm


op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 12582912}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf233', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf247', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op248.met_dependencies = []
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf248.users = [NodeUser(node=ExternKernelSchedulerNode(name='op249'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (12582912, 1)
op248.sizes = ([16384, 12, 64], [])
buf233_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op248_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf248', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf233', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf247', get_index)
        return load
op248 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op249: ExternKernelSchedulerNode(ExternKernelOut)
op249.writes = [StarDep(name='buf249', mode=None)]
op249.unmet_dependencies = [StarDep(name='buf248', mode=None)]
op249.met_dependencies = [StarDep(name='arg181_1', mode=None)]
op249.outputs = [
    buf249: ExternKernelOut
    buf249.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf249.users = [
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op252'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False),
    ]
]
op249.node.kernel = extern_kernels.mm


op250: SchedulerNode(ComputedBuffer)
op250.writes = [MemoryDep('buf250', c0, {c0: 16384}, None)]
op250.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 12582912}, None),
        MemoryDep('buf249', c0, {c0: 12582912}, None)]
op250.met_dependencies = [MemoryDep('arg182_1', c1, {c0: 16384, c1: 768}, None)]
op250.outputs = [
    buf250: ComputedBuffer
    buf250.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf250.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op250.group.device = cuda:0
op250.group.iteration = (16384, 768)
op250.sizes = ([16384], [768])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op250_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf250', get_index_3, getitem)
        return store_reduction
op250 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 16384}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 12582912}, None),
        MemoryDep('buf249', c0, {c0: 12582912}, None)]
op251.met_dependencies = [MemoryDep('arg182_1', c1, {c0: 16384, c1: 768}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf251.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (16384, 768)
op251.sizes = ([16384], [768])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op251_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf251', get_index_3, getitem_1)
        return store_reduction
op251 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 12582912}, None)]
op253.unmet_dependencies = 
    [   MemoryDep('buf228', c0, {c0: 12582912}, None),
        MemoryDep('buf249', c0, {c0: 12582912}, None),
        MemoryDep('buf250', c0, {c0: 16384}, None),
        MemoryDep('buf251', c0, {c0: 16384}, None)]
op253.met_dependencies = 
    [   MemoryDep('arg182_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg183_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg184_1', c1, {c0: 16384, c1: 768}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf253.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op253.group.device = cuda:0
op253.group.iteration = (12582912, 1)
op253.sizes = ([16384, 768], [])
buf249_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg182_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf228_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf250_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf251_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg183_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg184_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op253_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf249', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg182_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf228', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf250', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf251', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg183_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg184_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf253', get_index_7, add_3, None)
        return store
op253 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg185_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 50331648}, None)]
op255.unmet_dependencies = [MemoryDep('buf254', c0, {c0: 50331648}, None)]
op255.met_dependencies = [MemoryDep('arg186_1', c1, {c0: 16384, c1: 3072}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf255.users = [NodeUser(node=ExternKernelSchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op255.group.device = cuda:0
op255.group.iteration = (50331648, 1)
op255.sizes = ([16384, 3072], [])
buf254_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op255_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf254', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg186_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf254', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg186_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf255', get_index_4, mul_2, None)
        return store
op255 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op256: ExternKernelSchedulerNode(ExternKernelOut)
op256.writes = [StarDep(name='buf256', mode=None)]
op256.unmet_dependencies = [StarDep(name='buf255', mode=None)]
op256.met_dependencies = [StarDep(name='arg187_1', mode=None)]
op256.outputs = [
    buf256: ExternKernelOut
    buf256.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf256.users = [
        NodeUser(node=SchedulerNode(name='op257'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=True, is_weak=False),
    ]
]
op256.node.kernel = extern_kernels.mm


op257: SchedulerNode(ComputedBuffer)
op257.writes = [MemoryDep('buf257', c0, {c0: 16384}, None)]
op257.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 12582912}, None),
        MemoryDep('buf256', c0, {c0: 12582912}, None)]
op257.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 16384, c1: 768}, None)]
op257.outputs = [
    buf257: ComputedBuffer
    buf257.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf257.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op257.group.device = cuda:0
op257.group.iteration = (16384, 768)
op257.sizes = ([16384], [768])
buf256_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op257_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf257', get_index_3, getitem)
        return store_reduction
op257 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 16384}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 12582912}, None),
        MemoryDep('buf256', c0, {c0: 12582912}, None)]
op258.met_dependencies = [MemoryDep('arg188_1', c1, {c0: 16384, c1: 768}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf258.users = [NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (16384, 768)
op258.sizes = ([16384], [768])
buf256_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op258_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf258', get_index_3, getitem_1)
        return store_reduction
op258 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op260: SchedulerNode(ComputedBuffer)
op260.writes = [MemoryDep('buf260', c0, {c0: 12582912}, None)]
op260.unmet_dependencies = 
    [   MemoryDep('buf253', c0, {c0: 12582912}, None),
        MemoryDep('buf256', c0, {c0: 12582912}, None),
        MemoryDep('buf257', c0, {c0: 16384}, None),
        MemoryDep('buf258', c0, {c0: 16384}, None)]
op260.met_dependencies = 
    [   MemoryDep('arg188_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg189_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg190_1', c1, {c0: 16384, c1: 768}, None)]
op260.outputs = [
    buf260: ComputedBuffer
    buf260.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf260.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op262'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op260.group.device = cuda:0
op260.group.iteration = (12582912, 1)
op260.sizes = ([16384, 768], [])
buf256_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg188_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf258_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg190_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op260_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf256', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg188_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf253', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf257', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf258', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg189_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg190_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf260', get_index_7, add_3, None)
        return store
op260 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op261: ExternKernelSchedulerNode(ExternKernelOut)
op261.writes = [StarDep(name='buf261', mode=None)]
op261.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op261.met_dependencies = [StarDep(name='arg191_1', mode=None), StarDep(name='arg192_1', mode=None)]
op261.outputs = [
    buf261: ExternKernelOut
    buf261.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf261.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op273'), can_inplace=True, is_weak=False),
    ]
]
op261.node.kernel = extern_kernels.addmm


op262: ExternKernelSchedulerNode(ExternKernelOut)
op262.writes = [StarDep(name='buf262', mode=None)]
op262.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op262.met_dependencies = [StarDep(name='arg193_1', mode=None), StarDep(name='arg194_1', mode=None)]
op262.outputs = [
    buf262: ExternKernelOut
    buf262.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf262.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op262.node.kernel = extern_kernels.addmm


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op263.met_dependencies = [StarDep(name='arg195_1', mode=None), StarDep(name='arg196_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf263.users = [NodeUser(node=ExternKernelSchedulerNode(name='op264'), can_inplace=False, is_weak=False)]
]
op263.node.kernel = extern_kernels.addmm


op264: ExternKernelSchedulerNode(FallbackKernel)
op264.writes = [StarDep(name='buf264', mode=None)]
op264.unmet_dependencies = 
    [   StarDep(name='buf261', mode=None),
        StarDep(name='buf262', mode=None),
        StarDep(name='buf263', mode=None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: FallbackKernel
    buf264.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf264.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op265'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op268'), can_inplace=False, is_weak=False),
    ]
]
op264.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op265: ExternKernelSchedulerNode(MultiOutput)
op265.writes = [StarDep(name='buf265', mode=None)]
op265.unmet_dependencies = [StarDep(name='buf264', mode=None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: MultiOutput
    buf265.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf265.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op265.node.kernel = None


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf260', mode=None)]
op269.met_dependencies = [StarDep(name='arg202_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', c0, {c0: 12582912}, None)]
op270.unmet_dependencies = [MemoryDep('buf260', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (12582912, 1)
op270.sizes = ([32, 768, 512], [])
buf260_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf270_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op270_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf260', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf270', get_index_1, load, None)
        return store
op270 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op271: ExternKernelSchedulerNode(ExternKernelAlloc)
op271.writes = [StarDep(name='buf271', mode=None)]
op271.unmet_dependencies = [StarDep(name='buf270', mode=None)]
op271.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op271.outputs = [
    buf271: ExternKernelAlloc
    buf271.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.node.kernel = extern_kernels.convolution


op272: ExternKernelSchedulerNode(ExternKernelAlloc)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf271', mode=None)]
op272.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op272.outputs = [
    buf272: ExternKernelAlloc
    buf272.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.convolution


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 6291456}, None)]
op273.unmet_dependencies = 
    [   MemoryDep('buf261', c0, {c0: 6291456}, None),
        MemoryDep('buf272', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op273.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 16384, c1: 384}, None)]
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (6291456, 1)
op273.sizes = ([32, 512, 384], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op273_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf261', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf273', get_index_3, mul, None)
        return store
op273 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg200_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf274.users = [
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=True, is_weak=False),
    ]
]
op274.node.kernel = extern_kernels.mm


op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 98304}, None)]
op275.unmet_dependencies = [MemoryDep('buf274', c0, {c0: 884736}, None)]
op275.met_dependencies = [MemoryDep('arg201_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (98304, 9)
op275.sizes = ([98304], [9])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op275_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg201_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf275', get_index_2, reduction)
        return store_reduction
op275 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 98304}, None)]
op276.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 884736}, None),
        MemoryDep('buf275', c0, {c0: 98304}, None)]
op276.met_dependencies = [MemoryDep('arg201_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf276.users = [NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (98304, 9)
op276.sizes = ([98304], [9])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf276_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op276_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg201_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf276', get_index_3, reduction)
        return store_reduction
op276 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 56623104}, None)]
op277.unmet_dependencies = [MemoryDep('buf269', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op277.met_dependencies = [MemoryDep('arg203_1', c1, {c0: 16384, c1: 384}, None)]
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf277.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (56623104, 1)
op277.sizes = ([32, 512, 384, 9], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op277_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf277', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg203_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op277 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op278: SchedulerNode(ComputedBuffer)
op278.writes = [MemoryDep('buf278', c0, {c0: 884736}, None)]
op278.unmet_dependencies = 
    [   MemoryDep('buf274', c0, {c0: 884736}, None),
        MemoryDep('buf275', c0, {c0: 98304}, None),
        MemoryDep('buf276', c0, {c0: 98304}, None)]
op278.met_dependencies = [MemoryDep('arg201_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op278.outputs = [
    buf278: ComputedBuffer
    buf278.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf278.users = [NodeUser(node=ExternKernelSchedulerNode(name='op279'), can_inplace=False, is_weak=False)]
]
op278.group.device = cuda:0
op278.group.iteration = (884736, 1)
op278.sizes = ([98304, 9], [])
buf274_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf276_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf278_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op278_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf274', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg201_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf275', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf276', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf278', get_index_4, truediv, None)
        return store
op278 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op279: ExternKernelSchedulerNode(ExternKernelOut)
op279.writes = [StarDep(name='buf279', mode=None)]
op279.unmet_dependencies = [StarDep(name='buf277', mode=None), StarDep(name='buf278', mode=None)]
op279.met_dependencies = []
op279.outputs = [
    buf279: ExternKernelOut
    buf279.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf279.users = [NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False)]
]
op279.node.kernel = extern_kernels.bmm


op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 12582912}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf265', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf279', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op280.met_dependencies = []
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf280.users = [NodeUser(node=ExternKernelSchedulerNode(name='op281'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (12582912, 1)
op280.sizes = ([16384, 12, 64], [])
buf265_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op280_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf280', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf265', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf279', get_index)
        return load
op280 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op281: ExternKernelSchedulerNode(ExternKernelOut)
op281.writes = [StarDep(name='buf281', mode=None)]
op281.unmet_dependencies = [StarDep(name='buf280', mode=None)]
op281.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op281.outputs = [
    buf281: ExternKernelOut
    buf281.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf281.users = [
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=True, is_weak=False),
    ]
]
op281.node.kernel = extern_kernels.mm


op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 16384}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 12582912}, None),
        MemoryDep('buf281', c0, {c0: 12582912}, None)]
op282.met_dependencies = [MemoryDep('arg205_1', c1, {c0: 16384, c1: 768}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf282.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op282.group.device = cuda:0
op282.group.iteration = (16384, 768)
op282.sizes = ([16384], [768])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op282_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf282', get_index_3, getitem)
        return store_reduction
op282 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op283: SchedulerNode(ComputedBuffer)
op283.writes = [MemoryDep('buf283', c0, {c0: 16384}, None)]
op283.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 12582912}, None),
        MemoryDep('buf281', c0, {c0: 12582912}, None)]
op283.met_dependencies = [MemoryDep('arg205_1', c1, {c0: 16384, c1: 768}, None)]
op283.outputs = [
    buf283: ComputedBuffer
    buf283.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf283.users = [NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False)]
]
op283.group.device = cuda:0
op283.group.iteration = (16384, 768)
op283.sizes = ([16384], [768])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf283_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op283_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf283', get_index_3, getitem_1)
        return store_reduction
op283 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 12582912}, None)]
op285.unmet_dependencies = 
    [   MemoryDep('buf260', c0, {c0: 12582912}, None),
        MemoryDep('buf281', c0, {c0: 12582912}, None),
        MemoryDep('buf282', c0, {c0: 16384}, None),
        MemoryDep('buf283', c0, {c0: 16384}, None)]
op285.met_dependencies = 
    [   MemoryDep('arg205_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg206_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg207_1', c1, {c0: 16384, c1: 768}, None)]
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf285.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op285.group.device = cuda:0
op285.group.iteration = (12582912, 1)
op285.sizes = ([16384, 768], [])
buf281_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf260_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf283_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg206_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op285_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf281', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf260', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf282', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf283', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg206_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg207_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf285', get_index_7, add_3, None)
        return store
op285 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf285', mode=None)]
op286.met_dependencies = [StarDep(name='arg208_1', mode=None)]
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf286.users = [NodeUser(node=SchedulerNode(name='op287'), can_inplace=True, is_weak=False)]
]
op286.node.kernel = extern_kernels.mm


op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 50331648}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 50331648}, None)]
op287.met_dependencies = [MemoryDep('arg209_1', c1, {c0: 16384, c1: 3072}, None)]
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf287.users = [NodeUser(node=ExternKernelSchedulerNode(name='op288'), can_inplace=False, is_weak=False)]
]
op287.group.device = cuda:0
op287.group.iteration = (50331648, 1)
op287.sizes = ([16384, 3072], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op287_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg209_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf286', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg209_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf287', get_index_4, mul_2, None)
        return store
op287 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op288: ExternKernelSchedulerNode(ExternKernelOut)
op288.writes = [StarDep(name='buf288', mode=None)]
op288.unmet_dependencies = [StarDep(name='buf287', mode=None)]
op288.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op288.outputs = [
    buf288: ExternKernelOut
    buf288.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf288.users = [
        NodeUser(node=SchedulerNode(name='op289'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op292'), can_inplace=True, is_weak=False),
    ]
]
op288.node.kernel = extern_kernels.mm


op289: SchedulerNode(ComputedBuffer)
op289.writes = [MemoryDep('buf289', c0, {c0: 16384}, None)]
op289.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 12582912}, None),
        MemoryDep('buf288', c0, {c0: 12582912}, None)]
op289.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 16384, c1: 768}, None)]
op289.outputs = [
    buf289: ComputedBuffer
    buf289.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf289.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op289.group.device = cuda:0
op289.group.iteration = (16384, 768)
op289.sizes = ([16384], [768])
buf288_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op289_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf289', get_index_3, getitem)
        return store_reduction
op289 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 16384}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 12582912}, None),
        MemoryDep('buf288', c0, {c0: 12582912}, None)]
op290.met_dependencies = [MemoryDep('arg211_1', c1, {c0: 16384, c1: 768}, None)]
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf290.users = [NodeUser(node=SchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (16384, 768)
op290.sizes = ([16384], [768])
buf288_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf290_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op290_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf290', get_index_3, getitem_1)
        return store_reduction
op290 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op292: SchedulerNode(ComputedBuffer)
op292.writes = [MemoryDep('buf292', c0, {c0: 12582912}, None)]
op292.unmet_dependencies = 
    [   MemoryDep('buf285', c0, {c0: 12582912}, None),
        MemoryDep('buf288', c0, {c0: 12582912}, None),
        MemoryDep('buf289', c0, {c0: 16384}, None),
        MemoryDep('buf290', c0, {c0: 16384}, None)]
op292.met_dependencies = 
    [   MemoryDep('arg211_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg212_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg213_1', c1, {c0: 16384, c1: 768}, None)]
op292.outputs = [
    buf292: ComputedBuffer
    buf292.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf292.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op293'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op295'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op301'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op302'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op292.group.device = cuda:0
op292.group.iteration = (12582912, 1)
op292.sizes = ([16384, 768], [])
buf288_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg211_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf289_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf290_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg212_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op292_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf288', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg211_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf285', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf289', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf290', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg212_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg213_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf292', get_index_7, add_3, None)
        return store
op292 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op293: ExternKernelSchedulerNode(ExternKernelOut)
op293.writes = [StarDep(name='buf293', mode=None)]
op293.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op293.met_dependencies = [StarDep(name='arg214_1', mode=None), StarDep(name='arg215_1', mode=None)]
op293.outputs = [
    buf293: ExternKernelOut
    buf293.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf293.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=True, is_weak=False),
    ]
]
op293.node.kernel = extern_kernels.addmm


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op294.met_dependencies = [StarDep(name='arg216_1', mode=None), StarDep(name='arg217_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf294.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op294.node.kernel = extern_kernels.addmm


op295: ExternKernelSchedulerNode(ExternKernelOut)
op295.writes = [StarDep(name='buf295', mode=None)]
op295.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op295.met_dependencies = [StarDep(name='arg218_1', mode=None), StarDep(name='arg219_1', mode=None)]
op295.outputs = [
    buf295: ExternKernelOut
    buf295.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf295.users = [NodeUser(node=ExternKernelSchedulerNode(name='op296'), can_inplace=False, is_weak=False)]
]
op295.node.kernel = extern_kernels.addmm


op296: ExternKernelSchedulerNode(FallbackKernel)
op296.writes = [StarDep(name='buf296', mode=None)]
op296.unmet_dependencies = 
    [   StarDep(name='buf293', mode=None),
        StarDep(name='buf294', mode=None),
        StarDep(name='buf295', mode=None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: FallbackKernel
    buf296.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf296.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op299'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False),
    ]
]
op296.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op297: ExternKernelSchedulerNode(MultiOutput)
op297.writes = [StarDep(name='buf297', mode=None)]
op297.unmet_dependencies = [StarDep(name='buf296', mode=None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: MultiOutput
    buf297.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf297.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op297.node.kernel = None


op301: ExternKernelSchedulerNode(ExternKernelOut)
op301.writes = [StarDep(name='buf301', mode=None)]
op301.unmet_dependencies = [StarDep(name='buf292', mode=None)]
op301.met_dependencies = [StarDep(name='arg225_1', mode=None)]
op301.outputs = [
    buf301: ExternKernelOut
    buf301.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf301.users = [NodeUser(node=SchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op301.node.kernel = extern_kernels.mm


op302: SchedulerNode(ComputedBuffer)
op302.writes = [MemoryDep('buf302', c0, {c0: 12582912}, None)]
op302.unmet_dependencies = [MemoryDep('buf292', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op302.met_dependencies = []
op302.outputs = [
    buf302: ComputedBuffer
    buf302.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf302.users = [NodeUser(node=ExternKernelSchedulerNode(name='op303'), can_inplace=False, is_weak=False)]
]
op302.group.device = cuda:0
op302.group.iteration = (12582912, 1)
op302.sizes = ([32, 768, 512], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op302_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf302', get_index_1, load, None)
        return store
op302 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op303: ExternKernelSchedulerNode(ExternKernelAlloc)
op303.writes = [StarDep(name='buf303', mode=None)]
op303.unmet_dependencies = [StarDep(name='buf302', mode=None)]
op303.met_dependencies = [StarDep(name='arg221_1', mode=None)]
op303.outputs = [
    buf303: ExternKernelAlloc
    buf303.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf303.users = [NodeUser(node=ExternKernelSchedulerNode(name='op304'), can_inplace=False, is_weak=False)]
]
op303.node.kernel = extern_kernels.convolution


op304: ExternKernelSchedulerNode(ExternKernelAlloc)
op304.writes = [StarDep(name='buf304', mode=None)]
op304.unmet_dependencies = [StarDep(name='buf303', mode=None)]
op304.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op304.outputs = [
    buf304: ExternKernelAlloc
    buf304.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf304.users = [NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False)]
]
op304.node.kernel = extern_kernels.convolution


op305: SchedulerNode(ComputedBuffer)
op305.writes = [MemoryDep('buf305', c0, {c0: 6291456}, None)]
op305.unmet_dependencies = 
    [   MemoryDep('buf293', c0, {c0: 6291456}, None),
        MemoryDep('buf304', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op305.met_dependencies = [MemoryDep('arg220_1', c1, {c0: 16384, c1: 384}, None)]
op305.outputs = [
    buf305: ComputedBuffer
    buf305.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf305.users = [NodeUser(node=ExternKernelSchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op305.group.device = cuda:0
op305.group.iteration = (6291456, 1)
op305.sizes = ([32, 512, 384], [])
buf304_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf305_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op305_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf304', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg220_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf293', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf305', get_index_3, mul, None)
        return store
op305 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op306: ExternKernelSchedulerNode(ExternKernelOut)
op306.writes = [StarDep(name='buf306', mode=None)]
op306.unmet_dependencies = [StarDep(name='buf305', mode=None)]
op306.met_dependencies = [StarDep(name='arg223_1', mode=None)]
op306.outputs = [
    buf306: ExternKernelOut
    buf306.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf306.users = [
        NodeUser(node=SchedulerNode(name='op307'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
    ]
]
op306.node.kernel = extern_kernels.mm


op307: SchedulerNode(ComputedBuffer)
op307.writes = [MemoryDep('buf307', c0, {c0: 98304}, None)]
op307.unmet_dependencies = [MemoryDep('buf306', c0, {c0: 884736}, None)]
op307.met_dependencies = [MemoryDep('arg224_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op307.outputs = [
    buf307: ComputedBuffer
    buf307.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf307.users = [
        NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False),
    ]
]
op307.group.device = cuda:0
op307.group.iteration = (98304, 9)
op307.sizes = ([98304], [9])
buf306_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op307_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf307', get_index_2, reduction)
        return store_reduction
op307 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 98304}, None)]
op308.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 884736}, None),
        MemoryDep('buf307', c0, {c0: 98304}, None)]
op308.met_dependencies = [MemoryDep('arg224_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf308.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (98304, 9)
op308.sizes = ([98304], [9])
buf306_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf308_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op308_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf307', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf308', get_index_3, reduction)
        return store_reduction
op308 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op309: SchedulerNode(ComputedBuffer)
op309.writes = [MemoryDep('buf309', c0, {c0: 56623104}, None)]
op309.unmet_dependencies = [MemoryDep('buf301', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op309.met_dependencies = [MemoryDep('arg226_1', c1, {c0: 16384, c1: 384}, None)]
op309.outputs = [
    buf309: ComputedBuffer
    buf309.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf309.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op309.group.device = cuda:0
op309.group.iteration = (56623104, 1)
op309.sizes = ([32, 512, 384, 9], [])
buf301_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg226_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op309_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf309', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf301', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg226_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op309 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 884736}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf306', c0, {c0: 884736}, None),
        MemoryDep('buf307', c0, {c0: 98304}, None),
        MemoryDep('buf308', c0, {c0: 98304}, None)]
op310.met_dependencies = [MemoryDep('arg224_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (884736, 1)
op310.sizes = ([98304, 9], [])
buf306_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf307_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf308_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf310_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op310_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf306', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg224_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf307', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf308', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf310', get_index_4, truediv, None)
        return store
op310 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf309', mode=None), StarDep(name='buf310', mode=None)]
op311.met_dependencies = []
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.node.kernel = extern_kernels.bmm


op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 12582912}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf297', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf311', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op312.met_dependencies = []
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf312.users = [NodeUser(node=ExternKernelSchedulerNode(name='op313'), can_inplace=False, is_weak=False)]
]
op312.group.device = cuda:0
op312.group.iteration = (12582912, 1)
op312.sizes = ([16384, 12, 64], [])
buf297_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op312_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf312', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf297', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf311', get_index)
        return load
op312 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op313: ExternKernelSchedulerNode(ExternKernelOut)
op313.writes = [StarDep(name='buf313', mode=None)]
op313.unmet_dependencies = [StarDep(name='buf312', mode=None)]
op313.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op313.outputs = [
    buf313: ExternKernelOut
    buf313.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf313.users = [
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op317'), can_inplace=True, is_weak=False),
    ]
]
op313.node.kernel = extern_kernels.mm


op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 16384}, None)]
op314.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 12582912}, None),
        MemoryDep('buf313', c0, {c0: 12582912}, None)]
op314.met_dependencies = [MemoryDep('arg228_1', c1, {c0: 16384, c1: 768}, None)]
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf314.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (16384, 768)
op314.sizes = ([16384], [768])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op314_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf292', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf314', get_index_3, getitem)
        return store_reduction
op314 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op315: SchedulerNode(ComputedBuffer)
op315.writes = [MemoryDep('buf315', c0, {c0: 16384}, None)]
op315.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 12582912}, None),
        MemoryDep('buf313', c0, {c0: 12582912}, None)]
op315.met_dependencies = [MemoryDep('arg228_1', c1, {c0: 16384, c1: 768}, None)]
op315.outputs = [
    buf315: ComputedBuffer
    buf315.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf315.users = [NodeUser(node=SchedulerNode(name='op317'), can_inplace=False, is_weak=False)]
]
op315.group.device = cuda:0
op315.group.iteration = (16384, 768)
op315.sizes = ([16384], [768])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf315_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op315_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf292', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf315', get_index_3, getitem_1)
        return store_reduction
op315 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op317: SchedulerNode(ComputedBuffer)
op317.writes = [MemoryDep('buf317', c0, {c0: 12582912}, None)]
op317.unmet_dependencies = 
    [   MemoryDep('buf292', c0, {c0: 12582912}, None),
        MemoryDep('buf313', c0, {c0: 12582912}, None),
        MemoryDep('buf314', c0, {c0: 16384}, None),
        MemoryDep('buf315', c0, {c0: 16384}, None)]
op317.met_dependencies = 
    [   MemoryDep('arg228_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg229_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg230_1', c1, {c0: 16384, c1: 768}, None)]
op317.outputs = [
    buf317: ComputedBuffer
    buf317.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf317.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
    ]
]
op317.group.device = cuda:0
op317.group.iteration = (12582912, 1)
op317.sizes = ([16384, 768], [])
buf313_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg228_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf292_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf315_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op317_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf313', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg228_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf292', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf314', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf315', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg229_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg230_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf317', get_index_7, add_3, None)
        return store
op317 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op318: ExternKernelSchedulerNode(ExternKernelOut)
op318.writes = [StarDep(name='buf318', mode=None)]
op318.unmet_dependencies = [StarDep(name='buf317', mode=None)]
op318.met_dependencies = [StarDep(name='arg231_1', mode=None)]
op318.outputs = [
    buf318: ExternKernelOut
    buf318.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf318.users = [NodeUser(node=SchedulerNode(name='op319'), can_inplace=True, is_weak=False)]
]
op318.node.kernel = extern_kernels.mm


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 50331648}, None)]
op319.unmet_dependencies = [MemoryDep('buf318', c0, {c0: 50331648}, None)]
op319.met_dependencies = [MemoryDep('arg232_1', c1, {c0: 16384, c1: 3072}, None)]
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (50331648, 1)
op319.sizes = ([16384, 3072], [])
buf318_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg232_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op319_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf318', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg232_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf318', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg232_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf319', get_index_4, mul_2, None)
        return store
op319 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf319', mode=None)]
op320.met_dependencies = [StarDep(name='arg233_1', mode=None)]
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op323'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=True, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.mm


op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', c0, {c0: 16384}, None)]
op321.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 12582912}, None),
        MemoryDep('buf320', c0, {c0: 12582912}, None)]
op321.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 16384, c1: 768}, None)]
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf321.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op321.group.device = cuda:0
op321.group.iteration = (16384, 768)
op321.sizes = ([16384], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op321_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf317', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf321', get_index_3, getitem)
        return store_reduction
op321 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', c0, {c0: 16384}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 12582912}, None),
        MemoryDep('buf320', c0, {c0: 12582912}, None)]
op322.met_dependencies = [MemoryDep('arg234_1', c1, {c0: 16384, c1: 768}, None)]
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (16384, 768)
op322.sizes = ([16384], [768])
buf320_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf322_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op322_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf317', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf322', get_index_3, getitem_1)
        return store_reduction
op322 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', c0, {c0: 12582912}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf317', c0, {c0: 12582912}, None),
        MemoryDep('buf320', c0, {c0: 12582912}, None),
        MemoryDep('buf321', c0, {c0: 16384}, None),
        MemoryDep('buf322', c0, {c0: 16384}, None)]
op324.met_dependencies = 
    [   MemoryDep('arg234_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg235_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg236_1', c1, {c0: 16384, c1: 768}, None)]
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf324.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op325'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op327'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False),
    ]
]
op324.group.device = cuda:0
op324.group.iteration = (12582912, 1)
op324.sizes = ([16384, 768], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg234_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf317_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf322_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op324_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg234_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf317', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf321', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf322', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg235_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg236_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf324', get_index_7, add_3, None)
        return store
op324 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op325: ExternKernelSchedulerNode(ExternKernelOut)
op325.writes = [StarDep(name='buf325', mode=None)]
op325.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op325.met_dependencies = [StarDep(name='arg237_1', mode=None), StarDep(name='arg238_1', mode=None)]
op325.outputs = [
    buf325: ExternKernelOut
    buf325.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf325.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=True, is_weak=False),
    ]
]
op325.node.kernel = extern_kernels.addmm


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op326.met_dependencies = [StarDep(name='arg239_1', mode=None), StarDep(name='arg240_1', mode=None)]
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf326.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = extern_kernels.addmm


op327: ExternKernelSchedulerNode(ExternKernelOut)
op327.writes = [StarDep(name='buf327', mode=None)]
op327.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op327.met_dependencies = [StarDep(name='arg241_1', mode=None), StarDep(name='arg242_1', mode=None)]
op327.outputs = [
    buf327: ExternKernelOut
    buf327.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.node.kernel = extern_kernels.addmm


op328: ExternKernelSchedulerNode(FallbackKernel)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = 
    [   StarDep(name='buf325', mode=None),
        StarDep(name='buf326', mode=None),
        StarDep(name='buf327', mode=None)]
op328.met_dependencies = []
op328.outputs = [
    buf328: FallbackKernel
    buf328.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf328.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op332'), can_inplace=False, is_weak=False),
    ]
]
op328.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op329: ExternKernelSchedulerNode(MultiOutput)
op329.writes = [StarDep(name='buf329', mode=None)]
op329.unmet_dependencies = [StarDep(name='buf328', mode=None)]
op329.met_dependencies = []
op329.outputs = [
    buf329: MultiOutput
    buf329.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf329.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op329.node.kernel = None


op333: ExternKernelSchedulerNode(ExternKernelOut)
op333.writes = [StarDep(name='buf333', mode=None)]
op333.unmet_dependencies = [StarDep(name='buf324', mode=None)]
op333.met_dependencies = [StarDep(name='arg248_1', mode=None)]
op333.outputs = [
    buf333: ExternKernelOut
    buf333.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf333.users = [NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False)]
]
op333.node.kernel = extern_kernels.mm


op334: SchedulerNode(ComputedBuffer)
op334.writes = [MemoryDep('buf334', c0, {c0: 12582912}, None)]
op334.unmet_dependencies = [MemoryDep('buf324', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op334.met_dependencies = []
op334.outputs = [
    buf334: ComputedBuffer
    buf334.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf334.users = [NodeUser(node=ExternKernelSchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op334.group.device = cuda:0
op334.group.iteration = (12582912, 1)
op334.sizes = ([32, 768, 512], [])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf334_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op334_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf324', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf334', get_index_1, load, None)
        return store
op334 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op335: ExternKernelSchedulerNode(ExternKernelAlloc)
op335.writes = [StarDep(name='buf335', mode=None)]
op335.unmet_dependencies = [StarDep(name='buf334', mode=None)]
op335.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op335.outputs = [
    buf335: ExternKernelAlloc
    buf335.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf335.users = [NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False)]
]
op335.node.kernel = extern_kernels.convolution


op336: ExternKernelSchedulerNode(ExternKernelAlloc)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg245_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelAlloc
    buf336.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf336.users = [NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False)]
]
op336.node.kernel = extern_kernels.convolution


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 6291456}, None)]
op337.unmet_dependencies = 
    [   MemoryDep('buf325', c0, {c0: 6291456}, None),
        MemoryDep('buf336', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op337.met_dependencies = [MemoryDep('arg243_1', c1, {c0: 16384, c1: 384}, None)]
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op338'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (6291456, 1)
op337.sizes = ([32, 512, 384], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op337_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg243_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf325', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf337', get_index_3, mul, None)
        return store
op337 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op338: ExternKernelSchedulerNode(ExternKernelOut)
op338.writes = [StarDep(name='buf338', mode=None)]
op338.unmet_dependencies = [StarDep(name='buf337', mode=None)]
op338.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op338.outputs = [
    buf338: ExternKernelOut
    buf338.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf338.users = [
        NodeUser(node=SchedulerNode(name='op339'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=True, is_weak=False),
    ]
]
op338.node.kernel = extern_kernels.mm


op339: SchedulerNode(ComputedBuffer)
op339.writes = [MemoryDep('buf339', c0, {c0: 98304}, None)]
op339.unmet_dependencies = [MemoryDep('buf338', c0, {c0: 884736}, None)]
op339.met_dependencies = [MemoryDep('arg247_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op339.outputs = [
    buf339: ComputedBuffer
    buf339.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op339.group.device = cuda:0
op339.group.iteration = (98304, 9)
op339.sizes = ([98304], [9])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op339_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf339', get_index_2, reduction)
        return store_reduction
op339 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 98304}, None)]
op340.unmet_dependencies = 
    [   MemoryDep('buf338', c0, {c0: 884736}, None),
        MemoryDep('buf339', c0, {c0: 98304}, None)]
op340.met_dependencies = [MemoryDep('arg247_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf340.users = [NodeUser(node=SchedulerNode(name='op342'), can_inplace=False, is_weak=False)]
]
op340.group.device = cuda:0
op340.group.iteration = (98304, 9)
op340.sizes = ([98304], [9])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf340_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op340_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf339', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf340', get_index_3, reduction)
        return store_reduction
op340 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 56623104}, None)]
op341.unmet_dependencies = [MemoryDep('buf333', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op341.met_dependencies = [MemoryDep('arg249_1', c1, {c0: 16384, c1: 384}, None)]
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf341.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (56623104, 1)
op341.sizes = ([32, 512, 384, 9], [])
buf333_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf341_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op341_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf341', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf333', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg249_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op341 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op342: SchedulerNode(ComputedBuffer)
op342.writes = [MemoryDep('buf342', c0, {c0: 884736}, None)]
op342.unmet_dependencies = 
    [   MemoryDep('buf338', c0, {c0: 884736}, None),
        MemoryDep('buf339', c0, {c0: 98304}, None),
        MemoryDep('buf340', c0, {c0: 98304}, None)]
op342.met_dependencies = [MemoryDep('arg247_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op342.outputs = [
    buf342: ComputedBuffer
    buf342.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf342.users = [NodeUser(node=ExternKernelSchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op342.group.device = cuda:0
op342.group.iteration = (884736, 1)
op342.sizes = ([98304, 9], [])
buf338_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf339_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf340_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf342_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op342_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf338', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg247_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf339', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf340', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf342', get_index_4, truediv, None)
        return store
op342 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op343: ExternKernelSchedulerNode(ExternKernelOut)
op343.writes = [StarDep(name='buf343', mode=None)]
op343.unmet_dependencies = [StarDep(name='buf341', mode=None), StarDep(name='buf342', mode=None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ExternKernelOut
    buf343.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf343.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op343.node.kernel = extern_kernels.bmm


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 12582912}, None)]
op344.unmet_dependencies = 
    [   MemoryDep('buf329', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf343', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (12582912, 1)
op344.sizes = ([16384, 12, 64], [])
buf329_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf343_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op344_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf344', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf329', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf343', get_index)
        return load
op344 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf344', mode=None)]
op345.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf345.users = [
        NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op347'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=True, is_weak=False),
    ]
]
op345.node.kernel = extern_kernels.mm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 16384}, None)]
op346.unmet_dependencies = 
    [   MemoryDep('buf324', c0, {c0: 12582912}, None),
        MemoryDep('buf345', c0, {c0: 12582912}, None)]
op346.met_dependencies = [MemoryDep('arg251_1', c1, {c0: 16384, c1: 768}, None)]
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf346.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (16384, 768)
op346.sizes = ([16384], [768])
buf345_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op346_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf324', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf346', get_index_3, getitem)
        return store_reduction
op346 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op347: SchedulerNode(ComputedBuffer)
op347.writes = [MemoryDep('buf347', c0, {c0: 16384}, None)]
op347.unmet_dependencies = 
    [   MemoryDep('buf324', c0, {c0: 12582912}, None),
        MemoryDep('buf345', c0, {c0: 12582912}, None)]
op347.met_dependencies = [MemoryDep('arg251_1', c1, {c0: 16384, c1: 768}, None)]
op347.outputs = [
    buf347: ComputedBuffer
    buf347.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf347.users = [NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False)]
]
op347.group.device = cuda:0
op347.group.iteration = (16384, 768)
op347.sizes = ([16384], [768])
buf345_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op347_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf324', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf347', get_index_3, getitem_1)
        return store_reduction
op347 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 12582912}, None)]
op349.unmet_dependencies = 
    [   MemoryDep('buf324', c0, {c0: 12582912}, None),
        MemoryDep('buf345', c0, {c0: 12582912}, None),
        MemoryDep('buf346', c0, {c0: 16384}, None),
        MemoryDep('buf347', c0, {c0: 16384}, None)]
op349.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg252_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg253_1', c1, {c0: 16384, c1: 768}, None)]
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf349.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op349.group.device = cuda:0
op349.group.iteration = (12582912, 1)
op349.sizes = ([16384, 768], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf324_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf347_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op349_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg251_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf324', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf346', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf347', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg252_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg253_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf349', get_index_7, add_3, None)
        return store
op349 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op350: ExternKernelSchedulerNode(ExternKernelOut)
op350.writes = [StarDep(name='buf350', mode=None)]
op350.unmet_dependencies = [StarDep(name='buf349', mode=None)]
op350.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op350.outputs = [
    buf350: ExternKernelOut
    buf350.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf350.users = [NodeUser(node=SchedulerNode(name='op351'), can_inplace=True, is_weak=False)]
]
op350.node.kernel = extern_kernels.mm


op351: SchedulerNode(ComputedBuffer)
op351.writes = [MemoryDep('buf351', c0, {c0: 50331648}, None)]
op351.unmet_dependencies = [MemoryDep('buf350', c0, {c0: 50331648}, None)]
op351.met_dependencies = [MemoryDep('arg255_1', c1, {c0: 16384, c1: 3072}, None)]
op351.outputs = [
    buf351: ComputedBuffer
    buf351.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf351.users = [NodeUser(node=ExternKernelSchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op351.group.device = cuda:0
op351.group.iteration = (50331648, 1)
op351.sizes = ([16384, 3072], [])
buf350_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg255_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf351_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op351_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf350', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg255_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf350', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg255_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf351', get_index_4, mul_2, None)
        return store
op351 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op352: ExternKernelSchedulerNode(ExternKernelOut)
op352.writes = [StarDep(name='buf352', mode=None)]
op352.unmet_dependencies = [StarDep(name='buf351', mode=None)]
op352.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op352.outputs = [
    buf352: ExternKernelOut
    buf352.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf352.users = [
        NodeUser(node=SchedulerNode(name='op353'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op354'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op355'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=True, is_weak=False),
    ]
]
op352.node.kernel = extern_kernels.mm


op353: SchedulerNode(ComputedBuffer)
op353.writes = [MemoryDep('buf353', c0, {c0: 16384}, None)]
op353.unmet_dependencies = 
    [   MemoryDep('buf349', c0, {c0: 12582912}, None),
        MemoryDep('buf352', c0, {c0: 12582912}, None)]
op353.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 16384, c1: 768}, None)]
op353.outputs = [
    buf353: ComputedBuffer
    buf353.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf353.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op353.group.device = cuda:0
op353.group.iteration = (16384, 768)
op353.sizes = ([16384], [768])
buf352_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op353_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf349', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf353', get_index_3, getitem)
        return store_reduction
op353 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 16384}, None)]
op354.unmet_dependencies = 
    [   MemoryDep('buf349', c0, {c0: 12582912}, None),
        MemoryDep('buf352', c0, {c0: 12582912}, None)]
op354.met_dependencies = [MemoryDep('arg257_1', c1, {c0: 16384, c1: 768}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf354.users = [NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (16384, 768)
op354.sizes = ([16384], [768])
buf352_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op354_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf349', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf354', get_index_3, getitem_1)
        return store_reduction
op354 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 12582912}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf349', c0, {c0: 12582912}, None),
        MemoryDep('buf352', c0, {c0: 12582912}, None),
        MemoryDep('buf353', c0, {c0: 16384}, None),
        MemoryDep('buf354', c0, {c0: 16384}, None)]
op356.met_dependencies = 
    [   MemoryDep('arg257_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg258_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg259_1', c1, {c0: 16384, c1: 768}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf356.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op359'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op356.group.device = cuda:0
op356.group.iteration = (12582912, 1)
op356.sizes = ([16384, 768], [])
buf352_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf353_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf354_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op356_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf352', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg257_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf349', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf353', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf354', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg258_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg259_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf356', get_index_7, add_3, None)
        return store
op356 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op357: ExternKernelSchedulerNode(ExternKernelOut)
op357.writes = [StarDep(name='buf357', mode=None)]
op357.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op357.met_dependencies = [StarDep(name='arg260_1', mode=None), StarDep(name='arg261_1', mode=None)]
op357.outputs = [
    buf357: ExternKernelOut
    buf357.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf357.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=True, is_weak=False),
    ]
]
op357.node.kernel = extern_kernels.addmm


op358: ExternKernelSchedulerNode(ExternKernelOut)
op358.writes = [StarDep(name='buf358', mode=None)]
op358.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op358.met_dependencies = [StarDep(name='arg262_1', mode=None), StarDep(name='arg263_1', mode=None)]
op358.outputs = [
    buf358: ExternKernelOut
    buf358.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf358.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op358.node.kernel = extern_kernels.addmm


op359: ExternKernelSchedulerNode(ExternKernelOut)
op359.writes = [StarDep(name='buf359', mode=None)]
op359.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op359.met_dependencies = [StarDep(name='arg264_1', mode=None), StarDep(name='arg265_1', mode=None)]
op359.outputs = [
    buf359: ExternKernelOut
    buf359.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.node.kernel = extern_kernels.addmm


op360: ExternKernelSchedulerNode(FallbackKernel)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = 
    [   StarDep(name='buf357', mode=None),
        StarDep(name='buf358', mode=None),
        StarDep(name='buf359', mode=None)]
op360.met_dependencies = []
op360.outputs = [
    buf360: FallbackKernel
    buf360.layout = MultiOutputLayout(device=device(type='cuda', index=0))
    buf360.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op361'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op363'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op364'), can_inplace=False, is_weak=False),
    ]
]
op360.node.kernel = torch.ops.aten._scaled_dot_product_efficient_attention.default


op361: ExternKernelSchedulerNode(MultiOutput)
op361.writes = [StarDep(name='buf361', mode=None)]
op361.unmet_dependencies = [StarDep(name='buf360', mode=None)]
op361.met_dependencies = []
op361.outputs = [
    buf361: MultiOutput
    buf361.layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
    buf361.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op361.node.kernel = None


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf356', mode=None)]
op365.met_dependencies = [StarDep(name='arg271_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
    buf365.users = [NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False)]
]
op365.node.kernel = extern_kernels.mm


op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 12582912}, None)]
op366.unmet_dependencies = [MemoryDep('buf356', 393216*c0 + c1 + 768*c2, {c0: 32, c1: 768, c2: 512}, None)]
op366.met_dependencies = []
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf366.users = [NodeUser(node=ExternKernelSchedulerNode(name='op367'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (12582912, 1)
op366.sizes = ([32, 768, 512], [])
buf356_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
class op366_loop_body:
    var_ranges = {z0: 32, z1: 768, z2: 512}
    index0 = 393216*z0 + z1 + 768*z2
    index1 = 393216*z0 + 512*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf356', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf366', get_index_1, load, None)
        return store
op366 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768, 512], tile_hint=TileHint.SQUARE,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 24576
        xnumel = 512
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 768
        y1 = (yindex // 768)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (768*x2) + (393216*y1)), xmask, eviction_policy='evict_last')
        tl.store(out_ptr0 + (x2 + (512*y3)), tmp0, xmask)


op367: ExternKernelSchedulerNode(ExternKernelAlloc)
op367.writes = [StarDep(name='buf367', mode=None)]
op367.unmet_dependencies = [StarDep(name='buf366', mode=None)]
op367.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op367.outputs = [
    buf367: ExternKernelAlloc
    buf367.layout = FixedLayout('cuda', torch.float32, size=[32, 768, 512], stride=[393216, 512, 1])
    buf367.users = [NodeUser(node=ExternKernelSchedulerNode(name='op368'), can_inplace=False, is_weak=False)]
]
op367.node.kernel = extern_kernels.convolution


op368: ExternKernelSchedulerNode(ExternKernelAlloc)
op368.writes = [StarDep(name='buf368', mode=None)]
op368.unmet_dependencies = [StarDep(name='buf367', mode=None)]
op368.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op368.outputs = [
    buf368: ExternKernelAlloc
    buf368.layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
    buf368.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op368.node.kernel = extern_kernels.convolution


op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 6291456}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf357', c0, {c0: 6291456}, None),
        MemoryDep('buf368', 196608*c0 + c1 + 512*c2, {c0: 32, c1: 512, c2: 384}, None)]
op369.met_dependencies = [MemoryDep('arg266_1', c1, {c0: 16384, c1: 384}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
    buf369.users = [NodeUser(node=ExternKernelSchedulerNode(name='op370'), can_inplace=False, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (6291456, 1)
op369.sizes = ([32, 512, 384], [])
buf368_layout = FixedLayout('cuda', torch.float32, size=[32, 384, 512], stride=[196608, 512, 1])
arg266_1_layout = FixedLayout('cuda', torch.float32, size=[384, 1], stride=[1, 1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384], stride=[196608, 384, 1])
class op369_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384}
    index0 = 196608*z0 + z1 + 512*z2
    index1 = z2
    index2 = 196608*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf368', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg266_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf357', get_index_2)
        mul = ops.mul(add, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf369', get_index_3, mul, None)
        return store
op369 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16384, 512], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 16384
        xnumel = 384
        yoffset = tl.program_id(1) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x2 = xindex
        y0 = yindex % 512
        y1 = (yindex // 512)
        y3 = yindex
        tmp0 = tl.load(in_ptr0 + (y0 + (512*x2) + (196608*y1)), xmask, eviction_policy='evict_last')
        tmp1 = tl.load(in_ptr1 + (x2), xmask, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2 + (384*y3)), xmask, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 * tmp3
        tl.store(out_ptr0 + (x2 + (384*y3)), tmp4, xmask)


op370: ExternKernelSchedulerNode(ExternKernelOut)
op370.writes = [StarDep(name='buf370', mode=None)]
op370.unmet_dependencies = [StarDep(name='buf369', mode=None)]
op370.met_dependencies = [StarDep(name='arg269_1', mode=None)]
op370.outputs = [
    buf370: ExternKernelOut
    buf370.layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
    buf370.users = [
        NodeUser(node=SchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=True, is_weak=False),
    ]
]
op370.node.kernel = extern_kernels.mm


op371: SchedulerNode(ComputedBuffer)
op371.writes = [MemoryDep('buf371', c0, {c0: 98304}, None)]
op371.unmet_dependencies = [MemoryDep('buf370', c0, {c0: 884736}, None)]
op371.met_dependencies = [MemoryDep('arg270_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op371.outputs = [
    buf371: ComputedBuffer
    buf371.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False),
    ]
]
op371.group.device = cuda:0
op371.group.iteration = (98304, 9)
op371.sizes = ([98304], [9])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op371_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', add)
        get_index_2 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf371', get_index_2, reduction)
        return store_reduction
op371 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK, RBLOCK])
        tmp5 = tl.where(rmask, tmp3, float("-inf"))
        tmp6 = triton_helpers.max2(tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp6, None)


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 98304}, None)]
op372.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 884736}, None),
        MemoryDep('buf371', c0, {c0: 98304}, None)]
op372.met_dependencies = [MemoryDep('arg270_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
    buf372.users = [NodeUser(node=SchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (98304, 9)
op372.sizes = ([98304], [9])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf372_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
class op372_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf371', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf372', get_index_3, reduction)
        return store_reduction
op372 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[131072, 16],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 98304
        rnumel = 9
        RBLOCK: tl.constexpr = 16
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (9*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + ((r1 + (9*x0)) % 54), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
        tmp8 = tl.where(rmask, tmp6, 0)
        tmp9 = tl.sum(tmp8, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp9, None)


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 56623104}, None)]
op373.unmet_dependencies = [MemoryDep('buf365', c0 + 384*c1 - 1536, {c0: 6291456, c1: 9}, None)]
op373.met_dependencies = [MemoryDep('arg272_1', c1, {c0: 16384, c1: 384}, None)]
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (56623104, 1)
op373.sizes = ([32, 512, 384, 9], [])
buf365_layout = FixedLayout('cuda', torch.float32, size=[16384, 384], stride=[384, 1])
arg272_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 384, 9], stride=[1769472, 3456, 9, 1])
class op373_loop_body:
    var_ranges = {z0: 32, z1: 512, z2: 384, z3: 9}
    index0 = z1 + z3
    index1 = 520
    index2 = 0
    index3 = 1
    index4 = z1 + z3 - 4
    index5 = 196608*z0 + 384*z1 + z2 + 384*z3 - 1536
    index6 = z2
    index7 = 1769472*z0 + 3456*z1 + 9*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index3')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index4')
        index_expr = ops.index_expr(get_index_4, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_5 = self.get_index('index4')
        index_expr_1 = ops.index_expr(get_index_5, torch.int64)
        constant_1 = ops.constant(512, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        and_ = ops.and_(ge, lt)
        masked_subblock1 = self.masked_subblock1(and_, 0.0)
        get_index_6 = self.get_index('index7')
        store = ops.store('buf373', get_index_6, masked_subblock1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index5')
        load = ops.load('buf365', get_index)
        get_index_1 = self.get_index('index6')
        load_1 = ops.load('arg272_1', get_index_1)
        add = ops.add(load, load_1)
        return add
op373 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[8388608, 16], tile_hint=TileHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, ynumel, xnumel, YBLOCK : tl.constexpr, XBLOCK : tl.constexpr):
        ynumel = 6291456
        xnumel = 9
        yoffset = (tl.program_id(1) + tl.program_id(2) * tl.num_programs(1)) * YBLOCK
        yindex = yoffset + tl.arange(0, YBLOCK)[None, :]
        ymask = tl.full([XBLOCK, YBLOCK], True, tl.int1)
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        x3 = xindex
        y1 = (yindex // 384) % 512
        y4 = yindex
        y0 = yindex % 384
        tmp0 = (-4) + x3 + y1
        tmp1 = tl.full([1, 1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1, 1], 512, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tmp2 & tmp4
        tmp6 = tl.load(in_ptr0 + ((-1536) + y4 + (384*x3)), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp7 = tl.load(in_ptr1 + (tl.broadcast_to(y0, [XBLOCK, YBLOCK])), tmp5 & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tmp6 + tmp7
        tmp9 = tl.full(tmp8.shape, 0.0, tmp8.dtype)
        tmp10 = tl.where(tmp5, tmp8, tmp9)
        tl.store(out_ptr0 + (x3 + (9*y4)), tmp10, xmask)


op374: SchedulerNode(ComputedBuffer)
op374.writes = [MemoryDep('buf374', c0, {c0: 884736}, None)]
op374.unmet_dependencies = 
    [   MemoryDep('buf370', c0, {c0: 884736}, None),
        MemoryDep('buf371', c0, {c0: 98304}, None),
        MemoryDep('buf372', c0, {c0: 98304}, None)]
op374.met_dependencies = [MemoryDep('arg270_1', ModularIndexing(c0, 1, 54), {c0: 884736}, None)]
op374.outputs = [
    buf374: ComputedBuffer
    buf374.layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
    buf374.users = [NodeUser(node=ExternKernelSchedulerNode(name='op375'), can_inplace=False, is_weak=False)]
]
op374.group.device = cuda:0
op374.group.iteration = (884736, 1)
op374.sizes = ([98304, 9], [])
buf370_layout = FixedLayout('cuda', torch.float32, size=[16384, 54], stride=[54, 1])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[54], stride=[1])
buf371_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf372_layout = FixedLayout('cuda', torch.float32, size=[98304, 1, 1], stride=[1, 98304, 98304])
buf374_layout = FixedLayout('cuda', torch.float32, size=[98304, 9, 1], stride=[9, 1, 884736])
class op374_loop_body:
    var_ranges = {z0: 98304, z1: 9}
    index0 = 9*z0 + z1
    index1 = ModularIndexing(9*z0 + z1, 1, 54)
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf370', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg270_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('buf371', get_index_2)
        sub = ops.sub(add, load_2)
        exp = ops.exp(sub)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf372', get_index_3)
        truediv = ops.truediv(exp, load_3)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf374', get_index_4, truediv, None)
        return store
op374 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1048576], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 4, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 884736
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x1 = (xindex // 9)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x2 % 54), None)
        tmp3 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp6 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 - tmp3
        tmp5 = tl_math.exp(tmp4)
        tmp7 = tmp5 / tmp6
        tl.store(out_ptr0 + (x2), tmp7, None)


op375: ExternKernelSchedulerNode(ExternKernelOut)
op375.writes = [StarDep(name='buf375', mode=None)]
op375.unmet_dependencies = [StarDep(name='buf373', mode=None), StarDep(name='buf374', mode=None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ExternKernelOut
    buf375.layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
    buf375.users = [NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False)]
]
op375.node.kernel = extern_kernels.bmm


op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', c0, {c0: 12582912}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf361', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None),
        MemoryDep('buf375', 384*c0 + c2 + 64*I, {c0: 16384, c1: 12, c2: 64}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
    buf376.users = [NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (12582912, 1)
op376.sizes = ([16384, 12, 64], [])
buf361_layout = FixedLayout('cuda', torch.float32, size=[32, 6, 512, 64], stride=[196608, 64, 384, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[98304, 64, 1], stride=[64, 1, 1])
buf376_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 12, 64], stride=[393216, 768, 64, 1])
class op376_loop_body:
    var_ranges = {z0: 16384, z1: 12, z2: 64}
    index0 = z1
    index1 = 384*z0 + z2 + 64*I
    index2 = 384*z0 + z2 + 64*I
    index3 = 768*z0 + 64*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(6, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(6, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(12, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index3')
        store = ops.store('buf376', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf361', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf375', get_index)
        return load
op376 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x1 = (xindex // 64) % 12
        x0 = xindex % 64
        x2 = (xindex // 768)
        x3 = xindex
        tmp0 = x1
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 6, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0 + (64*x1) + (384*x2)), tmp4, other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 12, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = tl.load(in_ptr1 + (x0 + (64*((-6) + x1)) + (384*x2)), tmp6, other=0.0)
        tmp10 = tl.where(tmp4, tmp5, tmp9)
        tl.store(out_ptr0 + (x3), tmp10, None)


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf376', mode=None)]
op377.met_dependencies = [StarDep(name='arg273_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf377.users = [
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op380'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op381'), can_inplace=True, is_weak=False),
    ]
]
op377.node.kernel = extern_kernels.mm


op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', c0, {c0: 16384}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 12582912}, None),
        MemoryDep('buf377', c0, {c0: 12582912}, None)]
op378.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 16384, c1: 768}, None)]
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf378.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (16384, 768)
op378.sizes = ([16384], [768])
buf377_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op378_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf378', get_index_3, getitem)
        return store_reduction
op378 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 16384}, None)]
op379.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 12582912}, None),
        MemoryDep('buf377', c0, {c0: 12582912}, None)]
op379.met_dependencies = [MemoryDep('arg274_1', c1, {c0: 16384, c1: 768}, None)]
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf379.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (16384, 768)
op379.sizes = ([16384], [768])
buf377_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op379_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf379', get_index_3, getitem_1)
        return store_reduction
op379 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 12582912}, None)]
op381.unmet_dependencies = 
    [   MemoryDep('buf356', c0, {c0: 12582912}, None),
        MemoryDep('buf377', c0, {c0: 12582912}, None),
        MemoryDep('buf378', c0, {c0: 16384}, None),
        MemoryDep('buf379', c0, {c0: 16384}, None)]
op381.met_dependencies = 
    [   MemoryDep('arg274_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg275_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg276_1', c1, {c0: 16384, c1: 768}, None)]
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf381.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op381.group.device = cuda:0
op381.group.iteration = (12582912, 1)
op381.sizes = ([16384, 768], [])
buf377_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg274_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf378_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf379_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op381_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg274_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf356', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf378', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf379', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg275_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg276_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf381', get_index_7, add_3, None)
        return store
op381 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op382: ExternKernelSchedulerNode(ExternKernelOut)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg277_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelOut
    buf382.layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op382.node.kernel = extern_kernels.mm


op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 50331648}, None)]
op383.unmet_dependencies = [MemoryDep('buf382', c0, {c0: 50331648}, None)]
op383.met_dependencies = [MemoryDep('arg278_1', c1, {c0: 16384, c1: 3072}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
    buf383.users = [NodeUser(node=ExternKernelSchedulerNode(name='op384'), can_inplace=False, is_weak=False)]
]
op383.group.device = cuda:0
op383.group.iteration = (50331648, 1)
op383.sizes = ([16384, 3072], [])
buf382_layout = FixedLayout('cuda', torch.float32, size=[16384, 3072], stride=[3072, 1])
arg278_1_layout = FixedLayout('cuda', torch.float32, size=[3072], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 3072], stride=[1572864, 3072, 1])
class op383_loop_body:
    var_ranges = {z0: 16384, z1: 3072}
    index0 = 3072*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf382', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg278_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf382', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg278_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf383', get_index_4, mul_2, None)
        return store
op383 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[67108864], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 50331648
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 3072
        tmp0 = tl.load(in_out_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr0 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tl.store(in_out_ptr0 + (x2), tmp10, None)


op384: ExternKernelSchedulerNode(ExternKernelOut)
op384.writes = [StarDep(name='buf384', mode=None)]
op384.unmet_dependencies = [StarDep(name='buf383', mode=None)]
op384.met_dependencies = [StarDep(name='arg279_1', mode=None)]
op384.outputs = [
    buf384: ExternKernelOut
    buf384.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf384.users = [
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=True, is_weak=False),
    ]
]
op384.node.kernel = extern_kernels.mm


op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 16384}, None)]
op385.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 12582912}, None),
        MemoryDep('buf384', c0, {c0: 12582912}, None)]
op385.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 16384, c1: 768}, None)]
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf385.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (16384, 768)
op385.sizes = ([16384], [768])
buf384_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op385_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf385', get_index_3, getitem)
        return store_reduction
op385 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp14, None)


op386: SchedulerNode(ComputedBuffer)
op386.writes = [MemoryDep('buf386', c0, {c0: 16384}, None)]
op386.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 12582912}, None),
        MemoryDep('buf384', c0, {c0: 12582912}, None)]
op386.met_dependencies = [MemoryDep('arg280_1', c1, {c0: 16384, c1: 768}, None)]
op386.outputs = [
    buf386: ComputedBuffer
    buf386.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf386.users = [NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False)]
]
op386.group.device = cuda:0
op386.group.iteration = (16384, 768)
op386.sizes = ([16384], [768])
buf384_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf386_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op386_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf386', get_index_3, getitem_1)
        return store_reduction
op386 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32', 5: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 3, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr2 + (r1 + (768*x0)), rmask, other=0.0)
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
        tmp7 = tl.where(rmask, tmp5, 0)
        tmp8 = tl.broadcast_to(tmp5, [RBLOCK])
        tmp10 = tl.where(rmask, tmp8, 0)
        tmp11 = triton_helpers.promote_to_tensor(tl.sum(tmp10, 0))
        tmp12 = tl.full([1], 768, tl.int32)
        tmp13 = tmp12.to(tl.float32)
        tmp14 = tmp11 / tmp13
        tmp15 = tmp5 - tmp14
        tmp16 = tmp15 * tmp15
        tmp17 = tl.broadcast_to(tmp16, [RBLOCK])
        tmp19 = tl.where(rmask, tmp17, 0)
        tmp20 = triton_helpers.promote_to_tensor(tl.sum(tmp19, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 12582912}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf381', c0, {c0: 12582912}, None),
        MemoryDep('buf384', c0, {c0: 12582912}, None),
        MemoryDep('buf385', c0, {c0: 16384}, None),
        MemoryDep('buf386', c0, {c0: 16384}, None)]
op388.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg281_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg282_1', c1, {c0: 16384, c1: 768}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf388.users = [NodeUser(node=ExternKernelSchedulerNode(name='op389'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (12582912, 1)
op388.sizes = ([16384, 768], [])
buf384_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf386_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg282_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op388_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf384', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg280_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf381', get_index_2)
        add_1 = ops.add(add, load_2)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf385', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf386', get_index_4)
        constant = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-12, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg281_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg282_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf388', get_index_7, add_3, None)
        return store
op388 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 7, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp3 = tl.load(in_ptr2 + (x2), None)
        tmp5 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp7 = tl.load(in_ptr4 + (x1), None, eviction_policy='evict_last')
        tmp14 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp16 = tl.load(in_ptr6 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp4 = tmp2 + tmp3
        tmp6 = tmp4 - tmp5
        tmp8 = 768.0
        tmp9 = tmp7 / tmp8
        tmp10 = 1e-12
        tmp11 = tmp9 + tmp10
        tmp12 = libdevice.rsqrt(tmp11)
        tmp13 = tmp6 * tmp12
        tmp15 = tmp13 * tmp14
        tmp17 = tmp15 + tmp16
        tl.store(out_ptr0 + (x2), tmp17, None)


op389: ExternKernelSchedulerNode(ExternKernelOut)
op389.writes = [StarDep(name='buf389', mode=None)]
op389.unmet_dependencies = [StarDep(name='buf388', mode=None)]
op389.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op389.outputs = [
    buf389: ExternKernelOut
    buf389.layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
    buf389.users = [
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=True, is_weak=False),
    ]
]
op389.node.kernel = extern_kernels.mm


op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 16384}, None)]
op390.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 12582912}, None)]
op390.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 16384, c1: 768}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf390.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op390.group.device = cuda:0
op390.group.iteration = (16384, 768)
op390.sizes = ([16384], [768])
buf389_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op390_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg285_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf390', get_index_4, getitem)
        return store_reduction
op390 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = tl.where(rmask, tmp11, 0)
        tmp14 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp16 = tl.where(rmask, tmp14, 0)
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp16, 0))
        tmp18 = tl.full([1], 768, tl.int32)
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp17 / tmp19
        tmp21 = tmp11 - tmp20
        tmp22 = tmp21 * tmp21
        tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
        tmp25 = tl.where(rmask, tmp23, 0)
        tmp26 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
        tl.store(out_ptr0 + (x0), tmp20, None)


op391: SchedulerNode(ComputedBuffer)
op391.writes = [MemoryDep('buf391', c0, {c0: 16384}, None)]
op391.unmet_dependencies = [MemoryDep('buf389', c0, {c0: 12582912}, None)]
op391.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 16384, c1: 768}, None)]
op391.outputs = [
    buf391: ComputedBuffer
    buf391.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
    buf391.users = [NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False)]
]
op391.group.device = cuda:0
op391.group.iteration = (16384, 768)
op391.sizes = ([16384], [768])
buf389_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf391_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
class op391_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg285_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', mul_2)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf391', get_index_4, getitem_1)
        return store_reduction
op391 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[16384, 1024],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': True, 'num_load': 2, 'num_reduction': 3, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel):
        xnumel = 16384
        XBLOCK: tl.constexpr = 1
        rnumel = 768
        RBLOCK: tl.constexpr = 1024
        xoffset = tl.program_id(0) * XBLOCK
        xindex = tl.full([1], xoffset, tl.int32)
        xmask = tl.full([RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[:]
        roffset = 0
        rmask = rindex < rnumel
        r1 = rindex
        x0 = xindex
        tmp0 = tl.load(in_ptr0 + (r1 + (768*x0)), rmask, other=0.0)
        tmp1 = tl.load(in_ptr1 + (r1), rmask, eviction_policy='evict_last', other=0.0)
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp11 = tl.broadcast_to(tmp10, [RBLOCK])
        tmp13 = tl.where(rmask, tmp11, 0)
        tmp14 = tl.broadcast_to(tmp11, [RBLOCK])
        tmp16 = tl.where(rmask, tmp14, 0)
        tmp17 = triton_helpers.promote_to_tensor(tl.sum(tmp16, 0))
        tmp18 = tl.full([1], 768, tl.int32)
        tmp19 = tmp18.to(tl.float32)
        tmp20 = tmp17 / tmp19
        tmp21 = tmp11 - tmp20
        tmp22 = tmp21 * tmp21
        tmp23 = tl.broadcast_to(tmp22, [RBLOCK])
        tmp25 = tl.where(rmask, tmp23, 0)
        tmp26 = triton_helpers.promote_to_tensor(tl.sum(tmp25, 0))
        tl.store(out_ptr0 + (x0), tmp26, None)


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 12582912}, None)]
op393.unmet_dependencies = 
    [   MemoryDep('buf389', c0, {c0: 12582912}, None),
        MemoryDep('buf390', c0, {c0: 16384}, None),
        MemoryDep('buf391', c0, {c0: 16384}, None)]
op393.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg286_1', c1, {c0: 16384, c1: 768}, None),
        MemoryDep('arg287_1', c1, {c0: 16384, c1: 768}, None)]
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (12582912, 1)
op393.sizes = ([16384, 768], [])
buf389_layout = FixedLayout('cuda', torch.float32, size=[16384, 768], stride=[768, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
buf391_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 1], stride=[512, 1, 16384])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[768], stride=[1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[32, 512, 768], stride=[393216, 768, 1])
class op393_loop_body:
    var_ranges = {z0: 16384, z1: 768}
    index0 = 768*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf389', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg285_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf389', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg285_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf390', get_index_4)
        sub = ops.sub(mul_2, load_4)
        get_index_5 = self.get_index('index2')
        load_5 = ops.load('buf391', get_index_5)
        constant_3 = ops.constant(768.0, torch.float32)
        truediv = ops.truediv(load_5, constant_3)
        constant_4 = ops.constant(1e-12, torch.float32)
        add_3 = ops.add(truediv, constant_4)
        rsqrt = ops.rsqrt(add_3)
        mul_3 = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg286_1', get_index_6)
        mul_4 = ops.mul(mul_3, load_6)
        get_index_7 = self.get_index('index1')
        load_7 = ops.load('arg287_1', get_index_7)
        add_4 = ops.add(mul_4, load_7)
        get_index_8 = self.get_index('index0')
        store = ops.store('buf393', get_index_8, add_4, None)
        return store
op393 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[16777216], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 6, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 12582912
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        x2 = xindex
        x0 = xindex % 768
        x1 = (xindex // 768)
        tmp0 = tl.load(in_ptr0 + (x2), None)
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        tmp11 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
        tmp13 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
        tmp20 = tl.load(in_ptr4 + (x0), None, eviction_policy='evict_last')
        tmp22 = tl.load(in_ptr5 + (x0), None, eviction_policy='evict_last')
        tmp2 = tmp0 + tmp1
        tmp3 = 0.5
        tmp4 = tmp2 * tmp3
        tmp5 = 0.7071067811865476
        tmp6 = tmp2 * tmp5
        tmp7 = libdevice.erf(tmp6)
        tmp8 = 1.0
        tmp9 = tmp7 + tmp8
        tmp10 = tmp4 * tmp9
        tmp12 = tmp10 - tmp11
        tmp14 = 768.0
        tmp15 = tmp13 / tmp14
        tmp16 = 1e-12
        tmp17 = tmp15 + tmp16
        tmp18 = libdevice.rsqrt(tmp17)
        tmp19 = tmp12 * tmp18
        tmp21 = tmp19 * tmp20
        tmp23 = tmp21 + tmp22
        tl.store(out_ptr0 + (x2), tmp23, None)


op394: SchedulerNode(ComputedBuffer)
op394.writes = [MemoryDep('buf394', 30528*c0 + c1, {c0: 768, c1: 30524}, None)]
op394.unmet_dependencies = []
op394.met_dependencies = [MemoryDep('arg2_1', c0 + 768*I, {c0: 768, c1: 30524}, None)]
op394.outputs = [
    buf394: ComputedBuffer
    buf394.layout = FixedLayout('cuda', torch.float32, size=[768, 30524], stride=[30528, 1])
    buf394.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op394.group.device = cuda:0
op394.group.iteration = (23442432, 1)
op394.sizes = ([768, 30524], [])
arg2_1_layout = FixedLayout('cuda', torch.float32, size=[30522, 768], stride=[768, 1])
buf394_layout = FixedLayout('cuda', torch.float32, size=[768, 30524], stride=[30528, 1])
class op394_loop_body:
    var_ranges = {z0: 768, z1: 30524}
    index0 = z1
    index1 = z0 + 768*I
    index2 = 30528*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30522, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(30522, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30524, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index2')
        store = ops.store('buf394', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg2_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op394 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[33554432], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 23442432
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex % 30524
        x1 = (xindex // 30524)
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 30522, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x1 + (768*x0)), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 30524, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0 + (30528*x1)), tmp12, xmask)


op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 30524}, None)]
op395.unmet_dependencies = []
op395.met_dependencies = [MemoryDep('arg288_1', I, {c0: 30524}, None)]
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[30524], stride=[1])
    buf395.users = [NodeUser(node=ExternKernelSchedulerNode(name='op396'), can_inplace=False, is_weak=False)]
]
op395.group.device = cuda:0
op395.group.iteration = (30524, 1)
op395.sizes = ([30524], [])
arg288_1_layout = FixedLayout('cuda', torch.float32, size=[30522], stride=[1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[30524], stride=[1])
class op395_loop_body:
    var_ranges = {z0: 30524}
    index0 = z0
    index1 = I
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(30522, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(30522, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(30524, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf395', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg288_1', get_index)
        return load
    def masked_subblock2(self, ops):
        constant = ops.constant(0.0, torch.float32)
        return constant
op395 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[32768], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 30524
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = xindex < xnumel
        x0 = xindex
        tmp0 = x0
        tmp1 = tl.full([1], 0, tl.int64)
        tmp2 = tmp0 >= tmp1
        tmp3 = tl.full([1], 30522, tl.int64)
        tmp4 = tmp0 < tmp3
        tmp5 = tl.load(in_ptr0 + (x0), tmp4 & xmask, eviction_policy='evict_last', other=0.0)
        tmp6 = tmp0 >= tmp3
        tmp7 = tl.full([1], 30524, tl.int64)
        tmp8 = tmp0 < tmp7
        tmp9 = 0.0
        tmp10 = tl.full(tmp9.shape, 0.0, tmp9.dtype)
        tmp11 = tl.where(tmp6, tmp9, tmp10)
        tmp12 = tl.where(tmp4, tmp5, tmp11)
        tl.store(out_ptr0 + (x0), tmp12, xmask)


op396: ExternKernelSchedulerNode(ExternKernelOut)
op396.writes = [StarDep(name='buf396', mode=None)]
op396.unmet_dependencies = 
    [   StarDep(name='buf393', mode=None),
        StarDep(name='buf394', mode=None),
        StarDep(name='buf395', mode=None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ExternKernelOut
    buf396.layout = FixedLayout('cuda', torch.float32, size=[16384, 30524], stride=[30528, 1])
    buf396.users = [
        NodeUser(node=SchedulerNode(name='op397'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
        NodeUser(node=OUTPUT, can_inplace=False, is_weak=False),
    ]
]
op396.node.kernel = extern_kernels.addmm


op397: SchedulerNode(ComputedBuffer)
op397.writes = [MemoryDep('buf397', c0, {c0: 16384}, None)]
op397.unmet_dependencies = [MemoryDep('buf396', 30528*c0 + c1, {c0: 16384, c1: 30522}, None)]
op397.met_dependencies = []
op397.outputs = [
    buf397: ComputedBuffer
    buf397.layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
    buf397.users = [
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False),
    ]
]
op397.group.device = cuda:0
op397.group.iteration = (16384, 30522)
op397.sizes = ([16384], [30522])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16384, 30524], stride=[30528, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
class op397_loop_body:
    var_ranges = {z0: 16384, z1: 30522}
    index0 = 30528*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf397', get_index_1, reduction)
        return store_reduction
op397 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[16384, 32768],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 30522
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp2 = tl.full([XBLOCK, RBLOCK], float("-inf"), tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (30528*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
            tmp3 = triton_helpers.maximum(_tmp2, tmp1)
            _tmp2 = tl.where(rmask, tmp3, _tmp2)
        tmp2 = triton_helpers.max2(_tmp2, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp2, None)


op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 16384}, None)]
op398.unmet_dependencies = 
    [   MemoryDep('buf396', 30528*c0 + c1, {c0: 16384, c1: 30522}, None),
        MemoryDep('buf397', c0, {c0: 16384}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
    buf398.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (16384, 30522)
op398.sizes = ([16384], [30522])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16384, 30524], stride=[30528, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
buf398_layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
class op398_loop_body:
    var_ranges = {z0: 16384, z1: 30522}
    index0 = 30528*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf396', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf397', get_index_1)
        sub = ops.sub(load, load_1)
        exp = ops.exp(sub)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf398', get_index_2, reduction)
        return store_reduction
op398 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[16384, 32768],
        reduction_hint=ReductionHint.DEFAULT,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 16384
        rnumel = 30522
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        tmp1 = tl.load(in_ptr1 + (x0), None, eviction_policy='evict_last')
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (30528*x0)), rmask, eviction_policy='evict_last', other=0.0)
            tmp2 = tmp0 - tmp1
            tmp3 = tl_math.exp(tmp2)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, None)


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 2}, None)]
op399.unmet_dependencies = 
    [   MemoryDep('buf396', 30528*c0 + tmp8, {c0: 16384}, None),
        MemoryDep('buf397', c0, {c0: 16384}, None),
        MemoryDep('buf398', c0, {c0: 16384}, None)]
op399.met_dependencies = [MemoryDep('arg289_1', c0, {c0: 16384}, None)]
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
    buf399.users = [NodeUser(node=SchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (2, 8192)
op399.sizes = ([2], [8192])
arg289_1_layout = FixedLayout('cuda', torch.int64, size=[32, 512], stride=[512, 1])
buf396_layout = FixedLayout('cuda', torch.float32, size=[16384, 30524], stride=[30528, 1])
buf397_layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
buf398_layout = FixedLayout('cuda', torch.float32, size=[16384, 1], stride=[1, 16384])
buf399_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
class op399_loop_body:
    var_ranges = {z0: 2, z1: 8192}
    index0 = 8192*z0 + z1
    index1 = indirect0 + 250085376*z0 + 30528*z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg289_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('arg289_1', get_index_1)
        constant_1 = ops.constant(-100, torch.int64)
        ne_1 = ops.ne(load_1, constant_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('arg289_1', get_index_2)
        constant_2 = ops.constant(0, torch.int64)
        where = ops.where(ne_1, load_2, constant_2)
        set_indirect0 = self.set_indirect0(where)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('buf396', get_index_3)
        get_index_4 = self.get_index('index0')
        load_4 = ops.load('buf397', get_index_4)
        sub = ops.sub(load_3, load_4)
        get_index_5 = self.get_index('index0')
        load_5 = ops.load('buf398', get_index_5)
        log = ops.log(load_5)
        sub_1 = ops.sub(sub, log)
        neg = ops.neg(sub_1)
        constant_3 = ops.constant(0.0, torch.float32)
        where_1 = ops.where(ne, neg, constant_3)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', where_1)
        get_index_6 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf399', get_index_6, reduction)
        return store_reduction
op399 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 2, 3, 4, 6), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 3, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp20 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp11 = tl.load(in_ptr2 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp13 = tl.load(in_ptr3 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tl.full([1, 1], 0, tl.int64)
            tmp4 = tl.where(tmp2, tmp0, tmp3)
            tmp5 = tl.full([XBLOCK, RBLOCK], 30522, tl.int32)
            tmp6 = tmp4 + tmp5
            tmp7 = tmp4 < 0
            tmp8 = tl.where(tmp7, tmp6, tmp4)
            tl.device_assert(((0 <= tmp8) & (tmp8 < 30522)) | ~(rmask & xmask), "index out of bounds: 0 <= tmp8 < 30522")
            tmp10 = tl.load(in_ptr1 + (tmp8 + (30528*r1) + (250085376*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp12 = tmp10 - tmp11
            tmp14 = tl_math.log(tmp13)
            tmp15 = tmp12 - tmp14
            tmp16 = -tmp15
            tmp17 = 0.0
            tmp18 = tl.where(tmp2, tmp16, tmp17)
            tmp19 = tl.broadcast_to(tmp18, [XBLOCK, RBLOCK])
            tmp21 = _tmp20 + tmp19
            _tmp20 = tl.where(rmask & xmask, tmp21, _tmp20)
        tmp20 = tl.sum(_tmp20, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp20, xmask)


op400: SchedulerNode(ComputedBuffer)
op400.writes = [MemoryDep('buf400', 0, {}, None)]
op400.unmet_dependencies = [MemoryDep('buf399', c0, {c0: 2}, None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ComputedBuffer
    buf400.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf400.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op400.group.device = cuda:0
op400.group.iteration = (1, 2)
op400.sizes = ([], [2])
buf399_layout = FixedLayout('cuda', torch.float32, size=[2], stride=[1])
buf400_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op400_loop_body:
    var_ranges = {z0: 2}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf399', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf400', get_index_1, reduction)
        return store_reduction
op400 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 2],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2
        RBLOCK: tl.constexpr = 2
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.sum(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp3, None)


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 2}, None)]
op401.unmet_dependencies = []
op401.met_dependencies = [MemoryDep('arg289_1', c0, {c0: 16384}, None)]
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
    buf401.users = [NodeUser(node=SchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (2, 8192)
op401.sizes = ([2], [8192])
arg289_1_layout = FixedLayout('cuda', torch.int64, size=[32, 512], stride=[512, 1])
buf401_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
class op401_loop_body:
    var_ranges = {z0: 2, z1: 8192}
    index0 = 8192*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('arg289_1', get_index)
        constant = ops.constant(-100, torch.int64)
        ne = ops.ne(load, constant)
        to_dtype = ops.to_dtype(ne, torch.int64, src_dtype = torch.bool)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', to_dtype)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf401', get_index_1, reduction)
        return store_reduction
op401 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.reduction(
        size_hints=[2, 8192],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1, 3), equal_to_1=())]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
        xnumel = 2
        rnumel = 8192
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = xindex < xnumel
        rbase = tl.arange(0, RBLOCK)[None, :]
        x0 = xindex
        _tmp5 = tl.full([XBLOCK, RBLOCK], 0, tl.int64)
        for roffset in range(0, rnumel, RBLOCK):
            rindex = roffset + rbase
            rmask = rindex < rnumel
            r1 = rindex
            tmp0 = tl.load(in_ptr0 + (r1 + (8192*x0)), rmask & xmask, eviction_policy='evict_last', other=0.0)
            tmp1 = tl.full([1, 1], -100, tl.int64)
            tmp2 = tmp0 != tmp1
            tmp3 = tmp2.to(tl.int64)
            tmp4 = tl.broadcast_to(tmp3, [XBLOCK, RBLOCK])
            tmp6 = _tmp5 + tmp4
            _tmp5 = tl.where(rmask & xmask, tmp6, _tmp5)
        tmp5 = tl.sum(_tmp5, 1)[:, None]
        tl.store(out_ptr0 + (x0), tmp5, xmask)


op402: SchedulerNode(ComputedBuffer)
op402.writes = [MemoryDep('buf402', 0, {}, None)]
op402.unmet_dependencies = [MemoryDep('buf401', c0, {c0: 2}, None)]
op402.met_dependencies = []
op402.outputs = [
    buf402: ComputedBuffer
    buf402.layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op402.group.device = cuda:0
op402.group.iteration = (1, 2)
op402.sizes = ([], [2])
buf401_layout = FixedLayout('cuda', torch.int64, size=[2], stride=[1])
buf402_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
class op402_loop_body:
    var_ranges = {z0: 2}
    index0 = z0
    index1 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf401', get_index)
        reduction = ops.reduction(torch.int64, torch.int64, 'sum', load)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf402', get_index_1, reduction)
        return store_reduction
op402 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.persistent_reduction(
        size_hints=[1, 2],
        reduction_hint=ReductionHint.INNER,
        filename=__file__,
        triton_meta={'signature': {0: '*i64', 1: '*i64', 2: 'i32', 3: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': [], 'no_x_dim': False, 'num_load': 1, 'num_reduction': 1, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False}
    )
    @triton.jit
    def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        rnumel = 2
        RBLOCK: tl.constexpr = 2
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
        xmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        rindex = tl.arange(0, RBLOCK)[None, :]
        roffset = 0
        rmask = tl.full([XBLOCK, RBLOCK], True, tl.int1)
        r0 = rindex
        tmp0 = tl.load(in_ptr0 + (r0), None)
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
        tmp3 = tl.sum(tmp1, 1)[:, None]
        tl.store(out_ptr0 + (tl.full([XBLOCK, 1], 0, tl.int32)), tmp3, None)


op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', 0, {}, None)]
op403.unmet_dependencies = [MemoryDep('buf400', 0, {}, None), MemoryDep('buf402', 0, {}, None)]
op403.met_dependencies = []
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
    buf403.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op403.group.device = cuda:0
op403.group.iteration = (1, 1)
op403.sizes = ([], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
buf402_layout = FixedLayout('cuda', torch.int64, size=[], stride=[])
buf403_layout = FixedLayout('cuda', torch.float32, size=[], stride=[])
class op403_loop_body:
    var_ranges = {}
    index0 = 0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf402', get_index_1)
        to_dtype = ops.to_dtype(load_1, torch.float32, src_dtype = torch.int64)
        truediv = ops.truediv(load, to_dtype)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf403', get_index_2, truediv, None)
        return store
op403 Triton code:
    import triton
    import triton.language as tl
    from triton.compiler.compiler import AttrsDescriptor

    from torch._inductor.runtime import triton_helpers, triton_heuristics
    from torch._inductor.runtime.triton_helpers import libdevice, math as tl_math
    from torch._inductor.runtime.hints import AutotuneHint, ReductionHint, TileHint, instance_descriptor, DeviceProperties

    @triton_heuristics.pointwise(
        size_hints=[1], 
        filename=__file__,
        triton_meta={'signature': {0: '*fp32', 1: '*i64', 2: 'i32'}, 'device': DeviceProperties(type='cuda', index=0, cc=90, major=9, regs_per_multiprocessor=65536, max_threads_per_multi_processor=2048, multi_processor_count=132), 'constants': {2: 1}, 'configs': [AttrsDescriptor(divisible_by_16=(0, 1), equal_to_1=(2,))]},
        inductor_meta={'autotune_hints': set(), 'kernel_name': 'Placeholder.DESCRIPTIVE_NAME', 'mutated_arg_names': ['in_out_ptr0'], 'no_x_dim': False, 'num_load': 2, 'num_reduction': 0, 'backend_hash': 'AF2498D67158CAADADFFD49D59358CB8F5E4B1FCD1FBD49EE9B7C2D9E5D02859', 'are_deterministic_algorithms_enabled': False, 'assert_indirect_indexing': True, 'autotune_local_cache': True, 'autotune_pointwise': True, 'autotune_remote_cache': None, 'force_disable_caches': False, 'dynamic_scale_rblock': True, 'max_autotune': False, 'max_autotune_pointwise': False, 'min_split_scan_rblock': 256, 'spill_threshold': 16, 'store_cubin': False},
        min_elem_per_thread=0
    )
    @triton.jit
    def triton_(in_out_ptr0, in_ptr0, xnumel, XBLOCK : tl.constexpr):
        xnumel = 1
        xoffset = tl.program_id(0) * XBLOCK
        xindex = xoffset + tl.arange(0, XBLOCK)[:]
        xmask = tl.full([XBLOCK], True, tl.int1)
        tmp0 = tl.load(in_out_ptr0 + (0))
        tmp1 = tl.broadcast_to(tmp0, [XBLOCK])
        tmp2 = tl.load(in_ptr0 + (0))
        tmp3 = tl.broadcast_to(tmp2, [XBLOCK])
        tmp4 = tmp3.to(tl.float32)
        tmp5 = tmp1 / tmp4
        tl.store(in_out_ptr0 + (tl.full([XBLOCK], 0, tl.int32)), tmp5, None)



op0: ExternKernelSchedulerNode(ExternKernelAlloc)
op0.writes = [StarDep(name='buf0', mode=None)]
op0.unmet_dependencies = []
op0.met_dependencies = [StarDep(name='arg0_1', mode=None), StarDep(name='arg2_1', mode=None)]
op0.outputs = [
    buf0: ExternKernelAlloc
    buf0.layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
    buf0.users = [
        NodeUser(node=SchedulerNode(name='op1'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op2'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op3'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op12'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op13'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op14'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op28'), can_inplace=False, is_weak=False),
    ]
]
op0.node.kernel = extern_kernels.convolution


op1_op2_op3: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op1_op2_op3.writes = 
    [   MemoryDep('buf1', c0, {c0: 4704}, None),
        MemoryDep('buf2', c0, {c0: 4704}, None),
        MemoryDep('buf3', c0, {c0: 4704}, None)]
op1_op2_op3.unmet_dependencies = [   MemoryDep('buf0', 75264*c0 + 224*((c1//14)) + 56*(((128*c2 + c3)//96)) + 3136*(((4*(((128*c2 + c3)//96)) + ModularIndexing(128*c2 + c3, 24, 4))//16)) + 56*((ModularIndexing(128*c2 + c3, 24, 4)//4)) + 4*ModularIndexing(c1, 1, 14) + 3136*ModularIndexing(128*c2 + c3, 1, 24) + ModularIndexing(128*c2 + c3, 24, 4), {c0: 8, c1: 196, c2: 3, c3: 128}, None)]
op1_op2_op3.met_dependencies = 
    [   MemoryDep('arg1_1', ((128*c1 + c2)//24) + 16*ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None),
        MemoryDep('arg3_1', ((4*(((128*c1 + c2)//96)) + ModularIndexing(128*c1 + c2, 24, 4))//16) + ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None)]
op1_op2_op3.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1_op2_op3.snodes[0] =
op1: SchedulerNode(ComputedBuffer)
op1.writes = [MemoryDep('buf1', c0, {c0: 4704}, None)]
op1.unmet_dependencies = [   MemoryDep('buf0', 75264*c0 + 224*((c1//14)) + 56*(((128*c2 + c3)//96)) + 3136*(((4*(((128*c2 + c3)//96)) + ModularIndexing(128*c2 + c3, 24, 4))//16)) + 56*((ModularIndexing(128*c2 + c3, 24, 4)//4)) + 4*ModularIndexing(c1, 1, 14) + 3136*ModularIndexing(128*c2 + c3, 1, 24) + ModularIndexing(128*c2 + c3, 24, 4), {c0: 8, c1: 196, c2: 3, c3: 128}, None)]
op1.met_dependencies = 
    [   MemoryDep('arg1_1', ((128*c1 + c2)//24) + 16*ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None),
        MemoryDep('arg3_1', ((4*(((128*c1 + c2)//96)) + ModularIndexing(128*c1 + c2, 24, 4))//16) + ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None)]
op1.outputs = [
    buf1: ComputedBuffer
    buf1.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf1.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op1.group.device = cuda:0
op1.group.iteration = (4704, 128)
op1.sizes = ([8, 196, 3], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
class op1_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 4*((z1//14)) + ((128*z2 + z3)//96) + (ModularIndexing(128*z2 + z3, 24, 4)//4)
    index1 = 56
    index2 = 4*ModularIndexing(z1, 1, 14) + ModularIndexing(128*z2 + z3, 24, 4)
    index3 = 75264*z0 + 224*((z1//14)) + 56*(((128*z2 + z3)//96)) + 3136*(((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16)) + 56*((ModularIndexing(128*z2 + z3, 24, 4)//4)) + 4*ModularIndexing(z1, 1, 14) + 3136*ModularIndexing(128*z2 + z3, 1, 24) + ModularIndexing(128*z2 + z3, 24, 4)
    index4 = ((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16) + ModularIndexing(128*z2 + z3, 1, 24)
    index5 = ((128*z2 + z3)//24) + 16*ModularIndexing(128*z2 + z3, 1, 24)
    index6 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf1', get_index_7, getitem)
        return store_reduction
op1_op2_op3.snodes[1] =
op2: SchedulerNode(ComputedBuffer)
op2.writes = [MemoryDep('buf2', c0, {c0: 4704}, None)]
op2.unmet_dependencies = [   MemoryDep('buf0', 75264*c0 + 224*((c1//14)) + 56*(((128*c2 + c3)//96)) + 3136*(((4*(((128*c2 + c3)//96)) + ModularIndexing(128*c2 + c3, 24, 4))//16)) + 56*((ModularIndexing(128*c2 + c3, 24, 4)//4)) + 4*ModularIndexing(c1, 1, 14) + 3136*ModularIndexing(128*c2 + c3, 1, 24) + ModularIndexing(128*c2 + c3, 24, 4), {c0: 8, c1: 196, c2: 3, c3: 128}, None)]
op2.met_dependencies = 
    [   MemoryDep('arg1_1', ((128*c1 + c2)//24) + 16*ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None),
        MemoryDep('arg3_1', ((4*(((128*c1 + c2)//96)) + ModularIndexing(128*c1 + c2, 24, 4))//16) + ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None)]
op2.outputs = [
    buf2: ComputedBuffer
    buf2.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf2.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op2.group.device = cuda:0
op2.group.iteration = (4704, 128)
op2.sizes = ([8, 196, 3], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
class op2_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 4*((z1//14)) + ((128*z2 + z3)//96) + (ModularIndexing(128*z2 + z3, 24, 4)//4)
    index1 = 56
    index2 = 4*ModularIndexing(z1, 1, 14) + ModularIndexing(128*z2 + z3, 24, 4)
    index3 = 75264*z0 + 224*((z1//14)) + 56*(((128*z2 + z3)//96)) + 3136*(((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16)) + 56*((ModularIndexing(128*z2 + z3, 24, 4)//4)) + 4*ModularIndexing(z1, 1, 14) + 3136*ModularIndexing(128*z2 + z3, 1, 24) + ModularIndexing(128*z2 + z3, 24, 4)
    index4 = ((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16) + ModularIndexing(128*z2 + z3, 1, 24)
    index5 = ((128*z2 + z3)//24) + 16*ModularIndexing(128*z2 + z3, 1, 24)
    index6 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf2', get_index_7, getitem_1)
        return store_reduction
op1_op2_op3.snodes[2] =
op3: SchedulerNode(ComputedBuffer)
op3.writes = [MemoryDep('buf3', c0, {c0: 4704}, None)]
op3.unmet_dependencies = [   MemoryDep('buf0', 75264*c0 + 224*((c1//14)) + 56*(((128*c2 + c3)//96)) + 3136*(((4*(((128*c2 + c3)//96)) + ModularIndexing(128*c2 + c3, 24, 4))//16)) + 56*((ModularIndexing(128*c2 + c3, 24, 4)//4)) + 4*ModularIndexing(c1, 1, 14) + 3136*ModularIndexing(128*c2 + c3, 1, 24) + ModularIndexing(128*c2 + c3, 24, 4), {c0: 8, c1: 196, c2: 3, c3: 128}, None)]
op3.met_dependencies = 
    [   MemoryDep('arg1_1', ((128*c1 + c2)//24) + 16*ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None),
        MemoryDep('arg3_1', ((4*(((128*c1 + c2)//96)) + ModularIndexing(128*c1 + c2, 24, 4))//16) + ModularIndexing(128*c1 + c2, 1, 24), {c0: 1568, c1: 3, c2: 128}, None)]
op3.outputs = [
    buf3: ComputedBuffer
    buf3.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
    buf3.users = [
        NodeUser(node=SchedulerNode(name='op4'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op5'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op6'), can_inplace=False, is_weak=False),
    ]
]
op3.group.device = cuda:0
op3.group.iteration = (4704, 128)
op3.sizes = ([8, 196, 3], [128])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
class op3_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 3, z3: 128}
    index0 = 4*((z1//14)) + ((128*z2 + z3)//96) + (ModularIndexing(128*z2 + z3, 24, 4)//4)
    index1 = 56
    index2 = 4*ModularIndexing(z1, 1, 14) + ModularIndexing(128*z2 + z3, 24, 4)
    index3 = 75264*z0 + 224*((z1//14)) + 56*(((128*z2 + z3)//96)) + 3136*(((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16)) + 56*((ModularIndexing(128*z2 + z3, 24, 4)//4)) + 4*ModularIndexing(z1, 1, 14) + 3136*ModularIndexing(128*z2 + z3, 1, 24) + ModularIndexing(128*z2 + z3, 24, 4)
    index4 = ((4*(((128*z2 + z3)//96)) + ModularIndexing(128*z2 + z3, 24, 4))//16) + ModularIndexing(128*z2 + z3, 1, 24)
    index5 = ((128*z2 + z3)//24) + 16*ModularIndexing(128*z2 + z3, 1, 24)
    index6 = 588*z0 + 3*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf3', get_index_7, getitem_2)
        return store_reduction


op4_op5: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op4_op5.writes = 
    [   MemoryDep('buf4', c0, {c0: 1568}, None),
        MemoryDep('buf5', c0, {c0: 1568}, None)]
op4_op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 4704}, None),
        MemoryDep('buf2', c0, {c0: 4704}, None),
        MemoryDep('buf3', c0, {c0: 4704}, None)]
op4_op5.met_dependencies = []
op4_op5.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4_op5.snodes[0] =
op4: SchedulerNode(ComputedBuffer)
op4.writes = [MemoryDep('buf4', c0, {c0: 1568}, None)]
op4.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 4704}, None),
        MemoryDep('buf2', c0, {c0: 4704}, None),
        MemoryDep('buf3', c0, {c0: 4704}, None)]
op4.met_dependencies = []
op4.outputs = [
    buf4: ComputedBuffer
    buf4.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf4.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op4.group.device = cuda:0
op4.group.iteration = (1568, 3)
op4.sizes = ([1568], [3])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op4_loop_body:
    var_ranges = {z0: 1568, z1: 3}
    index0 = 3*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf4', get_index_3, getitem)
        return store_reduction
op4_op5.snodes[1] =
op5: SchedulerNode(ComputedBuffer)
op5.writes = [MemoryDep('buf5', c0, {c0: 1568}, None)]
op5.unmet_dependencies = 
    [   MemoryDep('buf1', c0, {c0: 4704}, None),
        MemoryDep('buf2', c0, {c0: 4704}, None),
        MemoryDep('buf3', c0, {c0: 4704}, None)]
op5.met_dependencies = []
op5.outputs = [
    buf5: ComputedBuffer
    buf5.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf5.users = [NodeUser(node=SchedulerNode(name='op7'), can_inplace=False, is_weak=False)]
]
op5.group.device = cuda:0
op5.group.iteration = (1568, 3)
op5.sizes = ([1568], [3])
buf1_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf2_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf3_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1, 3], stride=[588, 3, 4704, 1])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op5_loop_body:
    var_ranges = {z0: 1568, z1: 3}
    index0 = 3*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf1', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf2', get_index_1)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf3', get_index_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_combine', (load, load_1, load_2))
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf5', get_index_3, getitem_1)
        return store_reduction


op7: SchedulerNode(ComputedBuffer)
op7.writes = [MemoryDep('buf7', c0, {c0: 602112}, None)]
op7.unmet_dependencies = 
    [   MemoryDep('buf0', 75264*c0 + 224*((c1//14)) + 56*((c2//96)) + 3136*(((4*((c2//96)) + ModularIndexing(c2, 24, 4))//16)) + 56*((ModularIndexing(c2, 24, 4)//4)) + 4*ModularIndexing(c1, 1, 14) + 3136*ModularIndexing(c2, 1, 24) + ModularIndexing(c2, 24, 4), {c0: 8, c1: 196, c2: 384}, None),
        MemoryDep('buf4', c0, {c0: 1568}, None),
        MemoryDep('buf5', c0, {c0: 1568}, None)]
op7.met_dependencies = 
    [   MemoryDep('arg1_1', (c1//24) + 16*ModularIndexing(c1, 1, 24), {c0: 1568, c1: 384}, None),
        MemoryDep('arg3_1', ((4*((c1//96)) + ModularIndexing(c1, 24, 4))//16) + ModularIndexing(c1, 1, 24), {c0: 1568, c1: 384}, None),
        MemoryDep('arg4_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg5_1', c1, {c0: 1568, c1: 384}, None)]
op7.outputs = [
    buf7: ComputedBuffer
    buf7.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
    buf7.users = [NodeUser(node=ExternKernelSchedulerNode(name='op8'), can_inplace=False, is_weak=False)]
]
op7.group.device = cuda:0
op7.group.iteration = (602112, 1)
op7.sizes = ([8, 196, 384], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf4_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf5_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg4_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg5_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf7_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 384], stride=[75264, 384, 1])
class op7_loop_body:
    var_ranges = {z0: 8, z1: 196, z2: 384}
    index0 = 4*((z1//14)) + (z2//96) + (ModularIndexing(z2, 24, 4)//4)
    index1 = 56
    index2 = 4*ModularIndexing(z1, 1, 14) + ModularIndexing(z2, 24, 4)
    index3 = 75264*z0 + 224*((z1//14)) + 56*((z2//96)) + 3136*(((4*((z2//96)) + ModularIndexing(z2, 24, 4))//16)) + 56*((ModularIndexing(z2, 24, 4)//4)) + 4*ModularIndexing(z1, 1, 14) + 3136*ModularIndexing(z2, 1, 24) + ModularIndexing(z2, 24, 4)
    index4 = ((4*((z2//96)) + ModularIndexing(z2, 24, 4))//16) + ModularIndexing(z2, 1, 24)
    index5 = (z2//24) + 16*ModularIndexing(z2, 1, 24)
    index6 = 196*z0 + z1
    index7 = z2
    index8 = 75264*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        get_index_7 = self.get_index('index6')
        load_3 = ops.load('buf4', get_index_7)
        sub = ops.sub(add_1, load_3)
        get_index_8 = self.get_index('index6')
        load_4 = ops.load('buf5', get_index_8)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_9 = self.get_index('index7')
        load_5 = ops.load('arg4_1', get_index_9)
        mul_1 = ops.mul(mul, load_5)
        get_index_10 = self.get_index('index7')
        load_6 = ops.load('arg5_1', get_index_10)
        add_3 = ops.add(mul_1, load_6)
        get_index_11 = self.get_index('index8')
        store = ops.store('buf7', get_index_11, add_3, None)
        return store


op8: ExternKernelSchedulerNode(ExternKernelOut)
op8.writes = [StarDep(name='buf8', mode=None)]
op8.unmet_dependencies = [StarDep(name='buf7', mode=None)]
op8.met_dependencies = [StarDep(name='arg6_1', mode=None), StarDep(name='arg7_1', mode=None)]
op8.outputs = [
    buf8: ExternKernelOut
    buf8.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf8.users = [
        NodeUser(node=SchedulerNode(name='op9'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op10'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op11'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False),
    ]
]
op8.node.kernel = extern_kernels.addmm


op9_op10: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op9_op10.writes = 
    [   MemoryDep('buf10', c0, {c0: 1568}, None),
        MemoryDep('buf9', c0, {c0: 1568}, None)]
op9_op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 602112}, None)]
op9_op10.met_dependencies = []
op9_op10.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf9.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf10.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op9_op10.snodes[0] =
op9: SchedulerNode(ComputedBuffer)
op9.writes = [MemoryDep('buf9', c0, {c0: 1568}, None)]
op9.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 602112}, None)]
op9.met_dependencies = []
op9.outputs = [
    buf9: ComputedBuffer
    buf9.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf9.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op9.group.device = cuda:0
op9.group.iteration = (1568, 384)
op9.sizes = ([1568], [384])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op9_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf9', get_index_1, getitem)
        return store_reduction
op9_op10.snodes[1] =
op10: SchedulerNode(ComputedBuffer)
op10.writes = [MemoryDep('buf10', c0, {c0: 1568}, None)]
op10.unmet_dependencies = [MemoryDep('buf8', c0, {c0: 602112}, None)]
op10.met_dependencies = []
op10.outputs = [
    buf10: ComputedBuffer
    buf10.layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
    buf10.users = [NodeUser(node=SchedulerNode(name='op39'), can_inplace=False, is_weak=False)]
]
op10.group.device = cuda:0
op10.group.iteration = (1568, 384)
op10.sizes = ([1568], [384])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
class op10_loop_body:
    var_ranges = {z0: 1568, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf8', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf10', get_index_1, getitem_1)
        return store_reduction


op12_op13: FusedSchedulerNode(SchedulerNode,SchedulerNode)
op12_op13.writes = 
    [   MemoryDep('buf12', c0, {c0: 25088}, None),
        MemoryDep('buf13', c0, {c0: 25088}, None)]
op12_op13.unmet_dependencies = [   MemoryDep('buf0', 3136*c2 + 75264*((c0//196)) + 56*((c1//4)) + 3136*(((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c1, 1, 4)//4)) + ModularIndexing(c1, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 16, c2: 24}, None)]
op12_op13.met_dependencies = 
    [   MemoryDep('arg1_1', c1 + 16*c2, {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('arg3_1', c2 + ((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16), {c0: 1568, c1: 16, c2: 24}, None)]
op12_op13.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf12.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf13.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op12_op13.snodes[0] =
op12: SchedulerNode(ComputedBuffer)
op12.writes = [MemoryDep('buf12', c0, {c0: 25088}, None)]
op12.unmet_dependencies = [   MemoryDep('buf0', 3136*c2 + 75264*((c0//196)) + 56*((c1//4)) + 3136*(((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c1, 1, 4)//4)) + ModularIndexing(c1, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 16, c2: 24}, None)]
op12.met_dependencies = 
    [   MemoryDep('arg1_1', c1 + 16*c2, {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('arg3_1', c2 + ((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16), {c0: 1568, c1: 16, c2: 24}, None)]
op12.outputs = [
    buf12: ComputedBuffer
    buf12.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf12.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op12.group.device = cuda:0
op12.group.iteration = (25088, 24)
op12.sizes = ([1568, 16], [24])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op12_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 24}
    index0 = (z1//4) + 4*((ModularIndexing(z0, 1, 196)//14)) + (ModularIndexing(z1, 1, 4)//4)
    index1 = 56
    index2 = ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index3 = 3136*z2 + 75264*((z0//196)) + 56*((z1//4)) + 3136*(((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)) + 224*((ModularIndexing(z0, 1, 196)//14)) + 56*((ModularIndexing(z1, 1, 4)//4)) + ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index4 = z2 + ((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)
    index5 = z1 + 16*z2
    index6 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf12', get_index_7, getitem)
        return store_reduction
op12_op13.snodes[1] =
op13: SchedulerNode(ComputedBuffer)
op13.writes = [MemoryDep('buf13', c0, {c0: 25088}, None)]
op13.unmet_dependencies = [   MemoryDep('buf0', 3136*c2 + 75264*((c0//196)) + 56*((c1//4)) + 3136*(((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c1, 1, 4)//4)) + ModularIndexing(c1, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 16, c2: 24}, None)]
op13.met_dependencies = 
    [   MemoryDep('arg1_1', c1 + 16*c2, {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('arg3_1', c2 + ((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16), {c0: 1568, c1: 16, c2: 24}, None)]
op13.outputs = [
    buf13: ComputedBuffer
    buf13.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf13.users = [NodeUser(node=SchedulerNode(name='op15'), can_inplace=False, is_weak=False)]
]
op13.group.device = cuda:0
op13.group.iteration = (25088, 24)
op13.sizes = ([1568, 16], [24])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf13_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op13_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 24}
    index0 = (z1//4) + 4*((ModularIndexing(z0, 1, 196)//14)) + (ModularIndexing(z1, 1, 4)//4)
    index1 = 56
    index2 = ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index3 = 3136*z2 + 75264*((z0//196)) + 56*((z1//4)) + 3136*(((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)) + 224*((ModularIndexing(z0, 1, 196)//14)) + 56*((ModularIndexing(z1, 1, 4)//4)) + ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index4 = z2 + ((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)
    index5 = z1 + 16*z2
    index6 = 16*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_7 = self.get_index('index6')
        store_reduction = ops.store_reduction('buf13', get_index_7, getitem_1)
        return store_reduction


op15: SchedulerNode(ComputedBuffer)
op15.writes = [MemoryDep('buf15', 384*c0 + c1 + 24*c2, {c0: 1568, c1: 24, c2: 16}, None)]
op15.unmet_dependencies = 
    [   MemoryDep('buf0', 3136*c1 + 75264*((c0//196)) + 56*((c2//4)) + 3136*(((4*((c2//4)) + ModularIndexing(c2, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c2, 1, 4)//4)) + ModularIndexing(c2, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 24, c2: 16}, None),
        MemoryDep('buf12', 16*c0 + c2, {c0: 1568, c1: 24, c2: 16}, None),
        MemoryDep('buf13', 16*c0 + c2, {c0: 1568, c1: 24, c2: 16}, None)]
op15.met_dependencies = 
    [   MemoryDep('arg12_1', c1, {c0: 1568, c1: 24}, None),
        MemoryDep('arg13_1', c1, {c0: 1568, c1: 24}, None),
        MemoryDep('arg1_1', c1, {c0: 1568, c1: 384}, None),
        MemoryDep('arg3_1', c1 + ((4*((c2//4)) + ModularIndexing(c2, 1, 4))//16), {c0: 1568, c1: 24, c2: 16}, None)]
op15.outputs = [
    buf15: ComputedBuffer
    buf15.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf15.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op16'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op22'), can_inplace=False, is_weak=False),
    ]
]
op15.group.device = cuda:0
op15.group.iteration = (602112, 1)
op15.sizes = ([1568, 24, 16], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf12_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf13_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg12_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg13_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf15_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op15_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = (z2//4) + 4*((ModularIndexing(z0, 1, 196)//14)) + (ModularIndexing(z2, 1, 4)//4)
    index1 = 56
    index2 = ModularIndexing(z2, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index3 = 3136*z1 + 75264*((z0//196)) + 56*((z2//4)) + 3136*(((4*((z2//4)) + ModularIndexing(z2, 1, 4))//16)) + 224*((ModularIndexing(z0, 1, 196)//14)) + 56*((ModularIndexing(z2, 1, 4)//4)) + ModularIndexing(z2, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index4 = z1 + ((4*((z2//4)) + ModularIndexing(z2, 1, 4))//16)
    index5 = 16*z1 + z2
    index6 = 16*z0 + z2
    index7 = z1
    index8 = 384*z0 + z1 + 24*z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        get_index_7 = self.get_index('index6')
        load_3 = ops.load('buf12', get_index_7)
        sub = ops.sub(add_1, load_3)
        get_index_8 = self.get_index('index6')
        load_4 = ops.load('buf13', get_index_8)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_9 = self.get_index('index7')
        load_5 = ops.load('arg12_1', get_index_9)
        mul_1 = ops.mul(mul, load_5)
        get_index_10 = self.get_index('index7')
        load_6 = ops.load('arg13_1', get_index_10)
        add_3 = ops.add(mul_1, load_6)
        get_index_11 = self.get_index('index8')
        store = ops.store('buf15', get_index_11, add_3, None)
        return store


op16: ExternKernelSchedulerNode(ExternKernelOut)
op16.writes = [StarDep(name='buf16', mode=None)]
op16.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op16.met_dependencies = [StarDep(name='arg14_1', mode=None)]
op16.outputs = [
    buf16: ExternKernelOut
    buf16.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf16.users = [
        NodeUser(node=SchedulerNode(name='op17'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op18'), can_inplace=False, is_weak=False),
    ]
]
op16.node.kernel = extern_kernels.mm


op17: SchedulerNode(ComputedBuffer)
op17.writes = [MemoryDep('buf17', c0, {c0: 602112}, None)]
op17.unmet_dependencies = [   MemoryDep('buf16', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op17.met_dependencies = []
op17.outputs = [
    buf17: ComputedBuffer
    buf17.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf17.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op17.group.device = cuda:0
op17.group.iteration = (602112, 1)
op17.sizes = ([1568, 4, 16, 6], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf17_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op17_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf17', get_index_1, load, None)
        return store


op18: SchedulerNode(ComputedBuffer)
op18.writes = [MemoryDep('buf18', c0, {c0: 602112}, None)]
op18.unmet_dependencies = [MemoryDep('buf16', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op18.met_dependencies = []
op18.outputs = [
    buf18: ComputedBuffer
    buf18.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf18.users = [NodeUser(node=ExternKernelSchedulerNode(name='op19'), can_inplace=False, is_weak=False)]
]
op18.group.device = cuda:0
op18.group.iteration = (602112, 1)
op18.sizes = ([1568, 24, 16], [])
buf16_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf18_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op18_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf16', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf18', get_index_1, load, None)
        return store


op19: ExternKernelSchedulerNode(ExternKernelOut)
op19.writes = [StarDep(name='buf19', mode=None)]
op19.unmet_dependencies = [StarDep(name='buf17', mode=None), StarDep(name='buf18', mode=None)]
op19.met_dependencies = []
op19.outputs = [
    buf19: ExternKernelOut
    buf19.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf19.users = [
        NodeUser(node=SchedulerNode(name='op20'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=True, is_weak=False),
    ]
]
op19.node.kernel = extern_kernels.bmm


op20_op21_op23: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op20_op21_op23.writes = 
    [   MemoryDep('buf20', c0, {c0: 100352}, None),
        MemoryDep('buf21', c0, {c0: 100352}, None),
        MemoryDep('buf23', c0, {c0: 1605632}, None)]
op20_op21_op23.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 1605632}, None)]
op20_op21_op23.met_dependencies = []
op20_op21_op23.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op20_op21_op23.snodes[0] =
op20: SchedulerNode(ComputedBuffer)
op20.writes = [MemoryDep('buf20', c0, {c0: 100352}, None)]
op20.unmet_dependencies = [MemoryDep('buf19', c0, {c0: 1605632}, None)]
op20.met_dependencies = []
op20.outputs = [
    buf20: ComputedBuffer
    buf20.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf20.users = [
        NodeUser(node=SchedulerNode(name='op21'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False),
    ]
]
op20.group.device = cuda:0
op20.group.iteration = (100352, 16)
op20.sizes = ([100352], [16])
buf19_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op20_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf20', get_index_1, reduction)
        return store_reduction
op20_op21_op23.snodes[1] =
op21: SchedulerNode(ComputedBuffer)
op21.writes = [MemoryDep('buf21', c0, {c0: 100352}, None)]
op21.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 1605632}, None),
        MemoryDep('buf20', c0, {c0: 100352}, None)]
op21.met_dependencies = []
op21.outputs = [
    buf21: ComputedBuffer
    buf21.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf21.users = [NodeUser(node=SchedulerNode(name='op23'), can_inplace=False, is_weak=False)]
]
op21.group.device = cuda:0
op21.group.iteration = (100352, 16)
op21.sizes = ([100352], [16])
buf19_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op21_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf20', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf21', get_index_2, reduction)
        return store_reduction
op20_op21_op23.snodes[2] =
op23: SchedulerNode(ComputedBuffer)
op23.writes = [MemoryDep('buf23', c0, {c0: 1605632}, None)]
op23.unmet_dependencies = 
    [   MemoryDep('buf19', c0, {c0: 1605632}, None),
        MemoryDep('buf20', c0, {c0: 100352}, None),
        MemoryDep('buf21', c0, {c0: 100352}, None)]
op23.met_dependencies = []
op23.outputs = [
    buf23: ComputedBuffer
    buf23.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf23.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op23.group.device = cuda:0
op23.group.iteration = (1605632, 1)
op23.sizes = ([100352, 16], [])
buf19_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf20_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf21_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf23_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op23_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf19', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf20', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf21', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf23', get_index_3, truediv, None)
        return store


op22: ExternKernelSchedulerNode(ExternKernelOut)
op22.writes = [StarDep(name='buf22', mode=None)]
op22.unmet_dependencies = [StarDep(name='buf15', mode=None)]
op22.met_dependencies = [StarDep(name='arg15_1', mode=None)]
op22.outputs = [
    buf22: ExternKernelOut
    buf22.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf22.users = [NodeUser(node=SchedulerNode(name='op24'), can_inplace=False, is_weak=False)]
]
op22.node.kernel = extern_kernels.mm


op24: SchedulerNode(ComputedBuffer)
op24.writes = [MemoryDep('buf24', c0, {c0: 602112}, None)]
op24.unmet_dependencies = [   MemoryDep('buf22', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op24.met_dependencies = []
op24.outputs = [
    buf24: ComputedBuffer
    buf24.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf24.users = [NodeUser(node=ExternKernelSchedulerNode(name='op25'), can_inplace=False, is_weak=False)]
]
op24.group.device = cuda:0
op24.group.iteration = (602112, 1)
op24.sizes = ([1568, 4, 16, 6], [])
buf22_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf24_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op24_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf22', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf24', get_index_1, load, None)
        return store


op25: ExternKernelSchedulerNode(ExternKernelOut)
op25.writes = [StarDep(name='buf25', mode=None)]
op25.unmet_dependencies = [StarDep(name='buf23', mode=None), StarDep(name='buf24', mode=None)]
op25.met_dependencies = []
op25.outputs = [
    buf25: ExternKernelOut
    buf25.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf25.users = [NodeUser(node=SchedulerNode(name='op26'), can_inplace=False, is_weak=False)]
]
op25.node.kernel = extern_kernels.bmm


op26: SchedulerNode(ComputedBuffer)
op26.writes = [MemoryDep('buf26', c0, {c0: 602112}, None)]
op26.unmet_dependencies = [   MemoryDep('buf25', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op26.met_dependencies = []
op26.outputs = [
    buf26: ComputedBuffer
    buf26.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf26.users = [NodeUser(node=ExternKernelSchedulerNode(name='op27'), can_inplace=False, is_weak=False)]
]
op26.group.device = cuda:0
op26.group.iteration = (602112, 1)
op26.sizes = ([1568, 16, 4, 6], [])
buf25_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf26_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op26_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf25', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf26', get_index_1, load, None)
        return store


op27: ExternKernelSchedulerNode(ExternKernelOut)
op27.writes = [StarDep(name='buf27', mode=None)]
op27.unmet_dependencies = [StarDep(name='buf26', mode=None)]
op27.met_dependencies = [StarDep(name='arg16_1', mode=None)]
op27.outputs = [
    buf27: ExternKernelOut
    buf27.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf27.users = [NodeUser(node=SchedulerNode(name='op28'), can_inplace=True, is_weak=False)]
]
op27.node.kernel = extern_kernels.mm


op28_op29_op30_op32: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op28_op29_op30_op32.writes = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf29', c0, {c0: 25088}, None),
        MemoryDep('buf30', c0, {c0: 25088}, None),
        MemoryDep('buf32', c0, {c0: 602112}, None)]
op28_op29_op30_op32.unmet_dependencies = 
    [   MemoryDep('buf0', 3136*c2 + 75264*((c0//196)) + 56*((c1//4)) + 3136*(((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c1, 1, 4)//4)) + ModularIndexing(c1, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('buf27', c0, {c0: 602112}, None)]
op28_op29_op30_op32.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg18_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg1_1', c1 + 16*c2, {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('arg3_1', c2 + ((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16), {c0: 1568, c1: 16, c2: 24}, None)]
op28_op29_op30_op32.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op28_op29_op30_op32.snodes[0] =
op28: SchedulerNode(ComputedBuffer)
op28.writes = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op28.unmet_dependencies = 
    [   MemoryDep('buf0', 3136*c2 + 75264*((c0//196)) + 56*((c1//4)) + 3136*(((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16)) + 224*((ModularIndexing(c0, 1, 196)//14)) + 56*((ModularIndexing(c1, 1, 4)//4)) + ModularIndexing(c1, 1, 4) + 4*ModularIndexing(ModularIndexing(c0, 1, 196), 1, 14), {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('buf27', c0, {c0: 602112}, None)]
op28.met_dependencies = 
    [   MemoryDep('arg17_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg1_1', c1 + 16*c2, {c0: 1568, c1: 16, c2: 24}, None),
        MemoryDep('arg3_1', c2 + ((4*((c1//4)) + ModularIndexing(c1, 1, 4))//16), {c0: 1568, c1: 16, c2: 24}, None)]
op28.outputs = [
    buf28: ComputedBuffer
    buf28.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf28.users = [
        NodeUser(node=SchedulerNode(name='op29'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op30'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op31'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op32'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
]
op28.group.device = cuda:0
op28.group.iteration = (602112, 1)
op28.sizes = ([1568, 16, 24], [])
buf0_layout = FixedLayout('cuda', torch.float32, size=[8, 24, 56, 56], stride=[75264, 3136, 56, 1])
arg3_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg1_1_layout = FixedLayout('cuda', torch.float32, size=[1, 24, 4, 4], stride=[384, 16, 4, 1])
buf27_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg17_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op28_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 24}
    index0 = (z1//4) + 4*((ModularIndexing(z0, 1, 196)//14)) + (ModularIndexing(z1, 1, 4)//4)
    index1 = 56
    index2 = ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index3 = 3136*z2 + 75264*((z0//196)) + 56*((z1//4)) + 3136*(((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)) + 224*((ModularIndexing(z0, 1, 196)//14)) + 56*((ModularIndexing(z1, 1, 4)//4)) + ModularIndexing(z1, 1, 4) + 4*ModularIndexing(ModularIndexing(z0, 1, 196), 1, 14)
    index4 = z2 + ((4*((z1//4)) + ModularIndexing(z1, 1, 4))//16)
    index5 = z1 + 16*z2
    index6 = 384*z0 + 24*z1 + z2
    index7 = z2
    def body(self, ops):
        get_index = self.get_index('index0')
        get_index_1 = self.get_index('index1')
        check_bounds = ops.check_bounds(get_index, get_index_1, False, False)
        get_index_2 = self.get_index('index2')
        get_index_3 = self.get_index('index1')
        check_bounds_1 = ops.check_bounds(get_index_2, get_index_3, False, False)
        get_index_4 = self.get_index('index3')
        load = ops.load('buf0', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg3_1', get_index_5)
        add = ops.add(load, load_1)
        get_index_6 = self.get_index('index5')
        load_2 = ops.load('arg1_1', get_index_6)
        add_1 = ops.add(add, load_2)
        get_index_7 = self.get_index('index6')
        load_3 = ops.load('buf27', get_index_7)
        get_index_8 = self.get_index('index7')
        load_4 = ops.load('arg17_1', get_index_8)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_9 = self.get_index('index6')
        store = ops.store('buf28', get_index_9, add_3, None)
        return store
op28_op29_op30_op32.snodes[1] =
op29: SchedulerNode(ComputedBuffer)
op29.writes = [MemoryDep('buf29', c0, {c0: 25088}, None)]
op29.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op29.met_dependencies = []
op29.outputs = [
    buf29: ComputedBuffer
    buf29.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf29.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op29.group.device = cuda:0
op29.group.iteration = (25088, 24)
op29.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op29_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf29', get_index_1, getitem)
        return store_reduction
op28_op29_op30_op32.snodes[2] =
op30: SchedulerNode(ComputedBuffer)
op30.writes = [MemoryDep('buf30', c0, {c0: 25088}, None)]
op30.unmet_dependencies = [MemoryDep('buf28', c0, {c0: 602112}, None)]
op30.met_dependencies = []
op30.outputs = [
    buf30: ComputedBuffer
    buf30.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf30.users = [NodeUser(node=SchedulerNode(name='op32'), can_inplace=False, is_weak=False)]
]
op30.group.device = cuda:0
op30.group.iteration = (25088, 24)
op30.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op30_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf30', get_index_1, getitem_1)
        return store_reduction
op28_op29_op30_op32.snodes[3] =
op32: SchedulerNode(ComputedBuffer)
op32.writes = [MemoryDep('buf32', c0, {c0: 602112}, None)]
op32.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf29', c0, {c0: 25088}, None),
        MemoryDep('buf30', c0, {c0: 25088}, None)]
op32.met_dependencies = 
    [   MemoryDep('arg18_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg19_1', c1, {c0: 25088, c1: 24}, None)]
op32.outputs = [
    buf32: ComputedBuffer
    buf32.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf32.users = [NodeUser(node=ExternKernelSchedulerNode(name='op33'), can_inplace=False, is_weak=False)]
]
op32.group.device = cuda:0
op32.group.iteration = (602112, 1)
op32.sizes = ([25088, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf29_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf30_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg18_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg19_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf32_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op32_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf29', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf30', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg18_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg19_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf32', get_index_5, add_1, None)
        return store


op33: ExternKernelSchedulerNode(ExternKernelOut)
op33.writes = [StarDep(name='buf33', mode=None)]
op33.unmet_dependencies = [StarDep(name='buf32', mode=None)]
op33.met_dependencies = [StarDep(name='arg20_1', mode=None)]
op33.outputs = [
    buf33: ExternKernelOut
    buf33.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf33.users = [NodeUser(node=SchedulerNode(name='op34'), can_inplace=True, is_weak=False)]
]
op33.node.kernel = extern_kernels.mm


op34: SchedulerNode(ComputedBuffer)
op34.writes = [MemoryDep('buf34', c0, {c0: 2408448}, None)]
op34.unmet_dependencies = [MemoryDep('buf33', c0, {c0: 2408448}, None)]
op34.met_dependencies = [MemoryDep('arg21_1', c1, {c0: 25088, c1: 96}, None)]
op34.outputs = [
    buf34: ComputedBuffer
    buf34.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf34.users = [NodeUser(node=ExternKernelSchedulerNode(name='op35'), can_inplace=False, is_weak=False)]
]
op34.group.device = cuda:0
op34.group.iteration = (2408448, 1)
op34.sizes = ([25088, 96], [])
buf33_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg21_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf34_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op34_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf33', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg21_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf33', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg21_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf34', get_index_4, mul_2, None)
        return store


op35: ExternKernelSchedulerNode(ExternKernelOut)
op35.writes = [StarDep(name='buf35', mode=None)]
op35.unmet_dependencies = [StarDep(name='buf34', mode=None)]
op35.met_dependencies = [StarDep(name='arg22_1', mode=None)]
op35.outputs = [
    buf35: ExternKernelOut
    buf35.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf35.users = [
        NodeUser(node=SchedulerNode(name='op36'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op37'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op38'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op40'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op63'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op64'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op65'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op66'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False),
    ]
]
op35.node.kernel = extern_kernels.mm


op36_op37_op63_op64_op40_op66: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op36_op37_op63_op64_op40_op66.writes = 
    [   MemoryDep('buf36', c0, {c0: 25088}, None),
        MemoryDep('buf37', c0, {c0: 25088}, None),
        MemoryDep('buf40', c0, {c0: 602112}, None),
        MemoryDep('buf63', c0, {c0: 25088}, None),
        MemoryDep('buf64', c0, {c0: 25088}, None),
        MemoryDep('buf66', c0, {c0: 602112}, None)]
op36_op37_op63_op64_op40_op66.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op36_op37_op63_op64_op40_op66.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg41_1', c1, {c0: 25088, c1: 24}, None)]
op36_op37_op63_op64_op40_op66.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf36.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op36_op37_op63_op64_op40_op66.snodes[0] =
op36: SchedulerNode(ComputedBuffer)
op36.writes = [MemoryDep('buf36', c0, {c0: 25088}, None)]
op36.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op36.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None)]
op36.outputs = [
    buf36: ComputedBuffer
    buf36.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf36.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op36.group.device = cuda:0
op36.group.iteration = (25088, 24)
op36.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op36_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf36', get_index_3, getitem)
        return store_reduction
op36_op37_op63_op64_op40_op66.snodes[1] =
op37: SchedulerNode(ComputedBuffer)
op37.writes = [MemoryDep('buf37', c0, {c0: 25088}, None)]
op37.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op37.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None)]
op37.outputs = [
    buf37: ComputedBuffer
    buf37.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf37.users = [NodeUser(node=SchedulerNode(name='op40'), can_inplace=False, is_weak=False)]
]
op37.group.device = cuda:0
op37.group.iteration = (25088, 24)
op37.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf37_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op37_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf37', get_index_3, getitem_1)
        return store_reduction
op36_op37_op63_op64_op40_op66.snodes[2] =
op63: SchedulerNode(ComputedBuffer)
op63.writes = [MemoryDep('buf63', c0, {c0: 25088}, None)]
op63.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op63.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None)]
op63.outputs = [
    buf63: ComputedBuffer
    buf63.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf63.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op63.group.device = cuda:0
op63.group.iteration = (25088, 24)
op63.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op63_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf63', get_index_3, getitem)
        return store_reduction
op36_op37_op63_op64_op40_op66.snodes[3] =
op64: SchedulerNode(ComputedBuffer)
op64.writes = [MemoryDep('buf64', c0, {c0: 25088}, None)]
op64.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None)]
op64.met_dependencies = [MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None)]
op64.outputs = [
    buf64: ComputedBuffer
    buf64.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf64.users = [NodeUser(node=SchedulerNode(name='op66'), can_inplace=False, is_weak=False)]
]
op64.group.device = cuda:0
op64.group.iteration = (25088, 24)
op64.sizes = ([25088], [24])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op64_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf64', get_index_3, getitem_1)
        return store_reduction
op36_op37_op63_op64_op40_op66.snodes[4] =
op40: SchedulerNode(ComputedBuffer)
op40.writes = [MemoryDep('buf40', c0, {c0: 602112}, None)]
op40.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None),
        MemoryDep('buf36', c0, {c0: 25088}, None),
        MemoryDep('buf37', c0, {c0: 25088}, None)]
op40.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg24_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg25_1', c1, {c0: 25088, c1: 24}, None)]
op40.outputs = [
    buf40: ComputedBuffer
    buf40.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf40.users = [NodeUser(node=ExternKernelSchedulerNode(name='op41'), can_inplace=False, is_weak=False)]
]
op40.group.device = cuda:0
op40.group.iteration = (602112, 1)
op40.sizes = ([25088, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf36_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf37_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg24_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg25_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf40_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op40_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf36', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf37', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg24_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg25_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf40', get_index_7, add_3, None)
        return store
op36_op37_op63_op64_op40_op66.snodes[5] =
op66: SchedulerNode(ComputedBuffer)
op66.writes = [MemoryDep('buf66', c0, {c0: 602112}, None)]
op66.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None),
        MemoryDep('buf63', c0, {c0: 25088}, None),
        MemoryDep('buf64', c0, {c0: 25088}, None)]
op66.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg40_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg41_1', c1, {c0: 25088, c1: 24}, None)]
op66.outputs = [
    buf66: ComputedBuffer
    buf66.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf66.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op67'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op73'), can_inplace=False, is_weak=False),
    ]
]
op66.group.device = cuda:0
op66.group.iteration = (602112, 1)
op66.sizes = ([25088, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf63_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf64_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg40_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg41_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf66_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op66_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf63', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf64', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg40_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg41_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf66', get_index_7, add_3, None)
        return store


op39: SchedulerNode(ComputedBuffer)
op39.writes = [MemoryDep('buf39', c0, {c0: 605184}, None)]
op39.unmet_dependencies = 
    [   MemoryDep('buf10', 196*c0 + I, {c0: 8, c1: 197}, None),
        MemoryDep('buf8', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf9', 196*c0 + I, {c0: 8, c1: 197}, None)]
op39.met_dependencies = 
    [   MemoryDep('arg10_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg11_1', c1, {c0: 8, c1: 75648}, None),
        MemoryDep('arg8_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg9_1', c1, {c0: 1576, c1: 384}, None)]
op39.outputs = [
    buf39: ComputedBuffer
    buf39.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf39.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op39.group.device = cuda:0
op39.group.iteration = (605184, 1)
op39.sizes = ([8, 197, 384], [])
arg10_1_layout = FixedLayout('cuda', torch.float32, size=[1, 1, 384], stride=[384, 384, 1])
buf8_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
buf9_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
buf10_layout = FixedLayout('cuda', torch.float32, size=[8, 196, 1], stride=[196, 1, 1568])
arg8_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg9_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg11_1_layout = FixedLayout('cuda', torch.float32, size=[1, 197, 384], stride=[75648, 384, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op39_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = z2
    index2 = 75264*z0 + z2 + 384*I
    index3 = 196*z0 + I
    index4 = 384*z1 + z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index4')
        load = ops.load('arg11_1', get_index_4)
        add = ops.add(where, load)
        get_index_5 = self.get_index('index5')
        store = ops.store('buf39', get_index_5, add, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('arg10_1', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf8', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf9', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index3')
        load_2 = ops.load('buf10', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg8_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg9_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        return add_1


op41: ExternKernelSchedulerNode(ExternKernelOut)
op41.writes = [StarDep(name='buf41', mode=None)]
op41.unmet_dependencies = [StarDep(name='buf40', mode=None)]
op41.met_dependencies = [StarDep(name='arg26_1', mode=None)]
op41.outputs = [
    buf41: ExternKernelOut
    buf41.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf41.users = [
        NodeUser(node=SchedulerNode(name='op42'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op43'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op44'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op59'), can_inplace=False, is_weak=False),
    ]
]
op41.node.kernel = extern_kernels.mm


op42_op43_op45_op46: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op42_op43_op45_op46.writes = 
    [   MemoryDep('buf42', c0, {c0: 1576}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None),
        MemoryDep('buf45', c0, {c0: 605184}, None),
        MemoryDep('buf46', c0, {c0: 605184}, None)]
op42_op43_op45_op46.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op42_op43_op45_op46.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg28_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg29_1', c1, {c0: 1576, c1: 384}, None)]
op42_op43_op45_op46.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op42_op43_op45_op46.snodes[0] =
op42: SchedulerNode(ComputedBuffer)
op42.writes = [MemoryDep('buf42', c0, {c0: 1576}, None)]
op42.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op42.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None)]
op42.outputs = [
    buf42: ComputedBuffer
    buf42.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf42.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op42.group.device = cuda:0
op42.group.iteration = (1576, 384)
op42.sizes = ([8, 197], [384])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op42_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf42', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg27_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op42_op43_op45_op46.snodes[1] =
op43: SchedulerNode(ComputedBuffer)
op43.writes = [MemoryDep('buf43', c0, {c0: 1576}, None)]
op43.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op43.met_dependencies = [MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None)]
op43.outputs = [
    buf43: ComputedBuffer
    buf43.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf43.users = [NodeUser(node=SchedulerNode(name='op45'), can_inplace=False, is_weak=False)]
]
op43.group.device = cuda:0
op43.group.iteration = (1576, 384)
op43.sizes = ([8, 197], [384])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op43_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf43', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg27_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op42_op43_op45_op46.snodes[2] =
op45: SchedulerNode(ComputedBuffer)
op45.writes = [MemoryDep('buf45', c0, {c0: 605184}, None)]
op45.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf42', c0, {c0: 1576}, None),
        MemoryDep('buf43', c0, {c0: 1576}, None)]
op45.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg28_1', c1, {c0: 1576, c1: 384}, None)]
op45.outputs = [
    buf45: ComputedBuffer
    buf45.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf45.users = [NodeUser(node=SchedulerNode(name='op46'), can_inplace=True, is_weak=False)]
]
op45.group.device = cuda:0
op45.group.iteration = (605184, 1)
op45.sizes = ([8, 197, 384], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf42_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf43_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg28_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op45_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf42', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf43', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg28_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf45', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg27_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op42_op43_op45_op46.snodes[3] =
op46: SchedulerNode(ComputedBuffer)
op46.writes = [MemoryDep('buf46', c0, {c0: 605184}, None)]
op46.unmet_dependencies = [MemoryDep('buf45', c0, {c0: 605184}, None)]
op46.met_dependencies = [MemoryDep('arg29_1', c1, {c0: 1576, c1: 384}, None)]
op46.outputs = [
    buf46: ComputedBuffer
    buf46.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf46.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op47'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op53'), can_inplace=False, is_weak=False),
    ]
]
op46.group.device = cuda:0
op46.group.iteration = (605184, 1)
op46.sizes = ([1576, 384], [])
buf45_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg29_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf46_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op46_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf45', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg29_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf46', get_index_2, add, None)
        return store


op47: ExternKernelSchedulerNode(ExternKernelOut)
op47.writes = [StarDep(name='buf47', mode=None)]
op47.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op47.met_dependencies = [StarDep(name='arg30_1', mode=None)]
op47.outputs = [
    buf47: ExternKernelOut
    buf47.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf47.users = [
        NodeUser(node=SchedulerNode(name='op48'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op49'), can_inplace=False, is_weak=False),
    ]
]
op47.node.kernel = extern_kernels.mm


op48: SchedulerNode(ComputedBuffer)
op48.writes = [MemoryDep('buf48', c0, {c0: 605184}, None)]
op48.unmet_dependencies = [   MemoryDep('buf47', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op48.met_dependencies = []
op48.outputs = [
    buf48: ComputedBuffer
    buf48.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf48.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op48.group.device = cuda:0
op48.group.iteration = (605184, 1)
op48.sizes = ([8, 6, 197, 64], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf48_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op48_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf48', get_index_1, load, None)
        return store


op49: SchedulerNode(ComputedBuffer)
op49.writes = [MemoryDep('buf49', c0, {c0: 605184}, None)]
op49.unmet_dependencies = [   MemoryDep('buf47', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op49.met_dependencies = []
op49.outputs = [
    buf49: ComputedBuffer
    buf49.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf49.users = [NodeUser(node=ExternKernelSchedulerNode(name='op50'), can_inplace=False, is_weak=False)]
]
op49.group.device = cuda:0
op49.group.iteration = (605184, 1)
op49.sizes = ([8, 384, 197], [])
buf47_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf49_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op49_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf47', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf49', get_index_1, load, None)
        return store


op50: ExternKernelSchedulerNode(ExternKernelOut)
op50.writes = [StarDep(name='buf50', mode=None)]
op50.unmet_dependencies = [StarDep(name='buf48', mode=None), StarDep(name='buf49', mode=None)]
op50.met_dependencies = []
op50.outputs = [
    buf50: ExternKernelOut
    buf50.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf50.users = [
        NodeUser(node=SchedulerNode(name='op51'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op50.node.kernel = extern_kernels.bmm


op51_op52_op54: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op51_op52_op54.writes = 
    [   MemoryDep('buf51', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf52', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf54', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op51_op52_op54.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 1862832}, None)]
op51_op52_op54.met_dependencies = []
op51_op52_op54.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op51_op52_op54.snodes[0] =
op51: SchedulerNode(ComputedBuffer)
op51.writes = [MemoryDep('buf51', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op51.unmet_dependencies = [MemoryDep('buf50', c0, {c0: 1862832}, None)]
op51.met_dependencies = []
op51.outputs = [
    buf51: ComputedBuffer
    buf51.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf51.users = [
        NodeUser(node=SchedulerNode(name='op52'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False),
    ]
]
op51.group.device = cuda:0
op51.group.iteration = (9456, 197)
op51.sizes = ([8, 1182], [197])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op51_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf51', get_index_1, reduction)
        return store_reduction
op51_op52_op54.snodes[1] =
op52: SchedulerNode(ComputedBuffer)
op52.writes = [MemoryDep('buf52', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op52.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 1862832}, None),
        MemoryDep('buf51', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op52.met_dependencies = []
op52.outputs = [
    buf52: ComputedBuffer
    buf52.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf52.users = [NodeUser(node=SchedulerNode(name='op54'), can_inplace=False, is_weak=False)]
]
op52.group.device = cuda:0
op52.group.iteration = (9456, 197)
op52.sizes = ([8, 1182], [197])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op52_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf52', get_index_2, reduction)
        return store_reduction
op51_op52_op54.snodes[2] =
op54: SchedulerNode(ComputedBuffer)
op54.writes = [MemoryDep('buf54', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op54.unmet_dependencies = 
    [   MemoryDep('buf50', c0, {c0: 1862832}, None),
        MemoryDep('buf51', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf52', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op54.met_dependencies = []
op54.outputs = [
    buf54: ComputedBuffer
    buf54.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf54.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op54.group.device = cuda:0
op54.group.iteration = (1862832, 1)
op54.sizes = ([8, 6, 197, 197], [])
buf50_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf51_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf52_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf54_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op54_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf50', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf51', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf52', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf54', get_index_3, truediv, None)
        return store


op53: ExternKernelSchedulerNode(ExternKernelOut)
op53.writes = [StarDep(name='buf53', mode=None)]
op53.unmet_dependencies = [StarDep(name='buf46', mode=None)]
op53.met_dependencies = [StarDep(name='arg31_1', mode=None)]
op53.outputs = [
    buf53: ExternKernelOut
    buf53.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf53.users = [NodeUser(node=SchedulerNode(name='op55'), can_inplace=False, is_weak=False)]
]
op53.node.kernel = extern_kernels.mm


op55: SchedulerNode(ComputedBuffer)
op55.writes = [MemoryDep('buf55', c0, {c0: 605184}, None)]
op55.unmet_dependencies = [   MemoryDep('buf53', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op55.met_dependencies = []
op55.outputs = [
    buf55: ComputedBuffer
    buf55.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf55.users = [NodeUser(node=ExternKernelSchedulerNode(name='op56'), can_inplace=False, is_weak=False)]
]
op55.group.device = cuda:0
op55.group.iteration = (605184, 1)
op55.sizes = ([8, 6, 197, 64], [])
buf53_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf55_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op55_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf53', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf55', get_index_1, load, None)
        return store


op56: ExternKernelSchedulerNode(ExternKernelOut)
op56.writes = [StarDep(name='buf56', mode=None)]
op56.unmet_dependencies = [StarDep(name='buf54', mode=None), StarDep(name='buf55', mode=None)]
op56.met_dependencies = []
op56.outputs = [
    buf56: ExternKernelOut
    buf56.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf56.users = [NodeUser(node=SchedulerNode(name='op57'), can_inplace=False, is_weak=False)]
]
op56.node.kernel = extern_kernels.bmm


op57: SchedulerNode(ComputedBuffer)
op57.writes = [MemoryDep('buf57', c0, {c0: 605184}, None)]
op57.unmet_dependencies = [   MemoryDep('buf56', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op57.met_dependencies = []
op57.outputs = [
    buf57: ComputedBuffer
    buf57.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf57.users = [NodeUser(node=ExternKernelSchedulerNode(name='op58'), can_inplace=False, is_weak=False)]
]
op57.group.device = cuda:0
op57.group.iteration = (605184, 1)
op57.sizes = ([8, 197, 6, 64], [])
buf56_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf57_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op57_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf56', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf57', get_index_1, load, None)
        return store


op58: ExternKernelSchedulerNode(ExternKernelOut)
op58.writes = [StarDep(name='buf58', mode=None)]
op58.unmet_dependencies = [StarDep(name='buf57', mode=None)]
op58.met_dependencies = [StarDep(name='arg32_1', mode=None)]
op58.outputs = [
    buf58: ExternKernelOut
    buf58.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf58.users = [NodeUser(node=SchedulerNode(name='op59'), can_inplace=True, is_weak=False)]
]
op58.node.kernel = extern_kernels.mm


op59_op60_op61_op90: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op59_op60_op61_op90.writes = 
    [   MemoryDep('buf59', c0, {c0: 605184}, None),
        MemoryDep('buf60', c0, {c0: 1576}, None),
        MemoryDep('buf61', c0, {c0: 1576}, None),
        MemoryDep('buf90', c0, {c0: 605184}, None)]
op59_op60_op61_op90.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf58', c0, {c0: 605184}, None)]
op59_op60_op61_op90.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg33_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg34_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg35_1', c1, {c0: 1576, c1: 384}, None)]
op59_op60_op61_op90.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf60.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf61.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op59_op60_op61_op90.snodes[0] =
op59: SchedulerNode(ComputedBuffer)
op59.writes = [MemoryDep('buf59', c0, {c0: 605184}, None)]
op59.unmet_dependencies = 
    [   MemoryDep('buf39', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf39', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf41', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf58', c0, {c0: 605184}, None)]
op59.met_dependencies = 
    [   MemoryDep('arg27_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg33_1', c1, {c0: 1576, c1: 384}, None)]
op59.outputs = [
    buf59: ComputedBuffer
    buf59.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf59.users = [
        NodeUser(node=SchedulerNode(name='op60'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op61'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op62'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op90'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False),
    ]
]
op59.group.device = cuda:0
op59.group.iteration = (605184, 1)
op59.sizes = ([8, 197, 384], [])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf39_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf41_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg27_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf58_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg33_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op59_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf58', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg33_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf59', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf39', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf39', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf41', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg27_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op59_op60_op61_op90.snodes[1] =
op60: SchedulerNode(ComputedBuffer)
op60.writes = [MemoryDep('buf60', c0, {c0: 1576}, None)]
op60.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 605184}, None)]
op60.met_dependencies = []
op60.outputs = [
    buf60: ComputedBuffer
    buf60.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf60.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op60.group.device = cuda:0
op60.group.iteration = (1576, 384)
op60.sizes = ([1576], [384])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op60_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf60', get_index_1, getitem)
        return store_reduction
op59_op60_op61_op90.snodes[2] =
op61: SchedulerNode(ComputedBuffer)
op61.writes = [MemoryDep('buf61', c0, {c0: 1576}, None)]
op61.unmet_dependencies = [MemoryDep('buf59', c0, {c0: 605184}, None)]
op61.met_dependencies = []
op61.outputs = [
    buf61: ComputedBuffer
    buf61.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf61.users = [NodeUser(node=SchedulerNode(name='op90'), can_inplace=False, is_weak=False)]
]
op61.group.device = cuda:0
op61.group.iteration = (1576, 384)
op61.sizes = ([1576], [384])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op61_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf61', get_index_1, getitem_1)
        return store_reduction
op59_op60_op61_op90.snodes[3] =
op90: SchedulerNode(ComputedBuffer)
op90.writes = [MemoryDep('buf90', c0, {c0: 605184}, None)]
op90.unmet_dependencies = 
    [   MemoryDep('buf59', c0, {c0: 605184}, None),
        MemoryDep('buf60', c0, {c0: 1576}, None),
        MemoryDep('buf61', c0, {c0: 1576}, None)]
op90.met_dependencies = 
    [   MemoryDep('arg34_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg35_1', c1, {c0: 1576, c1: 384}, None)]
op90.outputs = [
    buf90: ComputedBuffer
    buf90.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf90.users = [NodeUser(node=ExternKernelSchedulerNode(name='op91'), can_inplace=False, is_weak=False)]
]
op90.group.device = cuda:0
op90.group.iteration = (605184, 1)
op90.sizes = ([1576, 384], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf60_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf61_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg34_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg35_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf90_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op90_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf60', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf61', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg34_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg35_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf90', get_index_5, add_1, None)
        return store


op67: ExternKernelSchedulerNode(ExternKernelOut)
op67.writes = [StarDep(name='buf67', mode=None)]
op67.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op67.met_dependencies = [StarDep(name='arg42_1', mode=None)]
op67.outputs = [
    buf67: ExternKernelOut
    buf67.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf67.users = [
        NodeUser(node=SchedulerNode(name='op68'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op69'), can_inplace=False, is_weak=False),
    ]
]
op67.node.kernel = extern_kernels.mm


op68: SchedulerNode(ComputedBuffer)
op68.writes = [MemoryDep('buf68', c0, {c0: 602112}, None)]
op68.unmet_dependencies = [   MemoryDep('buf67', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op68.met_dependencies = []
op68.outputs = [
    buf68: ComputedBuffer
    buf68.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf68.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op68.group.device = cuda:0
op68.group.iteration = (602112, 1)
op68.sizes = ([1568, 4, 16, 6], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf68_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op68_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf68', get_index_1, load, None)
        return store


op69: SchedulerNode(ComputedBuffer)
op69.writes = [MemoryDep('buf69', c0, {c0: 602112}, None)]
op69.unmet_dependencies = [MemoryDep('buf67', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op69.met_dependencies = []
op69.outputs = [
    buf69: ComputedBuffer
    buf69.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf69.users = [NodeUser(node=ExternKernelSchedulerNode(name='op70'), can_inplace=False, is_weak=False)]
]
op69.group.device = cuda:0
op69.group.iteration = (602112, 1)
op69.sizes = ([1568, 24, 16], [])
buf67_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf69_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op69_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf67', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf69', get_index_1, load, None)
        return store


op70: ExternKernelSchedulerNode(ExternKernelOut)
op70.writes = [StarDep(name='buf70', mode=None)]
op70.unmet_dependencies = [StarDep(name='buf68', mode=None), StarDep(name='buf69', mode=None)]
op70.met_dependencies = []
op70.outputs = [
    buf70: ExternKernelOut
    buf70.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf70.users = [
        NodeUser(node=SchedulerNode(name='op71'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=True, is_weak=False),
    ]
]
op70.node.kernel = extern_kernels.bmm


op71_op72_op74: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op71_op72_op74.writes = 
    [   MemoryDep('buf71', c0, {c0: 100352}, None),
        MemoryDep('buf72', c0, {c0: 100352}, None),
        MemoryDep('buf74', c0, {c0: 1605632}, None)]
op71_op72_op74.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1605632}, None)]
op71_op72_op74.met_dependencies = []
op71_op72_op74.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op71_op72_op74.snodes[0] =
op71: SchedulerNode(ComputedBuffer)
op71.writes = [MemoryDep('buf71', c0, {c0: 100352}, None)]
op71.unmet_dependencies = [MemoryDep('buf70', c0, {c0: 1605632}, None)]
op71.met_dependencies = []
op71.outputs = [
    buf71: ComputedBuffer
    buf71.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf71.users = [
        NodeUser(node=SchedulerNode(name='op72'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False),
    ]
]
op71.group.device = cuda:0
op71.group.iteration = (100352, 16)
op71.sizes = ([100352], [16])
buf70_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op71_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf71', get_index_1, reduction)
        return store_reduction
op71_op72_op74.snodes[1] =
op72: SchedulerNode(ComputedBuffer)
op72.writes = [MemoryDep('buf72', c0, {c0: 100352}, None)]
op72.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 1605632}, None),
        MemoryDep('buf71', c0, {c0: 100352}, None)]
op72.met_dependencies = []
op72.outputs = [
    buf72: ComputedBuffer
    buf72.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf72.users = [NodeUser(node=SchedulerNode(name='op74'), can_inplace=False, is_weak=False)]
]
op72.group.device = cuda:0
op72.group.iteration = (100352, 16)
op72.sizes = ([100352], [16])
buf70_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op72_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf72', get_index_2, reduction)
        return store_reduction
op71_op72_op74.snodes[2] =
op74: SchedulerNode(ComputedBuffer)
op74.writes = [MemoryDep('buf74', c0, {c0: 1605632}, None)]
op74.unmet_dependencies = 
    [   MemoryDep('buf70', c0, {c0: 1605632}, None),
        MemoryDep('buf71', c0, {c0: 100352}, None),
        MemoryDep('buf72', c0, {c0: 100352}, None)]
op74.met_dependencies = []
op74.outputs = [
    buf74: ComputedBuffer
    buf74.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf74.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op74.group.device = cuda:0
op74.group.iteration = (1605632, 1)
op74.sizes = ([100352, 16], [])
buf70_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf71_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf72_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf74_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op74_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf70', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf71', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf72', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf74', get_index_3, truediv, None)
        return store


op73: ExternKernelSchedulerNode(ExternKernelOut)
op73.writes = [StarDep(name='buf73', mode=None)]
op73.unmet_dependencies = [StarDep(name='buf66', mode=None)]
op73.met_dependencies = [StarDep(name='arg43_1', mode=None)]
op73.outputs = [
    buf73: ExternKernelOut
    buf73.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf73.users = [NodeUser(node=SchedulerNode(name='op75'), can_inplace=False, is_weak=False)]
]
op73.node.kernel = extern_kernels.mm


op75: SchedulerNode(ComputedBuffer)
op75.writes = [MemoryDep('buf75', c0, {c0: 602112}, None)]
op75.unmet_dependencies = [   MemoryDep('buf73', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op75.met_dependencies = []
op75.outputs = [
    buf75: ComputedBuffer
    buf75.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf75.users = [NodeUser(node=ExternKernelSchedulerNode(name='op76'), can_inplace=False, is_weak=False)]
]
op75.group.device = cuda:0
op75.group.iteration = (602112, 1)
op75.sizes = ([1568, 4, 16, 6], [])
buf73_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf75_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op75_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf73', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf75', get_index_1, load, None)
        return store


op76: ExternKernelSchedulerNode(ExternKernelOut)
op76.writes = [StarDep(name='buf76', mode=None)]
op76.unmet_dependencies = [StarDep(name='buf74', mode=None), StarDep(name='buf75', mode=None)]
op76.met_dependencies = []
op76.outputs = [
    buf76: ExternKernelOut
    buf76.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf76.users = [NodeUser(node=SchedulerNode(name='op77'), can_inplace=False, is_weak=False)]
]
op76.node.kernel = extern_kernels.bmm


op77: SchedulerNode(ComputedBuffer)
op77.writes = [MemoryDep('buf77', c0, {c0: 602112}, None)]
op77.unmet_dependencies = [   MemoryDep('buf76', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op77.met_dependencies = []
op77.outputs = [
    buf77: ComputedBuffer
    buf77.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf77.users = [NodeUser(node=ExternKernelSchedulerNode(name='op78'), can_inplace=False, is_weak=False)]
]
op77.group.device = cuda:0
op77.group.iteration = (602112, 1)
op77.sizes = ([1568, 16, 4, 6], [])
buf76_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf77_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op77_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf76', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf77', get_index_1, load, None)
        return store


op78: ExternKernelSchedulerNode(ExternKernelOut)
op78.writes = [StarDep(name='buf78', mode=None)]
op78.unmet_dependencies = [StarDep(name='buf77', mode=None)]
op78.met_dependencies = [StarDep(name='arg44_1', mode=None)]
op78.outputs = [
    buf78: ExternKernelOut
    buf78.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf78.users = [NodeUser(node=SchedulerNode(name='op79'), can_inplace=True, is_weak=False)]
]
op78.node.kernel = extern_kernels.mm


op79_op80_op81_op83: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op79_op80_op81_op83.writes = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf80', c0, {c0: 25088}, None),
        MemoryDep('buf81', c0, {c0: 25088}, None),
        MemoryDep('buf83', c0, {c0: 602112}, None)]
op79_op80_op81_op83.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None),
        MemoryDep('buf78', c0, {c0: 602112}, None)]
op79_op80_op81_op83.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg46_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg47_1', c1, {c0: 25088, c1: 24}, None)]
op79_op80_op81_op83.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op79_op80_op81_op83.snodes[0] =
op79: SchedulerNode(ComputedBuffer)
op79.writes = [MemoryDep('buf79', c0, {c0: 602112}, None)]
op79.unmet_dependencies = 
    [   MemoryDep('buf28', c0, {c0: 602112}, None),
        MemoryDep('buf35', c0, {c0: 602112}, None),
        MemoryDep('buf78', c0, {c0: 602112}, None)]
op79.met_dependencies = 
    [   MemoryDep('arg23_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg45_1', c1, {c0: 25088, c1: 24}, None)]
op79.outputs = [
    buf79: ComputedBuffer
    buf79.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf79.users = [
        NodeUser(node=SchedulerNode(name='op80'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op81'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op82'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op83'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op79.group.device = cuda:0
op79.group.iteration = (602112, 1)
op79.sizes = ([25088, 24], [])
buf28_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf35_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg23_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf78_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg45_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op79_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf28', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf35', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg23_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf78', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg45_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf79', get_index_5, add_3, None)
        return store
op79_op80_op81_op83.snodes[1] =
op80: SchedulerNode(ComputedBuffer)
op80.writes = [MemoryDep('buf80', c0, {c0: 25088}, None)]
op80.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 602112}, None)]
op80.met_dependencies = []
op80.outputs = [
    buf80: ComputedBuffer
    buf80.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf80.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op80.group.device = cuda:0
op80.group.iteration = (25088, 24)
op80.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op80_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf80', get_index_1, getitem)
        return store_reduction
op79_op80_op81_op83.snodes[2] =
op81: SchedulerNode(ComputedBuffer)
op81.writes = [MemoryDep('buf81', c0, {c0: 25088}, None)]
op81.unmet_dependencies = [MemoryDep('buf79', c0, {c0: 602112}, None)]
op81.met_dependencies = []
op81.outputs = [
    buf81: ComputedBuffer
    buf81.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf81.users = [NodeUser(node=SchedulerNode(name='op83'), can_inplace=False, is_weak=False)]
]
op81.group.device = cuda:0
op81.group.iteration = (25088, 24)
op81.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op81_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf81', get_index_1, getitem_1)
        return store_reduction
op79_op80_op81_op83.snodes[3] =
op83: SchedulerNode(ComputedBuffer)
op83.writes = [MemoryDep('buf83', c0, {c0: 602112}, None)]
op83.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf80', c0, {c0: 25088}, None),
        MemoryDep('buf81', c0, {c0: 25088}, None)]
op83.met_dependencies = 
    [   MemoryDep('arg46_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg47_1', c1, {c0: 25088, c1: 24}, None)]
op83.outputs = [
    buf83: ComputedBuffer
    buf83.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf83.users = [NodeUser(node=ExternKernelSchedulerNode(name='op84'), can_inplace=False, is_weak=False)]
]
op83.group.device = cuda:0
op83.group.iteration = (602112, 1)
op83.sizes = ([25088, 24], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf80_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf81_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg46_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg47_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf83_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op83_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf80', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf81', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg46_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg47_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf83', get_index_5, add_1, None)
        return store


op84: ExternKernelSchedulerNode(ExternKernelOut)
op84.writes = [StarDep(name='buf84', mode=None)]
op84.unmet_dependencies = [StarDep(name='buf83', mode=None)]
op84.met_dependencies = [StarDep(name='arg48_1', mode=None)]
op84.outputs = [
    buf84: ExternKernelOut
    buf84.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf84.users = [NodeUser(node=SchedulerNode(name='op85'), can_inplace=True, is_weak=False)]
]
op84.node.kernel = extern_kernels.mm


op85: SchedulerNode(ComputedBuffer)
op85.writes = [MemoryDep('buf85', c0, {c0: 2408448}, None)]
op85.unmet_dependencies = [MemoryDep('buf84', c0, {c0: 2408448}, None)]
op85.met_dependencies = [MemoryDep('arg49_1', c1, {c0: 25088, c1: 96}, None)]
op85.outputs = [
    buf85: ComputedBuffer
    buf85.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf85.users = [NodeUser(node=ExternKernelSchedulerNode(name='op86'), can_inplace=False, is_weak=False)]
]
op85.group.device = cuda:0
op85.group.iteration = (2408448, 1)
op85.sizes = ([25088, 96], [])
buf84_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg49_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf85_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op85_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf84', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg49_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf84', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg49_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf85', get_index_4, mul_2, None)
        return store


op86: ExternKernelSchedulerNode(ExternKernelOut)
op86.writes = [StarDep(name='buf86', mode=None)]
op86.unmet_dependencies = [StarDep(name='buf85', mode=None)]
op86.met_dependencies = [StarDep(name='arg50_1', mode=None)]
op86.outputs = [
    buf86: ExternKernelOut
    buf86.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf86.users = [
        NodeUser(node=SchedulerNode(name='op87'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op88'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op89'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op94'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op116'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op117'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op118'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op119'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False),
    ]
]
op86.node.kernel = extern_kernels.mm


op87_op88_op116_op117_op94_op119: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op87_op88_op116_op117_op94_op119.writes = 
    [   MemoryDep('buf116', c0, {c0: 25088}, None),
        MemoryDep('buf117', c0, {c0: 25088}, None),
        MemoryDep('buf119', c0, {c0: 602112}, None),
        MemoryDep('buf87', c0, {c0: 25088}, None),
        MemoryDep('buf88', c0, {c0: 25088}, None),
        MemoryDep('buf94', c0, {c0: 602112}, None)]
op87_op88_op116_op117_op94_op119.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op87_op88_op116_op117_op94_op119.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg52_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg68_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg69_1', c1, {c0: 25088, c1: 24}, None)]
op87_op88_op116_op117_op94_op119.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf87.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf88.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
]
op87_op88_op116_op117_op94_op119.snodes[0] =
op87: SchedulerNode(ComputedBuffer)
op87.writes = [MemoryDep('buf87', c0, {c0: 25088}, None)]
op87.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op87.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None)]
op87.outputs = [
    buf87: ComputedBuffer
    buf87.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf87.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op87.group.device = cuda:0
op87.group.iteration = (25088, 24)
op87.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op87_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf87', get_index_3, getitem)
        return store_reduction
op87_op88_op116_op117_op94_op119.snodes[1] =
op88: SchedulerNode(ComputedBuffer)
op88.writes = [MemoryDep('buf88', c0, {c0: 25088}, None)]
op88.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op88.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None)]
op88.outputs = [
    buf88: ComputedBuffer
    buf88.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf88.users = [NodeUser(node=SchedulerNode(name='op94'), can_inplace=False, is_weak=False)]
]
op88.group.device = cuda:0
op88.group.iteration = (25088, 24)
op88.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op88_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf88', get_index_3, getitem_1)
        return store_reduction
op87_op88_op116_op117_op94_op119.snodes[2] =
op116: SchedulerNode(ComputedBuffer)
op116.writes = [MemoryDep('buf116', c0, {c0: 25088}, None)]
op116.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op116.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None)]
op116.outputs = [
    buf116: ComputedBuffer
    buf116.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf116.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op116.group.device = cuda:0
op116.group.iteration = (25088, 24)
op116.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op116_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf116', get_index_3, getitem)
        return store_reduction
op87_op88_op116_op117_op94_op119.snodes[3] =
op117: SchedulerNode(ComputedBuffer)
op117.writes = [MemoryDep('buf117', c0, {c0: 25088}, None)]
op117.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op117.met_dependencies = [MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None)]
op117.outputs = [
    buf117: ComputedBuffer
    buf117.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf117.users = [NodeUser(node=SchedulerNode(name='op119'), can_inplace=False, is_weak=False)]
]
op117.group.device = cuda:0
op117.group.iteration = (25088, 24)
op117.sizes = ([25088], [24])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf117_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op117_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf117', get_index_3, getitem_1)
        return store_reduction
op87_op88_op116_op117_op94_op119.snodes[4] =
op94: SchedulerNode(ComputedBuffer)
op94.writes = [MemoryDep('buf94', c0, {c0: 602112}, None)]
op94.unmet_dependencies = 
    [   MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None),
        MemoryDep('buf87', c0, {c0: 25088}, None),
        MemoryDep('buf88', c0, {c0: 25088}, None)]
op94.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg52_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg53_1', c1, {c0: 25088, c1: 24}, None)]
op94.outputs = [
    buf94: ComputedBuffer
    buf94.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf94.users = [NodeUser(node=ExternKernelSchedulerNode(name='op95'), can_inplace=False, is_weak=False)]
]
op94.group.device = cuda:0
op94.group.iteration = (602112, 1)
op94.sizes = ([25088, 24], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf87_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf88_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg52_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg53_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf94_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op94_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf87', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf88', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg52_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg53_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf94', get_index_7, add_3, None)
        return store
op87_op88_op116_op117_op94_op119.snodes[5] =
op119: SchedulerNode(ComputedBuffer)
op119.writes = [MemoryDep('buf119', c0, {c0: 602112}, None)]
op119.unmet_dependencies = 
    [   MemoryDep('buf116', c0, {c0: 25088}, None),
        MemoryDep('buf117', c0, {c0: 25088}, None),
        MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op119.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg68_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg69_1', c1, {c0: 25088, c1: 24}, None)]
op119.outputs = [
    buf119: ComputedBuffer
    buf119.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf119.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op120'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op126'), can_inplace=False, is_weak=False),
    ]
]
op119.group.device = cuda:0
op119.group.iteration = (602112, 1)
op119.sizes = ([25088, 24], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf116_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf117_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg68_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg69_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf119_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op119_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf116', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf117', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg68_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg69_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf119', get_index_7, add_3, None)
        return store


op91: ExternKernelSchedulerNode(ExternKernelOut)
op91.writes = [StarDep(name='buf91', mode=None)]
op91.unmet_dependencies = [StarDep(name='buf90', mode=None)]
op91.met_dependencies = [StarDep(name='arg36_1', mode=None)]
op91.outputs = [
    buf91: ExternKernelOut
    buf91.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf91.users = [NodeUser(node=SchedulerNode(name='op92'), can_inplace=True, is_weak=False)]
]
op91.node.kernel = extern_kernels.mm


op92: SchedulerNode(ComputedBuffer)
op92.writes = [MemoryDep('buf92', c0, {c0: 2420736}, None)]
op92.unmet_dependencies = [MemoryDep('buf91', c0, {c0: 2420736}, None)]
op92.met_dependencies = [MemoryDep('arg37_1', c1, {c0: 1576, c1: 1536}, None)]
op92.outputs = [
    buf92: ComputedBuffer
    buf92.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf92.users = [NodeUser(node=ExternKernelSchedulerNode(name='op93'), can_inplace=False, is_weak=False)]
]
op92.group.device = cuda:0
op92.group.iteration = (2420736, 1)
op92.sizes = ([1576, 1536], [])
buf91_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg37_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf92_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op92_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf91', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg37_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf91', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg37_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf92', get_index_4, mul_2, None)
        return store


op93: ExternKernelSchedulerNode(ExternKernelOut)
op93.writes = [StarDep(name='buf93', mode=None)]
op93.unmet_dependencies = [StarDep(name='buf92', mode=None)]
op93.met_dependencies = [StarDep(name='arg38_1', mode=None)]
op93.outputs = [
    buf93: ExternKernelOut
    buf93.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf93.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op93.node.kernel = extern_kernels.mm


op95: ExternKernelSchedulerNode(ExternKernelOut)
op95.writes = [StarDep(name='buf95', mode=None)]
op95.unmet_dependencies = [StarDep(name='buf94', mode=None)]
op95.met_dependencies = [StarDep(name='arg54_1', mode=None)]
op95.outputs = [
    buf95: ExternKernelOut
    buf95.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf95.users = [NodeUser(node=SchedulerNode(name='op96'), can_inplace=False, is_weak=False)]
]
op95.node.kernel = extern_kernels.mm


op96_op97_op98_op100: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op96_op97_op98_op100.writes = 
    [   MemoryDep('buf100', c0, {c0: 605184}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None),
        MemoryDep('buf97', c0, {c0: 1576}, None),
        MemoryDep('buf98', c0, {c0: 1576}, None)]
op96_op97_op98_op100.unmet_dependencies = 
    [   MemoryDep('buf59', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf59', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf93', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf93', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf95', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op96_op97_op98_op100.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg55_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg56_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg57_1', c1, {c0: 1576, c1: 384}, None)]
op96_op97_op98_op100.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op96_op97_op98_op100.snodes[0] =
op96: SchedulerNode(ComputedBuffer)
op96.writes = [MemoryDep('buf96', c0, {c0: 605184}, None)]
op96.unmet_dependencies = 
    [   MemoryDep('buf59', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf59', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf93', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf93', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf95', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op96.met_dependencies = 
    [   MemoryDep('arg39_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg55_1', c1, {c0: 1576, c1: 384}, None)]
op96.outputs = [
    buf96: ComputedBuffer
    buf96.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf96.users = [
        NodeUser(node=SchedulerNode(name='op97'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op98'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op99'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op100'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op96.group.device = cuda:0
op96.group.iteration = (605184, 1)
op96.sizes = ([8, 197, 384], [])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg39_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf59_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf93_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf95_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg55_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op96_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf96', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg39_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf59', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf93', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg39_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf95', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg55_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op96_op97_op98_op100.snodes[1] =
op97: SchedulerNode(ComputedBuffer)
op97.writes = [MemoryDep('buf97', c0, {c0: 1576}, None)]
op97.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 605184}, None)]
op97.met_dependencies = []
op97.outputs = [
    buf97: ComputedBuffer
    buf97.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf97.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op97.group.device = cuda:0
op97.group.iteration = (1576, 384)
op97.sizes = ([1576], [384])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op97_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf97', get_index_1, getitem)
        return store_reduction
op96_op97_op98_op100.snodes[2] =
op98: SchedulerNode(ComputedBuffer)
op98.writes = [MemoryDep('buf98', c0, {c0: 1576}, None)]
op98.unmet_dependencies = [MemoryDep('buf96', c0, {c0: 605184}, None)]
op98.met_dependencies = []
op98.outputs = [
    buf98: ComputedBuffer
    buf98.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf98.users = [NodeUser(node=SchedulerNode(name='op100'), can_inplace=False, is_weak=False)]
]
op98.group.device = cuda:0
op98.group.iteration = (1576, 384)
op98.sizes = ([1576], [384])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op98_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf98', get_index_1, getitem_1)
        return store_reduction
op96_op97_op98_op100.snodes[3] =
op100: SchedulerNode(ComputedBuffer)
op100.writes = [MemoryDep('buf100', c0, {c0: 605184}, None)]
op100.unmet_dependencies = 
    [   MemoryDep('buf96', c0, {c0: 605184}, None),
        MemoryDep('buf97', c0, {c0: 1576}, None),
        MemoryDep('buf98', c0, {c0: 1576}, None)]
op100.met_dependencies = 
    [   MemoryDep('arg56_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg57_1', c1, {c0: 1576, c1: 384}, None)]
op100.outputs = [
    buf100: ComputedBuffer
    buf100.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf100.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op101'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op107'), can_inplace=False, is_weak=False),
    ]
]
op100.group.device = cuda:0
op100.group.iteration = (605184, 1)
op100.sizes = ([1576, 384], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf97_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf98_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg56_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg57_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf100_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op100_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf97', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf98', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg56_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg57_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf100', get_index_5, add_1, None)
        return store


op101: ExternKernelSchedulerNode(ExternKernelOut)
op101.writes = [StarDep(name='buf101', mode=None)]
op101.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op101.met_dependencies = [StarDep(name='arg58_1', mode=None)]
op101.outputs = [
    buf101: ExternKernelOut
    buf101.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf101.users = [
        NodeUser(node=SchedulerNode(name='op102'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op103'), can_inplace=False, is_weak=False),
    ]
]
op101.node.kernel = extern_kernels.mm


op102: SchedulerNode(ComputedBuffer)
op102.writes = [MemoryDep('buf102', c0, {c0: 605184}, None)]
op102.unmet_dependencies = [   MemoryDep('buf101', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op102.met_dependencies = []
op102.outputs = [
    buf102: ComputedBuffer
    buf102.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf102.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op102.group.device = cuda:0
op102.group.iteration = (605184, 1)
op102.sizes = ([8, 6, 197, 64], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf102_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op102_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf102', get_index_1, load, None)
        return store


op103: SchedulerNode(ComputedBuffer)
op103.writes = [MemoryDep('buf103', c0, {c0: 605184}, None)]
op103.unmet_dependencies = [   MemoryDep('buf101', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op103.met_dependencies = []
op103.outputs = [
    buf103: ComputedBuffer
    buf103.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf103.users = [NodeUser(node=ExternKernelSchedulerNode(name='op104'), can_inplace=False, is_weak=False)]
]
op103.group.device = cuda:0
op103.group.iteration = (605184, 1)
op103.sizes = ([8, 384, 197], [])
buf101_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf103_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op103_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf101', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf103', get_index_1, load, None)
        return store


op104: ExternKernelSchedulerNode(ExternKernelOut)
op104.writes = [StarDep(name='buf104', mode=None)]
op104.unmet_dependencies = [StarDep(name='buf102', mode=None), StarDep(name='buf103', mode=None)]
op104.met_dependencies = []
op104.outputs = [
    buf104: ExternKernelOut
    buf104.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf104.users = [
        NodeUser(node=SchedulerNode(name='op105'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op104.node.kernel = extern_kernels.bmm


op105_op106_op108: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op105_op106_op108.writes = 
    [   MemoryDep('buf105', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf106', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf108', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op105_op106_op108.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 1862832}, None)]
op105_op106_op108.met_dependencies = []
op105_op106_op108.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op105_op106_op108.snodes[0] =
op105: SchedulerNode(ComputedBuffer)
op105.writes = [MemoryDep('buf105', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op105.unmet_dependencies = [MemoryDep('buf104', c0, {c0: 1862832}, None)]
op105.met_dependencies = []
op105.outputs = [
    buf105: ComputedBuffer
    buf105.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf105.users = [
        NodeUser(node=SchedulerNode(name='op106'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False),
    ]
]
op105.group.device = cuda:0
op105.group.iteration = (9456, 197)
op105.sizes = ([8, 1182], [197])
buf104_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op105_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf105', get_index_1, reduction)
        return store_reduction
op105_op106_op108.snodes[1] =
op106: SchedulerNode(ComputedBuffer)
op106.writes = [MemoryDep('buf106', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op106.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 1862832}, None),
        MemoryDep('buf105', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op106.met_dependencies = []
op106.outputs = [
    buf106: ComputedBuffer
    buf106.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf106.users = [NodeUser(node=SchedulerNode(name='op108'), can_inplace=False, is_weak=False)]
]
op106.group.device = cuda:0
op106.group.iteration = (9456, 197)
op106.sizes = ([8, 1182], [197])
buf104_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op106_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf106', get_index_2, reduction)
        return store_reduction
op105_op106_op108.snodes[2] =
op108: SchedulerNode(ComputedBuffer)
op108.writes = [MemoryDep('buf108', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op108.unmet_dependencies = 
    [   MemoryDep('buf104', c0, {c0: 1862832}, None),
        MemoryDep('buf105', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf106', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op108.met_dependencies = []
op108.outputs = [
    buf108: ComputedBuffer
    buf108.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf108.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op108.group.device = cuda:0
op108.group.iteration = (1862832, 1)
op108.sizes = ([8, 6, 197, 197], [])
buf104_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf105_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf106_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf108_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op108_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf104', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf105', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf106', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf108', get_index_3, truediv, None)
        return store


op107: ExternKernelSchedulerNode(ExternKernelOut)
op107.writes = [StarDep(name='buf107', mode=None)]
op107.unmet_dependencies = [StarDep(name='buf100', mode=None)]
op107.met_dependencies = [StarDep(name='arg59_1', mode=None)]
op107.outputs = [
    buf107: ExternKernelOut
    buf107.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf107.users = [NodeUser(node=SchedulerNode(name='op109'), can_inplace=False, is_weak=False)]
]
op107.node.kernel = extern_kernels.mm


op109: SchedulerNode(ComputedBuffer)
op109.writes = [MemoryDep('buf109', c0, {c0: 605184}, None)]
op109.unmet_dependencies = [   MemoryDep('buf107', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op109.met_dependencies = []
op109.outputs = [
    buf109: ComputedBuffer
    buf109.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf109.users = [NodeUser(node=ExternKernelSchedulerNode(name='op110'), can_inplace=False, is_weak=False)]
]
op109.group.device = cuda:0
op109.group.iteration = (605184, 1)
op109.sizes = ([8, 6, 197, 64], [])
buf107_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf109_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op109_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf107', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf109', get_index_1, load, None)
        return store


op110: ExternKernelSchedulerNode(ExternKernelOut)
op110.writes = [StarDep(name='buf110', mode=None)]
op110.unmet_dependencies = [StarDep(name='buf108', mode=None), StarDep(name='buf109', mode=None)]
op110.met_dependencies = []
op110.outputs = [
    buf110: ExternKernelOut
    buf110.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf110.users = [NodeUser(node=SchedulerNode(name='op111'), can_inplace=False, is_weak=False)]
]
op110.node.kernel = extern_kernels.bmm


op111: SchedulerNode(ComputedBuffer)
op111.writes = [MemoryDep('buf111', c0, {c0: 605184}, None)]
op111.unmet_dependencies = [   MemoryDep('buf110', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op111.met_dependencies = []
op111.outputs = [
    buf111: ComputedBuffer
    buf111.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf111.users = [NodeUser(node=ExternKernelSchedulerNode(name='op112'), can_inplace=False, is_weak=False)]
]
op111.group.device = cuda:0
op111.group.iteration = (605184, 1)
op111.sizes = ([8, 197, 6, 64], [])
buf110_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf111_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op111_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf110', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf111', get_index_1, load, None)
        return store


op112: ExternKernelSchedulerNode(ExternKernelOut)
op112.writes = [StarDep(name='buf112', mode=None)]
op112.unmet_dependencies = [StarDep(name='buf111', mode=None)]
op112.met_dependencies = [StarDep(name='arg60_1', mode=None)]
op112.outputs = [
    buf112: ExternKernelOut
    buf112.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf112.users = [
        NodeUser(node=SchedulerNode(name='op113'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op114'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op115'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op143'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False),
    ]
]
op112.node.kernel = extern_kernels.mm


op113_op114_op143: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op113_op114_op143.writes = 
    [   MemoryDep('buf113', c0, {c0: 1576}, None),
        MemoryDep('buf114', c0, {c0: 1576}, None),
        MemoryDep('buf143', c0, {c0: 605184}, None)]
op113_op114_op143.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 605184}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None)]
op113_op114_op143.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg62_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg63_1', c1, {c0: 1576, c1: 384}, None)]
op113_op114_op143.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf113.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf114.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op113_op114_op143.snodes[0] =
op113: SchedulerNode(ComputedBuffer)
op113.writes = [MemoryDep('buf113', c0, {c0: 1576}, None)]
op113.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 605184}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None)]
op113.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1576, c1: 384}, None)]
op113.outputs = [
    buf113: ComputedBuffer
    buf113.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf113.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op113.group.device = cuda:0
op113.group.iteration = (1576, 384)
op113.sizes = ([1576], [384])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op113_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf113', get_index_3, getitem)
        return store_reduction
op113_op114_op143.snodes[1] =
op114: SchedulerNode(ComputedBuffer)
op114.writes = [MemoryDep('buf114', c0, {c0: 1576}, None)]
op114.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 605184}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None)]
op114.met_dependencies = [MemoryDep('arg61_1', c1, {c0: 1576, c1: 384}, None)]
op114.outputs = [
    buf114: ComputedBuffer
    buf114.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf114.users = [NodeUser(node=SchedulerNode(name='op143'), can_inplace=False, is_weak=False)]
]
op114.group.device = cuda:0
op114.group.iteration = (1576, 384)
op114.sizes = ([1576], [384])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op114_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf114', get_index_3, getitem_1)
        return store_reduction
op113_op114_op143.snodes[2] =
op143: SchedulerNode(ComputedBuffer)
op143.writes = [MemoryDep('buf143', c0, {c0: 605184}, None)]
op143.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 605184}, None),
        MemoryDep('buf113', c0, {c0: 1576}, None),
        MemoryDep('buf114', c0, {c0: 1576}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None)]
op143.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg62_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg63_1', c1, {c0: 1576, c1: 384}, None)]
op143.outputs = [
    buf143: ComputedBuffer
    buf143.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf143.users = [NodeUser(node=ExternKernelSchedulerNode(name='op144'), can_inplace=False, is_weak=False)]
]
op143.group.device = cuda:0
op143.group.iteration = (605184, 1)
op143.sizes = ([1576, 384], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf113_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf114_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg62_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg63_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf143_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op143_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf113', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf114', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg62_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg63_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf143', get_index_7, add_3, None)
        return store


op120: ExternKernelSchedulerNode(ExternKernelOut)
op120.writes = [StarDep(name='buf120', mode=None)]
op120.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op120.met_dependencies = [StarDep(name='arg70_1', mode=None)]
op120.outputs = [
    buf120: ExternKernelOut
    buf120.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf120.users = [
        NodeUser(node=SchedulerNode(name='op121'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op122'), can_inplace=False, is_weak=False),
    ]
]
op120.node.kernel = extern_kernels.mm


op121: SchedulerNode(ComputedBuffer)
op121.writes = [MemoryDep('buf121', c0, {c0: 602112}, None)]
op121.unmet_dependencies = [   MemoryDep('buf120', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op121.met_dependencies = []
op121.outputs = [
    buf121: ComputedBuffer
    buf121.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf121.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op121.group.device = cuda:0
op121.group.iteration = (602112, 1)
op121.sizes = ([1568, 4, 16, 6], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf121_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op121_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf121', get_index_1, load, None)
        return store


op122: SchedulerNode(ComputedBuffer)
op122.writes = [MemoryDep('buf122', c0, {c0: 602112}, None)]
op122.unmet_dependencies = [   MemoryDep('buf120', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op122.met_dependencies = []
op122.outputs = [
    buf122: ComputedBuffer
    buf122.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf122.users = [NodeUser(node=ExternKernelSchedulerNode(name='op123'), can_inplace=False, is_weak=False)]
]
op122.group.device = cuda:0
op122.group.iteration = (602112, 1)
op122.sizes = ([1568, 24, 16], [])
buf120_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf122_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op122_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf120', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf122', get_index_1, load, None)
        return store


op123: ExternKernelSchedulerNode(ExternKernelOut)
op123.writes = [StarDep(name='buf123', mode=None)]
op123.unmet_dependencies = [StarDep(name='buf121', mode=None), StarDep(name='buf122', mode=None)]
op123.met_dependencies = []
op123.outputs = [
    buf123: ExternKernelOut
    buf123.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf123.users = [
        NodeUser(node=SchedulerNode(name='op124'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=True, is_weak=False),
    ]
]
op123.node.kernel = extern_kernels.bmm


op124_op125_op127: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op124_op125_op127.writes = 
    [   MemoryDep('buf124', c0, {c0: 100352}, None),
        MemoryDep('buf125', c0, {c0: 100352}, None),
        MemoryDep('buf127', c0, {c0: 1605632}, None)]
op124_op125_op127.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 1605632}, None)]
op124_op125_op127.met_dependencies = []
op124_op125_op127.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op124_op125_op127.snodes[0] =
op124: SchedulerNode(ComputedBuffer)
op124.writes = [MemoryDep('buf124', c0, {c0: 100352}, None)]
op124.unmet_dependencies = [MemoryDep('buf123', c0, {c0: 1605632}, None)]
op124.met_dependencies = []
op124.outputs = [
    buf124: ComputedBuffer
    buf124.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf124.users = [
        NodeUser(node=SchedulerNode(name='op125'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False),
    ]
]
op124.group.device = cuda:0
op124.group.iteration = (100352, 16)
op124.sizes = ([100352], [16])
buf123_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op124_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf124', get_index_1, reduction)
        return store_reduction
op124_op125_op127.snodes[1] =
op125: SchedulerNode(ComputedBuffer)
op125.writes = [MemoryDep('buf125', c0, {c0: 100352}, None)]
op125.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 1605632}, None),
        MemoryDep('buf124', c0, {c0: 100352}, None)]
op125.met_dependencies = []
op125.outputs = [
    buf125: ComputedBuffer
    buf125.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf125.users = [NodeUser(node=SchedulerNode(name='op127'), can_inplace=False, is_weak=False)]
]
op125.group.device = cuda:0
op125.group.iteration = (100352, 16)
op125.sizes = ([100352], [16])
buf123_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op125_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf125', get_index_2, reduction)
        return store_reduction
op124_op125_op127.snodes[2] =
op127: SchedulerNode(ComputedBuffer)
op127.writes = [MemoryDep('buf127', c0, {c0: 1605632}, None)]
op127.unmet_dependencies = 
    [   MemoryDep('buf123', c0, {c0: 1605632}, None),
        MemoryDep('buf124', c0, {c0: 100352}, None),
        MemoryDep('buf125', c0, {c0: 100352}, None)]
op127.met_dependencies = []
op127.outputs = [
    buf127: ComputedBuffer
    buf127.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf127.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op127.group.device = cuda:0
op127.group.iteration = (1605632, 1)
op127.sizes = ([100352, 16], [])
buf123_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf124_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf125_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf127_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op127_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf123', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf124', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf125', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf127', get_index_3, truediv, None)
        return store


op126: ExternKernelSchedulerNode(ExternKernelOut)
op126.writes = [StarDep(name='buf126', mode=None)]
op126.unmet_dependencies = [StarDep(name='buf119', mode=None)]
op126.met_dependencies = [StarDep(name='arg71_1', mode=None)]
op126.outputs = [
    buf126: ExternKernelOut
    buf126.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf126.users = [NodeUser(node=SchedulerNode(name='op128'), can_inplace=False, is_weak=False)]
]
op126.node.kernel = extern_kernels.mm


op128: SchedulerNode(ComputedBuffer)
op128.writes = [MemoryDep('buf128', c0, {c0: 602112}, None)]
op128.unmet_dependencies = [   MemoryDep('buf126', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op128.met_dependencies = []
op128.outputs = [
    buf128: ComputedBuffer
    buf128.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf128.users = [NodeUser(node=ExternKernelSchedulerNode(name='op129'), can_inplace=False, is_weak=False)]
]
op128.group.device = cuda:0
op128.group.iteration = (602112, 1)
op128.sizes = ([1568, 4, 16, 6], [])
buf126_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf128_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op128_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf126', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf128', get_index_1, load, None)
        return store


op129: ExternKernelSchedulerNode(ExternKernelOut)
op129.writes = [StarDep(name='buf129', mode=None)]
op129.unmet_dependencies = [StarDep(name='buf127', mode=None), StarDep(name='buf128', mode=None)]
op129.met_dependencies = []
op129.outputs = [
    buf129: ExternKernelOut
    buf129.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf129.users = [NodeUser(node=SchedulerNode(name='op130'), can_inplace=False, is_weak=False)]
]
op129.node.kernel = extern_kernels.bmm


op130: SchedulerNode(ComputedBuffer)
op130.writes = [MemoryDep('buf130', c0, {c0: 602112}, None)]
op130.unmet_dependencies = [   MemoryDep('buf129', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op130.met_dependencies = []
op130.outputs = [
    buf130: ComputedBuffer
    buf130.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf130.users = [NodeUser(node=ExternKernelSchedulerNode(name='op131'), can_inplace=False, is_weak=False)]
]
op130.group.device = cuda:0
op130.group.iteration = (602112, 1)
op130.sizes = ([1568, 16, 4, 6], [])
buf129_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf130_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op130_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf129', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf130', get_index_1, load, None)
        return store


op131: ExternKernelSchedulerNode(ExternKernelOut)
op131.writes = [StarDep(name='buf131', mode=None)]
op131.unmet_dependencies = [StarDep(name='buf130', mode=None)]
op131.met_dependencies = [StarDep(name='arg72_1', mode=None)]
op131.outputs = [
    buf131: ExternKernelOut
    buf131.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf131.users = [NodeUser(node=SchedulerNode(name='op132'), can_inplace=True, is_weak=False)]
]
op131.node.kernel = extern_kernels.mm


op132_op133_op134_op136: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op132_op133_op134_op136.writes = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf133', c0, {c0: 25088}, None),
        MemoryDep('buf134', c0, {c0: 25088}, None),
        MemoryDep('buf136', c0, {c0: 602112}, None)]
op132_op133_op134_op136.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 602112}, None),
        MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op132_op133_op134_op136.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg73_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg74_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg75_1', c1, {c0: 25088, c1: 24}, None)]
op132_op133_op134_op136.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf133.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op132_op133_op134_op136.snodes[0] =
op132: SchedulerNode(ComputedBuffer)
op132.writes = [MemoryDep('buf132', c0, {c0: 602112}, None)]
op132.unmet_dependencies = 
    [   MemoryDep('buf131', c0, {c0: 602112}, None),
        MemoryDep('buf79', c0, {c0: 602112}, None),
        MemoryDep('buf86', c0, {c0: 602112}, None)]
op132.met_dependencies = 
    [   MemoryDep('arg51_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg73_1', c1, {c0: 25088, c1: 24}, None)]
op132.outputs = [
    buf132: ComputedBuffer
    buf132.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf132.users = [
        NodeUser(node=SchedulerNode(name='op133'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op134'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op135'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op136'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op132.group.device = cuda:0
op132.group.iteration = (602112, 1)
op132.sizes = ([25088, 24], [])
buf79_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf86_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg51_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf131_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg73_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op132_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf79', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf86', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg51_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf131', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg73_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf132', get_index_5, add_3, None)
        return store
op132_op133_op134_op136.snodes[1] =
op133: SchedulerNode(ComputedBuffer)
op133.writes = [MemoryDep('buf133', c0, {c0: 25088}, None)]
op133.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 602112}, None)]
op133.met_dependencies = []
op133.outputs = [
    buf133: ComputedBuffer
    buf133.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf133.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op133.group.device = cuda:0
op133.group.iteration = (25088, 24)
op133.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op133_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf133', get_index_1, getitem)
        return store_reduction
op132_op133_op134_op136.snodes[2] =
op134: SchedulerNode(ComputedBuffer)
op134.writes = [MemoryDep('buf134', c0, {c0: 25088}, None)]
op134.unmet_dependencies = [MemoryDep('buf132', c0, {c0: 602112}, None)]
op134.met_dependencies = []
op134.outputs = [
    buf134: ComputedBuffer
    buf134.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf134.users = [NodeUser(node=SchedulerNode(name='op136'), can_inplace=False, is_weak=False)]
]
op134.group.device = cuda:0
op134.group.iteration = (25088, 24)
op134.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf134_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op134_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf134', get_index_1, getitem_1)
        return store_reduction
op132_op133_op134_op136.snodes[3] =
op136: SchedulerNode(ComputedBuffer)
op136.writes = [MemoryDep('buf136', c0, {c0: 602112}, None)]
op136.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf133', c0, {c0: 25088}, None),
        MemoryDep('buf134', c0, {c0: 25088}, None)]
op136.met_dependencies = 
    [   MemoryDep('arg74_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg75_1', c1, {c0: 25088, c1: 24}, None)]
op136.outputs = [
    buf136: ComputedBuffer
    buf136.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf136.users = [NodeUser(node=ExternKernelSchedulerNode(name='op137'), can_inplace=False, is_weak=False)]
]
op136.group.device = cuda:0
op136.group.iteration = (602112, 1)
op136.sizes = ([25088, 24], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf133_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf134_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg74_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg75_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf136_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op136_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf133', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf134', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg74_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg75_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf136', get_index_5, add_1, None)
        return store


op137: ExternKernelSchedulerNode(ExternKernelOut)
op137.writes = [StarDep(name='buf137', mode=None)]
op137.unmet_dependencies = [StarDep(name='buf136', mode=None)]
op137.met_dependencies = [StarDep(name='arg76_1', mode=None)]
op137.outputs = [
    buf137: ExternKernelOut
    buf137.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf137.users = [NodeUser(node=SchedulerNode(name='op138'), can_inplace=True, is_weak=False)]
]
op137.node.kernel = extern_kernels.mm


op138: SchedulerNode(ComputedBuffer)
op138.writes = [MemoryDep('buf138', c0, {c0: 2408448}, None)]
op138.unmet_dependencies = [MemoryDep('buf137', c0, {c0: 2408448}, None)]
op138.met_dependencies = [MemoryDep('arg77_1', c1, {c0: 25088, c1: 96}, None)]
op138.outputs = [
    buf138: ComputedBuffer
    buf138.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf138.users = [NodeUser(node=ExternKernelSchedulerNode(name='op139'), can_inplace=False, is_weak=False)]
]
op138.group.device = cuda:0
op138.group.iteration = (2408448, 1)
op138.sizes = ([25088, 96], [])
buf137_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg77_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf138_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op138_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf137', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg77_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf137', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg77_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf138', get_index_4, mul_2, None)
        return store


op139: ExternKernelSchedulerNode(ExternKernelOut)
op139.writes = [StarDep(name='buf139', mode=None)]
op139.unmet_dependencies = [StarDep(name='buf138', mode=None)]
op139.met_dependencies = [StarDep(name='arg78_1', mode=None)]
op139.outputs = [
    buf139: ExternKernelOut
    buf139.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf139.users = [
        NodeUser(node=SchedulerNode(name='op140'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op141'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op142'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op148'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op171'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op172'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op173'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op174'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False),
    ]
]
op139.node.kernel = extern_kernels.mm


op140_op141_op171_op172_op148_op174: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op140_op141_op171_op172_op148_op174.writes = 
    [   MemoryDep('buf140', c0, {c0: 25088}, None),
        MemoryDep('buf141', c0, {c0: 25088}, None),
        MemoryDep('buf148', c0, {c0: 602112}, None),
        MemoryDep('buf171', c0, {c0: 25088}, None),
        MemoryDep('buf172', c0, {c0: 25088}, None),
        MemoryDep('buf174', c0, {c0: 602112}, None)]
op140_op141_op171_op172_op148_op174.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None)]
op140_op141_op171_op172_op148_op174.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg80_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg81_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg96_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg97_1', c1, {c0: 25088, c1: 24}, None)]
op140_op141_op171_op172_op148_op174.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf140.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf141.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf171.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf174.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
    ]
]
op140_op141_op171_op172_op148_op174.snodes[0] =
op140: SchedulerNode(ComputedBuffer)
op140.writes = [MemoryDep('buf140', c0, {c0: 25088}, None)]
op140.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None)]
op140.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op140.outputs = [
    buf140: ComputedBuffer
    buf140.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf140.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op140.group.device = cuda:0
op140.group.iteration = (25088, 24)
op140.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op140_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf140', get_index_3, getitem)
        return store_reduction
op140_op141_op171_op172_op148_op174.snodes[1] =
op141: SchedulerNode(ComputedBuffer)
op141.writes = [MemoryDep('buf141', c0, {c0: 25088}, None)]
op141.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None)]
op141.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op141.outputs = [
    buf141: ComputedBuffer
    buf141.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf141.users = [NodeUser(node=SchedulerNode(name='op148'), can_inplace=False, is_weak=False)]
]
op141.group.device = cuda:0
op141.group.iteration = (25088, 24)
op141.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf141_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op141_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf141', get_index_3, getitem_1)
        return store_reduction
op140_op141_op171_op172_op148_op174.snodes[2] =
op171: SchedulerNode(ComputedBuffer)
op171.writes = [MemoryDep('buf171', c0, {c0: 25088}, None)]
op171.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None)]
op171.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op171.outputs = [
    buf171: ComputedBuffer
    buf171.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf171.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op171.group.device = cuda:0
op171.group.iteration = (25088, 24)
op171.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op171_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf171', get_index_3, getitem)
        return store_reduction
op140_op141_op171_op172_op148_op174.snodes[3] =
op172: SchedulerNode(ComputedBuffer)
op172.writes = [MemoryDep('buf172', c0, {c0: 25088}, None)]
op172.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None)]
op172.met_dependencies = [MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op172.outputs = [
    buf172: ComputedBuffer
    buf172.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf172.users = [NodeUser(node=SchedulerNode(name='op174'), can_inplace=False, is_weak=False)]
]
op172.group.device = cuda:0
op172.group.iteration = (25088, 24)
op172.sizes = ([25088], [24])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf172_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op172_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf172', get_index_3, getitem_1)
        return store_reduction
op140_op141_op171_op172_op148_op174.snodes[4] =
op148: SchedulerNode(ComputedBuffer)
op148.writes = [MemoryDep('buf148', c0, {c0: 602112}, None)]
op148.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None),
        MemoryDep('buf140', c0, {c0: 25088}, None),
        MemoryDep('buf141', c0, {c0: 25088}, None)]
op148.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg80_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg81_1', c1, {c0: 25088, c1: 24}, None)]
op148.outputs = [
    buf148: ComputedBuffer
    buf148.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf148.users = [NodeUser(node=ExternKernelSchedulerNode(name='op149'), can_inplace=False, is_weak=False)]
]
op148.group.device = cuda:0
op148.group.iteration = (602112, 1)
op148.sizes = ([25088, 24], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf140_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf141_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg80_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg81_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf148_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op148_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf140', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf141', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg80_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg81_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf148', get_index_7, add_3, None)
        return store
op140_op141_op171_op172_op148_op174.snodes[5] =
op174: SchedulerNode(ComputedBuffer)
op174.writes = [MemoryDep('buf174', c0, {c0: 602112}, None)]
op174.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None),
        MemoryDep('buf171', c0, {c0: 25088}, None),
        MemoryDep('buf172', c0, {c0: 25088}, None)]
op174.met_dependencies = 
    [   MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg96_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg97_1', c1, {c0: 25088, c1: 24}, None)]
op174.outputs = [
    buf174: ComputedBuffer
    buf174.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf174.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op175'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op181'), can_inplace=False, is_weak=False),
    ]
]
op174.group.device = cuda:0
op174.group.iteration = (602112, 1)
op174.sizes = ([25088, 24], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf171_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf172_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg96_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg97_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf174_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op174_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf171', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf172', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg96_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg97_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf174', get_index_7, add_3, None)
        return store


op144: ExternKernelSchedulerNode(ExternKernelOut)
op144.writes = [StarDep(name='buf144', mode=None)]
op144.unmet_dependencies = [StarDep(name='buf143', mode=None)]
op144.met_dependencies = [StarDep(name='arg64_1', mode=None)]
op144.outputs = [
    buf144: ExternKernelOut
    buf144.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf144.users = [NodeUser(node=SchedulerNode(name='op145'), can_inplace=True, is_weak=False)]
]
op144.node.kernel = extern_kernels.mm


op145: SchedulerNode(ComputedBuffer)
op145.writes = [MemoryDep('buf145', c0, {c0: 2420736}, None)]
op145.unmet_dependencies = [MemoryDep('buf144', c0, {c0: 2420736}, None)]
op145.met_dependencies = [MemoryDep('arg65_1', c1, {c0: 1576, c1: 1536}, None)]
op145.outputs = [
    buf145: ComputedBuffer
    buf145.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf145.users = [NodeUser(node=ExternKernelSchedulerNode(name='op146'), can_inplace=False, is_weak=False)]
]
op145.group.device = cuda:0
op145.group.iteration = (2420736, 1)
op145.sizes = ([1576, 1536], [])
buf144_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg65_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf145_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op145_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf144', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg65_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf144', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg65_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf145', get_index_4, mul_2, None)
        return store


op146: ExternKernelSchedulerNode(ExternKernelOut)
op146.writes = [StarDep(name='buf146', mode=None)]
op146.unmet_dependencies = [StarDep(name='buf145', mode=None)]
op146.met_dependencies = [StarDep(name='arg66_1', mode=None)]
op146.outputs = [
    buf146: ExternKernelOut
    buf146.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf146.users = [NodeUser(node=SchedulerNode(name='op147'), can_inplace=True, is_weak=False)]
]
op146.node.kernel = extern_kernels.mm


op147: SchedulerNode(ComputedBuffer)
op147.writes = [MemoryDep('buf147', c0, {c0: 605184}, None)]
op147.unmet_dependencies = 
    [   MemoryDep('buf112', c0, {c0: 605184}, None),
        MemoryDep('buf146', c0, {c0: 605184}, None),
        MemoryDep('buf96', c0, {c0: 605184}, None)]
op147.met_dependencies = 
    [   MemoryDep('arg61_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg67_1', c1, {c0: 1576, c1: 384}, None)]
op147.outputs = [
    buf147: ComputedBuffer
    buf147.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf147.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op147.group.device = cuda:0
op147.group.iteration = (605184, 1)
op147.sizes = ([1576, 384], [])
buf96_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf112_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg61_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf146_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg67_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op147_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf96', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf112', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg61_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf146', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg67_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf147', get_index_5, add_3, None)
        return store


op149: ExternKernelSchedulerNode(ExternKernelOut)
op149.writes = [StarDep(name='buf149', mode=None)]
op149.unmet_dependencies = [StarDep(name='buf148', mode=None)]
op149.met_dependencies = [StarDep(name='arg82_1', mode=None)]
op149.outputs = [
    buf149: ExternKernelOut
    buf149.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf149.users = [
        NodeUser(node=SchedulerNode(name='op150'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op151'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op152'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op167'), can_inplace=False, is_weak=False),
    ]
]
op149.node.kernel = extern_kernels.mm


op150_op151_op153_op154: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op150_op151_op153_op154.writes = 
    [   MemoryDep('buf150', c0, {c0: 1576}, None),
        MemoryDep('buf151', c0, {c0: 1576}, None),
        MemoryDep('buf153', c0, {c0: 605184}, None),
        MemoryDep('buf154', c0, {c0: 605184}, None)]
op150_op151_op153_op154.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op150_op151_op153_op154.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg84_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg85_1', c1, {c0: 1576, c1: 384}, None)]
op150_op151_op153_op154.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op150_op151_op153_op154.snodes[0] =
op150: SchedulerNode(ComputedBuffer)
op150.writes = [MemoryDep('buf150', c0, {c0: 1576}, None)]
op150.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op150.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None)]
op150.outputs = [
    buf150: ComputedBuffer
    buf150.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf150.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op150.group.device = cuda:0
op150.group.iteration = (1576, 384)
op150.sizes = ([8, 197], [384])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op150_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf150', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op150_op151_op153_op154.snodes[1] =
op151: SchedulerNode(ComputedBuffer)
op151.writes = [MemoryDep('buf151', c0, {c0: 1576}, None)]
op151.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op151.met_dependencies = [MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None)]
op151.outputs = [
    buf151: ComputedBuffer
    buf151.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf151.users = [NodeUser(node=SchedulerNode(name='op153'), can_inplace=False, is_weak=False)]
]
op151.group.device = cuda:0
op151.group.iteration = (1576, 384)
op151.sizes = ([8, 197], [384])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op151_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf151', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op150_op151_op153_op154.snodes[2] =
op153: SchedulerNode(ComputedBuffer)
op153.writes = [MemoryDep('buf153', c0, {c0: 605184}, None)]
op153.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf150', c0, {c0: 1576}, None),
        MemoryDep('buf151', c0, {c0: 1576}, None)]
op153.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg84_1', c1, {c0: 1576, c1: 384}, None)]
op153.outputs = [
    buf153: ComputedBuffer
    buf153.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf153.users = [NodeUser(node=SchedulerNode(name='op154'), can_inplace=True, is_weak=False)]
]
op153.group.device = cuda:0
op153.group.iteration = (605184, 1)
op153.sizes = ([8, 197, 384], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf150_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf151_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg84_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op153_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf150', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf151', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg84_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf153', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op150_op151_op153_op154.snodes[3] =
op154: SchedulerNode(ComputedBuffer)
op154.writes = [MemoryDep('buf154', c0, {c0: 605184}, None)]
op154.unmet_dependencies = [MemoryDep('buf153', c0, {c0: 605184}, None)]
op154.met_dependencies = [MemoryDep('arg85_1', c1, {c0: 1576, c1: 384}, None)]
op154.outputs = [
    buf154: ComputedBuffer
    buf154.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf154.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op155'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op161'), can_inplace=False, is_weak=False),
    ]
]
op154.group.device = cuda:0
op154.group.iteration = (605184, 1)
op154.sizes = ([1576, 384], [])
buf153_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg85_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf154_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op154_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf153', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg85_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf154', get_index_2, add, None)
        return store


op155: ExternKernelSchedulerNode(ExternKernelOut)
op155.writes = [StarDep(name='buf155', mode=None)]
op155.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op155.met_dependencies = [StarDep(name='arg86_1', mode=None)]
op155.outputs = [
    buf155: ExternKernelOut
    buf155.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf155.users = [
        NodeUser(node=SchedulerNode(name='op156'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op157'), can_inplace=False, is_weak=False),
    ]
]
op155.node.kernel = extern_kernels.mm


op156: SchedulerNode(ComputedBuffer)
op156.writes = [MemoryDep('buf156', c0, {c0: 605184}, None)]
op156.unmet_dependencies = [   MemoryDep('buf155', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op156.met_dependencies = []
op156.outputs = [
    buf156: ComputedBuffer
    buf156.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf156.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op156.group.device = cuda:0
op156.group.iteration = (605184, 1)
op156.sizes = ([8, 6, 197, 64], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf156_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op156_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf156', get_index_1, load, None)
        return store


op157: SchedulerNode(ComputedBuffer)
op157.writes = [MemoryDep('buf157', c0, {c0: 605184}, None)]
op157.unmet_dependencies = [   MemoryDep('buf155', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op157.met_dependencies = []
op157.outputs = [
    buf157: ComputedBuffer
    buf157.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf157.users = [NodeUser(node=ExternKernelSchedulerNode(name='op158'), can_inplace=False, is_weak=False)]
]
op157.group.device = cuda:0
op157.group.iteration = (605184, 1)
op157.sizes = ([8, 384, 197], [])
buf155_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf157_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op157_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf155', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf157', get_index_1, load, None)
        return store


op158: ExternKernelSchedulerNode(ExternKernelOut)
op158.writes = [StarDep(name='buf158', mode=None)]
op158.unmet_dependencies = [StarDep(name='buf156', mode=None), StarDep(name='buf157', mode=None)]
op158.met_dependencies = []
op158.outputs = [
    buf158: ExternKernelOut
    buf158.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf158.users = [
        NodeUser(node=SchedulerNode(name='op159'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op158.node.kernel = extern_kernels.bmm


op159_op160_op162: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op159_op160_op162.writes = 
    [   MemoryDep('buf159', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf162', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op159_op160_op162.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 1862832}, None)]
op159_op160_op162.met_dependencies = []
op159_op160_op162.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op159_op160_op162.snodes[0] =
op159: SchedulerNode(ComputedBuffer)
op159.writes = [MemoryDep('buf159', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op159.unmet_dependencies = [MemoryDep('buf158', c0, {c0: 1862832}, None)]
op159.met_dependencies = []
op159.outputs = [
    buf159: ComputedBuffer
    buf159.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf159.users = [
        NodeUser(node=SchedulerNode(name='op160'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False),
    ]
]
op159.group.device = cuda:0
op159.group.iteration = (9456, 197)
op159.sizes = ([8, 1182], [197])
buf158_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op159_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf159', get_index_1, reduction)
        return store_reduction
op159_op160_op162.snodes[1] =
op160: SchedulerNode(ComputedBuffer)
op160.writes = [MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op160.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 1862832}, None),
        MemoryDep('buf159', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op160.met_dependencies = []
op160.outputs = [
    buf160: ComputedBuffer
    buf160.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf160.users = [NodeUser(node=SchedulerNode(name='op162'), can_inplace=False, is_weak=False)]
]
op160.group.device = cuda:0
op160.group.iteration = (9456, 197)
op160.sizes = ([8, 1182], [197])
buf158_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op160_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf160', get_index_2, reduction)
        return store_reduction
op159_op160_op162.snodes[2] =
op162: SchedulerNode(ComputedBuffer)
op162.writes = [MemoryDep('buf162', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op162.unmet_dependencies = 
    [   MemoryDep('buf158', c0, {c0: 1862832}, None),
        MemoryDep('buf159', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf160', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op162.met_dependencies = []
op162.outputs = [
    buf162: ComputedBuffer
    buf162.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf162.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op162.group.device = cuda:0
op162.group.iteration = (1862832, 1)
op162.sizes = ([8, 6, 197, 197], [])
buf158_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf159_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf160_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf162_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op162_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf158', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf159', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf160', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf162', get_index_3, truediv, None)
        return store


op161: ExternKernelSchedulerNode(ExternKernelOut)
op161.writes = [StarDep(name='buf161', mode=None)]
op161.unmet_dependencies = [StarDep(name='buf154', mode=None)]
op161.met_dependencies = [StarDep(name='arg87_1', mode=None)]
op161.outputs = [
    buf161: ExternKernelOut
    buf161.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf161.users = [NodeUser(node=SchedulerNode(name='op163'), can_inplace=False, is_weak=False)]
]
op161.node.kernel = extern_kernels.mm


op163: SchedulerNode(ComputedBuffer)
op163.writes = [MemoryDep('buf163', c0, {c0: 605184}, None)]
op163.unmet_dependencies = [   MemoryDep('buf161', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op163.met_dependencies = []
op163.outputs = [
    buf163: ComputedBuffer
    buf163.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf163.users = [NodeUser(node=ExternKernelSchedulerNode(name='op164'), can_inplace=False, is_weak=False)]
]
op163.group.device = cuda:0
op163.group.iteration = (605184, 1)
op163.sizes = ([8, 6, 197, 64], [])
buf161_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf163_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op163_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf161', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf163', get_index_1, load, None)
        return store


op164: ExternKernelSchedulerNode(ExternKernelOut)
op164.writes = [StarDep(name='buf164', mode=None)]
op164.unmet_dependencies = [StarDep(name='buf162', mode=None), StarDep(name='buf163', mode=None)]
op164.met_dependencies = []
op164.outputs = [
    buf164: ExternKernelOut
    buf164.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf164.users = [NodeUser(node=SchedulerNode(name='op165'), can_inplace=False, is_weak=False)]
]
op164.node.kernel = extern_kernels.bmm


op165: SchedulerNode(ComputedBuffer)
op165.writes = [MemoryDep('buf165', c0, {c0: 605184}, None)]
op165.unmet_dependencies = [   MemoryDep('buf164', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op165.met_dependencies = []
op165.outputs = [
    buf165: ComputedBuffer
    buf165.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf165.users = [NodeUser(node=ExternKernelSchedulerNode(name='op166'), can_inplace=False, is_weak=False)]
]
op165.group.device = cuda:0
op165.group.iteration = (605184, 1)
op165.sizes = ([8, 197, 6, 64], [])
buf164_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf165_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op165_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf164', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf165', get_index_1, load, None)
        return store


op166: ExternKernelSchedulerNode(ExternKernelOut)
op166.writes = [StarDep(name='buf166', mode=None)]
op166.unmet_dependencies = [StarDep(name='buf165', mode=None)]
op166.met_dependencies = [StarDep(name='arg88_1', mode=None)]
op166.outputs = [
    buf166: ExternKernelOut
    buf166.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf166.users = [NodeUser(node=SchedulerNode(name='op167'), can_inplace=True, is_weak=False)]
]
op166.node.kernel = extern_kernels.mm


op167_op168_op169_op198: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op167_op168_op169_op198.writes = 
    [   MemoryDep('buf167', c0, {c0: 605184}, None),
        MemoryDep('buf168', c0, {c0: 1576}, None),
        MemoryDep('buf169', c0, {c0: 1576}, None),
        MemoryDep('buf198', c0, {c0: 605184}, None)]
op167_op168_op169_op198.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf166', c0, {c0: 605184}, None)]
op167_op168_op169_op198.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg89_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg90_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg91_1', c1, {c0: 1576, c1: 384}, None)]
op167_op168_op169_op198.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf168.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf169.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op167_op168_op169_op198.snodes[0] =
op167: SchedulerNode(ComputedBuffer)
op167.writes = [MemoryDep('buf167', c0, {c0: 605184}, None)]
op167.unmet_dependencies = 
    [   MemoryDep('buf147', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf147', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf149', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf166', c0, {c0: 605184}, None)]
op167.met_dependencies = 
    [   MemoryDep('arg83_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg89_1', c1, {c0: 1576, c1: 384}, None)]
op167.outputs = [
    buf167: ComputedBuffer
    buf167.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf167.users = [
        NodeUser(node=SchedulerNode(name='op168'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op169'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op170'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op198'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False),
    ]
]
op167.group.device = cuda:0
op167.group.iteration = (605184, 1)
op167.sizes = ([8, 197, 384], [])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf147_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf149_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg83_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf166_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg89_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op167_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf166', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg89_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf167', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf147', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf147', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf149', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg83_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op167_op168_op169_op198.snodes[1] =
op168: SchedulerNode(ComputedBuffer)
op168.writes = [MemoryDep('buf168', c0, {c0: 1576}, None)]
op168.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 605184}, None)]
op168.met_dependencies = []
op168.outputs = [
    buf168: ComputedBuffer
    buf168.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf168.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op168.group.device = cuda:0
op168.group.iteration = (1576, 384)
op168.sizes = ([1576], [384])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op168_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf168', get_index_1, getitem)
        return store_reduction
op167_op168_op169_op198.snodes[2] =
op169: SchedulerNode(ComputedBuffer)
op169.writes = [MemoryDep('buf169', c0, {c0: 1576}, None)]
op169.unmet_dependencies = [MemoryDep('buf167', c0, {c0: 605184}, None)]
op169.met_dependencies = []
op169.outputs = [
    buf169: ComputedBuffer
    buf169.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf169.users = [NodeUser(node=SchedulerNode(name='op198'), can_inplace=False, is_weak=False)]
]
op169.group.device = cuda:0
op169.group.iteration = (1576, 384)
op169.sizes = ([1576], [384])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op169_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf169', get_index_1, getitem_1)
        return store_reduction
op167_op168_op169_op198.snodes[3] =
op198: SchedulerNode(ComputedBuffer)
op198.writes = [MemoryDep('buf198', c0, {c0: 605184}, None)]
op198.unmet_dependencies = 
    [   MemoryDep('buf167', c0, {c0: 605184}, None),
        MemoryDep('buf168', c0, {c0: 1576}, None),
        MemoryDep('buf169', c0, {c0: 1576}, None)]
op198.met_dependencies = 
    [   MemoryDep('arg90_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg91_1', c1, {c0: 1576, c1: 384}, None)]
op198.outputs = [
    buf198: ComputedBuffer
    buf198.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf198.users = [NodeUser(node=ExternKernelSchedulerNode(name='op199'), can_inplace=False, is_weak=False)]
]
op198.group.device = cuda:0
op198.group.iteration = (605184, 1)
op198.sizes = ([1576, 384], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf168_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf169_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg90_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg91_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf198_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op198_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf168', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf169', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg90_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg91_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf198', get_index_5, add_1, None)
        return store


op175: ExternKernelSchedulerNode(ExternKernelOut)
op175.writes = [StarDep(name='buf175', mode=None)]
op175.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op175.met_dependencies = [StarDep(name='arg98_1', mode=None)]
op175.outputs = [
    buf175: ExternKernelOut
    buf175.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf175.users = [
        NodeUser(node=SchedulerNode(name='op176'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op177'), can_inplace=False, is_weak=False),
    ]
]
op175.node.kernel = extern_kernels.mm


op176: SchedulerNode(ComputedBuffer)
op176.writes = [MemoryDep('buf176', c0, {c0: 602112}, None)]
op176.unmet_dependencies = [   MemoryDep('buf175', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op176.met_dependencies = []
op176.outputs = [
    buf176: ComputedBuffer
    buf176.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf176.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op176.group.device = cuda:0
op176.group.iteration = (602112, 1)
op176.sizes = ([1568, 4, 16, 6], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf176_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op176_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf176', get_index_1, load, None)
        return store


op177: SchedulerNode(ComputedBuffer)
op177.writes = [MemoryDep('buf177', c0, {c0: 602112}, None)]
op177.unmet_dependencies = [   MemoryDep('buf175', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op177.met_dependencies = []
op177.outputs = [
    buf177: ComputedBuffer
    buf177.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf177.users = [NodeUser(node=ExternKernelSchedulerNode(name='op178'), can_inplace=False, is_weak=False)]
]
op177.group.device = cuda:0
op177.group.iteration = (602112, 1)
op177.sizes = ([1568, 24, 16], [])
buf175_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf177_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op177_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf175', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf177', get_index_1, load, None)
        return store


op178: ExternKernelSchedulerNode(ExternKernelOut)
op178.writes = [StarDep(name='buf178', mode=None)]
op178.unmet_dependencies = [StarDep(name='buf176', mode=None), StarDep(name='buf177', mode=None)]
op178.met_dependencies = []
op178.outputs = [
    buf178: ExternKernelOut
    buf178.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf178.users = [
        NodeUser(node=SchedulerNode(name='op179'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=True, is_weak=False),
    ]
]
op178.node.kernel = extern_kernels.bmm


op179_op180_op182: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op179_op180_op182.writes = 
    [   MemoryDep('buf179', c0, {c0: 100352}, None),
        MemoryDep('buf180', c0, {c0: 100352}, None),
        MemoryDep('buf182', c0, {c0: 1605632}, None)]
op179_op180_op182.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1605632}, None)]
op179_op180_op182.met_dependencies = []
op179_op180_op182.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op179_op180_op182.snodes[0] =
op179: SchedulerNode(ComputedBuffer)
op179.writes = [MemoryDep('buf179', c0, {c0: 100352}, None)]
op179.unmet_dependencies = [MemoryDep('buf178', c0, {c0: 1605632}, None)]
op179.met_dependencies = []
op179.outputs = [
    buf179: ComputedBuffer
    buf179.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf179.users = [
        NodeUser(node=SchedulerNode(name='op180'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False),
    ]
]
op179.group.device = cuda:0
op179.group.iteration = (100352, 16)
op179.sizes = ([100352], [16])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op179_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf179', get_index_1, reduction)
        return store_reduction
op179_op180_op182.snodes[1] =
op180: SchedulerNode(ComputedBuffer)
op180.writes = [MemoryDep('buf180', c0, {c0: 100352}, None)]
op180.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 1605632}, None),
        MemoryDep('buf179', c0, {c0: 100352}, None)]
op180.met_dependencies = []
op180.outputs = [
    buf180: ComputedBuffer
    buf180.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf180.users = [NodeUser(node=SchedulerNode(name='op182'), can_inplace=False, is_weak=False)]
]
op180.group.device = cuda:0
op180.group.iteration = (100352, 16)
op180.sizes = ([100352], [16])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf180_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op180_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf180', get_index_2, reduction)
        return store_reduction
op179_op180_op182.snodes[2] =
op182: SchedulerNode(ComputedBuffer)
op182.writes = [MemoryDep('buf182', c0, {c0: 1605632}, None)]
op182.unmet_dependencies = 
    [   MemoryDep('buf178', c0, {c0: 1605632}, None),
        MemoryDep('buf179', c0, {c0: 100352}, None),
        MemoryDep('buf180', c0, {c0: 100352}, None)]
op182.met_dependencies = []
op182.outputs = [
    buf182: ComputedBuffer
    buf182.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf182.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op182.group.device = cuda:0
op182.group.iteration = (1605632, 1)
op182.sizes = ([100352, 16], [])
buf178_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf179_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf180_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf182_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op182_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf178', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf179', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf180', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf182', get_index_3, truediv, None)
        return store


op181: ExternKernelSchedulerNode(ExternKernelOut)
op181.writes = [StarDep(name='buf181', mode=None)]
op181.unmet_dependencies = [StarDep(name='buf174', mode=None)]
op181.met_dependencies = [StarDep(name='arg99_1', mode=None)]
op181.outputs = [
    buf181: ExternKernelOut
    buf181.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf181.users = [NodeUser(node=SchedulerNode(name='op183'), can_inplace=False, is_weak=False)]
]
op181.node.kernel = extern_kernels.mm


op183: SchedulerNode(ComputedBuffer)
op183.writes = [MemoryDep('buf183', c0, {c0: 602112}, None)]
op183.unmet_dependencies = [   MemoryDep('buf181', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op183.met_dependencies = []
op183.outputs = [
    buf183: ComputedBuffer
    buf183.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf183.users = [NodeUser(node=ExternKernelSchedulerNode(name='op184'), can_inplace=False, is_weak=False)]
]
op183.group.device = cuda:0
op183.group.iteration = (602112, 1)
op183.sizes = ([1568, 4, 16, 6], [])
buf181_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf183_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op183_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf181', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf183', get_index_1, load, None)
        return store


op184: ExternKernelSchedulerNode(ExternKernelOut)
op184.writes = [StarDep(name='buf184', mode=None)]
op184.unmet_dependencies = [StarDep(name='buf182', mode=None), StarDep(name='buf183', mode=None)]
op184.met_dependencies = []
op184.outputs = [
    buf184: ExternKernelOut
    buf184.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf184.users = [NodeUser(node=SchedulerNode(name='op185'), can_inplace=False, is_weak=False)]
]
op184.node.kernel = extern_kernels.bmm


op185: SchedulerNode(ComputedBuffer)
op185.writes = [MemoryDep('buf185', c0, {c0: 602112}, None)]
op185.unmet_dependencies = [   MemoryDep('buf184', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op185.met_dependencies = []
op185.outputs = [
    buf185: ComputedBuffer
    buf185.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf185.users = [NodeUser(node=ExternKernelSchedulerNode(name='op186'), can_inplace=False, is_weak=False)]
]
op185.group.device = cuda:0
op185.group.iteration = (602112, 1)
op185.sizes = ([1568, 16, 4, 6], [])
buf184_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf185_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op185_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf184', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf185', get_index_1, load, None)
        return store


op186: ExternKernelSchedulerNode(ExternKernelOut)
op186.writes = [StarDep(name='buf186', mode=None)]
op186.unmet_dependencies = [StarDep(name='buf185', mode=None)]
op186.met_dependencies = [StarDep(name='arg100_1', mode=None)]
op186.outputs = [
    buf186: ExternKernelOut
    buf186.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf186.users = [NodeUser(node=SchedulerNode(name='op187'), can_inplace=True, is_weak=False)]
]
op186.node.kernel = extern_kernels.mm


op187_op188_op189_op191: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op187_op188_op189_op191.writes = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf188', c0, {c0: 25088}, None),
        MemoryDep('buf189', c0, {c0: 25088}, None),
        MemoryDep('buf191', c0, {c0: 602112}, None)]
op187_op188_op189_op191.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None)]
op187_op188_op189_op191.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg102_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg103_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op187_op188_op189_op191.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op187_op188_op189_op191.snodes[0] =
op187: SchedulerNode(ComputedBuffer)
op187.writes = [MemoryDep('buf187', c0, {c0: 602112}, None)]
op187.unmet_dependencies = 
    [   MemoryDep('buf132', c0, {c0: 602112}, None),
        MemoryDep('buf139', c0, {c0: 602112}, None),
        MemoryDep('buf186', c0, {c0: 602112}, None)]
op187.met_dependencies = 
    [   MemoryDep('arg101_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg79_1', c1, {c0: 25088, c1: 24}, None)]
op187.outputs = [
    buf187: ComputedBuffer
    buf187.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf187.users = [
        NodeUser(node=SchedulerNode(name='op188'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op189'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op190'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op191'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op187.group.device = cuda:0
op187.group.iteration = (602112, 1)
op187.sizes = ([25088, 24], [])
buf132_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf139_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg79_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf186_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg101_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op187_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf132', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf139', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg79_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf186', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg101_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf187', get_index_5, add_3, None)
        return store
op187_op188_op189_op191.snodes[1] =
op188: SchedulerNode(ComputedBuffer)
op188.writes = [MemoryDep('buf188', c0, {c0: 25088}, None)]
op188.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 602112}, None)]
op188.met_dependencies = []
op188.outputs = [
    buf188: ComputedBuffer
    buf188.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf188.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op188.group.device = cuda:0
op188.group.iteration = (25088, 24)
op188.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op188_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf188', get_index_1, getitem)
        return store_reduction
op187_op188_op189_op191.snodes[2] =
op189: SchedulerNode(ComputedBuffer)
op189.writes = [MemoryDep('buf189', c0, {c0: 25088}, None)]
op189.unmet_dependencies = [MemoryDep('buf187', c0, {c0: 602112}, None)]
op189.met_dependencies = []
op189.outputs = [
    buf189: ComputedBuffer
    buf189.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf189.users = [NodeUser(node=SchedulerNode(name='op191'), can_inplace=False, is_weak=False)]
]
op189.group.device = cuda:0
op189.group.iteration = (25088, 24)
op189.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf189_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op189_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf189', get_index_1, getitem_1)
        return store_reduction
op187_op188_op189_op191.snodes[3] =
op191: SchedulerNode(ComputedBuffer)
op191.writes = [MemoryDep('buf191', c0, {c0: 602112}, None)]
op191.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf188', c0, {c0: 25088}, None),
        MemoryDep('buf189', c0, {c0: 25088}, None)]
op191.met_dependencies = 
    [   MemoryDep('arg102_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg103_1', c1, {c0: 25088, c1: 24}, None)]
op191.outputs = [
    buf191: ComputedBuffer
    buf191.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf191.users = [NodeUser(node=ExternKernelSchedulerNode(name='op192'), can_inplace=False, is_weak=False)]
]
op191.group.device = cuda:0
op191.group.iteration = (602112, 1)
op191.sizes = ([25088, 24], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf188_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf189_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg102_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg103_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf191_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op191_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf188', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf189', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg102_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg103_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf191', get_index_5, add_1, None)
        return store


op192: ExternKernelSchedulerNode(ExternKernelOut)
op192.writes = [StarDep(name='buf192', mode=None)]
op192.unmet_dependencies = [StarDep(name='buf191', mode=None)]
op192.met_dependencies = [StarDep(name='arg104_1', mode=None)]
op192.outputs = [
    buf192: ExternKernelOut
    buf192.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf192.users = [NodeUser(node=SchedulerNode(name='op193'), can_inplace=True, is_weak=False)]
]
op192.node.kernel = extern_kernels.mm


op193: SchedulerNode(ComputedBuffer)
op193.writes = [MemoryDep('buf193', c0, {c0: 2408448}, None)]
op193.unmet_dependencies = [MemoryDep('buf192', c0, {c0: 2408448}, None)]
op193.met_dependencies = [MemoryDep('arg105_1', c1, {c0: 25088, c1: 96}, None)]
op193.outputs = [
    buf193: ComputedBuffer
    buf193.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf193.users = [NodeUser(node=ExternKernelSchedulerNode(name='op194'), can_inplace=False, is_weak=False)]
]
op193.group.device = cuda:0
op193.group.iteration = (2408448, 1)
op193.sizes = ([25088, 96], [])
buf192_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg105_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf193_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op193_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf192', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg105_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf192', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg105_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf193', get_index_4, mul_2, None)
        return store


op194: ExternKernelSchedulerNode(ExternKernelOut)
op194.writes = [StarDep(name='buf194', mode=None)]
op194.unmet_dependencies = [StarDep(name='buf193', mode=None)]
op194.met_dependencies = [StarDep(name='arg106_1', mode=None)]
op194.outputs = [
    buf194: ExternKernelOut
    buf194.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf194.users = [
        NodeUser(node=SchedulerNode(name='op195'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op196'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op197'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op202'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op224'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op225'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op226'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op227'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False),
    ]
]
op194.node.kernel = extern_kernels.mm


op195_op196_op224_op225_op202_op227: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op195_op196_op224_op225_op202_op227.writes = 
    [   MemoryDep('buf195', c0, {c0: 25088}, None),
        MemoryDep('buf196', c0, {c0: 25088}, None),
        MemoryDep('buf202', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 25088}, None),
        MemoryDep('buf225', c0, {c0: 25088}, None),
        MemoryDep('buf227', c0, {c0: 602112}, None)]
op195_op196_op224_op225_op202_op227.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None)]
op195_op196_op224_op225_op202_op227.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg108_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg109_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg124_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg125_1', c1, {c0: 25088, c1: 24}, None)]
op195_op196_op224_op225_op202_op227.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf195.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf196.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf227.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op195_op196_op224_op225_op202_op227.snodes[0] =
op195: SchedulerNode(ComputedBuffer)
op195.writes = [MemoryDep('buf195', c0, {c0: 25088}, None)]
op195.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None)]
op195.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None)]
op195.outputs = [
    buf195: ComputedBuffer
    buf195.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf195.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op195.group.device = cuda:0
op195.group.iteration = (25088, 24)
op195.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op195_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf195', get_index_3, getitem)
        return store_reduction
op195_op196_op224_op225_op202_op227.snodes[1] =
op196: SchedulerNode(ComputedBuffer)
op196.writes = [MemoryDep('buf196', c0, {c0: 25088}, None)]
op196.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None)]
op196.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None)]
op196.outputs = [
    buf196: ComputedBuffer
    buf196.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf196.users = [NodeUser(node=SchedulerNode(name='op202'), can_inplace=False, is_weak=False)]
]
op196.group.device = cuda:0
op196.group.iteration = (25088, 24)
op196.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf196_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op196_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf196', get_index_3, getitem_1)
        return store_reduction
op195_op196_op224_op225_op202_op227.snodes[2] =
op224: SchedulerNode(ComputedBuffer)
op224.writes = [MemoryDep('buf224', c0, {c0: 25088}, None)]
op224.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None)]
op224.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None)]
op224.outputs = [
    buf224: ComputedBuffer
    buf224.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf224.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op224.group.device = cuda:0
op224.group.iteration = (25088, 24)
op224.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op224_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf224', get_index_3, getitem)
        return store_reduction
op195_op196_op224_op225_op202_op227.snodes[3] =
op225: SchedulerNode(ComputedBuffer)
op225.writes = [MemoryDep('buf225', c0, {c0: 25088}, None)]
op225.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None)]
op225.met_dependencies = [MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None)]
op225.outputs = [
    buf225: ComputedBuffer
    buf225.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf225.users = [NodeUser(node=SchedulerNode(name='op227'), can_inplace=False, is_weak=False)]
]
op225.group.device = cuda:0
op225.group.iteration = (25088, 24)
op225.sizes = ([25088], [24])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op225_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf225', get_index_3, getitem_1)
        return store_reduction
op195_op196_op224_op225_op202_op227.snodes[4] =
op202: SchedulerNode(ComputedBuffer)
op202.writes = [MemoryDep('buf202', c0, {c0: 602112}, None)]
op202.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None),
        MemoryDep('buf195', c0, {c0: 25088}, None),
        MemoryDep('buf196', c0, {c0: 25088}, None)]
op202.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg108_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg109_1', c1, {c0: 25088, c1: 24}, None)]
op202.outputs = [
    buf202: ComputedBuffer
    buf202.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf202.users = [NodeUser(node=ExternKernelSchedulerNode(name='op203'), can_inplace=False, is_weak=False)]
]
op202.group.device = cuda:0
op202.group.iteration = (602112, 1)
op202.sizes = ([25088, 24], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf195_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf196_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg108_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg109_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf202_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op202_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf195', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf196', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg108_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg109_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf202', get_index_7, add_3, None)
        return store
op195_op196_op224_op225_op202_op227.snodes[5] =
op227: SchedulerNode(ComputedBuffer)
op227.writes = [MemoryDep('buf227', c0, {c0: 602112}, None)]
op227.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None),
        MemoryDep('buf224', c0, {c0: 25088}, None),
        MemoryDep('buf225', c0, {c0: 25088}, None)]
op227.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg124_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg125_1', c1, {c0: 25088, c1: 24}, None)]
op227.outputs = [
    buf227: ComputedBuffer
    buf227.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf227.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op228'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op234'), can_inplace=False, is_weak=False),
    ]
]
op227.group.device = cuda:0
op227.group.iteration = (602112, 1)
op227.sizes = ([25088, 24], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf224_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf225_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg124_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg125_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf227_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op227_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf224', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf225', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg124_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg125_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf227', get_index_7, add_3, None)
        return store


op199: ExternKernelSchedulerNode(ExternKernelOut)
op199.writes = [StarDep(name='buf199', mode=None)]
op199.unmet_dependencies = [StarDep(name='buf198', mode=None)]
op199.met_dependencies = [StarDep(name='arg92_1', mode=None)]
op199.outputs = [
    buf199: ExternKernelOut
    buf199.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf199.users = [NodeUser(node=SchedulerNode(name='op200'), can_inplace=True, is_weak=False)]
]
op199.node.kernel = extern_kernels.mm


op200: SchedulerNode(ComputedBuffer)
op200.writes = [MemoryDep('buf200', c0, {c0: 2420736}, None)]
op200.unmet_dependencies = [MemoryDep('buf199', c0, {c0: 2420736}, None)]
op200.met_dependencies = [MemoryDep('arg93_1', c1, {c0: 1576, c1: 1536}, None)]
op200.outputs = [
    buf200: ComputedBuffer
    buf200.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf200.users = [NodeUser(node=ExternKernelSchedulerNode(name='op201'), can_inplace=False, is_weak=False)]
]
op200.group.device = cuda:0
op200.group.iteration = (2420736, 1)
op200.sizes = ([1576, 1536], [])
buf199_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg93_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf200_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op200_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf199', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg93_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf199', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg93_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf200', get_index_4, mul_2, None)
        return store


op201: ExternKernelSchedulerNode(ExternKernelOut)
op201.writes = [StarDep(name='buf201', mode=None)]
op201.unmet_dependencies = [StarDep(name='buf200', mode=None)]
op201.met_dependencies = [StarDep(name='arg94_1', mode=None)]
op201.outputs = [
    buf201: ExternKernelOut
    buf201.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf201.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op201.node.kernel = extern_kernels.mm


op203: ExternKernelSchedulerNode(ExternKernelOut)
op203.writes = [StarDep(name='buf203', mode=None)]
op203.unmet_dependencies = [StarDep(name='buf202', mode=None)]
op203.met_dependencies = [StarDep(name='arg110_1', mode=None)]
op203.outputs = [
    buf203: ExternKernelOut
    buf203.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf203.users = [NodeUser(node=SchedulerNode(name='op204'), can_inplace=False, is_weak=False)]
]
op203.node.kernel = extern_kernels.mm


op204_op205_op206_op208: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op204_op205_op206_op208.writes = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf205', c0, {c0: 1576}, None),
        MemoryDep('buf206', c0, {c0: 1576}, None),
        MemoryDep('buf208', c0, {c0: 605184}, None)]
op204_op205_op206_op208.unmet_dependencies = 
    [   MemoryDep('buf167', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf167', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf201', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf201', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf203', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op204_op205_op206_op208.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg112_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg113_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg95_1', c1, {c0: 1576, c1: 384}, None)]
op204_op205_op206_op208.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op204_op205_op206_op208.snodes[0] =
op204: SchedulerNode(ComputedBuffer)
op204.writes = [MemoryDep('buf204', c0, {c0: 605184}, None)]
op204.unmet_dependencies = 
    [   MemoryDep('buf167', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf167', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf201', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf201', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf203', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op204.met_dependencies = 
    [   MemoryDep('arg111_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg95_1', c1, {c0: 1576, c1: 384}, None)]
op204.outputs = [
    buf204: ComputedBuffer
    buf204.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf204.users = [
        NodeUser(node=SchedulerNode(name='op205'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op206'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op207'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op208'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op204.group.device = cuda:0
op204.group.iteration = (605184, 1)
op204.sizes = ([8, 197, 384], [])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg95_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf167_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf201_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf203_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg111_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op204_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf204', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf167', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf201', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg95_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf203', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg111_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op204_op205_op206_op208.snodes[1] =
op205: SchedulerNode(ComputedBuffer)
op205.writes = [MemoryDep('buf205', c0, {c0: 1576}, None)]
op205.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 605184}, None)]
op205.met_dependencies = []
op205.outputs = [
    buf205: ComputedBuffer
    buf205.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf205.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op205.group.device = cuda:0
op205.group.iteration = (1576, 384)
op205.sizes = ([1576], [384])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op205_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf205', get_index_1, getitem)
        return store_reduction
op204_op205_op206_op208.snodes[2] =
op206: SchedulerNode(ComputedBuffer)
op206.writes = [MemoryDep('buf206', c0, {c0: 1576}, None)]
op206.unmet_dependencies = [MemoryDep('buf204', c0, {c0: 605184}, None)]
op206.met_dependencies = []
op206.outputs = [
    buf206: ComputedBuffer
    buf206.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf206.users = [NodeUser(node=SchedulerNode(name='op208'), can_inplace=False, is_weak=False)]
]
op206.group.device = cuda:0
op206.group.iteration = (1576, 384)
op206.sizes = ([1576], [384])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op206_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf206', get_index_1, getitem_1)
        return store_reduction
op204_op205_op206_op208.snodes[3] =
op208: SchedulerNode(ComputedBuffer)
op208.writes = [MemoryDep('buf208', c0, {c0: 605184}, None)]
op208.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf205', c0, {c0: 1576}, None),
        MemoryDep('buf206', c0, {c0: 1576}, None)]
op208.met_dependencies = 
    [   MemoryDep('arg112_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg113_1', c1, {c0: 1576, c1: 384}, None)]
op208.outputs = [
    buf208: ComputedBuffer
    buf208.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf208.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op209'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op215'), can_inplace=False, is_weak=False),
    ]
]
op208.group.device = cuda:0
op208.group.iteration = (605184, 1)
op208.sizes = ([1576, 384], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf205_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf206_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg112_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg113_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf208_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op208_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf205', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf206', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg112_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg113_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf208', get_index_5, add_1, None)
        return store


op209: ExternKernelSchedulerNode(ExternKernelOut)
op209.writes = [StarDep(name='buf209', mode=None)]
op209.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op209.met_dependencies = [StarDep(name='arg114_1', mode=None)]
op209.outputs = [
    buf209: ExternKernelOut
    buf209.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf209.users = [
        NodeUser(node=SchedulerNode(name='op210'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op211'), can_inplace=False, is_weak=False),
    ]
]
op209.node.kernel = extern_kernels.mm


op210: SchedulerNode(ComputedBuffer)
op210.writes = [MemoryDep('buf210', c0, {c0: 605184}, None)]
op210.unmet_dependencies = [   MemoryDep('buf209', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op210.met_dependencies = []
op210.outputs = [
    buf210: ComputedBuffer
    buf210.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf210.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op210.group.device = cuda:0
op210.group.iteration = (605184, 1)
op210.sizes = ([8, 6, 197, 64], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf210_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op210_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf210', get_index_1, load, None)
        return store


op211: SchedulerNode(ComputedBuffer)
op211.writes = [MemoryDep('buf211', c0, {c0: 605184}, None)]
op211.unmet_dependencies = [   MemoryDep('buf209', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op211.met_dependencies = []
op211.outputs = [
    buf211: ComputedBuffer
    buf211.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf211.users = [NodeUser(node=ExternKernelSchedulerNode(name='op212'), can_inplace=False, is_weak=False)]
]
op211.group.device = cuda:0
op211.group.iteration = (605184, 1)
op211.sizes = ([8, 384, 197], [])
buf209_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf211_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op211_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf209', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf211', get_index_1, load, None)
        return store


op212: ExternKernelSchedulerNode(ExternKernelOut)
op212.writes = [StarDep(name='buf212', mode=None)]
op212.unmet_dependencies = [StarDep(name='buf210', mode=None), StarDep(name='buf211', mode=None)]
op212.met_dependencies = []
op212.outputs = [
    buf212: ExternKernelOut
    buf212.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf212.users = [
        NodeUser(node=SchedulerNode(name='op213'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op212.node.kernel = extern_kernels.bmm


op213_op214_op216: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op213_op214_op216.writes = 
    [   MemoryDep('buf213', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf214', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf216', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op213_op214_op216.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 1862832}, None)]
op213_op214_op216.met_dependencies = []
op213_op214_op216.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op213_op214_op216.snodes[0] =
op213: SchedulerNode(ComputedBuffer)
op213.writes = [MemoryDep('buf213', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op213.unmet_dependencies = [MemoryDep('buf212', c0, {c0: 1862832}, None)]
op213.met_dependencies = []
op213.outputs = [
    buf213: ComputedBuffer
    buf213.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf213.users = [
        NodeUser(node=SchedulerNode(name='op214'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False),
    ]
]
op213.group.device = cuda:0
op213.group.iteration = (9456, 197)
op213.sizes = ([8, 1182], [197])
buf212_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op213_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf213', get_index_1, reduction)
        return store_reduction
op213_op214_op216.snodes[1] =
op214: SchedulerNode(ComputedBuffer)
op214.writes = [MemoryDep('buf214', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op214.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 1862832}, None),
        MemoryDep('buf213', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op214.met_dependencies = []
op214.outputs = [
    buf214: ComputedBuffer
    buf214.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf214.users = [NodeUser(node=SchedulerNode(name='op216'), can_inplace=False, is_weak=False)]
]
op214.group.device = cuda:0
op214.group.iteration = (9456, 197)
op214.sizes = ([8, 1182], [197])
buf212_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op214_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf214', get_index_2, reduction)
        return store_reduction
op213_op214_op216.snodes[2] =
op216: SchedulerNode(ComputedBuffer)
op216.writes = [MemoryDep('buf216', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op216.unmet_dependencies = 
    [   MemoryDep('buf212', c0, {c0: 1862832}, None),
        MemoryDep('buf213', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf214', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op216.met_dependencies = []
op216.outputs = [
    buf216: ComputedBuffer
    buf216.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf216.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op216.group.device = cuda:0
op216.group.iteration = (1862832, 1)
op216.sizes = ([8, 6, 197, 197], [])
buf212_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf213_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf214_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf216_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op216_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf212', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf213', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf214', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf216', get_index_3, truediv, None)
        return store


op215: ExternKernelSchedulerNode(ExternKernelOut)
op215.writes = [StarDep(name='buf215', mode=None)]
op215.unmet_dependencies = [StarDep(name='buf208', mode=None)]
op215.met_dependencies = [StarDep(name='arg115_1', mode=None)]
op215.outputs = [
    buf215: ExternKernelOut
    buf215.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf215.users = [NodeUser(node=SchedulerNode(name='op217'), can_inplace=False, is_weak=False)]
]
op215.node.kernel = extern_kernels.mm


op217: SchedulerNode(ComputedBuffer)
op217.writes = [MemoryDep('buf217', c0, {c0: 605184}, None)]
op217.unmet_dependencies = [   MemoryDep('buf215', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op217.met_dependencies = []
op217.outputs = [
    buf217: ComputedBuffer
    buf217.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf217.users = [NodeUser(node=ExternKernelSchedulerNode(name='op218'), can_inplace=False, is_weak=False)]
]
op217.group.device = cuda:0
op217.group.iteration = (605184, 1)
op217.sizes = ([8, 6, 197, 64], [])
buf215_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf217_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op217_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf215', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf217', get_index_1, load, None)
        return store


op218: ExternKernelSchedulerNode(ExternKernelOut)
op218.writes = [StarDep(name='buf218', mode=None)]
op218.unmet_dependencies = [StarDep(name='buf216', mode=None), StarDep(name='buf217', mode=None)]
op218.met_dependencies = []
op218.outputs = [
    buf218: ExternKernelOut
    buf218.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf218.users = [NodeUser(node=SchedulerNode(name='op219'), can_inplace=False, is_weak=False)]
]
op218.node.kernel = extern_kernels.bmm


op219: SchedulerNode(ComputedBuffer)
op219.writes = [MemoryDep('buf219', c0, {c0: 605184}, None)]
op219.unmet_dependencies = [   MemoryDep('buf218', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op219.met_dependencies = []
op219.outputs = [
    buf219: ComputedBuffer
    buf219.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf219.users = [NodeUser(node=ExternKernelSchedulerNode(name='op220'), can_inplace=False, is_weak=False)]
]
op219.group.device = cuda:0
op219.group.iteration = (605184, 1)
op219.sizes = ([8, 197, 6, 64], [])
buf218_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf219_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op219_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf218', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf219', get_index_1, load, None)
        return store


op220: ExternKernelSchedulerNode(ExternKernelOut)
op220.writes = [StarDep(name='buf220', mode=None)]
op220.unmet_dependencies = [StarDep(name='buf219', mode=None)]
op220.met_dependencies = [StarDep(name='arg116_1', mode=None)]
op220.outputs = [
    buf220: ExternKernelOut
    buf220.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf220.users = [
        NodeUser(node=SchedulerNode(name='op221'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op222'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op223'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op251'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False),
    ]
]
op220.node.kernel = extern_kernels.mm


op221_op222_op251: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op221_op222_op251.writes = 
    [   MemoryDep('buf221', c0, {c0: 1576}, None),
        MemoryDep('buf222', c0, {c0: 1576}, None),
        MemoryDep('buf251', c0, {c0: 605184}, None)]
op221_op222_op251.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf220', c0, {c0: 605184}, None)]
op221_op222_op251.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg119_1', c1, {c0: 1576, c1: 384}, None)]
op221_op222_op251.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf221.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf222.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op221_op222_op251.snodes[0] =
op221: SchedulerNode(ComputedBuffer)
op221.writes = [MemoryDep('buf221', c0, {c0: 1576}, None)]
op221.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf220', c0, {c0: 605184}, None)]
op221.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 1576, c1: 384}, None)]
op221.outputs = [
    buf221: ComputedBuffer
    buf221.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf221.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op221.group.device = cuda:0
op221.group.iteration = (1576, 384)
op221.sizes = ([1576], [384])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op221_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf221', get_index_3, getitem)
        return store_reduction
op221_op222_op251.snodes[1] =
op222: SchedulerNode(ComputedBuffer)
op222.writes = [MemoryDep('buf222', c0, {c0: 1576}, None)]
op222.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf220', c0, {c0: 605184}, None)]
op222.met_dependencies = [MemoryDep('arg117_1', c1, {c0: 1576, c1: 384}, None)]
op222.outputs = [
    buf222: ComputedBuffer
    buf222.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf222.users = [NodeUser(node=SchedulerNode(name='op251'), can_inplace=False, is_weak=False)]
]
op222.group.device = cuda:0
op222.group.iteration = (1576, 384)
op222.sizes = ([1576], [384])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op222_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf222', get_index_3, getitem_1)
        return store_reduction
op221_op222_op251.snodes[2] =
op251: SchedulerNode(ComputedBuffer)
op251.writes = [MemoryDep('buf251', c0, {c0: 605184}, None)]
op251.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf220', c0, {c0: 605184}, None),
        MemoryDep('buf221', c0, {c0: 1576}, None),
        MemoryDep('buf222', c0, {c0: 1576}, None)]
op251.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg118_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg119_1', c1, {c0: 1576, c1: 384}, None)]
op251.outputs = [
    buf251: ComputedBuffer
    buf251.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf251.users = [NodeUser(node=ExternKernelSchedulerNode(name='op252'), can_inplace=False, is_weak=False)]
]
op251.group.device = cuda:0
op251.group.iteration = (605184, 1)
op251.sizes = ([1576, 384], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf221_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf222_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg118_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg119_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf251_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op251_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf221', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf222', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg118_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg119_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf251', get_index_7, add_3, None)
        return store


op228: ExternKernelSchedulerNode(ExternKernelOut)
op228.writes = [StarDep(name='buf228', mode=None)]
op228.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op228.met_dependencies = [StarDep(name='arg126_1', mode=None)]
op228.outputs = [
    buf228: ExternKernelOut
    buf228.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf228.users = [
        NodeUser(node=SchedulerNode(name='op229'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op230'), can_inplace=False, is_weak=False),
    ]
]
op228.node.kernel = extern_kernels.mm


op229: SchedulerNode(ComputedBuffer)
op229.writes = [MemoryDep('buf229', c0, {c0: 602112}, None)]
op229.unmet_dependencies = [   MemoryDep('buf228', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op229.met_dependencies = []
op229.outputs = [
    buf229: ComputedBuffer
    buf229.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf229.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op229.group.device = cuda:0
op229.group.iteration = (602112, 1)
op229.sizes = ([1568, 4, 16, 6], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf229_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op229_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf229', get_index_1, load, None)
        return store


op230: SchedulerNode(ComputedBuffer)
op230.writes = [MemoryDep('buf230', c0, {c0: 602112}, None)]
op230.unmet_dependencies = [   MemoryDep('buf228', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op230.met_dependencies = []
op230.outputs = [
    buf230: ComputedBuffer
    buf230.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf230.users = [NodeUser(node=ExternKernelSchedulerNode(name='op231'), can_inplace=False, is_weak=False)]
]
op230.group.device = cuda:0
op230.group.iteration = (602112, 1)
op230.sizes = ([1568, 24, 16], [])
buf228_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf230_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op230_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf228', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf230', get_index_1, load, None)
        return store


op231: ExternKernelSchedulerNode(ExternKernelOut)
op231.writes = [StarDep(name='buf231', mode=None)]
op231.unmet_dependencies = [StarDep(name='buf229', mode=None), StarDep(name='buf230', mode=None)]
op231.met_dependencies = []
op231.outputs = [
    buf231: ExternKernelOut
    buf231.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf231.users = [
        NodeUser(node=SchedulerNode(name='op232'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=True, is_weak=False),
    ]
]
op231.node.kernel = extern_kernels.bmm


op232_op233_op235: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op232_op233_op235.writes = 
    [   MemoryDep('buf232', c0, {c0: 100352}, None),
        MemoryDep('buf233', c0, {c0: 100352}, None),
        MemoryDep('buf235', c0, {c0: 1605632}, None)]
op232_op233_op235.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 1605632}, None)]
op232_op233_op235.met_dependencies = []
op232_op233_op235.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op232_op233_op235.snodes[0] =
op232: SchedulerNode(ComputedBuffer)
op232.writes = [MemoryDep('buf232', c0, {c0: 100352}, None)]
op232.unmet_dependencies = [MemoryDep('buf231', c0, {c0: 1605632}, None)]
op232.met_dependencies = []
op232.outputs = [
    buf232: ComputedBuffer
    buf232.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf232.users = [
        NodeUser(node=SchedulerNode(name='op233'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False),
    ]
]
op232.group.device = cuda:0
op232.group.iteration = (100352, 16)
op232.sizes = ([100352], [16])
buf231_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op232_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf232', get_index_1, reduction)
        return store_reduction
op232_op233_op235.snodes[1] =
op233: SchedulerNode(ComputedBuffer)
op233.writes = [MemoryDep('buf233', c0, {c0: 100352}, None)]
op233.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 1605632}, None),
        MemoryDep('buf232', c0, {c0: 100352}, None)]
op233.met_dependencies = []
op233.outputs = [
    buf233: ComputedBuffer
    buf233.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf233.users = [NodeUser(node=SchedulerNode(name='op235'), can_inplace=False, is_weak=False)]
]
op233.group.device = cuda:0
op233.group.iteration = (100352, 16)
op233.sizes = ([100352], [16])
buf231_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf233_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op233_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf233', get_index_2, reduction)
        return store_reduction
op232_op233_op235.snodes[2] =
op235: SchedulerNode(ComputedBuffer)
op235.writes = [MemoryDep('buf235', c0, {c0: 1605632}, None)]
op235.unmet_dependencies = 
    [   MemoryDep('buf231', c0, {c0: 1605632}, None),
        MemoryDep('buf232', c0, {c0: 100352}, None),
        MemoryDep('buf233', c0, {c0: 100352}, None)]
op235.met_dependencies = []
op235.outputs = [
    buf235: ComputedBuffer
    buf235.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf235.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op235.group.device = cuda:0
op235.group.iteration = (1605632, 1)
op235.sizes = ([100352, 16], [])
buf231_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf232_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf233_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf235_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op235_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf231', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf232', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf233', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf235', get_index_3, truediv, None)
        return store


op234: ExternKernelSchedulerNode(ExternKernelOut)
op234.writes = [StarDep(name='buf234', mode=None)]
op234.unmet_dependencies = [StarDep(name='buf227', mode=None)]
op234.met_dependencies = [StarDep(name='arg127_1', mode=None)]
op234.outputs = [
    buf234: ExternKernelOut
    buf234.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf234.users = [NodeUser(node=SchedulerNode(name='op236'), can_inplace=False, is_weak=False)]
]
op234.node.kernel = extern_kernels.mm


op236: SchedulerNode(ComputedBuffer)
op236.writes = [MemoryDep('buf236', c0, {c0: 602112}, None)]
op236.unmet_dependencies = [   MemoryDep('buf234', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op236.met_dependencies = []
op236.outputs = [
    buf236: ComputedBuffer
    buf236.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf236.users = [NodeUser(node=ExternKernelSchedulerNode(name='op237'), can_inplace=False, is_weak=False)]
]
op236.group.device = cuda:0
op236.group.iteration = (602112, 1)
op236.sizes = ([1568, 4, 16, 6], [])
buf234_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf236_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op236_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf234', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf236', get_index_1, load, None)
        return store


op237: ExternKernelSchedulerNode(ExternKernelOut)
op237.writes = [StarDep(name='buf237', mode=None)]
op237.unmet_dependencies = [StarDep(name='buf235', mode=None), StarDep(name='buf236', mode=None)]
op237.met_dependencies = []
op237.outputs = [
    buf237: ExternKernelOut
    buf237.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf237.users = [NodeUser(node=SchedulerNode(name='op238'), can_inplace=False, is_weak=False)]
]
op237.node.kernel = extern_kernels.bmm


op238: SchedulerNode(ComputedBuffer)
op238.writes = [MemoryDep('buf238', c0, {c0: 602112}, None)]
op238.unmet_dependencies = [   MemoryDep('buf237', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op238.met_dependencies = []
op238.outputs = [
    buf238: ComputedBuffer
    buf238.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf238.users = [NodeUser(node=ExternKernelSchedulerNode(name='op239'), can_inplace=False, is_weak=False)]
]
op238.group.device = cuda:0
op238.group.iteration = (602112, 1)
op238.sizes = ([1568, 16, 4, 6], [])
buf237_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf238_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op238_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf237', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf238', get_index_1, load, None)
        return store


op239: ExternKernelSchedulerNode(ExternKernelOut)
op239.writes = [StarDep(name='buf239', mode=None)]
op239.unmet_dependencies = [StarDep(name='buf238', mode=None)]
op239.met_dependencies = [StarDep(name='arg128_1', mode=None)]
op239.outputs = [
    buf239: ExternKernelOut
    buf239.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf239.users = [NodeUser(node=SchedulerNode(name='op240'), can_inplace=True, is_weak=False)]
]
op239.node.kernel = extern_kernels.mm


op240_op241_op242_op244: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op240_op241_op242_op244.writes = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf241', c0, {c0: 25088}, None),
        MemoryDep('buf242', c0, {c0: 25088}, None),
        MemoryDep('buf244', c0, {c0: 602112}, None)]
op240_op241_op242_op244.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None),
        MemoryDep('buf239', c0, {c0: 602112}, None)]
op240_op241_op242_op244.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg129_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg130_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg131_1', c1, {c0: 25088, c1: 24}, None)]
op240_op241_op242_op244.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
    ]
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op240_op241_op242_op244.snodes[0] =
op240: SchedulerNode(ComputedBuffer)
op240.writes = [MemoryDep('buf240', c0, {c0: 602112}, None)]
op240.unmet_dependencies = 
    [   MemoryDep('buf187', c0, {c0: 602112}, None),
        MemoryDep('buf194', c0, {c0: 602112}, None),
        MemoryDep('buf239', c0, {c0: 602112}, None)]
op240.met_dependencies = 
    [   MemoryDep('arg107_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg129_1', c1, {c0: 25088, c1: 24}, None)]
op240.outputs = [
    buf240: ComputedBuffer
    buf240.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf240.users = [
        NodeUser(node=SchedulerNode(name='op241'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op242'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op243'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op244'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
    ]
]
op240.group.device = cuda:0
op240.group.iteration = (602112, 1)
op240.sizes = ([25088, 24], [])
buf187_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf194_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg107_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf239_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg129_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op240_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf187', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf194', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg107_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf239', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg129_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf240', get_index_5, add_3, None)
        return store
op240_op241_op242_op244.snodes[1] =
op241: SchedulerNode(ComputedBuffer)
op241.writes = [MemoryDep('buf241', c0, {c0: 25088}, None)]
op241.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 602112}, None)]
op241.met_dependencies = []
op241.outputs = [
    buf241: ComputedBuffer
    buf241.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf241.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op241.group.device = cuda:0
op241.group.iteration = (25088, 24)
op241.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op241_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf241', get_index_1, getitem)
        return store_reduction
op240_op241_op242_op244.snodes[2] =
op242: SchedulerNode(ComputedBuffer)
op242.writes = [MemoryDep('buf242', c0, {c0: 25088}, None)]
op242.unmet_dependencies = [MemoryDep('buf240', c0, {c0: 602112}, None)]
op242.met_dependencies = []
op242.outputs = [
    buf242: ComputedBuffer
    buf242.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf242.users = [NodeUser(node=SchedulerNode(name='op244'), can_inplace=False, is_weak=False)]
]
op242.group.device = cuda:0
op242.group.iteration = (25088, 24)
op242.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf242_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op242_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf242', get_index_1, getitem_1)
        return store_reduction
op240_op241_op242_op244.snodes[3] =
op244: SchedulerNode(ComputedBuffer)
op244.writes = [MemoryDep('buf244', c0, {c0: 602112}, None)]
op244.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf241', c0, {c0: 25088}, None),
        MemoryDep('buf242', c0, {c0: 25088}, None)]
op244.met_dependencies = 
    [   MemoryDep('arg130_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg131_1', c1, {c0: 25088, c1: 24}, None)]
op244.outputs = [
    buf244: ComputedBuffer
    buf244.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf244.users = [NodeUser(node=ExternKernelSchedulerNode(name='op245'), can_inplace=False, is_weak=False)]
]
op244.group.device = cuda:0
op244.group.iteration = (602112, 1)
op244.sizes = ([25088, 24], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf241_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf242_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg130_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg131_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf244_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op244_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf241', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf242', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg130_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg131_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf244', get_index_5, add_1, None)
        return store


op245: ExternKernelSchedulerNode(ExternKernelOut)
op245.writes = [StarDep(name='buf245', mode=None)]
op245.unmet_dependencies = [StarDep(name='buf244', mode=None)]
op245.met_dependencies = [StarDep(name='arg132_1', mode=None)]
op245.outputs = [
    buf245: ExternKernelOut
    buf245.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf245.users = [NodeUser(node=SchedulerNode(name='op246'), can_inplace=True, is_weak=False)]
]
op245.node.kernel = extern_kernels.mm


op246: SchedulerNode(ComputedBuffer)
op246.writes = [MemoryDep('buf246', c0, {c0: 2408448}, None)]
op246.unmet_dependencies = [MemoryDep('buf245', c0, {c0: 2408448}, None)]
op246.met_dependencies = [MemoryDep('arg133_1', c1, {c0: 25088, c1: 96}, None)]
op246.outputs = [
    buf246: ComputedBuffer
    buf246.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf246.users = [NodeUser(node=ExternKernelSchedulerNode(name='op247'), can_inplace=False, is_weak=False)]
]
op246.group.device = cuda:0
op246.group.iteration = (2408448, 1)
op246.sizes = ([25088, 96], [])
buf245_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg133_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf246_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op246_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf245', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg133_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf245', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg133_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf246', get_index_4, mul_2, None)
        return store


op247: ExternKernelSchedulerNode(ExternKernelOut)
op247.writes = [StarDep(name='buf247', mode=None)]
op247.unmet_dependencies = [StarDep(name='buf246', mode=None)]
op247.met_dependencies = [StarDep(name='arg134_1', mode=None)]
op247.outputs = [
    buf247: ExternKernelOut
    buf247.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf247.users = [
        NodeUser(node=SchedulerNode(name='op248'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op249'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op250'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op256'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op279'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op280'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op281'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op282'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False),
    ]
]
op247.node.kernel = extern_kernels.mm


op248_op249_op279_op280_op256_op282: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op248_op249_op279_op280_op256_op282.writes = 
    [   MemoryDep('buf248', c0, {c0: 25088}, None),
        MemoryDep('buf249', c0, {c0: 25088}, None),
        MemoryDep('buf256', c0, {c0: 602112}, None),
        MemoryDep('buf279', c0, {c0: 25088}, None),
        MemoryDep('buf280', c0, {c0: 25088}, None),
        MemoryDep('buf282', c0, {c0: 602112}, None)]
op248_op249_op279_op280_op256_op282.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op248_op249_op279_op280_op256_op282.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg136_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg137_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg152_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg153_1', c1, {c0: 25088, c1: 24}, None)]
op248_op249_op279_op280_op256_op282.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf248.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf249.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf282.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op248_op249_op279_op280_op256_op282.snodes[0] =
op248: SchedulerNode(ComputedBuffer)
op248.writes = [MemoryDep('buf248', c0, {c0: 25088}, None)]
op248.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op248.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None)]
op248.outputs = [
    buf248: ComputedBuffer
    buf248.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf248.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op248.group.device = cuda:0
op248.group.iteration = (25088, 24)
op248.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op248_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf248', get_index_3, getitem)
        return store_reduction
op248_op249_op279_op280_op256_op282.snodes[1] =
op249: SchedulerNode(ComputedBuffer)
op249.writes = [MemoryDep('buf249', c0, {c0: 25088}, None)]
op249.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op249.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None)]
op249.outputs = [
    buf249: ComputedBuffer
    buf249.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf249.users = [NodeUser(node=SchedulerNode(name='op256'), can_inplace=False, is_weak=False)]
]
op249.group.device = cuda:0
op249.group.iteration = (25088, 24)
op249.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op249_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf249', get_index_3, getitem_1)
        return store_reduction
op248_op249_op279_op280_op256_op282.snodes[2] =
op279: SchedulerNode(ComputedBuffer)
op279.writes = [MemoryDep('buf279', c0, {c0: 25088}, None)]
op279.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op279.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None)]
op279.outputs = [
    buf279: ComputedBuffer
    buf279.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf279.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op279.group.device = cuda:0
op279.group.iteration = (25088, 24)
op279.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op279_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf279', get_index_3, getitem)
        return store_reduction
op248_op249_op279_op280_op256_op282.snodes[3] =
op280: SchedulerNode(ComputedBuffer)
op280.writes = [MemoryDep('buf280', c0, {c0: 25088}, None)]
op280.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None)]
op280.met_dependencies = [MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None)]
op280.outputs = [
    buf280: ComputedBuffer
    buf280.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf280.users = [NodeUser(node=SchedulerNode(name='op282'), can_inplace=False, is_weak=False)]
]
op280.group.device = cuda:0
op280.group.iteration = (25088, 24)
op280.sizes = ([25088], [24])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op280_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf280', get_index_3, getitem_1)
        return store_reduction
op248_op249_op279_op280_op256_op282.snodes[4] =
op256: SchedulerNode(ComputedBuffer)
op256.writes = [MemoryDep('buf256', c0, {c0: 602112}, None)]
op256.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None),
        MemoryDep('buf248', c0, {c0: 25088}, None),
        MemoryDep('buf249', c0, {c0: 25088}, None)]
op256.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg136_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg137_1', c1, {c0: 25088, c1: 24}, None)]
op256.outputs = [
    buf256: ComputedBuffer
    buf256.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf256.users = [NodeUser(node=ExternKernelSchedulerNode(name='op257'), can_inplace=False, is_weak=False)]
]
op256.group.device = cuda:0
op256.group.iteration = (602112, 1)
op256.sizes = ([25088, 24], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf248_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf249_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg136_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg137_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf256_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op256_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf248', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf249', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg136_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg137_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf256', get_index_7, add_3, None)
        return store
op248_op249_op279_op280_op256_op282.snodes[5] =
op282: SchedulerNode(ComputedBuffer)
op282.writes = [MemoryDep('buf282', c0, {c0: 602112}, None)]
op282.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None),
        MemoryDep('buf279', c0, {c0: 25088}, None),
        MemoryDep('buf280', c0, {c0: 25088}, None)]
op282.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg152_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg153_1', c1, {c0: 25088, c1: 24}, None)]
op282.outputs = [
    buf282: ComputedBuffer
    buf282.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf282.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op283'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op289'), can_inplace=False, is_weak=False),
    ]
]
op282.group.device = cuda:0
op282.group.iteration = (602112, 1)
op282.sizes = ([25088, 24], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf279_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf280_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg152_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg153_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf282_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op282_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf279', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf280', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg152_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg153_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf282', get_index_7, add_3, None)
        return store


op252: ExternKernelSchedulerNode(ExternKernelOut)
op252.writes = [StarDep(name='buf252', mode=None)]
op252.unmet_dependencies = [StarDep(name='buf251', mode=None)]
op252.met_dependencies = [StarDep(name='arg120_1', mode=None)]
op252.outputs = [
    buf252: ExternKernelOut
    buf252.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf252.users = [NodeUser(node=SchedulerNode(name='op253'), can_inplace=True, is_weak=False)]
]
op252.node.kernel = extern_kernels.mm


op253: SchedulerNode(ComputedBuffer)
op253.writes = [MemoryDep('buf253', c0, {c0: 2420736}, None)]
op253.unmet_dependencies = [MemoryDep('buf252', c0, {c0: 2420736}, None)]
op253.met_dependencies = [MemoryDep('arg121_1', c1, {c0: 1576, c1: 1536}, None)]
op253.outputs = [
    buf253: ComputedBuffer
    buf253.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf253.users = [NodeUser(node=ExternKernelSchedulerNode(name='op254'), can_inplace=False, is_weak=False)]
]
op253.group.device = cuda:0
op253.group.iteration = (2420736, 1)
op253.sizes = ([1576, 1536], [])
buf252_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg121_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf253_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op253_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf252', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg121_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf252', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg121_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf253', get_index_4, mul_2, None)
        return store


op254: ExternKernelSchedulerNode(ExternKernelOut)
op254.writes = [StarDep(name='buf254', mode=None)]
op254.unmet_dependencies = [StarDep(name='buf253', mode=None)]
op254.met_dependencies = [StarDep(name='arg122_1', mode=None)]
op254.outputs = [
    buf254: ExternKernelOut
    buf254.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf254.users = [NodeUser(node=SchedulerNode(name='op255'), can_inplace=True, is_weak=False)]
]
op254.node.kernel = extern_kernels.mm


op255: SchedulerNode(ComputedBuffer)
op255.writes = [MemoryDep('buf255', c0, {c0: 605184}, None)]
op255.unmet_dependencies = 
    [   MemoryDep('buf204', c0, {c0: 605184}, None),
        MemoryDep('buf220', c0, {c0: 605184}, None),
        MemoryDep('buf254', c0, {c0: 605184}, None)]
op255.met_dependencies = 
    [   MemoryDep('arg117_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg123_1', c1, {c0: 1576, c1: 384}, None)]
op255.outputs = [
    buf255: ComputedBuffer
    buf255.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf255.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
]
op255.group.device = cuda:0
op255.group.iteration = (605184, 1)
op255.sizes = ([1576, 384], [])
buf204_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf220_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg117_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf254_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg123_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op255_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf204', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf220', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg117_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf254', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg123_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf255', get_index_5, add_3, None)
        return store


op257: ExternKernelSchedulerNode(ExternKernelOut)
op257.writes = [StarDep(name='buf257', mode=None)]
op257.unmet_dependencies = [StarDep(name='buf256', mode=None)]
op257.met_dependencies = [StarDep(name='arg138_1', mode=None)]
op257.outputs = [
    buf257: ExternKernelOut
    buf257.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf257.users = [
        NodeUser(node=SchedulerNode(name='op258'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op259'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op260'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op275'), can_inplace=False, is_weak=False),
    ]
]
op257.node.kernel = extern_kernels.mm


op258_op259_op261_op262: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op258_op259_op261_op262.writes = 
    [   MemoryDep('buf258', c0, {c0: 1576}, None),
        MemoryDep('buf259', c0, {c0: 1576}, None),
        MemoryDep('buf261', c0, {c0: 605184}, None),
        MemoryDep('buf262', c0, {c0: 605184}, None)]
op258_op259_op261_op262.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op258_op259_op261_op262.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg140_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg141_1', c1, {c0: 1576, c1: 384}, None)]
op258_op259_op261_op262.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False)]
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op258_op259_op261_op262.snodes[0] =
op258: SchedulerNode(ComputedBuffer)
op258.writes = [MemoryDep('buf258', c0, {c0: 1576}, None)]
op258.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op258.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None)]
op258.outputs = [
    buf258: ComputedBuffer
    buf258.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf258.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op258.group.device = cuda:0
op258.group.iteration = (1576, 384)
op258.sizes = ([8, 197], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op258_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf258', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf255', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op258_op259_op261_op262.snodes[1] =
op259: SchedulerNode(ComputedBuffer)
op259.writes = [MemoryDep('buf259', c0, {c0: 1576}, None)]
op259.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op259.met_dependencies = [MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None)]
op259.outputs = [
    buf259: ComputedBuffer
    buf259.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf259.users = [NodeUser(node=SchedulerNode(name='op261'), can_inplace=False, is_weak=False)]
]
op259.group.device = cuda:0
op259.group.iteration = (1576, 384)
op259.sizes = ([8, 197], [384])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op259_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf259', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf255', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op258_op259_op261_op262.snodes[2] =
op261: SchedulerNode(ComputedBuffer)
op261.writes = [MemoryDep('buf261', c0, {c0: 605184}, None)]
op261.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf258', c0, {c0: 1576}, None),
        MemoryDep('buf259', c0, {c0: 1576}, None)]
op261.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg140_1', c1, {c0: 1576, c1: 384}, None)]
op261.outputs = [
    buf261: ComputedBuffer
    buf261.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf261.users = [NodeUser(node=SchedulerNode(name='op262'), can_inplace=True, is_weak=False)]
]
op261.group.device = cuda:0
op261.group.iteration = (605184, 1)
op261.sizes = ([8, 197, 384], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf258_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf259_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg140_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op261_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf258', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf259', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg140_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf261', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf255', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op258_op259_op261_op262.snodes[3] =
op262: SchedulerNode(ComputedBuffer)
op262.writes = [MemoryDep('buf262', c0, {c0: 605184}, None)]
op262.unmet_dependencies = [MemoryDep('buf261', c0, {c0: 605184}, None)]
op262.met_dependencies = [MemoryDep('arg141_1', c1, {c0: 1576, c1: 384}, None)]
op262.outputs = [
    buf262: ComputedBuffer
    buf262.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf262.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op263'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op269'), can_inplace=False, is_weak=False),
    ]
]
op262.group.device = cuda:0
op262.group.iteration = (605184, 1)
op262.sizes = ([1576, 384], [])
buf261_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg141_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf262_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op262_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf261', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg141_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf262', get_index_2, add, None)
        return store


op263: ExternKernelSchedulerNode(ExternKernelOut)
op263.writes = [StarDep(name='buf263', mode=None)]
op263.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op263.met_dependencies = [StarDep(name='arg142_1', mode=None)]
op263.outputs = [
    buf263: ExternKernelOut
    buf263.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf263.users = [
        NodeUser(node=SchedulerNode(name='op264'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op265'), can_inplace=False, is_weak=False),
    ]
]
op263.node.kernel = extern_kernels.mm


op264: SchedulerNode(ComputedBuffer)
op264.writes = [MemoryDep('buf264', c0, {c0: 605184}, None)]
op264.unmet_dependencies = [   MemoryDep('buf263', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op264.met_dependencies = []
op264.outputs = [
    buf264: ComputedBuffer
    buf264.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf264.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op264.group.device = cuda:0
op264.group.iteration = (605184, 1)
op264.sizes = ([8, 6, 197, 64], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf264_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op264_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf264', get_index_1, load, None)
        return store


op265: SchedulerNode(ComputedBuffer)
op265.writes = [MemoryDep('buf265', c0, {c0: 605184}, None)]
op265.unmet_dependencies = [   MemoryDep('buf263', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op265.met_dependencies = []
op265.outputs = [
    buf265: ComputedBuffer
    buf265.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf265.users = [NodeUser(node=ExternKernelSchedulerNode(name='op266'), can_inplace=False, is_weak=False)]
]
op265.group.device = cuda:0
op265.group.iteration = (605184, 1)
op265.sizes = ([8, 384, 197], [])
buf263_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf265_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op265_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf263', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf265', get_index_1, load, None)
        return store


op266: ExternKernelSchedulerNode(ExternKernelOut)
op266.writes = [StarDep(name='buf266', mode=None)]
op266.unmet_dependencies = [StarDep(name='buf264', mode=None), StarDep(name='buf265', mode=None)]
op266.met_dependencies = []
op266.outputs = [
    buf266: ExternKernelOut
    buf266.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf266.users = [
        NodeUser(node=SchedulerNode(name='op267'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
]
op266.node.kernel = extern_kernels.bmm


op267_op268_op270: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op267_op268_op270.writes = 
    [   MemoryDep('buf267', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf268', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf270', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op267_op268_op270.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 1862832}, None)]
op267_op268_op270.met_dependencies = []
op267_op268_op270.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op267_op268_op270.snodes[0] =
op267: SchedulerNode(ComputedBuffer)
op267.writes = [MemoryDep('buf267', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op267.unmet_dependencies = [MemoryDep('buf266', c0, {c0: 1862832}, None)]
op267.met_dependencies = []
op267.outputs = [
    buf267: ComputedBuffer
    buf267.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf267.users = [
        NodeUser(node=SchedulerNode(name='op268'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False),
    ]
]
op267.group.device = cuda:0
op267.group.iteration = (9456, 197)
op267.sizes = ([8, 1182], [197])
buf266_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op267_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf267', get_index_1, reduction)
        return store_reduction
op267_op268_op270.snodes[1] =
op268: SchedulerNode(ComputedBuffer)
op268.writes = [MemoryDep('buf268', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op268.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 1862832}, None),
        MemoryDep('buf267', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op268.met_dependencies = []
op268.outputs = [
    buf268: ComputedBuffer
    buf268.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf268.users = [NodeUser(node=SchedulerNode(name='op270'), can_inplace=False, is_weak=False)]
]
op268.group.device = cuda:0
op268.group.iteration = (9456, 197)
op268.sizes = ([8, 1182], [197])
buf266_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op268_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf268', get_index_2, reduction)
        return store_reduction
op267_op268_op270.snodes[2] =
op270: SchedulerNode(ComputedBuffer)
op270.writes = [MemoryDep('buf270', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op270.unmet_dependencies = 
    [   MemoryDep('buf266', c0, {c0: 1862832}, None),
        MemoryDep('buf267', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf268', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op270.met_dependencies = []
op270.outputs = [
    buf270: ComputedBuffer
    buf270.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf270.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op270.group.device = cuda:0
op270.group.iteration = (1862832, 1)
op270.sizes = ([8, 6, 197, 197], [])
buf266_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf267_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf268_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf270_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op270_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf266', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf267', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf268', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf270', get_index_3, truediv, None)
        return store


op269: ExternKernelSchedulerNode(ExternKernelOut)
op269.writes = [StarDep(name='buf269', mode=None)]
op269.unmet_dependencies = [StarDep(name='buf262', mode=None)]
op269.met_dependencies = [StarDep(name='arg143_1', mode=None)]
op269.outputs = [
    buf269: ExternKernelOut
    buf269.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf269.users = [NodeUser(node=SchedulerNode(name='op271'), can_inplace=False, is_weak=False)]
]
op269.node.kernel = extern_kernels.mm


op271: SchedulerNode(ComputedBuffer)
op271.writes = [MemoryDep('buf271', c0, {c0: 605184}, None)]
op271.unmet_dependencies = [   MemoryDep('buf269', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op271.met_dependencies = []
op271.outputs = [
    buf271: ComputedBuffer
    buf271.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf271.users = [NodeUser(node=ExternKernelSchedulerNode(name='op272'), can_inplace=False, is_weak=False)]
]
op271.group.device = cuda:0
op271.group.iteration = (605184, 1)
op271.sizes = ([8, 6, 197, 64], [])
buf269_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf271_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op271_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf269', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf271', get_index_1, load, None)
        return store


op272: ExternKernelSchedulerNode(ExternKernelOut)
op272.writes = [StarDep(name='buf272', mode=None)]
op272.unmet_dependencies = [StarDep(name='buf270', mode=None), StarDep(name='buf271', mode=None)]
op272.met_dependencies = []
op272.outputs = [
    buf272: ExternKernelOut
    buf272.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf272.users = [NodeUser(node=SchedulerNode(name='op273'), can_inplace=False, is_weak=False)]
]
op272.node.kernel = extern_kernels.bmm


op273: SchedulerNode(ComputedBuffer)
op273.writes = [MemoryDep('buf273', c0, {c0: 605184}, None)]
op273.unmet_dependencies = [   MemoryDep('buf272', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op273.met_dependencies = []
op273.outputs = [
    buf273: ComputedBuffer
    buf273.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf273.users = [NodeUser(node=ExternKernelSchedulerNode(name='op274'), can_inplace=False, is_weak=False)]
]
op273.group.device = cuda:0
op273.group.iteration = (605184, 1)
op273.sizes = ([8, 197, 6, 64], [])
buf272_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf273_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op273_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf272', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf273', get_index_1, load, None)
        return store


op274: ExternKernelSchedulerNode(ExternKernelOut)
op274.writes = [StarDep(name='buf274', mode=None)]
op274.unmet_dependencies = [StarDep(name='buf273', mode=None)]
op274.met_dependencies = [StarDep(name='arg144_1', mode=None)]
op274.outputs = [
    buf274: ExternKernelOut
    buf274.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf274.users = [NodeUser(node=SchedulerNode(name='op275'), can_inplace=True, is_weak=False)]
]
op274.node.kernel = extern_kernels.mm


op275_op276_op277_op306: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op275_op276_op277_op306.writes = 
    [   MemoryDep('buf275', c0, {c0: 605184}, None),
        MemoryDep('buf276', c0, {c0: 1576}, None),
        MemoryDep('buf277', c0, {c0: 1576}, None),
        MemoryDep('buf306', c0, {c0: 605184}, None)]
op275_op276_op277_op306.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf274', c0, {c0: 605184}, None)]
op275_op276_op277_op306.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg145_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg146_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg147_1', c1, {c0: 1576, c1: 384}, None)]
op275_op276_op277_op306.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf276.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf277.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op275_op276_op277_op306.snodes[0] =
op275: SchedulerNode(ComputedBuffer)
op275.writes = [MemoryDep('buf275', c0, {c0: 605184}, None)]
op275.unmet_dependencies = 
    [   MemoryDep('buf255', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf255', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf257', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf274', c0, {c0: 605184}, None)]
op275.met_dependencies = 
    [   MemoryDep('arg139_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg145_1', c1, {c0: 1576, c1: 384}, None)]
op275.outputs = [
    buf275: ComputedBuffer
    buf275.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf275.users = [
        NodeUser(node=SchedulerNode(name='op276'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op277'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op278'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op306'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False),
    ]
]
op275.group.device = cuda:0
op275.group.iteration = (605184, 1)
op275.sizes = ([8, 197, 384], [])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf255_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf257_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg139_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf274_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg145_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op275_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf274', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg145_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf275', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf255', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf255', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf257', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg139_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op275_op276_op277_op306.snodes[1] =
op276: SchedulerNode(ComputedBuffer)
op276.writes = [MemoryDep('buf276', c0, {c0: 1576}, None)]
op276.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 605184}, None)]
op276.met_dependencies = []
op276.outputs = [
    buf276: ComputedBuffer
    buf276.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf276.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op276.group.device = cuda:0
op276.group.iteration = (1576, 384)
op276.sizes = ([1576], [384])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op276_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf276', get_index_1, getitem)
        return store_reduction
op275_op276_op277_op306.snodes[2] =
op277: SchedulerNode(ComputedBuffer)
op277.writes = [MemoryDep('buf277', c0, {c0: 1576}, None)]
op277.unmet_dependencies = [MemoryDep('buf275', c0, {c0: 605184}, None)]
op277.met_dependencies = []
op277.outputs = [
    buf277: ComputedBuffer
    buf277.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf277.users = [NodeUser(node=SchedulerNode(name='op306'), can_inplace=False, is_weak=False)]
]
op277.group.device = cuda:0
op277.group.iteration = (1576, 384)
op277.sizes = ([1576], [384])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op277_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf277', get_index_1, getitem_1)
        return store_reduction
op275_op276_op277_op306.snodes[3] =
op306: SchedulerNode(ComputedBuffer)
op306.writes = [MemoryDep('buf306', c0, {c0: 605184}, None)]
op306.unmet_dependencies = 
    [   MemoryDep('buf275', c0, {c0: 605184}, None),
        MemoryDep('buf276', c0, {c0: 1576}, None),
        MemoryDep('buf277', c0, {c0: 1576}, None)]
op306.met_dependencies = 
    [   MemoryDep('arg146_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg147_1', c1, {c0: 1576, c1: 384}, None)]
op306.outputs = [
    buf306: ComputedBuffer
    buf306.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf306.users = [NodeUser(node=ExternKernelSchedulerNode(name='op307'), can_inplace=False, is_weak=False)]
]
op306.group.device = cuda:0
op306.group.iteration = (605184, 1)
op306.sizes = ([1576, 384], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf276_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf277_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg146_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg147_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf306_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op306_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf276', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf277', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg146_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg147_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf306', get_index_5, add_1, None)
        return store


op283: ExternKernelSchedulerNode(ExternKernelOut)
op283.writes = [StarDep(name='buf283', mode=None)]
op283.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op283.met_dependencies = [StarDep(name='arg154_1', mode=None)]
op283.outputs = [
    buf283: ExternKernelOut
    buf283.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf283.users = [
        NodeUser(node=SchedulerNode(name='op284'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op285'), can_inplace=False, is_weak=False),
    ]
]
op283.node.kernel = extern_kernels.mm


op284: SchedulerNode(ComputedBuffer)
op284.writes = [MemoryDep('buf284', c0, {c0: 602112}, None)]
op284.unmet_dependencies = [   MemoryDep('buf283', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op284.met_dependencies = []
op284.outputs = [
    buf284: ComputedBuffer
    buf284.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf284.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op284.group.device = cuda:0
op284.group.iteration = (602112, 1)
op284.sizes = ([1568, 4, 16, 6], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf284_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op284_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf284', get_index_1, load, None)
        return store


op285: SchedulerNode(ComputedBuffer)
op285.writes = [MemoryDep('buf285', c0, {c0: 602112}, None)]
op285.unmet_dependencies = [   MemoryDep('buf283', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op285.met_dependencies = []
op285.outputs = [
    buf285: ComputedBuffer
    buf285.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf285.users = [NodeUser(node=ExternKernelSchedulerNode(name='op286'), can_inplace=False, is_weak=False)]
]
op285.group.device = cuda:0
op285.group.iteration = (602112, 1)
op285.sizes = ([1568, 24, 16], [])
buf283_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf285_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op285_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf283', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf285', get_index_1, load, None)
        return store


op286: ExternKernelSchedulerNode(ExternKernelOut)
op286.writes = [StarDep(name='buf286', mode=None)]
op286.unmet_dependencies = [StarDep(name='buf284', mode=None), StarDep(name='buf285', mode=None)]
op286.met_dependencies = []
op286.outputs = [
    buf286: ExternKernelOut
    buf286.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf286.users = [
        NodeUser(node=SchedulerNode(name='op287'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=True, is_weak=False),
    ]
]
op286.node.kernel = extern_kernels.bmm


op287_op288_op290: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op287_op288_op290.writes = 
    [   MemoryDep('buf287', c0, {c0: 100352}, None),
        MemoryDep('buf288', c0, {c0: 100352}, None),
        MemoryDep('buf290', c0, {c0: 1605632}, None)]
op287_op288_op290.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1605632}, None)]
op287_op288_op290.met_dependencies = []
op287_op288_op290.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op287_op288_op290.snodes[0] =
op287: SchedulerNode(ComputedBuffer)
op287.writes = [MemoryDep('buf287', c0, {c0: 100352}, None)]
op287.unmet_dependencies = [MemoryDep('buf286', c0, {c0: 1605632}, None)]
op287.met_dependencies = []
op287.outputs = [
    buf287: ComputedBuffer
    buf287.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf287.users = [
        NodeUser(node=SchedulerNode(name='op288'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False),
    ]
]
op287.group.device = cuda:0
op287.group.iteration = (100352, 16)
op287.sizes = ([100352], [16])
buf286_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op287_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf287', get_index_1, reduction)
        return store_reduction
op287_op288_op290.snodes[1] =
op288: SchedulerNode(ComputedBuffer)
op288.writes = [MemoryDep('buf288', c0, {c0: 100352}, None)]
op288.unmet_dependencies = 
    [   MemoryDep('buf286', c0, {c0: 1605632}, None),
        MemoryDep('buf287', c0, {c0: 100352}, None)]
op288.met_dependencies = []
op288.outputs = [
    buf288: ComputedBuffer
    buf288.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf288.users = [NodeUser(node=SchedulerNode(name='op290'), can_inplace=False, is_weak=False)]
]
op288.group.device = cuda:0
op288.group.iteration = (100352, 16)
op288.sizes = ([100352], [16])
buf286_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf288_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op288_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf288', get_index_2, reduction)
        return store_reduction
op287_op288_op290.snodes[2] =
op290: SchedulerNode(ComputedBuffer)
op290.writes = [MemoryDep('buf290', c0, {c0: 1605632}, None)]
op290.unmet_dependencies = 
    [   MemoryDep('buf286', c0, {c0: 1605632}, None),
        MemoryDep('buf287', c0, {c0: 100352}, None),
        MemoryDep('buf288', c0, {c0: 100352}, None)]
op290.met_dependencies = []
op290.outputs = [
    buf290: ComputedBuffer
    buf290.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf290.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op290.group.device = cuda:0
op290.group.iteration = (1605632, 1)
op290.sizes = ([100352, 16], [])
buf286_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf287_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf288_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf290_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op290_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf286', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf287', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf288', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf290', get_index_3, truediv, None)
        return store


op289: ExternKernelSchedulerNode(ExternKernelOut)
op289.writes = [StarDep(name='buf289', mode=None)]
op289.unmet_dependencies = [StarDep(name='buf282', mode=None)]
op289.met_dependencies = [StarDep(name='arg155_1', mode=None)]
op289.outputs = [
    buf289: ExternKernelOut
    buf289.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf289.users = [NodeUser(node=SchedulerNode(name='op291'), can_inplace=False, is_weak=False)]
]
op289.node.kernel = extern_kernels.mm


op291: SchedulerNode(ComputedBuffer)
op291.writes = [MemoryDep('buf291', c0, {c0: 602112}, None)]
op291.unmet_dependencies = [   MemoryDep('buf289', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op291.met_dependencies = []
op291.outputs = [
    buf291: ComputedBuffer
    buf291.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf291.users = [NodeUser(node=ExternKernelSchedulerNode(name='op292'), can_inplace=False, is_weak=False)]
]
op291.group.device = cuda:0
op291.group.iteration = (602112, 1)
op291.sizes = ([1568, 4, 16, 6], [])
buf289_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf291_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op291_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf289', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf291', get_index_1, load, None)
        return store


op292: ExternKernelSchedulerNode(ExternKernelOut)
op292.writes = [StarDep(name='buf292', mode=None)]
op292.unmet_dependencies = [StarDep(name='buf290', mode=None), StarDep(name='buf291', mode=None)]
op292.met_dependencies = []
op292.outputs = [
    buf292: ExternKernelOut
    buf292.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf292.users = [NodeUser(node=SchedulerNode(name='op293'), can_inplace=False, is_weak=False)]
]
op292.node.kernel = extern_kernels.bmm


op293: SchedulerNode(ComputedBuffer)
op293.writes = [MemoryDep('buf293', c0, {c0: 602112}, None)]
op293.unmet_dependencies = [   MemoryDep('buf292', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op293.met_dependencies = []
op293.outputs = [
    buf293: ComputedBuffer
    buf293.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf293.users = [NodeUser(node=ExternKernelSchedulerNode(name='op294'), can_inplace=False, is_weak=False)]
]
op293.group.device = cuda:0
op293.group.iteration = (602112, 1)
op293.sizes = ([1568, 16, 4, 6], [])
buf292_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf293_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op293_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf292', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf293', get_index_1, load, None)
        return store


op294: ExternKernelSchedulerNode(ExternKernelOut)
op294.writes = [StarDep(name='buf294', mode=None)]
op294.unmet_dependencies = [StarDep(name='buf293', mode=None)]
op294.met_dependencies = [StarDep(name='arg156_1', mode=None)]
op294.outputs = [
    buf294: ExternKernelOut
    buf294.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf294.users = [NodeUser(node=SchedulerNode(name='op295'), can_inplace=True, is_weak=False)]
]
op294.node.kernel = extern_kernels.mm


op295_op296_op297_op299: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op295_op296_op297_op299.writes = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf296', c0, {c0: 25088}, None),
        MemoryDep('buf297', c0, {c0: 25088}, None),
        MemoryDep('buf299', c0, {c0: 602112}, None)]
op295_op296_op297_op299.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None),
        MemoryDep('buf294', c0, {c0: 602112}, None)]
op295_op296_op297_op299.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg157_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg158_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg159_1', c1, {c0: 25088, c1: 24}, None)]
op295_op296_op297_op299.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
    ]
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf296.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf297.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op295_op296_op297_op299.snodes[0] =
op295: SchedulerNode(ComputedBuffer)
op295.writes = [MemoryDep('buf295', c0, {c0: 602112}, None)]
op295.unmet_dependencies = 
    [   MemoryDep('buf240', c0, {c0: 602112}, None),
        MemoryDep('buf247', c0, {c0: 602112}, None),
        MemoryDep('buf294', c0, {c0: 602112}, None)]
op295.met_dependencies = 
    [   MemoryDep('arg135_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg157_1', c1, {c0: 25088, c1: 24}, None)]
op295.outputs = [
    buf295: ComputedBuffer
    buf295.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf295.users = [
        NodeUser(node=SchedulerNode(name='op296'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op297'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op298'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op299'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
    ]
]
op295.group.device = cuda:0
op295.group.iteration = (602112, 1)
op295.sizes = ([25088, 24], [])
buf240_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf247_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg135_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf294_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg157_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op295_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf240', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf247', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg135_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf294', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg157_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf295', get_index_5, add_3, None)
        return store
op295_op296_op297_op299.snodes[1] =
op296: SchedulerNode(ComputedBuffer)
op296.writes = [MemoryDep('buf296', c0, {c0: 25088}, None)]
op296.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 602112}, None)]
op296.met_dependencies = []
op296.outputs = [
    buf296: ComputedBuffer
    buf296.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf296.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op296.group.device = cuda:0
op296.group.iteration = (25088, 24)
op296.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op296_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf296', get_index_1, getitem)
        return store_reduction
op295_op296_op297_op299.snodes[2] =
op297: SchedulerNode(ComputedBuffer)
op297.writes = [MemoryDep('buf297', c0, {c0: 25088}, None)]
op297.unmet_dependencies = [MemoryDep('buf295', c0, {c0: 602112}, None)]
op297.met_dependencies = []
op297.outputs = [
    buf297: ComputedBuffer
    buf297.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf297.users = [NodeUser(node=SchedulerNode(name='op299'), can_inplace=False, is_weak=False)]
]
op297.group.device = cuda:0
op297.group.iteration = (25088, 24)
op297.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf297_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op297_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf297', get_index_1, getitem_1)
        return store_reduction
op295_op296_op297_op299.snodes[3] =
op299: SchedulerNode(ComputedBuffer)
op299.writes = [MemoryDep('buf299', c0, {c0: 602112}, None)]
op299.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf296', c0, {c0: 25088}, None),
        MemoryDep('buf297', c0, {c0: 25088}, None)]
op299.met_dependencies = 
    [   MemoryDep('arg158_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg159_1', c1, {c0: 25088, c1: 24}, None)]
op299.outputs = [
    buf299: ComputedBuffer
    buf299.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf299.users = [NodeUser(node=ExternKernelSchedulerNode(name='op300'), can_inplace=False, is_weak=False)]
]
op299.group.device = cuda:0
op299.group.iteration = (602112, 1)
op299.sizes = ([25088, 24], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf296_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf297_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg158_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg159_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf299_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op299_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf296', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf297', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg158_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg159_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf299', get_index_5, add_1, None)
        return store


op300: ExternKernelSchedulerNode(ExternKernelOut)
op300.writes = [StarDep(name='buf300', mode=None)]
op300.unmet_dependencies = [StarDep(name='buf299', mode=None)]
op300.met_dependencies = [StarDep(name='arg160_1', mode=None)]
op300.outputs = [
    buf300: ExternKernelOut
    buf300.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf300.users = [NodeUser(node=SchedulerNode(name='op301'), can_inplace=True, is_weak=False)]
]
op300.node.kernel = extern_kernels.mm


op301: SchedulerNode(ComputedBuffer)
op301.writes = [MemoryDep('buf301', c0, {c0: 2408448}, None)]
op301.unmet_dependencies = [MemoryDep('buf300', c0, {c0: 2408448}, None)]
op301.met_dependencies = [MemoryDep('arg161_1', c1, {c0: 25088, c1: 96}, None)]
op301.outputs = [
    buf301: ComputedBuffer
    buf301.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf301.users = [NodeUser(node=ExternKernelSchedulerNode(name='op302'), can_inplace=False, is_weak=False)]
]
op301.group.device = cuda:0
op301.group.iteration = (2408448, 1)
op301.sizes = ([25088, 96], [])
buf300_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg161_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf301_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op301_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf300', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg161_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf300', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg161_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf301', get_index_4, mul_2, None)
        return store


op302: ExternKernelSchedulerNode(ExternKernelOut)
op302.writes = [StarDep(name='buf302', mode=None)]
op302.unmet_dependencies = [StarDep(name='buf301', mode=None)]
op302.met_dependencies = [StarDep(name='arg162_1', mode=None)]
op302.outputs = [
    buf302: ExternKernelOut
    buf302.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf302.users = [
        NodeUser(node=SchedulerNode(name='op303'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op304'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op305'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op310'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op332'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op333'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op334'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op335'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False),
    ]
]
op302.node.kernel = extern_kernels.mm


op303_op304_op332_op333_op310_op335: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op303_op304_op332_op333_op310_op335.writes = 
    [   MemoryDep('buf303', c0, {c0: 25088}, None),
        MemoryDep('buf304', c0, {c0: 25088}, None),
        MemoryDep('buf310', c0, {c0: 602112}, None),
        MemoryDep('buf332', c0, {c0: 25088}, None),
        MemoryDep('buf333', c0, {c0: 25088}, None),
        MemoryDep('buf335', c0, {c0: 602112}, None)]
op303_op304_op332_op333_op310_op335.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None)]
op303_op304_op332_op333_op310_op335.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg164_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg165_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg180_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg181_1', c1, {c0: 25088, c1: 24}, None)]
op303_op304_op332_op333_op310_op335.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf303.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf304.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf335.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op303_op304_op332_op333_op310_op335.snodes[0] =
op303: SchedulerNode(ComputedBuffer)
op303.writes = [MemoryDep('buf303', c0, {c0: 25088}, None)]
op303.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None)]
op303.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None)]
op303.outputs = [
    buf303: ComputedBuffer
    buf303.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf303.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op303.group.device = cuda:0
op303.group.iteration = (25088, 24)
op303.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op303_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf303', get_index_3, getitem)
        return store_reduction
op303_op304_op332_op333_op310_op335.snodes[1] =
op304: SchedulerNode(ComputedBuffer)
op304.writes = [MemoryDep('buf304', c0, {c0: 25088}, None)]
op304.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None)]
op304.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None)]
op304.outputs = [
    buf304: ComputedBuffer
    buf304.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf304.users = [NodeUser(node=SchedulerNode(name='op310'), can_inplace=False, is_weak=False)]
]
op304.group.device = cuda:0
op304.group.iteration = (25088, 24)
op304.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf304_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op304_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf304', get_index_3, getitem_1)
        return store_reduction
op303_op304_op332_op333_op310_op335.snodes[2] =
op332: SchedulerNode(ComputedBuffer)
op332.writes = [MemoryDep('buf332', c0, {c0: 25088}, None)]
op332.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None)]
op332.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None)]
op332.outputs = [
    buf332: ComputedBuffer
    buf332.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf332.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op332.group.device = cuda:0
op332.group.iteration = (25088, 24)
op332.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op332_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf332', get_index_3, getitem)
        return store_reduction
op303_op304_op332_op333_op310_op335.snodes[3] =
op333: SchedulerNode(ComputedBuffer)
op333.writes = [MemoryDep('buf333', c0, {c0: 25088}, None)]
op333.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None)]
op333.met_dependencies = [MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None)]
op333.outputs = [
    buf333: ComputedBuffer
    buf333.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf333.users = [NodeUser(node=SchedulerNode(name='op335'), can_inplace=False, is_weak=False)]
]
op333.group.device = cuda:0
op333.group.iteration = (25088, 24)
op333.sizes = ([25088], [24])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op333_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf333', get_index_3, getitem_1)
        return store_reduction
op303_op304_op332_op333_op310_op335.snodes[4] =
op310: SchedulerNode(ComputedBuffer)
op310.writes = [MemoryDep('buf310', c0, {c0: 602112}, None)]
op310.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None),
        MemoryDep('buf303', c0, {c0: 25088}, None),
        MemoryDep('buf304', c0, {c0: 25088}, None)]
op310.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg164_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg165_1', c1, {c0: 25088, c1: 24}, None)]
op310.outputs = [
    buf310: ComputedBuffer
    buf310.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf310.users = [NodeUser(node=ExternKernelSchedulerNode(name='op311'), can_inplace=False, is_weak=False)]
]
op310.group.device = cuda:0
op310.group.iteration = (602112, 1)
op310.sizes = ([25088, 24], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf303_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf304_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg164_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg165_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf310_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op310_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf303', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf304', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg164_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg165_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf310', get_index_7, add_3, None)
        return store
op303_op304_op332_op333_op310_op335.snodes[5] =
op335: SchedulerNode(ComputedBuffer)
op335.writes = [MemoryDep('buf335', c0, {c0: 602112}, None)]
op335.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None),
        MemoryDep('buf332', c0, {c0: 25088}, None),
        MemoryDep('buf333', c0, {c0: 25088}, None)]
op335.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg180_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg181_1', c1, {c0: 25088, c1: 24}, None)]
op335.outputs = [
    buf335: ComputedBuffer
    buf335.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf335.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op336'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op342'), can_inplace=False, is_weak=False),
    ]
]
op335.group.device = cuda:0
op335.group.iteration = (602112, 1)
op335.sizes = ([25088, 24], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf332_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf333_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg180_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg181_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf335_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op335_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf332', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf333', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg180_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg181_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf335', get_index_7, add_3, None)
        return store


op307: ExternKernelSchedulerNode(ExternKernelOut)
op307.writes = [StarDep(name='buf307', mode=None)]
op307.unmet_dependencies = [StarDep(name='buf306', mode=None)]
op307.met_dependencies = [StarDep(name='arg148_1', mode=None)]
op307.outputs = [
    buf307: ExternKernelOut
    buf307.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf307.users = [NodeUser(node=SchedulerNode(name='op308'), can_inplace=True, is_weak=False)]
]
op307.node.kernel = extern_kernels.mm


op308: SchedulerNode(ComputedBuffer)
op308.writes = [MemoryDep('buf308', c0, {c0: 2420736}, None)]
op308.unmet_dependencies = [MemoryDep('buf307', c0, {c0: 2420736}, None)]
op308.met_dependencies = [MemoryDep('arg149_1', c1, {c0: 1576, c1: 1536}, None)]
op308.outputs = [
    buf308: ComputedBuffer
    buf308.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf308.users = [NodeUser(node=ExternKernelSchedulerNode(name='op309'), can_inplace=False, is_weak=False)]
]
op308.group.device = cuda:0
op308.group.iteration = (2420736, 1)
op308.sizes = ([1576, 1536], [])
buf307_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg149_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf308_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op308_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf307', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg149_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf307', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg149_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf308', get_index_4, mul_2, None)
        return store


op309: ExternKernelSchedulerNode(ExternKernelOut)
op309.writes = [StarDep(name='buf309', mode=None)]
op309.unmet_dependencies = [StarDep(name='buf308', mode=None)]
op309.met_dependencies = [StarDep(name='arg150_1', mode=None)]
op309.outputs = [
    buf309: ExternKernelOut
    buf309.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf309.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op309.node.kernel = extern_kernels.mm


op311: ExternKernelSchedulerNode(ExternKernelOut)
op311.writes = [StarDep(name='buf311', mode=None)]
op311.unmet_dependencies = [StarDep(name='buf310', mode=None)]
op311.met_dependencies = [StarDep(name='arg166_1', mode=None)]
op311.outputs = [
    buf311: ExternKernelOut
    buf311.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf311.users = [NodeUser(node=SchedulerNode(name='op312'), can_inplace=False, is_weak=False)]
]
op311.node.kernel = extern_kernels.mm


op312_op313_op314_op316: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op312_op313_op314_op316.writes = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf313', c0, {c0: 1576}, None),
        MemoryDep('buf314', c0, {c0: 1576}, None),
        MemoryDep('buf316', c0, {c0: 605184}, None)]
op312_op313_op314_op316.unmet_dependencies = 
    [   MemoryDep('buf275', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf275', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf309', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf309', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf311', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op312_op313_op314_op316.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg167_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg168_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg169_1', c1, {c0: 1576, c1: 384}, None)]
op312_op313_op314_op316.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf313.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
    ]
]
op312_op313_op314_op316.snodes[0] =
op312: SchedulerNode(ComputedBuffer)
op312.writes = [MemoryDep('buf312', c0, {c0: 605184}, None)]
op312.unmet_dependencies = 
    [   MemoryDep('buf275', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf275', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf309', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf309', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf311', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op312.met_dependencies = 
    [   MemoryDep('arg151_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg167_1', c1, {c0: 1576, c1: 384}, None)]
op312.outputs = [
    buf312: ComputedBuffer
    buf312.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf312.users = [
        NodeUser(node=SchedulerNode(name='op313'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op314'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op315'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op316'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op312.group.device = cuda:0
op312.group.iteration = (605184, 1)
op312.sizes = ([8, 197, 384], [])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg151_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf275_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf309_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf311_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg167_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op312_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf312', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf275', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf309', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg151_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf311', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg167_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op312_op313_op314_op316.snodes[1] =
op313: SchedulerNode(ComputedBuffer)
op313.writes = [MemoryDep('buf313', c0, {c0: 1576}, None)]
op313.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 605184}, None)]
op313.met_dependencies = []
op313.outputs = [
    buf313: ComputedBuffer
    buf313.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf313.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op313.group.device = cuda:0
op313.group.iteration = (1576, 384)
op313.sizes = ([1576], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op313_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf313', get_index_1, getitem)
        return store_reduction
op312_op313_op314_op316.snodes[2] =
op314: SchedulerNode(ComputedBuffer)
op314.writes = [MemoryDep('buf314', c0, {c0: 1576}, None)]
op314.unmet_dependencies = [MemoryDep('buf312', c0, {c0: 605184}, None)]
op314.met_dependencies = []
op314.outputs = [
    buf314: ComputedBuffer
    buf314.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf314.users = [NodeUser(node=SchedulerNode(name='op316'), can_inplace=False, is_weak=False)]
]
op314.group.device = cuda:0
op314.group.iteration = (1576, 384)
op314.sizes = ([1576], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op314_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf314', get_index_1, getitem_1)
        return store_reduction
op312_op313_op314_op316.snodes[3] =
op316: SchedulerNode(ComputedBuffer)
op316.writes = [MemoryDep('buf316', c0, {c0: 605184}, None)]
op316.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf313', c0, {c0: 1576}, None),
        MemoryDep('buf314', c0, {c0: 1576}, None)]
op316.met_dependencies = 
    [   MemoryDep('arg168_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg169_1', c1, {c0: 1576, c1: 384}, None)]
op316.outputs = [
    buf316: ComputedBuffer
    buf316.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf316.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op317'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op323'), can_inplace=False, is_weak=False),
    ]
]
op316.group.device = cuda:0
op316.group.iteration = (605184, 1)
op316.sizes = ([1576, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf313_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf314_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg168_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg169_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf316_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op316_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf313', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf314', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg168_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg169_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf316', get_index_5, add_1, None)
        return store


op317: ExternKernelSchedulerNode(ExternKernelOut)
op317.writes = [StarDep(name='buf317', mode=None)]
op317.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op317.met_dependencies = [StarDep(name='arg170_1', mode=None)]
op317.outputs = [
    buf317: ExternKernelOut
    buf317.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf317.users = [
        NodeUser(node=SchedulerNode(name='op318'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op319'), can_inplace=False, is_weak=False),
    ]
]
op317.node.kernel = extern_kernels.mm


op318: SchedulerNode(ComputedBuffer)
op318.writes = [MemoryDep('buf318', c0, {c0: 605184}, None)]
op318.unmet_dependencies = [   MemoryDep('buf317', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op318.met_dependencies = []
op318.outputs = [
    buf318: ComputedBuffer
    buf318.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf318.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op318.group.device = cuda:0
op318.group.iteration = (605184, 1)
op318.sizes = ([8, 6, 197, 64], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf318_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op318_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf318', get_index_1, load, None)
        return store


op319: SchedulerNode(ComputedBuffer)
op319.writes = [MemoryDep('buf319', c0, {c0: 605184}, None)]
op319.unmet_dependencies = [   MemoryDep('buf317', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op319.met_dependencies = []
op319.outputs = [
    buf319: ComputedBuffer
    buf319.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf319.users = [NodeUser(node=ExternKernelSchedulerNode(name='op320'), can_inplace=False, is_weak=False)]
]
op319.group.device = cuda:0
op319.group.iteration = (605184, 1)
op319.sizes = ([8, 384, 197], [])
buf317_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf319_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op319_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf317', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf319', get_index_1, load, None)
        return store


op320: ExternKernelSchedulerNode(ExternKernelOut)
op320.writes = [StarDep(name='buf320', mode=None)]
op320.unmet_dependencies = [StarDep(name='buf318', mode=None), StarDep(name='buf319', mode=None)]
op320.met_dependencies = []
op320.outputs = [
    buf320: ExternKernelOut
    buf320.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf320.users = [
        NodeUser(node=SchedulerNode(name='op321'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op320.node.kernel = extern_kernels.bmm


op321_op322_op324: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op321_op322_op324.writes = 
    [   MemoryDep('buf321', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf322', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf324', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op321_op322_op324.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 1862832}, None)]
op321_op322_op324.met_dependencies = []
op321_op322_op324.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op321_op322_op324.snodes[0] =
op321: SchedulerNode(ComputedBuffer)
op321.writes = [MemoryDep('buf321', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op321.unmet_dependencies = [MemoryDep('buf320', c0, {c0: 1862832}, None)]
op321.met_dependencies = []
op321.outputs = [
    buf321: ComputedBuffer
    buf321.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf321.users = [
        NodeUser(node=SchedulerNode(name='op322'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False),
    ]
]
op321.group.device = cuda:0
op321.group.iteration = (9456, 197)
op321.sizes = ([8, 1182], [197])
buf320_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op321_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf321', get_index_1, reduction)
        return store_reduction
op321_op322_op324.snodes[1] =
op322: SchedulerNode(ComputedBuffer)
op322.writes = [MemoryDep('buf322', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op322.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 1862832}, None),
        MemoryDep('buf321', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op322.met_dependencies = []
op322.outputs = [
    buf322: ComputedBuffer
    buf322.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf322.users = [NodeUser(node=SchedulerNode(name='op324'), can_inplace=False, is_weak=False)]
]
op322.group.device = cuda:0
op322.group.iteration = (9456, 197)
op322.sizes = ([8, 1182], [197])
buf320_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op322_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf322', get_index_2, reduction)
        return store_reduction
op321_op322_op324.snodes[2] =
op324: SchedulerNode(ComputedBuffer)
op324.writes = [MemoryDep('buf324', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op324.unmet_dependencies = 
    [   MemoryDep('buf320', c0, {c0: 1862832}, None),
        MemoryDep('buf321', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf322', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op324.met_dependencies = []
op324.outputs = [
    buf324: ComputedBuffer
    buf324.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf324.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op324.group.device = cuda:0
op324.group.iteration = (1862832, 1)
op324.sizes = ([8, 6, 197, 197], [])
buf320_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf321_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf322_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf324_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op324_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf320', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf321', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf322', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf324', get_index_3, truediv, None)
        return store


op323: ExternKernelSchedulerNode(ExternKernelOut)
op323.writes = [StarDep(name='buf323', mode=None)]
op323.unmet_dependencies = [StarDep(name='buf316', mode=None)]
op323.met_dependencies = [StarDep(name='arg171_1', mode=None)]
op323.outputs = [
    buf323: ExternKernelOut
    buf323.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf323.users = [NodeUser(node=SchedulerNode(name='op325'), can_inplace=False, is_weak=False)]
]
op323.node.kernel = extern_kernels.mm


op325: SchedulerNode(ComputedBuffer)
op325.writes = [MemoryDep('buf325', c0, {c0: 605184}, None)]
op325.unmet_dependencies = [   MemoryDep('buf323', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op325.met_dependencies = []
op325.outputs = [
    buf325: ComputedBuffer
    buf325.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf325.users = [NodeUser(node=ExternKernelSchedulerNode(name='op326'), can_inplace=False, is_weak=False)]
]
op325.group.device = cuda:0
op325.group.iteration = (605184, 1)
op325.sizes = ([8, 6, 197, 64], [])
buf323_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf325_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op325_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf323', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf325', get_index_1, load, None)
        return store


op326: ExternKernelSchedulerNode(ExternKernelOut)
op326.writes = [StarDep(name='buf326', mode=None)]
op326.unmet_dependencies = [StarDep(name='buf324', mode=None), StarDep(name='buf325', mode=None)]
op326.met_dependencies = []
op326.outputs = [
    buf326: ExternKernelOut
    buf326.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf326.users = [NodeUser(node=SchedulerNode(name='op327'), can_inplace=False, is_weak=False)]
]
op326.node.kernel = extern_kernels.bmm


op327: SchedulerNode(ComputedBuffer)
op327.writes = [MemoryDep('buf327', c0, {c0: 605184}, None)]
op327.unmet_dependencies = [   MemoryDep('buf326', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op327.met_dependencies = []
op327.outputs = [
    buf327: ComputedBuffer
    buf327.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf327.users = [NodeUser(node=ExternKernelSchedulerNode(name='op328'), can_inplace=False, is_weak=False)]
]
op327.group.device = cuda:0
op327.group.iteration = (605184, 1)
op327.sizes = ([8, 197, 6, 64], [])
buf326_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf327_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op327_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf326', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf327', get_index_1, load, None)
        return store


op328: ExternKernelSchedulerNode(ExternKernelOut)
op328.writes = [StarDep(name='buf328', mode=None)]
op328.unmet_dependencies = [StarDep(name='buf327', mode=None)]
op328.met_dependencies = [StarDep(name='arg172_1', mode=None)]
op328.outputs = [
    buf328: ExternKernelOut
    buf328.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf328.users = [
        NodeUser(node=SchedulerNode(name='op329'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op330'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op331'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op359'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False),
    ]
]
op328.node.kernel = extern_kernels.mm


op329_op330_op359: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op329_op330_op359.writes = 
    [   MemoryDep('buf329', c0, {c0: 1576}, None),
        MemoryDep('buf330', c0, {c0: 1576}, None),
        MemoryDep('buf359', c0, {c0: 605184}, None)]
op329_op330_op359.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf328', c0, {c0: 605184}, None)]
op329_op330_op359.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg174_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg175_1', c1, {c0: 1576, c1: 384}, None)]
op329_op330_op359.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf329.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf330.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op329_op330_op359.snodes[0] =
op329: SchedulerNode(ComputedBuffer)
op329.writes = [MemoryDep('buf329', c0, {c0: 1576}, None)]
op329.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf328', c0, {c0: 605184}, None)]
op329.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 1576, c1: 384}, None)]
op329.outputs = [
    buf329: ComputedBuffer
    buf329.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf329.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op329.group.device = cuda:0
op329.group.iteration = (1576, 384)
op329.sizes = ([1576], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op329_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf329', get_index_3, getitem)
        return store_reduction
op329_op330_op359.snodes[1] =
op330: SchedulerNode(ComputedBuffer)
op330.writes = [MemoryDep('buf330', c0, {c0: 1576}, None)]
op330.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf328', c0, {c0: 605184}, None)]
op330.met_dependencies = [MemoryDep('arg173_1', c1, {c0: 1576, c1: 384}, None)]
op330.outputs = [
    buf330: ComputedBuffer
    buf330.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf330.users = [NodeUser(node=SchedulerNode(name='op359'), can_inplace=False, is_weak=False)]
]
op330.group.device = cuda:0
op330.group.iteration = (1576, 384)
op330.sizes = ([1576], [384])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op330_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf330', get_index_3, getitem_1)
        return store_reduction
op329_op330_op359.snodes[2] =
op359: SchedulerNode(ComputedBuffer)
op359.writes = [MemoryDep('buf359', c0, {c0: 605184}, None)]
op359.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf328', c0, {c0: 605184}, None),
        MemoryDep('buf329', c0, {c0: 1576}, None),
        MemoryDep('buf330', c0, {c0: 1576}, None)]
op359.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg174_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg175_1', c1, {c0: 1576, c1: 384}, None)]
op359.outputs = [
    buf359: ComputedBuffer
    buf359.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf359.users = [NodeUser(node=ExternKernelSchedulerNode(name='op360'), can_inplace=False, is_weak=False)]
]
op359.group.device = cuda:0
op359.group.iteration = (605184, 1)
op359.sizes = ([1576, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf329_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf330_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg174_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg175_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf359_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op359_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf329', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf330', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg174_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg175_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf359', get_index_7, add_3, None)
        return store


op336: ExternKernelSchedulerNode(ExternKernelOut)
op336.writes = [StarDep(name='buf336', mode=None)]
op336.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op336.met_dependencies = [StarDep(name='arg182_1', mode=None)]
op336.outputs = [
    buf336: ExternKernelOut
    buf336.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf336.users = [
        NodeUser(node=SchedulerNode(name='op337'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op338'), can_inplace=False, is_weak=False),
    ]
]
op336.node.kernel = extern_kernels.mm


op337: SchedulerNode(ComputedBuffer)
op337.writes = [MemoryDep('buf337', c0, {c0: 602112}, None)]
op337.unmet_dependencies = [   MemoryDep('buf336', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op337.met_dependencies = []
op337.outputs = [
    buf337: ComputedBuffer
    buf337.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf337.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op337.group.device = cuda:0
op337.group.iteration = (602112, 1)
op337.sizes = ([1568, 4, 16, 6], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf337_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op337_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf337', get_index_1, load, None)
        return store


op338: SchedulerNode(ComputedBuffer)
op338.writes = [MemoryDep('buf338', c0, {c0: 602112}, None)]
op338.unmet_dependencies = [   MemoryDep('buf336', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op338.met_dependencies = []
op338.outputs = [
    buf338: ComputedBuffer
    buf338.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf338.users = [NodeUser(node=ExternKernelSchedulerNode(name='op339'), can_inplace=False, is_weak=False)]
]
op338.group.device = cuda:0
op338.group.iteration = (602112, 1)
op338.sizes = ([1568, 24, 16], [])
buf336_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf338_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op338_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf336', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf338', get_index_1, load, None)
        return store


op339: ExternKernelSchedulerNode(ExternKernelOut)
op339.writes = [StarDep(name='buf339', mode=None)]
op339.unmet_dependencies = [StarDep(name='buf337', mode=None), StarDep(name='buf338', mode=None)]
op339.met_dependencies = []
op339.outputs = [
    buf339: ExternKernelOut
    buf339.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf339.users = [
        NodeUser(node=SchedulerNode(name='op340'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=True, is_weak=False),
    ]
]
op339.node.kernel = extern_kernels.bmm


op340_op341_op343: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op340_op341_op343.writes = 
    [   MemoryDep('buf340', c0, {c0: 100352}, None),
        MemoryDep('buf341', c0, {c0: 100352}, None),
        MemoryDep('buf343', c0, {c0: 1605632}, None)]
op340_op341_op343.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 1605632}, None)]
op340_op341_op343.met_dependencies = []
op340_op341_op343.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op340_op341_op343.snodes[0] =
op340: SchedulerNode(ComputedBuffer)
op340.writes = [MemoryDep('buf340', c0, {c0: 100352}, None)]
op340.unmet_dependencies = [MemoryDep('buf339', c0, {c0: 1605632}, None)]
op340.met_dependencies = []
op340.outputs = [
    buf340: ComputedBuffer
    buf340.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf340.users = [
        NodeUser(node=SchedulerNode(name='op341'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False),
    ]
]
op340.group.device = cuda:0
op340.group.iteration = (100352, 16)
op340.sizes = ([100352], [16])
buf339_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op340_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf340', get_index_1, reduction)
        return store_reduction
op340_op341_op343.snodes[1] =
op341: SchedulerNode(ComputedBuffer)
op341.writes = [MemoryDep('buf341', c0, {c0: 100352}, None)]
op341.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 1605632}, None),
        MemoryDep('buf340', c0, {c0: 100352}, None)]
op341.met_dependencies = []
op341.outputs = [
    buf341: ComputedBuffer
    buf341.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf341.users = [NodeUser(node=SchedulerNode(name='op343'), can_inplace=False, is_weak=False)]
]
op341.group.device = cuda:0
op341.group.iteration = (100352, 16)
op341.sizes = ([100352], [16])
buf339_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf341_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op341_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf341', get_index_2, reduction)
        return store_reduction
op340_op341_op343.snodes[2] =
op343: SchedulerNode(ComputedBuffer)
op343.writes = [MemoryDep('buf343', c0, {c0: 1605632}, None)]
op343.unmet_dependencies = 
    [   MemoryDep('buf339', c0, {c0: 1605632}, None),
        MemoryDep('buf340', c0, {c0: 100352}, None),
        MemoryDep('buf341', c0, {c0: 100352}, None)]
op343.met_dependencies = []
op343.outputs = [
    buf343: ComputedBuffer
    buf343.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf343.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op343.group.device = cuda:0
op343.group.iteration = (1605632, 1)
op343.sizes = ([100352, 16], [])
buf339_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf340_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf341_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf343_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op343_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf339', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf340', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf341', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf343', get_index_3, truediv, None)
        return store


op342: ExternKernelSchedulerNode(ExternKernelOut)
op342.writes = [StarDep(name='buf342', mode=None)]
op342.unmet_dependencies = [StarDep(name='buf335', mode=None)]
op342.met_dependencies = [StarDep(name='arg183_1', mode=None)]
op342.outputs = [
    buf342: ExternKernelOut
    buf342.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf342.users = [NodeUser(node=SchedulerNode(name='op344'), can_inplace=False, is_weak=False)]
]
op342.node.kernel = extern_kernels.mm


op344: SchedulerNode(ComputedBuffer)
op344.writes = [MemoryDep('buf344', c0, {c0: 602112}, None)]
op344.unmet_dependencies = [   MemoryDep('buf342', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op344.met_dependencies = []
op344.outputs = [
    buf344: ComputedBuffer
    buf344.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf344.users = [NodeUser(node=ExternKernelSchedulerNode(name='op345'), can_inplace=False, is_weak=False)]
]
op344.group.device = cuda:0
op344.group.iteration = (602112, 1)
op344.sizes = ([1568, 4, 16, 6], [])
buf342_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf344_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op344_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf342', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf344', get_index_1, load, None)
        return store


op345: ExternKernelSchedulerNode(ExternKernelOut)
op345.writes = [StarDep(name='buf345', mode=None)]
op345.unmet_dependencies = [StarDep(name='buf343', mode=None), StarDep(name='buf344', mode=None)]
op345.met_dependencies = []
op345.outputs = [
    buf345: ExternKernelOut
    buf345.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf345.users = [NodeUser(node=SchedulerNode(name='op346'), can_inplace=False, is_weak=False)]
]
op345.node.kernel = extern_kernels.bmm


op346: SchedulerNode(ComputedBuffer)
op346.writes = [MemoryDep('buf346', c0, {c0: 602112}, None)]
op346.unmet_dependencies = [   MemoryDep('buf345', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op346.met_dependencies = []
op346.outputs = [
    buf346: ComputedBuffer
    buf346.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf346.users = [NodeUser(node=ExternKernelSchedulerNode(name='op347'), can_inplace=False, is_weak=False)]
]
op346.group.device = cuda:0
op346.group.iteration = (602112, 1)
op346.sizes = ([1568, 16, 4, 6], [])
buf345_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf346_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op346_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf345', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf346', get_index_1, load, None)
        return store


op347: ExternKernelSchedulerNode(ExternKernelOut)
op347.writes = [StarDep(name='buf347', mode=None)]
op347.unmet_dependencies = [StarDep(name='buf346', mode=None)]
op347.met_dependencies = [StarDep(name='arg184_1', mode=None)]
op347.outputs = [
    buf347: ExternKernelOut
    buf347.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf347.users = [NodeUser(node=SchedulerNode(name='op348'), can_inplace=True, is_weak=False)]
]
op347.node.kernel = extern_kernels.mm


op348_op349_op350_op352: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op348_op349_op350_op352.writes = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf349', c0, {c0: 25088}, None),
        MemoryDep('buf350', c0, {c0: 25088}, None),
        MemoryDep('buf352', c0, {c0: 602112}, None)]
op348_op349_op350_op352.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None),
        MemoryDep('buf347', c0, {c0: 602112}, None)]
op348_op349_op350_op352.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg185_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg186_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg187_1', c1, {c0: 25088, c1: 24}, None)]
op348_op349_op350_op352.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf350.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op348_op349_op350_op352.snodes[0] =
op348: SchedulerNode(ComputedBuffer)
op348.writes = [MemoryDep('buf348', c0, {c0: 602112}, None)]
op348.unmet_dependencies = 
    [   MemoryDep('buf295', c0, {c0: 602112}, None),
        MemoryDep('buf302', c0, {c0: 602112}, None),
        MemoryDep('buf347', c0, {c0: 602112}, None)]
op348.met_dependencies = 
    [   MemoryDep('arg163_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg185_1', c1, {c0: 25088, c1: 24}, None)]
op348.outputs = [
    buf348: ComputedBuffer
    buf348.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf348.users = [
        NodeUser(node=SchedulerNode(name='op349'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op350'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op351'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op352'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
]
op348.group.device = cuda:0
op348.group.iteration = (602112, 1)
op348.sizes = ([25088, 24], [])
buf295_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf302_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg163_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf347_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg185_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op348_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf295', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf302', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg163_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf347', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg185_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf348', get_index_5, add_3, None)
        return store
op348_op349_op350_op352.snodes[1] =
op349: SchedulerNode(ComputedBuffer)
op349.writes = [MemoryDep('buf349', c0, {c0: 25088}, None)]
op349.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 602112}, None)]
op349.met_dependencies = []
op349.outputs = [
    buf349: ComputedBuffer
    buf349.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf349.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op349.group.device = cuda:0
op349.group.iteration = (25088, 24)
op349.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op349_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf349', get_index_1, getitem)
        return store_reduction
op348_op349_op350_op352.snodes[2] =
op350: SchedulerNode(ComputedBuffer)
op350.writes = [MemoryDep('buf350', c0, {c0: 25088}, None)]
op350.unmet_dependencies = [MemoryDep('buf348', c0, {c0: 602112}, None)]
op350.met_dependencies = []
op350.outputs = [
    buf350: ComputedBuffer
    buf350.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf350.users = [NodeUser(node=SchedulerNode(name='op352'), can_inplace=False, is_weak=False)]
]
op350.group.device = cuda:0
op350.group.iteration = (25088, 24)
op350.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf350_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op350_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf350', get_index_1, getitem_1)
        return store_reduction
op348_op349_op350_op352.snodes[3] =
op352: SchedulerNode(ComputedBuffer)
op352.writes = [MemoryDep('buf352', c0, {c0: 602112}, None)]
op352.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf349', c0, {c0: 25088}, None),
        MemoryDep('buf350', c0, {c0: 25088}, None)]
op352.met_dependencies = 
    [   MemoryDep('arg186_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg187_1', c1, {c0: 25088, c1: 24}, None)]
op352.outputs = [
    buf352: ComputedBuffer
    buf352.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf352.users = [NodeUser(node=ExternKernelSchedulerNode(name='op353'), can_inplace=False, is_weak=False)]
]
op352.group.device = cuda:0
op352.group.iteration = (602112, 1)
op352.sizes = ([25088, 24], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf349_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf350_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg186_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg187_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf352_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op352_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf349', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf350', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg186_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg187_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf352', get_index_5, add_1, None)
        return store


op353: ExternKernelSchedulerNode(ExternKernelOut)
op353.writes = [StarDep(name='buf353', mode=None)]
op353.unmet_dependencies = [StarDep(name='buf352', mode=None)]
op353.met_dependencies = [StarDep(name='arg188_1', mode=None)]
op353.outputs = [
    buf353: ExternKernelOut
    buf353.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf353.users = [NodeUser(node=SchedulerNode(name='op354'), can_inplace=True, is_weak=False)]
]
op353.node.kernel = extern_kernels.mm


op354: SchedulerNode(ComputedBuffer)
op354.writes = [MemoryDep('buf354', c0, {c0: 2408448}, None)]
op354.unmet_dependencies = [MemoryDep('buf353', c0, {c0: 2408448}, None)]
op354.met_dependencies = [MemoryDep('arg189_1', c1, {c0: 25088, c1: 96}, None)]
op354.outputs = [
    buf354: ComputedBuffer
    buf354.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf354.users = [NodeUser(node=ExternKernelSchedulerNode(name='op355'), can_inplace=False, is_weak=False)]
]
op354.group.device = cuda:0
op354.group.iteration = (2408448, 1)
op354.sizes = ([25088, 96], [])
buf353_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg189_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf354_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op354_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf353', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg189_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf353', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg189_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf354', get_index_4, mul_2, None)
        return store


op355: ExternKernelSchedulerNode(ExternKernelOut)
op355.writes = [StarDep(name='buf355', mode=None)]
op355.unmet_dependencies = [StarDep(name='buf354', mode=None)]
op355.met_dependencies = [StarDep(name='arg190_1', mode=None)]
op355.outputs = [
    buf355: ExternKernelOut
    buf355.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf355.users = [
        NodeUser(node=SchedulerNode(name='op356'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op357'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op358'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op364'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op387'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op388'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op389'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op390'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False),
    ]
]
op355.node.kernel = extern_kernels.mm


op356_op357_op387_op388_op364_op390: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op356_op357_op387_op388_op364_op390.writes = 
    [   MemoryDep('buf356', c0, {c0: 25088}, None),
        MemoryDep('buf357', c0, {c0: 25088}, None),
        MemoryDep('buf364', c0, {c0: 602112}, None),
        MemoryDep('buf387', c0, {c0: 25088}, None),
        MemoryDep('buf388', c0, {c0: 25088}, None),
        MemoryDep('buf390', c0, {c0: 602112}, None)]
op356_op357_op387_op388_op364_op390.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None)]
op356_op357_op387_op388_op364_op390.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg192_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg193_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg208_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg209_1', c1, {c0: 25088, c1: 24}, None)]
op356_op357_op387_op388_op364_op390.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf356.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf357.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf387.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf388.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf390.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op356_op357_op387_op388_op364_op390.snodes[0] =
op356: SchedulerNode(ComputedBuffer)
op356.writes = [MemoryDep('buf356', c0, {c0: 25088}, None)]
op356.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None)]
op356.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None)]
op356.outputs = [
    buf356: ComputedBuffer
    buf356.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf356.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op356.group.device = cuda:0
op356.group.iteration = (25088, 24)
op356.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op356_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf356', get_index_3, getitem)
        return store_reduction
op356_op357_op387_op388_op364_op390.snodes[1] =
op357: SchedulerNode(ComputedBuffer)
op357.writes = [MemoryDep('buf357', c0, {c0: 25088}, None)]
op357.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None)]
op357.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None)]
op357.outputs = [
    buf357: ComputedBuffer
    buf357.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf357.users = [NodeUser(node=SchedulerNode(name='op364'), can_inplace=False, is_weak=False)]
]
op357.group.device = cuda:0
op357.group.iteration = (25088, 24)
op357.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op357_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf357', get_index_3, getitem_1)
        return store_reduction
op356_op357_op387_op388_op364_op390.snodes[2] =
op387: SchedulerNode(ComputedBuffer)
op387.writes = [MemoryDep('buf387', c0, {c0: 25088}, None)]
op387.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None)]
op387.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None)]
op387.outputs = [
    buf387: ComputedBuffer
    buf387.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf387.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op387.group.device = cuda:0
op387.group.iteration = (25088, 24)
op387.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op387_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf387', get_index_3, getitem)
        return store_reduction
op356_op357_op387_op388_op364_op390.snodes[3] =
op388: SchedulerNode(ComputedBuffer)
op388.writes = [MemoryDep('buf388', c0, {c0: 25088}, None)]
op388.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None)]
op388.met_dependencies = [MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None)]
op388.outputs = [
    buf388: ComputedBuffer
    buf388.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf388.users = [NodeUser(node=SchedulerNode(name='op390'), can_inplace=False, is_weak=False)]
]
op388.group.device = cuda:0
op388.group.iteration = (25088, 24)
op388.sizes = ([25088], [24])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf388_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op388_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf388', get_index_3, getitem_1)
        return store_reduction
op356_op357_op387_op388_op364_op390.snodes[4] =
op364: SchedulerNode(ComputedBuffer)
op364.writes = [MemoryDep('buf364', c0, {c0: 602112}, None)]
op364.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None),
        MemoryDep('buf356', c0, {c0: 25088}, None),
        MemoryDep('buf357', c0, {c0: 25088}, None)]
op364.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg192_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg193_1', c1, {c0: 25088, c1: 24}, None)]
op364.outputs = [
    buf364: ComputedBuffer
    buf364.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf364.users = [NodeUser(node=ExternKernelSchedulerNode(name='op365'), can_inplace=False, is_weak=False)]
]
op364.group.device = cuda:0
op364.group.iteration = (602112, 1)
op364.sizes = ([25088, 24], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf356_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf357_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg192_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg193_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf364_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op364_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf356', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf357', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg192_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg193_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf364', get_index_7, add_3, None)
        return store
op356_op357_op387_op388_op364_op390.snodes[5] =
op390: SchedulerNode(ComputedBuffer)
op390.writes = [MemoryDep('buf390', c0, {c0: 602112}, None)]
op390.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None),
        MemoryDep('buf387', c0, {c0: 25088}, None),
        MemoryDep('buf388', c0, {c0: 25088}, None)]
op390.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg208_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg209_1', c1, {c0: 25088, c1: 24}, None)]
op390.outputs = [
    buf390: ComputedBuffer
    buf390.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf390.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op391'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op397'), can_inplace=False, is_weak=False),
    ]
]
op390.group.device = cuda:0
op390.group.iteration = (602112, 1)
op390.sizes = ([25088, 24], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf387_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf388_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg208_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg209_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf390_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op390_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf387', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf388', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg208_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg209_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf390', get_index_7, add_3, None)
        return store


op360: ExternKernelSchedulerNode(ExternKernelOut)
op360.writes = [StarDep(name='buf360', mode=None)]
op360.unmet_dependencies = [StarDep(name='buf359', mode=None)]
op360.met_dependencies = [StarDep(name='arg176_1', mode=None)]
op360.outputs = [
    buf360: ExternKernelOut
    buf360.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf360.users = [NodeUser(node=SchedulerNode(name='op361'), can_inplace=True, is_weak=False)]
]
op360.node.kernel = extern_kernels.mm


op361: SchedulerNode(ComputedBuffer)
op361.writes = [MemoryDep('buf361', c0, {c0: 2420736}, None)]
op361.unmet_dependencies = [MemoryDep('buf360', c0, {c0: 2420736}, None)]
op361.met_dependencies = [MemoryDep('arg177_1', c1, {c0: 1576, c1: 1536}, None)]
op361.outputs = [
    buf361: ComputedBuffer
    buf361.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf361.users = [NodeUser(node=ExternKernelSchedulerNode(name='op362'), can_inplace=False, is_weak=False)]
]
op361.group.device = cuda:0
op361.group.iteration = (2420736, 1)
op361.sizes = ([1576, 1536], [])
buf360_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg177_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf361_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op361_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf360', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg177_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf360', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg177_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf361', get_index_4, mul_2, None)
        return store


op362: ExternKernelSchedulerNode(ExternKernelOut)
op362.writes = [StarDep(name='buf362', mode=None)]
op362.unmet_dependencies = [StarDep(name='buf361', mode=None)]
op362.met_dependencies = [StarDep(name='arg178_1', mode=None)]
op362.outputs = [
    buf362: ExternKernelOut
    buf362.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf362.users = [NodeUser(node=SchedulerNode(name='op363'), can_inplace=True, is_weak=False)]
]
op362.node.kernel = extern_kernels.mm


op363: SchedulerNode(ComputedBuffer)
op363.writes = [MemoryDep('buf363', c0, {c0: 605184}, None)]
op363.unmet_dependencies = 
    [   MemoryDep('buf312', c0, {c0: 605184}, None),
        MemoryDep('buf328', c0, {c0: 605184}, None),
        MemoryDep('buf362', c0, {c0: 605184}, None)]
op363.met_dependencies = 
    [   MemoryDep('arg173_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg179_1', c1, {c0: 1576, c1: 384}, None)]
op363.outputs = [
    buf363: ComputedBuffer
    buf363.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf363.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
    ]
]
op363.group.device = cuda:0
op363.group.iteration = (605184, 1)
op363.sizes = ([1576, 384], [])
buf312_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf328_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg173_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf362_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg179_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op363_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf312', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf328', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg173_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf362', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg179_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf363', get_index_5, add_3, None)
        return store


op365: ExternKernelSchedulerNode(ExternKernelOut)
op365.writes = [StarDep(name='buf365', mode=None)]
op365.unmet_dependencies = [StarDep(name='buf364', mode=None)]
op365.met_dependencies = [StarDep(name='arg194_1', mode=None)]
op365.outputs = [
    buf365: ExternKernelOut
    buf365.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf365.users = [
        NodeUser(node=SchedulerNode(name='op366'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op367'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op368'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op383'), can_inplace=False, is_weak=False),
    ]
]
op365.node.kernel = extern_kernels.mm


op366_op367_op369_op370: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op366_op367_op369_op370.writes = 
    [   MemoryDep('buf366', c0, {c0: 1576}, None),
        MemoryDep('buf367', c0, {c0: 1576}, None),
        MemoryDep('buf369', c0, {c0: 605184}, None),
        MemoryDep('buf370', c0, {c0: 605184}, None)]
op366_op367_op369_op370.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op366_op367_op369_op370.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg197_1', c1, {c0: 1576, c1: 384}, None)]
op366_op367_op369_op370.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf366.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf367.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf370.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op366_op367_op369_op370.snodes[0] =
op366: SchedulerNode(ComputedBuffer)
op366.writes = [MemoryDep('buf366', c0, {c0: 1576}, None)]
op366.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op366.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None)]
op366.outputs = [
    buf366: ComputedBuffer
    buf366.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf366.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op366.group.device = cuda:0
op366.group.iteration = (1576, 384)
op366.sizes = ([8, 197], [384])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op366_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf366', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf363', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op366_op367_op369_op370.snodes[1] =
op367: SchedulerNode(ComputedBuffer)
op367.writes = [MemoryDep('buf367', c0, {c0: 1576}, None)]
op367.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op367.met_dependencies = [MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None)]
op367.outputs = [
    buf367: ComputedBuffer
    buf367.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf367.users = [NodeUser(node=SchedulerNode(name='op369'), can_inplace=False, is_weak=False)]
]
op367.group.device = cuda:0
op367.group.iteration = (1576, 384)
op367.sizes = ([8, 197], [384])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op367_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf367', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf363', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op366_op367_op369_op370.snodes[2] =
op369: SchedulerNode(ComputedBuffer)
op369.writes = [MemoryDep('buf369', c0, {c0: 605184}, None)]
op369.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf366', c0, {c0: 1576}, None),
        MemoryDep('buf367', c0, {c0: 1576}, None)]
op369.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg196_1', c1, {c0: 1576, c1: 384}, None)]
op369.outputs = [
    buf369: ComputedBuffer
    buf369.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf369.users = [NodeUser(node=SchedulerNode(name='op370'), can_inplace=True, is_weak=False)]
]
op369.group.device = cuda:0
op369.group.iteration = (605184, 1)
op369.sizes = ([8, 197, 384], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf366_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf367_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg196_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op369_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf366', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf367', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg196_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf369', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf363', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op366_op367_op369_op370.snodes[3] =
op370: SchedulerNode(ComputedBuffer)
op370.writes = [MemoryDep('buf370', c0, {c0: 605184}, None)]
op370.unmet_dependencies = [MemoryDep('buf369', c0, {c0: 605184}, None)]
op370.met_dependencies = [MemoryDep('arg197_1', c1, {c0: 1576, c1: 384}, None)]
op370.outputs = [
    buf370: ComputedBuffer
    buf370.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf370.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op371'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op377'), can_inplace=False, is_weak=False),
    ]
]
op370.group.device = cuda:0
op370.group.iteration = (605184, 1)
op370.sizes = ([1576, 384], [])
buf369_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg197_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf370_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op370_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf369', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg197_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf370', get_index_2, add, None)
        return store


op371: ExternKernelSchedulerNode(ExternKernelOut)
op371.writes = [StarDep(name='buf371', mode=None)]
op371.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op371.met_dependencies = [StarDep(name='arg198_1', mode=None)]
op371.outputs = [
    buf371: ExternKernelOut
    buf371.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf371.users = [
        NodeUser(node=SchedulerNode(name='op372'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op373'), can_inplace=False, is_weak=False),
    ]
]
op371.node.kernel = extern_kernels.mm


op372: SchedulerNode(ComputedBuffer)
op372.writes = [MemoryDep('buf372', c0, {c0: 605184}, None)]
op372.unmet_dependencies = [   MemoryDep('buf371', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op372.met_dependencies = []
op372.outputs = [
    buf372: ComputedBuffer
    buf372.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf372.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op372.group.device = cuda:0
op372.group.iteration = (605184, 1)
op372.sizes = ([8, 6, 197, 64], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf372_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op372_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf372', get_index_1, load, None)
        return store


op373: SchedulerNode(ComputedBuffer)
op373.writes = [MemoryDep('buf373', c0, {c0: 605184}, None)]
op373.unmet_dependencies = [   MemoryDep('buf371', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op373.met_dependencies = []
op373.outputs = [
    buf373: ComputedBuffer
    buf373.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf373.users = [NodeUser(node=ExternKernelSchedulerNode(name='op374'), can_inplace=False, is_weak=False)]
]
op373.group.device = cuda:0
op373.group.iteration = (605184, 1)
op373.sizes = ([8, 384, 197], [])
buf371_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf373_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op373_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf371', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf373', get_index_1, load, None)
        return store


op374: ExternKernelSchedulerNode(ExternKernelOut)
op374.writes = [StarDep(name='buf374', mode=None)]
op374.unmet_dependencies = [StarDep(name='buf372', mode=None), StarDep(name='buf373', mode=None)]
op374.met_dependencies = []
op374.outputs = [
    buf374: ExternKernelOut
    buf374.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf374.users = [
        NodeUser(node=SchedulerNode(name='op375'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op374.node.kernel = extern_kernels.bmm


op375_op376_op378: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op375_op376_op378.writes = 
    [   MemoryDep('buf375', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf376', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf378', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op375_op376_op378.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 1862832}, None)]
op375_op376_op378.met_dependencies = []
op375_op376_op378.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf376.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op375_op376_op378.snodes[0] =
op375: SchedulerNode(ComputedBuffer)
op375.writes = [MemoryDep('buf375', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op375.unmet_dependencies = [MemoryDep('buf374', c0, {c0: 1862832}, None)]
op375.met_dependencies = []
op375.outputs = [
    buf375: ComputedBuffer
    buf375.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf375.users = [
        NodeUser(node=SchedulerNode(name='op376'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False),
    ]
]
op375.group.device = cuda:0
op375.group.iteration = (9456, 197)
op375.sizes = ([8, 1182], [197])
buf374_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op375_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf375', get_index_1, reduction)
        return store_reduction
op375_op376_op378.snodes[1] =
op376: SchedulerNode(ComputedBuffer)
op376.writes = [MemoryDep('buf376', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op376.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 1862832}, None),
        MemoryDep('buf375', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op376.met_dependencies = []
op376.outputs = [
    buf376: ComputedBuffer
    buf376.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf376.users = [NodeUser(node=SchedulerNode(name='op378'), can_inplace=False, is_weak=False)]
]
op376.group.device = cuda:0
op376.group.iteration = (9456, 197)
op376.sizes = ([8, 1182], [197])
buf374_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op376_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf375', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf376', get_index_2, reduction)
        return store_reduction
op375_op376_op378.snodes[2] =
op378: SchedulerNode(ComputedBuffer)
op378.writes = [MemoryDep('buf378', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op378.unmet_dependencies = 
    [   MemoryDep('buf374', c0, {c0: 1862832}, None),
        MemoryDep('buf375', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf376', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op378.met_dependencies = []
op378.outputs = [
    buf378: ComputedBuffer
    buf378.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf378.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op378.group.device = cuda:0
op378.group.iteration = (1862832, 1)
op378.sizes = ([8, 6, 197, 197], [])
buf374_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf375_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf376_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf378_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op378_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf374', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf375', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf376', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf378', get_index_3, truediv, None)
        return store


op377: ExternKernelSchedulerNode(ExternKernelOut)
op377.writes = [StarDep(name='buf377', mode=None)]
op377.unmet_dependencies = [StarDep(name='buf370', mode=None)]
op377.met_dependencies = [StarDep(name='arg199_1', mode=None)]
op377.outputs = [
    buf377: ExternKernelOut
    buf377.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf377.users = [NodeUser(node=SchedulerNode(name='op379'), can_inplace=False, is_weak=False)]
]
op377.node.kernel = extern_kernels.mm


op379: SchedulerNode(ComputedBuffer)
op379.writes = [MemoryDep('buf379', c0, {c0: 605184}, None)]
op379.unmet_dependencies = [   MemoryDep('buf377', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op379.met_dependencies = []
op379.outputs = [
    buf379: ComputedBuffer
    buf379.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf379.users = [NodeUser(node=ExternKernelSchedulerNode(name='op380'), can_inplace=False, is_weak=False)]
]
op379.group.device = cuda:0
op379.group.iteration = (605184, 1)
op379.sizes = ([8, 6, 197, 64], [])
buf377_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf379_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op379_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf377', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf379', get_index_1, load, None)
        return store


op380: ExternKernelSchedulerNode(ExternKernelOut)
op380.writes = [StarDep(name='buf380', mode=None)]
op380.unmet_dependencies = [StarDep(name='buf378', mode=None), StarDep(name='buf379', mode=None)]
op380.met_dependencies = []
op380.outputs = [
    buf380: ExternKernelOut
    buf380.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf380.users = [NodeUser(node=SchedulerNode(name='op381'), can_inplace=False, is_weak=False)]
]
op380.node.kernel = extern_kernels.bmm


op381: SchedulerNode(ComputedBuffer)
op381.writes = [MemoryDep('buf381', c0, {c0: 605184}, None)]
op381.unmet_dependencies = [   MemoryDep('buf380', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op381.met_dependencies = []
op381.outputs = [
    buf381: ComputedBuffer
    buf381.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf381.users = [NodeUser(node=ExternKernelSchedulerNode(name='op382'), can_inplace=False, is_weak=False)]
]
op381.group.device = cuda:0
op381.group.iteration = (605184, 1)
op381.sizes = ([8, 197, 6, 64], [])
buf380_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf381_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op381_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf380', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf381', get_index_1, load, None)
        return store


op382: ExternKernelSchedulerNode(ExternKernelOut)
op382.writes = [StarDep(name='buf382', mode=None)]
op382.unmet_dependencies = [StarDep(name='buf381', mode=None)]
op382.met_dependencies = [StarDep(name='arg200_1', mode=None)]
op382.outputs = [
    buf382: ExternKernelOut
    buf382.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf382.users = [NodeUser(node=SchedulerNode(name='op383'), can_inplace=True, is_weak=False)]
]
op382.node.kernel = extern_kernels.mm


op383_op384_op385_op414: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op383_op384_op385_op414.writes = 
    [   MemoryDep('buf383', c0, {c0: 605184}, None),
        MemoryDep('buf384', c0, {c0: 1576}, None),
        MemoryDep('buf385', c0, {c0: 1576}, None),
        MemoryDep('buf414', c0, {c0: 605184}, None)]
op383_op384_op385_op414.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf382', c0, {c0: 605184}, None)]
op383_op384_op385_op414.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg201_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg202_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg203_1', c1, {c0: 1576, c1: 384}, None)]
op383_op384_op385_op414.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf384.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf385.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op383_op384_op385_op414.snodes[0] =
op383: SchedulerNode(ComputedBuffer)
op383.writes = [MemoryDep('buf383', c0, {c0: 605184}, None)]
op383.unmet_dependencies = 
    [   MemoryDep('buf363', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf363', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf365', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf382', c0, {c0: 605184}, None)]
op383.met_dependencies = 
    [   MemoryDep('arg195_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg201_1', c1, {c0: 1576, c1: 384}, None)]
op383.outputs = [
    buf383: ComputedBuffer
    buf383.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf383.users = [
        NodeUser(node=SchedulerNode(name='op384'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op385'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op386'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op414'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False),
    ]
]
op383.group.device = cuda:0
op383.group.iteration = (605184, 1)
op383.sizes = ([8, 197, 384], [])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf363_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf365_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg195_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf382_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg201_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op383_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf382', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg201_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf383', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf363', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf363', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf365', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg195_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op383_op384_op385_op414.snodes[1] =
op384: SchedulerNode(ComputedBuffer)
op384.writes = [MemoryDep('buf384', c0, {c0: 1576}, None)]
op384.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 605184}, None)]
op384.met_dependencies = []
op384.outputs = [
    buf384: ComputedBuffer
    buf384.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf384.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op384.group.device = cuda:0
op384.group.iteration = (1576, 384)
op384.sizes = ([1576], [384])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op384_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf384', get_index_1, getitem)
        return store_reduction
op383_op384_op385_op414.snodes[2] =
op385: SchedulerNode(ComputedBuffer)
op385.writes = [MemoryDep('buf385', c0, {c0: 1576}, None)]
op385.unmet_dependencies = [MemoryDep('buf383', c0, {c0: 605184}, None)]
op385.met_dependencies = []
op385.outputs = [
    buf385: ComputedBuffer
    buf385.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf385.users = [NodeUser(node=SchedulerNode(name='op414'), can_inplace=False, is_weak=False)]
]
op385.group.device = cuda:0
op385.group.iteration = (1576, 384)
op385.sizes = ([1576], [384])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op385_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf385', get_index_1, getitem_1)
        return store_reduction
op383_op384_op385_op414.snodes[3] =
op414: SchedulerNode(ComputedBuffer)
op414.writes = [MemoryDep('buf414', c0, {c0: 605184}, None)]
op414.unmet_dependencies = 
    [   MemoryDep('buf383', c0, {c0: 605184}, None),
        MemoryDep('buf384', c0, {c0: 1576}, None),
        MemoryDep('buf385', c0, {c0: 1576}, None)]
op414.met_dependencies = 
    [   MemoryDep('arg202_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg203_1', c1, {c0: 1576, c1: 384}, None)]
op414.outputs = [
    buf414: ComputedBuffer
    buf414.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf414.users = [NodeUser(node=ExternKernelSchedulerNode(name='op415'), can_inplace=False, is_weak=False)]
]
op414.group.device = cuda:0
op414.group.iteration = (605184, 1)
op414.sizes = ([1576, 384], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf384_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf385_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg202_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg203_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf414_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op414_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf384', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf385', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg202_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg203_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf414', get_index_5, add_1, None)
        return store


op391: ExternKernelSchedulerNode(ExternKernelOut)
op391.writes = [StarDep(name='buf391', mode=None)]
op391.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op391.met_dependencies = [StarDep(name='arg210_1', mode=None)]
op391.outputs = [
    buf391: ExternKernelOut
    buf391.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf391.users = [
        NodeUser(node=SchedulerNode(name='op392'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op393'), can_inplace=False, is_weak=False),
    ]
]
op391.node.kernel = extern_kernels.mm


op392: SchedulerNode(ComputedBuffer)
op392.writes = [MemoryDep('buf392', c0, {c0: 602112}, None)]
op392.unmet_dependencies = [   MemoryDep('buf391', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op392.met_dependencies = []
op392.outputs = [
    buf392: ComputedBuffer
    buf392.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf392.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op392.group.device = cuda:0
op392.group.iteration = (602112, 1)
op392.sizes = ([1568, 4, 16, 6], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf392_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op392_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf392', get_index_1, load, None)
        return store


op393: SchedulerNode(ComputedBuffer)
op393.writes = [MemoryDep('buf393', c0, {c0: 602112}, None)]
op393.unmet_dependencies = [   MemoryDep('buf391', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op393.met_dependencies = []
op393.outputs = [
    buf393: ComputedBuffer
    buf393.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf393.users = [NodeUser(node=ExternKernelSchedulerNode(name='op394'), can_inplace=False, is_weak=False)]
]
op393.group.device = cuda:0
op393.group.iteration = (602112, 1)
op393.sizes = ([1568, 24, 16], [])
buf391_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf393_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op393_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf391', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf393', get_index_1, load, None)
        return store


op394: ExternKernelSchedulerNode(ExternKernelOut)
op394.writes = [StarDep(name='buf394', mode=None)]
op394.unmet_dependencies = [StarDep(name='buf392', mode=None), StarDep(name='buf393', mode=None)]
op394.met_dependencies = []
op394.outputs = [
    buf394: ExternKernelOut
    buf394.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf394.users = [
        NodeUser(node=SchedulerNode(name='op395'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=True, is_weak=False),
    ]
]
op394.node.kernel = extern_kernels.bmm


op395_op396_op398: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op395_op396_op398.writes = 
    [   MemoryDep('buf395', c0, {c0: 100352}, None),
        MemoryDep('buf396', c0, {c0: 100352}, None),
        MemoryDep('buf398', c0, {c0: 1605632}, None)]
op395_op396_op398.unmet_dependencies = [MemoryDep('buf394', c0, {c0: 1605632}, None)]
op395_op396_op398.met_dependencies = []
op395_op396_op398.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf396.users = [NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op395_op396_op398.snodes[0] =
op395: SchedulerNode(ComputedBuffer)
op395.writes = [MemoryDep('buf395', c0, {c0: 100352}, None)]
op395.unmet_dependencies = [MemoryDep('buf394', c0, {c0: 1605632}, None)]
op395.met_dependencies = []
op395.outputs = [
    buf395: ComputedBuffer
    buf395.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf395.users = [
        NodeUser(node=SchedulerNode(name='op396'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False),
    ]
]
op395.group.device = cuda:0
op395.group.iteration = (100352, 16)
op395.sizes = ([100352], [16])
buf394_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op395_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf395', get_index_1, reduction)
        return store_reduction
op395_op396_op398.snodes[1] =
op396: SchedulerNode(ComputedBuffer)
op396.writes = [MemoryDep('buf396', c0, {c0: 100352}, None)]
op396.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 1605632}, None),
        MemoryDep('buf395', c0, {c0: 100352}, None)]
op396.met_dependencies = []
op396.outputs = [
    buf396: ComputedBuffer
    buf396.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf396.users = [NodeUser(node=SchedulerNode(name='op398'), can_inplace=False, is_weak=False)]
]
op396.group.device = cuda:0
op396.group.iteration = (100352, 16)
op396.sizes = ([100352], [16])
buf394_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op396_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf395', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf396', get_index_2, reduction)
        return store_reduction
op395_op396_op398.snodes[2] =
op398: SchedulerNode(ComputedBuffer)
op398.writes = [MemoryDep('buf398', c0, {c0: 1605632}, None)]
op398.unmet_dependencies = 
    [   MemoryDep('buf394', c0, {c0: 1605632}, None),
        MemoryDep('buf395', c0, {c0: 100352}, None),
        MemoryDep('buf396', c0, {c0: 100352}, None)]
op398.met_dependencies = []
op398.outputs = [
    buf398: ComputedBuffer
    buf398.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf398.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op398.group.device = cuda:0
op398.group.iteration = (1605632, 1)
op398.sizes = ([100352, 16], [])
buf394_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf395_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf396_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf398_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op398_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf394', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf395', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf396', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf398', get_index_3, truediv, None)
        return store


op397: ExternKernelSchedulerNode(ExternKernelOut)
op397.writes = [StarDep(name='buf397', mode=None)]
op397.unmet_dependencies = [StarDep(name='buf390', mode=None)]
op397.met_dependencies = [StarDep(name='arg211_1', mode=None)]
op397.outputs = [
    buf397: ExternKernelOut
    buf397.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf397.users = [NodeUser(node=SchedulerNode(name='op399'), can_inplace=False, is_weak=False)]
]
op397.node.kernel = extern_kernels.mm


op399: SchedulerNode(ComputedBuffer)
op399.writes = [MemoryDep('buf399', c0, {c0: 602112}, None)]
op399.unmet_dependencies = [   MemoryDep('buf397', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op399.met_dependencies = []
op399.outputs = [
    buf399: ComputedBuffer
    buf399.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf399.users = [NodeUser(node=ExternKernelSchedulerNode(name='op400'), can_inplace=False, is_weak=False)]
]
op399.group.device = cuda:0
op399.group.iteration = (602112, 1)
op399.sizes = ([1568, 4, 16, 6], [])
buf397_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf399_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op399_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf397', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf399', get_index_1, load, None)
        return store


op400: ExternKernelSchedulerNode(ExternKernelOut)
op400.writes = [StarDep(name='buf400', mode=None)]
op400.unmet_dependencies = [StarDep(name='buf398', mode=None), StarDep(name='buf399', mode=None)]
op400.met_dependencies = []
op400.outputs = [
    buf400: ExternKernelOut
    buf400.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf400.users = [NodeUser(node=SchedulerNode(name='op401'), can_inplace=False, is_weak=False)]
]
op400.node.kernel = extern_kernels.bmm


op401: SchedulerNode(ComputedBuffer)
op401.writes = [MemoryDep('buf401', c0, {c0: 602112}, None)]
op401.unmet_dependencies = [   MemoryDep('buf400', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op401.met_dependencies = []
op401.outputs = [
    buf401: ComputedBuffer
    buf401.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf401.users = [NodeUser(node=ExternKernelSchedulerNode(name='op402'), can_inplace=False, is_weak=False)]
]
op401.group.device = cuda:0
op401.group.iteration = (602112, 1)
op401.sizes = ([1568, 16, 4, 6], [])
buf400_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf401_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op401_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf400', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf401', get_index_1, load, None)
        return store


op402: ExternKernelSchedulerNode(ExternKernelOut)
op402.writes = [StarDep(name='buf402', mode=None)]
op402.unmet_dependencies = [StarDep(name='buf401', mode=None)]
op402.met_dependencies = [StarDep(name='arg212_1', mode=None)]
op402.outputs = [
    buf402: ExternKernelOut
    buf402.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf402.users = [NodeUser(node=SchedulerNode(name='op403'), can_inplace=True, is_weak=False)]
]
op402.node.kernel = extern_kernels.mm


op403_op404_op405_op407: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op403_op404_op405_op407.writes = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf404', c0, {c0: 25088}, None),
        MemoryDep('buf405', c0, {c0: 25088}, None),
        MemoryDep('buf407', c0, {c0: 602112}, None)]
op403_op404_op405_op407.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None),
        MemoryDep('buf402', c0, {c0: 602112}, None)]
op403_op404_op405_op407.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg213_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg214_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg215_1', c1, {c0: 25088, c1: 24}, None)]
op403_op404_op405_op407.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf403.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False),
    ]
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf404.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf405.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op403_op404_op405_op407.snodes[0] =
op403: SchedulerNode(ComputedBuffer)
op403.writes = [MemoryDep('buf403', c0, {c0: 602112}, None)]
op403.unmet_dependencies = 
    [   MemoryDep('buf348', c0, {c0: 602112}, None),
        MemoryDep('buf355', c0, {c0: 602112}, None),
        MemoryDep('buf402', c0, {c0: 602112}, None)]
op403.met_dependencies = 
    [   MemoryDep('arg191_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg213_1', c1, {c0: 25088, c1: 24}, None)]
op403.outputs = [
    buf403: ComputedBuffer
    buf403.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf403.users = [
        NodeUser(node=SchedulerNode(name='op404'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op405'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op406'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op407'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False),
    ]
]
op403.group.device = cuda:0
op403.group.iteration = (602112, 1)
op403.sizes = ([25088, 24], [])
buf348_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf355_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg191_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf402_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg213_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op403_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf348', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf355', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg191_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf402', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg213_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf403', get_index_5, add_3, None)
        return store
op403_op404_op405_op407.snodes[1] =
op404: SchedulerNode(ComputedBuffer)
op404.writes = [MemoryDep('buf404', c0, {c0: 25088}, None)]
op404.unmet_dependencies = [MemoryDep('buf403', c0, {c0: 602112}, None)]
op404.met_dependencies = []
op404.outputs = [
    buf404: ComputedBuffer
    buf404.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf404.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op404.group.device = cuda:0
op404.group.iteration = (25088, 24)
op404.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op404_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf404', get_index_1, getitem)
        return store_reduction
op403_op404_op405_op407.snodes[2] =
op405: SchedulerNode(ComputedBuffer)
op405.writes = [MemoryDep('buf405', c0, {c0: 25088}, None)]
op405.unmet_dependencies = [MemoryDep('buf403', c0, {c0: 602112}, None)]
op405.met_dependencies = []
op405.outputs = [
    buf405: ComputedBuffer
    buf405.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf405.users = [NodeUser(node=SchedulerNode(name='op407'), can_inplace=False, is_weak=False)]
]
op405.group.device = cuda:0
op405.group.iteration = (25088, 24)
op405.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf405_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op405_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf405', get_index_1, getitem_1)
        return store_reduction
op403_op404_op405_op407.snodes[3] =
op407: SchedulerNode(ComputedBuffer)
op407.writes = [MemoryDep('buf407', c0, {c0: 602112}, None)]
op407.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf404', c0, {c0: 25088}, None),
        MemoryDep('buf405', c0, {c0: 25088}, None)]
op407.met_dependencies = 
    [   MemoryDep('arg214_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg215_1', c1, {c0: 25088, c1: 24}, None)]
op407.outputs = [
    buf407: ComputedBuffer
    buf407.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf407.users = [NodeUser(node=ExternKernelSchedulerNode(name='op408'), can_inplace=False, is_weak=False)]
]
op407.group.device = cuda:0
op407.group.iteration = (602112, 1)
op407.sizes = ([25088, 24], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf404_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf405_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg214_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg215_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf407_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op407_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf404', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf405', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg214_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg215_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf407', get_index_5, add_1, None)
        return store


op408: ExternKernelSchedulerNode(ExternKernelOut)
op408.writes = [StarDep(name='buf408', mode=None)]
op408.unmet_dependencies = [StarDep(name='buf407', mode=None)]
op408.met_dependencies = [StarDep(name='arg216_1', mode=None)]
op408.outputs = [
    buf408: ExternKernelOut
    buf408.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf408.users = [NodeUser(node=SchedulerNode(name='op409'), can_inplace=True, is_weak=False)]
]
op408.node.kernel = extern_kernels.mm


op409: SchedulerNode(ComputedBuffer)
op409.writes = [MemoryDep('buf409', c0, {c0: 2408448}, None)]
op409.unmet_dependencies = [MemoryDep('buf408', c0, {c0: 2408448}, None)]
op409.met_dependencies = [MemoryDep('arg217_1', c1, {c0: 25088, c1: 96}, None)]
op409.outputs = [
    buf409: ComputedBuffer
    buf409.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf409.users = [NodeUser(node=ExternKernelSchedulerNode(name='op410'), can_inplace=False, is_weak=False)]
]
op409.group.device = cuda:0
op409.group.iteration = (2408448, 1)
op409.sizes = ([25088, 96], [])
buf408_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg217_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf409_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op409_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf408', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg217_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf408', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg217_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf409', get_index_4, mul_2, None)
        return store


op410: ExternKernelSchedulerNode(ExternKernelOut)
op410.writes = [StarDep(name='buf410', mode=None)]
op410.unmet_dependencies = [StarDep(name='buf409', mode=None)]
op410.met_dependencies = [StarDep(name='arg218_1', mode=None)]
op410.outputs = [
    buf410: ExternKernelOut
    buf410.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf410.users = [
        NodeUser(node=SchedulerNode(name='op411'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op412'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op413'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op418'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op440'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op441'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op442'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op443'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False),
    ]
]
op410.node.kernel = extern_kernels.mm


op411_op412_op440_op441_op418_op443: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op411_op412_op440_op441_op418_op443.writes = 
    [   MemoryDep('buf411', c0, {c0: 25088}, None),
        MemoryDep('buf412', c0, {c0: 25088}, None),
        MemoryDep('buf418', c0, {c0: 602112}, None),
        MemoryDep('buf440', c0, {c0: 25088}, None),
        MemoryDep('buf441', c0, {c0: 25088}, None),
        MemoryDep('buf443', c0, {c0: 602112}, None)]
op411_op412_op440_op441_op418_op443.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None)]
op411_op412_op440_op441_op418_op443.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg220_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg221_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg236_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg237_1', c1, {c0: 25088, c1: 24}, None)]
op411_op412_op440_op441_op418_op443.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf411.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf412.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf440.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf441.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
]
op411_op412_op440_op441_op418_op443.snodes[0] =
op411: SchedulerNode(ComputedBuffer)
op411.writes = [MemoryDep('buf411', c0, {c0: 25088}, None)]
op411.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None)]
op411.met_dependencies = [MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None)]
op411.outputs = [
    buf411: ComputedBuffer
    buf411.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf411.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op411.group.device = cuda:0
op411.group.iteration = (25088, 24)
op411.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op411_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf411', get_index_3, getitem)
        return store_reduction
op411_op412_op440_op441_op418_op443.snodes[1] =
op412: SchedulerNode(ComputedBuffer)
op412.writes = [MemoryDep('buf412', c0, {c0: 25088}, None)]
op412.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None)]
op412.met_dependencies = [MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None)]
op412.outputs = [
    buf412: ComputedBuffer
    buf412.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf412.users = [NodeUser(node=SchedulerNode(name='op418'), can_inplace=False, is_weak=False)]
]
op412.group.device = cuda:0
op412.group.iteration = (25088, 24)
op412.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf412_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op412_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf412', get_index_3, getitem_1)
        return store_reduction
op411_op412_op440_op441_op418_op443.snodes[2] =
op440: SchedulerNode(ComputedBuffer)
op440.writes = [MemoryDep('buf440', c0, {c0: 25088}, None)]
op440.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None)]
op440.met_dependencies = [MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None)]
op440.outputs = [
    buf440: ComputedBuffer
    buf440.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf440.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op440.group.device = cuda:0
op440.group.iteration = (25088, 24)
op440.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op440_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf440', get_index_3, getitem)
        return store_reduction
op411_op412_op440_op441_op418_op443.snodes[3] =
op441: SchedulerNode(ComputedBuffer)
op441.writes = [MemoryDep('buf441', c0, {c0: 25088}, None)]
op441.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None)]
op441.met_dependencies = [MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None)]
op441.outputs = [
    buf441: ComputedBuffer
    buf441.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf441.users = [NodeUser(node=SchedulerNode(name='op443'), can_inplace=False, is_weak=False)]
]
op441.group.device = cuda:0
op441.group.iteration = (25088, 24)
op441.sizes = ([25088], [24])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf441_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op441_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf441', get_index_3, getitem_1)
        return store_reduction
op411_op412_op440_op441_op418_op443.snodes[4] =
op418: SchedulerNode(ComputedBuffer)
op418.writes = [MemoryDep('buf418', c0, {c0: 602112}, None)]
op418.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None),
        MemoryDep('buf411', c0, {c0: 25088}, None),
        MemoryDep('buf412', c0, {c0: 25088}, None)]
op418.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg220_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg221_1', c1, {c0: 25088, c1: 24}, None)]
op418.outputs = [
    buf418: ComputedBuffer
    buf418.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf418.users = [NodeUser(node=ExternKernelSchedulerNode(name='op419'), can_inplace=False, is_weak=False)]
]
op418.group.device = cuda:0
op418.group.iteration = (602112, 1)
op418.sizes = ([25088, 24], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf411_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf412_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg220_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg221_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf418_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op418_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf411', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf412', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg220_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg221_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf418', get_index_7, add_3, None)
        return store
op411_op412_op440_op441_op418_op443.snodes[5] =
op443: SchedulerNode(ComputedBuffer)
op443.writes = [MemoryDep('buf443', c0, {c0: 602112}, None)]
op443.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None),
        MemoryDep('buf440', c0, {c0: 25088}, None),
        MemoryDep('buf441', c0, {c0: 25088}, None)]
op443.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg236_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg237_1', c1, {c0: 25088, c1: 24}, None)]
op443.outputs = [
    buf443: ComputedBuffer
    buf443.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf443.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op444'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op450'), can_inplace=False, is_weak=False),
    ]
]
op443.group.device = cuda:0
op443.group.iteration = (602112, 1)
op443.sizes = ([25088, 24], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf440_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf441_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg236_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg237_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf443_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op443_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf440', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf441', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg236_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg237_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf443', get_index_7, add_3, None)
        return store


op415: ExternKernelSchedulerNode(ExternKernelOut)
op415.writes = [StarDep(name='buf415', mode=None)]
op415.unmet_dependencies = [StarDep(name='buf414', mode=None)]
op415.met_dependencies = [StarDep(name='arg204_1', mode=None)]
op415.outputs = [
    buf415: ExternKernelOut
    buf415.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf415.users = [NodeUser(node=SchedulerNode(name='op416'), can_inplace=True, is_weak=False)]
]
op415.node.kernel = extern_kernels.mm


op416: SchedulerNode(ComputedBuffer)
op416.writes = [MemoryDep('buf416', c0, {c0: 2420736}, None)]
op416.unmet_dependencies = [MemoryDep('buf415', c0, {c0: 2420736}, None)]
op416.met_dependencies = [MemoryDep('arg205_1', c1, {c0: 1576, c1: 1536}, None)]
op416.outputs = [
    buf416: ComputedBuffer
    buf416.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf416.users = [NodeUser(node=ExternKernelSchedulerNode(name='op417'), can_inplace=False, is_weak=False)]
]
op416.group.device = cuda:0
op416.group.iteration = (2420736, 1)
op416.sizes = ([1576, 1536], [])
buf415_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg205_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf416_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op416_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf415', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg205_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf415', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg205_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf416', get_index_4, mul_2, None)
        return store


op417: ExternKernelSchedulerNode(ExternKernelOut)
op417.writes = [StarDep(name='buf417', mode=None)]
op417.unmet_dependencies = [StarDep(name='buf416', mode=None)]
op417.met_dependencies = [StarDep(name='arg206_1', mode=None)]
op417.outputs = [
    buf417: ExternKernelOut
    buf417.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf417.users = [NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op417.node.kernel = extern_kernels.mm


op419: ExternKernelSchedulerNode(ExternKernelOut)
op419.writes = [StarDep(name='buf419', mode=None)]
op419.unmet_dependencies = [StarDep(name='buf418', mode=None)]
op419.met_dependencies = [StarDep(name='arg222_1', mode=None)]
op419.outputs = [
    buf419: ExternKernelOut
    buf419.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf419.users = [NodeUser(node=SchedulerNode(name='op420'), can_inplace=False, is_weak=False)]
]
op419.node.kernel = extern_kernels.mm


op420_op421_op422_op424: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op420_op421_op422_op424.writes = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf421', c0, {c0: 1576}, None),
        MemoryDep('buf422', c0, {c0: 1576}, None),
        MemoryDep('buf424', c0, {c0: 605184}, None)]
op420_op421_op422_op424.unmet_dependencies = 
    [   MemoryDep('buf383', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf383', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf417', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf417', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf419', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op420_op421_op422_op424.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg223_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg224_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg225_1', c1, {c0: 1576, c1: 384}, None)]
op420_op421_op422_op424.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf420.users = [
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
    ]
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf421.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf422.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf424.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
    ]
]
op420_op421_op422_op424.snodes[0] =
op420: SchedulerNode(ComputedBuffer)
op420.writes = [MemoryDep('buf420', c0, {c0: 605184}, None)]
op420.unmet_dependencies = 
    [   MemoryDep('buf383', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf383', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf417', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf417', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf419', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op420.met_dependencies = 
    [   MemoryDep('arg207_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg223_1', c1, {c0: 1576, c1: 384}, None)]
op420.outputs = [
    buf420: ComputedBuffer
    buf420.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf420.users = [
        NodeUser(node=SchedulerNode(name='op421'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op422'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op423'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op424'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
    ]
]
op420.group.device = cuda:0
op420.group.iteration = (605184, 1)
op420.sizes = ([8, 197, 384], [])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg207_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf383_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf417_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf419_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg223_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op420_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf420', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf417', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg207_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf383', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf417', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg207_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf419', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg223_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op420_op421_op422_op424.snodes[1] =
op421: SchedulerNode(ComputedBuffer)
op421.writes = [MemoryDep('buf421', c0, {c0: 1576}, None)]
op421.unmet_dependencies = [MemoryDep('buf420', c0, {c0: 605184}, None)]
op421.met_dependencies = []
op421.outputs = [
    buf421: ComputedBuffer
    buf421.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf421.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op421.group.device = cuda:0
op421.group.iteration = (1576, 384)
op421.sizes = ([1576], [384])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op421_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf421', get_index_1, getitem)
        return store_reduction
op420_op421_op422_op424.snodes[2] =
op422: SchedulerNode(ComputedBuffer)
op422.writes = [MemoryDep('buf422', c0, {c0: 1576}, None)]
op422.unmet_dependencies = [MemoryDep('buf420', c0, {c0: 605184}, None)]
op422.met_dependencies = []
op422.outputs = [
    buf422: ComputedBuffer
    buf422.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf422.users = [NodeUser(node=SchedulerNode(name='op424'), can_inplace=False, is_weak=False)]
]
op422.group.device = cuda:0
op422.group.iteration = (1576, 384)
op422.sizes = ([1576], [384])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op422_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf422', get_index_1, getitem_1)
        return store_reduction
op420_op421_op422_op424.snodes[3] =
op424: SchedulerNode(ComputedBuffer)
op424.writes = [MemoryDep('buf424', c0, {c0: 605184}, None)]
op424.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf421', c0, {c0: 1576}, None),
        MemoryDep('buf422', c0, {c0: 1576}, None)]
op424.met_dependencies = 
    [   MemoryDep('arg224_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg225_1', c1, {c0: 1576, c1: 384}, None)]
op424.outputs = [
    buf424: ComputedBuffer
    buf424.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf424.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op425'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op431'), can_inplace=False, is_weak=False),
    ]
]
op424.group.device = cuda:0
op424.group.iteration = (605184, 1)
op424.sizes = ([1576, 384], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf421_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf422_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg224_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg225_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf424_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op424_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf421', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf422', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg224_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg225_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf424', get_index_5, add_1, None)
        return store


op425: ExternKernelSchedulerNode(ExternKernelOut)
op425.writes = [StarDep(name='buf425', mode=None)]
op425.unmet_dependencies = [StarDep(name='buf424', mode=None)]
op425.met_dependencies = [StarDep(name='arg226_1', mode=None)]
op425.outputs = [
    buf425: ExternKernelOut
    buf425.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf425.users = [
        NodeUser(node=SchedulerNode(name='op426'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op427'), can_inplace=False, is_weak=False),
    ]
]
op425.node.kernel = extern_kernels.mm


op426: SchedulerNode(ComputedBuffer)
op426.writes = [MemoryDep('buf426', c0, {c0: 605184}, None)]
op426.unmet_dependencies = [   MemoryDep('buf425', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op426.met_dependencies = []
op426.outputs = [
    buf426: ComputedBuffer
    buf426.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf426.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op426.group.device = cuda:0
op426.group.iteration = (605184, 1)
op426.sizes = ([8, 6, 197, 64], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf426_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op426_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf426', get_index_1, load, None)
        return store


op427: SchedulerNode(ComputedBuffer)
op427.writes = [MemoryDep('buf427', c0, {c0: 605184}, None)]
op427.unmet_dependencies = [   MemoryDep('buf425', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op427.met_dependencies = []
op427.outputs = [
    buf427: ComputedBuffer
    buf427.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf427.users = [NodeUser(node=ExternKernelSchedulerNode(name='op428'), can_inplace=False, is_weak=False)]
]
op427.group.device = cuda:0
op427.group.iteration = (605184, 1)
op427.sizes = ([8, 384, 197], [])
buf425_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf427_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op427_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf425', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf427', get_index_1, load, None)
        return store


op428: ExternKernelSchedulerNode(ExternKernelOut)
op428.writes = [StarDep(name='buf428', mode=None)]
op428.unmet_dependencies = [StarDep(name='buf426', mode=None), StarDep(name='buf427', mode=None)]
op428.met_dependencies = []
op428.outputs = [
    buf428: ExternKernelOut
    buf428.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf428.users = [
        NodeUser(node=SchedulerNode(name='op429'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op428.node.kernel = extern_kernels.bmm


op429_op430_op432: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op429_op430_op432.writes = 
    [   MemoryDep('buf429', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf430', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf432', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op429_op430_op432.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 1862832}, None)]
op429_op430_op432.met_dependencies = []
op429_op430_op432.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf430.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op429_op430_op432.snodes[0] =
op429: SchedulerNode(ComputedBuffer)
op429.writes = [MemoryDep('buf429', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op429.unmet_dependencies = [MemoryDep('buf428', c0, {c0: 1862832}, None)]
op429.met_dependencies = []
op429.outputs = [
    buf429: ComputedBuffer
    buf429.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf429.users = [
        NodeUser(node=SchedulerNode(name='op430'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False),
    ]
]
op429.group.device = cuda:0
op429.group.iteration = (9456, 197)
op429.sizes = ([8, 1182], [197])
buf428_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op429_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf429', get_index_1, reduction)
        return store_reduction
op429_op430_op432.snodes[1] =
op430: SchedulerNode(ComputedBuffer)
op430.writes = [MemoryDep('buf430', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op430.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1862832}, None),
        MemoryDep('buf429', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op430.met_dependencies = []
op430.outputs = [
    buf430: ComputedBuffer
    buf430.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf430.users = [NodeUser(node=SchedulerNode(name='op432'), can_inplace=False, is_weak=False)]
]
op430.group.device = cuda:0
op430.group.iteration = (9456, 197)
op430.sizes = ([8, 1182], [197])
buf428_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op430_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf429', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf430', get_index_2, reduction)
        return store_reduction
op429_op430_op432.snodes[2] =
op432: SchedulerNode(ComputedBuffer)
op432.writes = [MemoryDep('buf432', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op432.unmet_dependencies = 
    [   MemoryDep('buf428', c0, {c0: 1862832}, None),
        MemoryDep('buf429', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf430', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op432.met_dependencies = []
op432.outputs = [
    buf432: ComputedBuffer
    buf432.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf432.users = [NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op432.group.device = cuda:0
op432.group.iteration = (1862832, 1)
op432.sizes = ([8, 6, 197, 197], [])
buf428_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf429_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf430_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf432_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op432_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf428', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf429', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf430', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf432', get_index_3, truediv, None)
        return store


op431: ExternKernelSchedulerNode(ExternKernelOut)
op431.writes = [StarDep(name='buf431', mode=None)]
op431.unmet_dependencies = [StarDep(name='buf424', mode=None)]
op431.met_dependencies = [StarDep(name='arg227_1', mode=None)]
op431.outputs = [
    buf431: ExternKernelOut
    buf431.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf431.users = [NodeUser(node=SchedulerNode(name='op433'), can_inplace=False, is_weak=False)]
]
op431.node.kernel = extern_kernels.mm


op433: SchedulerNode(ComputedBuffer)
op433.writes = [MemoryDep('buf433', c0, {c0: 605184}, None)]
op433.unmet_dependencies = [   MemoryDep('buf431', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op433.met_dependencies = []
op433.outputs = [
    buf433: ComputedBuffer
    buf433.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf433.users = [NodeUser(node=ExternKernelSchedulerNode(name='op434'), can_inplace=False, is_weak=False)]
]
op433.group.device = cuda:0
op433.group.iteration = (605184, 1)
op433.sizes = ([8, 6, 197, 64], [])
buf431_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf433_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op433_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf431', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf433', get_index_1, load, None)
        return store


op434: ExternKernelSchedulerNode(ExternKernelOut)
op434.writes = [StarDep(name='buf434', mode=None)]
op434.unmet_dependencies = [StarDep(name='buf432', mode=None), StarDep(name='buf433', mode=None)]
op434.met_dependencies = []
op434.outputs = [
    buf434: ExternKernelOut
    buf434.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf434.users = [NodeUser(node=SchedulerNode(name='op435'), can_inplace=False, is_weak=False)]
]
op434.node.kernel = extern_kernels.bmm


op435: SchedulerNode(ComputedBuffer)
op435.writes = [MemoryDep('buf435', c0, {c0: 605184}, None)]
op435.unmet_dependencies = [   MemoryDep('buf434', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op435.met_dependencies = []
op435.outputs = [
    buf435: ComputedBuffer
    buf435.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf435.users = [NodeUser(node=ExternKernelSchedulerNode(name='op436'), can_inplace=False, is_weak=False)]
]
op435.group.device = cuda:0
op435.group.iteration = (605184, 1)
op435.sizes = ([8, 197, 6, 64], [])
buf434_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf435_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op435_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf434', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf435', get_index_1, load, None)
        return store


op436: ExternKernelSchedulerNode(ExternKernelOut)
op436.writes = [StarDep(name='buf436', mode=None)]
op436.unmet_dependencies = [StarDep(name='buf435', mode=None)]
op436.met_dependencies = [StarDep(name='arg228_1', mode=None)]
op436.outputs = [
    buf436: ExternKernelOut
    buf436.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf436.users = [
        NodeUser(node=SchedulerNode(name='op437'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op438'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op439'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op467'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False),
    ]
]
op436.node.kernel = extern_kernels.mm


op437_op438_op467: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op437_op438_op467.writes = 
    [   MemoryDep('buf437', c0, {c0: 1576}, None),
        MemoryDep('buf438', c0, {c0: 1576}, None),
        MemoryDep('buf467', c0, {c0: 605184}, None)]
op437_op438_op467.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf436', c0, {c0: 605184}, None)]
op437_op438_op467.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg230_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg231_1', c1, {c0: 1576, c1: 384}, None)]
op437_op438_op467.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf437.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf438.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op437_op438_op467.snodes[0] =
op437: SchedulerNode(ComputedBuffer)
op437.writes = [MemoryDep('buf437', c0, {c0: 1576}, None)]
op437.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf436', c0, {c0: 605184}, None)]
op437.met_dependencies = [MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None)]
op437.outputs = [
    buf437: ComputedBuffer
    buf437.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf437.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op437.group.device = cuda:0
op437.group.iteration = (1576, 384)
op437.sizes = ([1576], [384])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op437_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg229_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf437', get_index_3, getitem)
        return store_reduction
op437_op438_op467.snodes[1] =
op438: SchedulerNode(ComputedBuffer)
op438.writes = [MemoryDep('buf438', c0, {c0: 1576}, None)]
op438.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf436', c0, {c0: 605184}, None)]
op438.met_dependencies = [MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None)]
op438.outputs = [
    buf438: ComputedBuffer
    buf438.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf438.users = [NodeUser(node=SchedulerNode(name='op467'), can_inplace=False, is_weak=False)]
]
op438.group.device = cuda:0
op438.group.iteration = (1576, 384)
op438.sizes = ([1576], [384])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op438_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg229_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf438', get_index_3, getitem_1)
        return store_reduction
op437_op438_op467.snodes[2] =
op467: SchedulerNode(ComputedBuffer)
op467.writes = [MemoryDep('buf467', c0, {c0: 605184}, None)]
op467.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf436', c0, {c0: 605184}, None),
        MemoryDep('buf437', c0, {c0: 1576}, None),
        MemoryDep('buf438', c0, {c0: 1576}, None)]
op467.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg230_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg231_1', c1, {c0: 1576, c1: 384}, None)]
op467.outputs = [
    buf467: ComputedBuffer
    buf467.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf467.users = [NodeUser(node=ExternKernelSchedulerNode(name='op468'), can_inplace=False, is_weak=False)]
]
op467.group.device = cuda:0
op467.group.iteration = (605184, 1)
op467.sizes = ([1576, 384], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf437_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf438_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg230_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg231_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf467_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op467_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg229_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf437', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf438', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg230_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg231_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf467', get_index_7, add_3, None)
        return store


op444: ExternKernelSchedulerNode(ExternKernelOut)
op444.writes = [StarDep(name='buf444', mode=None)]
op444.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op444.met_dependencies = [StarDep(name='arg238_1', mode=None)]
op444.outputs = [
    buf444: ExternKernelOut
    buf444.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf444.users = [
        NodeUser(node=SchedulerNode(name='op445'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op446'), can_inplace=False, is_weak=False),
    ]
]
op444.node.kernel = extern_kernels.mm


op445: SchedulerNode(ComputedBuffer)
op445.writes = [MemoryDep('buf445', c0, {c0: 602112}, None)]
op445.unmet_dependencies = [   MemoryDep('buf444', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op445.met_dependencies = []
op445.outputs = [
    buf445: ComputedBuffer
    buf445.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf445.users = [NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op445.group.device = cuda:0
op445.group.iteration = (602112, 1)
op445.sizes = ([1568, 4, 16, 6], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf445_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op445_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf445', get_index_1, load, None)
        return store


op446: SchedulerNode(ComputedBuffer)
op446.writes = [MemoryDep('buf446', c0, {c0: 602112}, None)]
op446.unmet_dependencies = [   MemoryDep('buf444', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op446.met_dependencies = []
op446.outputs = [
    buf446: ComputedBuffer
    buf446.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf446.users = [NodeUser(node=ExternKernelSchedulerNode(name='op447'), can_inplace=False, is_weak=False)]
]
op446.group.device = cuda:0
op446.group.iteration = (602112, 1)
op446.sizes = ([1568, 24, 16], [])
buf444_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf446_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op446_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf444', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf446', get_index_1, load, None)
        return store


op447: ExternKernelSchedulerNode(ExternKernelOut)
op447.writes = [StarDep(name='buf447', mode=None)]
op447.unmet_dependencies = [StarDep(name='buf445', mode=None), StarDep(name='buf446', mode=None)]
op447.met_dependencies = []
op447.outputs = [
    buf447: ExternKernelOut
    buf447.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf447.users = [
        NodeUser(node=SchedulerNode(name='op448'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=True, is_weak=False),
    ]
]
op447.node.kernel = extern_kernels.bmm


op448_op449_op451: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op448_op449_op451.writes = 
    [   MemoryDep('buf448', c0, {c0: 100352}, None),
        MemoryDep('buf449', c0, {c0: 100352}, None),
        MemoryDep('buf451', c0, {c0: 1605632}, None)]
op448_op449_op451.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 1605632}, None)]
op448_op449_op451.met_dependencies = []
op448_op449_op451.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf449.users = [NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op448_op449_op451.snodes[0] =
op448: SchedulerNode(ComputedBuffer)
op448.writes = [MemoryDep('buf448', c0, {c0: 100352}, None)]
op448.unmet_dependencies = [MemoryDep('buf447', c0, {c0: 1605632}, None)]
op448.met_dependencies = []
op448.outputs = [
    buf448: ComputedBuffer
    buf448.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf448.users = [
        NodeUser(node=SchedulerNode(name='op449'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False),
    ]
]
op448.group.device = cuda:0
op448.group.iteration = (100352, 16)
op448.sizes = ([100352], [16])
buf447_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op448_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf448', get_index_1, reduction)
        return store_reduction
op448_op449_op451.snodes[1] =
op449: SchedulerNode(ComputedBuffer)
op449.writes = [MemoryDep('buf449', c0, {c0: 100352}, None)]
op449.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 1605632}, None),
        MemoryDep('buf448', c0, {c0: 100352}, None)]
op449.met_dependencies = []
op449.outputs = [
    buf449: ComputedBuffer
    buf449.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf449.users = [NodeUser(node=SchedulerNode(name='op451'), can_inplace=False, is_weak=False)]
]
op449.group.device = cuda:0
op449.group.iteration = (100352, 16)
op449.sizes = ([100352], [16])
buf447_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf449_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op449_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf448', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf449', get_index_2, reduction)
        return store_reduction
op448_op449_op451.snodes[2] =
op451: SchedulerNode(ComputedBuffer)
op451.writes = [MemoryDep('buf451', c0, {c0: 1605632}, None)]
op451.unmet_dependencies = 
    [   MemoryDep('buf447', c0, {c0: 1605632}, None),
        MemoryDep('buf448', c0, {c0: 100352}, None),
        MemoryDep('buf449', c0, {c0: 100352}, None)]
op451.met_dependencies = []
op451.outputs = [
    buf451: ComputedBuffer
    buf451.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf451.users = [NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op451.group.device = cuda:0
op451.group.iteration = (1605632, 1)
op451.sizes = ([100352, 16], [])
buf447_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf448_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf449_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf451_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op451_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf447', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf448', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf449', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf451', get_index_3, truediv, None)
        return store


op450: ExternKernelSchedulerNode(ExternKernelOut)
op450.writes = [StarDep(name='buf450', mode=None)]
op450.unmet_dependencies = [StarDep(name='buf443', mode=None)]
op450.met_dependencies = [StarDep(name='arg239_1', mode=None)]
op450.outputs = [
    buf450: ExternKernelOut
    buf450.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf450.users = [NodeUser(node=SchedulerNode(name='op452'), can_inplace=False, is_weak=False)]
]
op450.node.kernel = extern_kernels.mm


op452: SchedulerNode(ComputedBuffer)
op452.writes = [MemoryDep('buf452', c0, {c0: 602112}, None)]
op452.unmet_dependencies = [   MemoryDep('buf450', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op452.met_dependencies = []
op452.outputs = [
    buf452: ComputedBuffer
    buf452.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf452.users = [NodeUser(node=ExternKernelSchedulerNode(name='op453'), can_inplace=False, is_weak=False)]
]
op452.group.device = cuda:0
op452.group.iteration = (602112, 1)
op452.sizes = ([1568, 4, 16, 6], [])
buf450_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf452_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op452_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf450', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf452', get_index_1, load, None)
        return store


op453: ExternKernelSchedulerNode(ExternKernelOut)
op453.writes = [StarDep(name='buf453', mode=None)]
op453.unmet_dependencies = [StarDep(name='buf451', mode=None), StarDep(name='buf452', mode=None)]
op453.met_dependencies = []
op453.outputs = [
    buf453: ExternKernelOut
    buf453.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf453.users = [NodeUser(node=SchedulerNode(name='op454'), can_inplace=False, is_weak=False)]
]
op453.node.kernel = extern_kernels.bmm


op454: SchedulerNode(ComputedBuffer)
op454.writes = [MemoryDep('buf454', c0, {c0: 602112}, None)]
op454.unmet_dependencies = [   MemoryDep('buf453', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op454.met_dependencies = []
op454.outputs = [
    buf454: ComputedBuffer
    buf454.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf454.users = [NodeUser(node=ExternKernelSchedulerNode(name='op455'), can_inplace=False, is_weak=False)]
]
op454.group.device = cuda:0
op454.group.iteration = (602112, 1)
op454.sizes = ([1568, 16, 4, 6], [])
buf453_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf454_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op454_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf453', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf454', get_index_1, load, None)
        return store


op455: ExternKernelSchedulerNode(ExternKernelOut)
op455.writes = [StarDep(name='buf455', mode=None)]
op455.unmet_dependencies = [StarDep(name='buf454', mode=None)]
op455.met_dependencies = [StarDep(name='arg240_1', mode=None)]
op455.outputs = [
    buf455: ExternKernelOut
    buf455.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf455.users = [NodeUser(node=SchedulerNode(name='op456'), can_inplace=True, is_weak=False)]
]
op455.node.kernel = extern_kernels.mm


op456_op457_op458_op460: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op456_op457_op458_op460.writes = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf457', c0, {c0: 25088}, None),
        MemoryDep('buf458', c0, {c0: 25088}, None),
        MemoryDep('buf460', c0, {c0: 602112}, None)]
op456_op457_op458_op460.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None),
        MemoryDep('buf455', c0, {c0: 602112}, None)]
op456_op457_op458_op460.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg241_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg242_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg243_1', c1, {c0: 25088, c1: 24}, None)]
op456_op457_op458_op460.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf456.users = [
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
    ]
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf457.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf458.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op456_op457_op458_op460.snodes[0] =
op456: SchedulerNode(ComputedBuffer)
op456.writes = [MemoryDep('buf456', c0, {c0: 602112}, None)]
op456.unmet_dependencies = 
    [   MemoryDep('buf403', c0, {c0: 602112}, None),
        MemoryDep('buf410', c0, {c0: 602112}, None),
        MemoryDep('buf455', c0, {c0: 602112}, None)]
op456.met_dependencies = 
    [   MemoryDep('arg219_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg241_1', c1, {c0: 25088, c1: 24}, None)]
op456.outputs = [
    buf456: ComputedBuffer
    buf456.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf456.users = [
        NodeUser(node=SchedulerNode(name='op457'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op458'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op459'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op460'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
    ]
]
op456.group.device = cuda:0
op456.group.iteration = (602112, 1)
op456.sizes = ([25088, 24], [])
buf403_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf410_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg219_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf455_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg241_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op456_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf403', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf410', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg219_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf455', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg241_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf456', get_index_5, add_3, None)
        return store
op456_op457_op458_op460.snodes[1] =
op457: SchedulerNode(ComputedBuffer)
op457.writes = [MemoryDep('buf457', c0, {c0: 25088}, None)]
op457.unmet_dependencies = [MemoryDep('buf456', c0, {c0: 602112}, None)]
op457.met_dependencies = []
op457.outputs = [
    buf457: ComputedBuffer
    buf457.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf457.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op457.group.device = cuda:0
op457.group.iteration = (25088, 24)
op457.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op457_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf457', get_index_1, getitem)
        return store_reduction
op456_op457_op458_op460.snodes[2] =
op458: SchedulerNode(ComputedBuffer)
op458.writes = [MemoryDep('buf458', c0, {c0: 25088}, None)]
op458.unmet_dependencies = [MemoryDep('buf456', c0, {c0: 602112}, None)]
op458.met_dependencies = []
op458.outputs = [
    buf458: ComputedBuffer
    buf458.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf458.users = [NodeUser(node=SchedulerNode(name='op460'), can_inplace=False, is_weak=False)]
]
op458.group.device = cuda:0
op458.group.iteration = (25088, 24)
op458.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf458_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op458_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf458', get_index_1, getitem_1)
        return store_reduction
op456_op457_op458_op460.snodes[3] =
op460: SchedulerNode(ComputedBuffer)
op460.writes = [MemoryDep('buf460', c0, {c0: 602112}, None)]
op460.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf457', c0, {c0: 25088}, None),
        MemoryDep('buf458', c0, {c0: 25088}, None)]
op460.met_dependencies = 
    [   MemoryDep('arg242_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg243_1', c1, {c0: 25088, c1: 24}, None)]
op460.outputs = [
    buf460: ComputedBuffer
    buf460.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf460.users = [NodeUser(node=ExternKernelSchedulerNode(name='op461'), can_inplace=False, is_weak=False)]
]
op460.group.device = cuda:0
op460.group.iteration = (602112, 1)
op460.sizes = ([25088, 24], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf457_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf458_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg242_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg243_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf460_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op460_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf457', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf458', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg242_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg243_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf460', get_index_5, add_1, None)
        return store


op461: ExternKernelSchedulerNode(ExternKernelOut)
op461.writes = [StarDep(name='buf461', mode=None)]
op461.unmet_dependencies = [StarDep(name='buf460', mode=None)]
op461.met_dependencies = [StarDep(name='arg244_1', mode=None)]
op461.outputs = [
    buf461: ExternKernelOut
    buf461.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf461.users = [NodeUser(node=SchedulerNode(name='op462'), can_inplace=True, is_weak=False)]
]
op461.node.kernel = extern_kernels.mm


op462: SchedulerNode(ComputedBuffer)
op462.writes = [MemoryDep('buf462', c0, {c0: 2408448}, None)]
op462.unmet_dependencies = [MemoryDep('buf461', c0, {c0: 2408448}, None)]
op462.met_dependencies = [MemoryDep('arg245_1', c1, {c0: 25088, c1: 96}, None)]
op462.outputs = [
    buf462: ComputedBuffer
    buf462.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf462.users = [NodeUser(node=ExternKernelSchedulerNode(name='op463'), can_inplace=False, is_weak=False)]
]
op462.group.device = cuda:0
op462.group.iteration = (2408448, 1)
op462.sizes = ([25088, 96], [])
buf461_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg245_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf462_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op462_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf461', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg245_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf461', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg245_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf462', get_index_4, mul_2, None)
        return store


op463: ExternKernelSchedulerNode(ExternKernelOut)
op463.writes = [StarDep(name='buf463', mode=None)]
op463.unmet_dependencies = [StarDep(name='buf462', mode=None)]
op463.met_dependencies = [StarDep(name='arg246_1', mode=None)]
op463.outputs = [
    buf463: ExternKernelOut
    buf463.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf463.users = [
        NodeUser(node=SchedulerNode(name='op464'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op465'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op466'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op472'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op495'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op496'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op497'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op498'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False),
    ]
]
op463.node.kernel = extern_kernels.mm


op464_op465_op495_op496_op472_op498: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op464_op465_op495_op496_op472_op498.writes = 
    [   MemoryDep('buf464', c0, {c0: 25088}, None),
        MemoryDep('buf465', c0, {c0: 25088}, None),
        MemoryDep('buf472', c0, {c0: 602112}, None),
        MemoryDep('buf495', c0, {c0: 25088}, None),
        MemoryDep('buf496', c0, {c0: 25088}, None),
        MemoryDep('buf498', c0, {c0: 602112}, None)]
op464_op465_op495_op496_op472_op498.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None)]
op464_op465_op495_op496_op472_op498.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg248_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg249_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg264_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg265_1', c1, {c0: 25088, c1: 24}, None)]
op464_op465_op495_op496_op472_op498.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf464.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf465.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf495.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf496.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf498.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
    ]
]
op464_op465_op495_op496_op472_op498.snodes[0] =
op464: SchedulerNode(ComputedBuffer)
op464.writes = [MemoryDep('buf464', c0, {c0: 25088}, None)]
op464.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None)]
op464.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None)]
op464.outputs = [
    buf464: ComputedBuffer
    buf464.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf464.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op464.group.device = cuda:0
op464.group.iteration = (25088, 24)
op464.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op464_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf464', get_index_3, getitem)
        return store_reduction
op464_op465_op495_op496_op472_op498.snodes[1] =
op465: SchedulerNode(ComputedBuffer)
op465.writes = [MemoryDep('buf465', c0, {c0: 25088}, None)]
op465.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None)]
op465.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None)]
op465.outputs = [
    buf465: ComputedBuffer
    buf465.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf465.users = [NodeUser(node=SchedulerNode(name='op472'), can_inplace=False, is_weak=False)]
]
op465.group.device = cuda:0
op465.group.iteration = (25088, 24)
op465.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op465_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf465', get_index_3, getitem_1)
        return store_reduction
op464_op465_op495_op496_op472_op498.snodes[2] =
op495: SchedulerNode(ComputedBuffer)
op495.writes = [MemoryDep('buf495', c0, {c0: 25088}, None)]
op495.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None)]
op495.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None)]
op495.outputs = [
    buf495: ComputedBuffer
    buf495.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf495.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op495.group.device = cuda:0
op495.group.iteration = (25088, 24)
op495.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op495_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf495', get_index_3, getitem)
        return store_reduction
op464_op465_op495_op496_op472_op498.snodes[3] =
op496: SchedulerNode(ComputedBuffer)
op496.writes = [MemoryDep('buf496', c0, {c0: 25088}, None)]
op496.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None)]
op496.met_dependencies = [MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None)]
op496.outputs = [
    buf496: ComputedBuffer
    buf496.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf496.users = [NodeUser(node=SchedulerNode(name='op498'), can_inplace=False, is_weak=False)]
]
op496.group.device = cuda:0
op496.group.iteration = (25088, 24)
op496.sizes = ([25088], [24])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf496_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op496_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf496', get_index_3, getitem_1)
        return store_reduction
op464_op465_op495_op496_op472_op498.snodes[4] =
op472: SchedulerNode(ComputedBuffer)
op472.writes = [MemoryDep('buf472', c0, {c0: 602112}, None)]
op472.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None),
        MemoryDep('buf464', c0, {c0: 25088}, None),
        MemoryDep('buf465', c0, {c0: 25088}, None)]
op472.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg248_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg249_1', c1, {c0: 25088, c1: 24}, None)]
op472.outputs = [
    buf472: ComputedBuffer
    buf472.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf472.users = [NodeUser(node=ExternKernelSchedulerNode(name='op473'), can_inplace=False, is_weak=False)]
]
op472.group.device = cuda:0
op472.group.iteration = (602112, 1)
op472.sizes = ([25088, 24], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf464_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf465_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg248_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg249_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf472_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op472_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf464', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf465', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg248_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg249_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf472', get_index_7, add_3, None)
        return store
op464_op465_op495_op496_op472_op498.snodes[5] =
op498: SchedulerNode(ComputedBuffer)
op498.writes = [MemoryDep('buf498', c0, {c0: 602112}, None)]
op498.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None),
        MemoryDep('buf495', c0, {c0: 25088}, None),
        MemoryDep('buf496', c0, {c0: 25088}, None)]
op498.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg264_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg265_1', c1, {c0: 25088, c1: 24}, None)]
op498.outputs = [
    buf498: ComputedBuffer
    buf498.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf498.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op499'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op505'), can_inplace=False, is_weak=False),
    ]
]
op498.group.device = cuda:0
op498.group.iteration = (602112, 1)
op498.sizes = ([25088, 24], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf495_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf496_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg264_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg265_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf498_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op498_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf495', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf496', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg264_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg265_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf498', get_index_7, add_3, None)
        return store


op468: ExternKernelSchedulerNode(ExternKernelOut)
op468.writes = [StarDep(name='buf468', mode=None)]
op468.unmet_dependencies = [StarDep(name='buf467', mode=None)]
op468.met_dependencies = [StarDep(name='arg232_1', mode=None)]
op468.outputs = [
    buf468: ExternKernelOut
    buf468.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf468.users = [NodeUser(node=SchedulerNode(name='op469'), can_inplace=True, is_weak=False)]
]
op468.node.kernel = extern_kernels.mm


op469: SchedulerNode(ComputedBuffer)
op469.writes = [MemoryDep('buf469', c0, {c0: 2420736}, None)]
op469.unmet_dependencies = [MemoryDep('buf468', c0, {c0: 2420736}, None)]
op469.met_dependencies = [MemoryDep('arg233_1', c1, {c0: 1576, c1: 1536}, None)]
op469.outputs = [
    buf469: ComputedBuffer
    buf469.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf469.users = [NodeUser(node=ExternKernelSchedulerNode(name='op470'), can_inplace=False, is_weak=False)]
]
op469.group.device = cuda:0
op469.group.iteration = (2420736, 1)
op469.sizes = ([1576, 1536], [])
buf468_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg233_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf469_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op469_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf468', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg233_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf468', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg233_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf469', get_index_4, mul_2, None)
        return store


op470: ExternKernelSchedulerNode(ExternKernelOut)
op470.writes = [StarDep(name='buf470', mode=None)]
op470.unmet_dependencies = [StarDep(name='buf469', mode=None)]
op470.met_dependencies = [StarDep(name='arg234_1', mode=None)]
op470.outputs = [
    buf470: ExternKernelOut
    buf470.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf470.users = [NodeUser(node=SchedulerNode(name='op471'), can_inplace=True, is_weak=False)]
]
op470.node.kernel = extern_kernels.mm


op471: SchedulerNode(ComputedBuffer)
op471.writes = [MemoryDep('buf471', c0, {c0: 605184}, None)]
op471.unmet_dependencies = 
    [   MemoryDep('buf420', c0, {c0: 605184}, None),
        MemoryDep('buf436', c0, {c0: 605184}, None),
        MemoryDep('buf470', c0, {c0: 605184}, None)]
op471.met_dependencies = 
    [   MemoryDep('arg229_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg235_1', c1, {c0: 1576, c1: 384}, None)]
op471.outputs = [
    buf471: ComputedBuffer
    buf471.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf471.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
]
op471.group.device = cuda:0
op471.group.iteration = (605184, 1)
op471.sizes = ([1576, 384], [])
buf420_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf436_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg229_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf470_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg235_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op471_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf420', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf436', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg229_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf470', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg235_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf471', get_index_5, add_3, None)
        return store


op473: ExternKernelSchedulerNode(ExternKernelOut)
op473.writes = [StarDep(name='buf473', mode=None)]
op473.unmet_dependencies = [StarDep(name='buf472', mode=None)]
op473.met_dependencies = [StarDep(name='arg250_1', mode=None)]
op473.outputs = [
    buf473: ExternKernelOut
    buf473.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf473.users = [
        NodeUser(node=SchedulerNode(name='op474'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op475'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op476'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op491'), can_inplace=False, is_weak=False),
    ]
]
op473.node.kernel = extern_kernels.mm


op474_op475_op477_op478: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op474_op475_op477_op478.writes = 
    [   MemoryDep('buf474', c0, {c0: 1576}, None),
        MemoryDep('buf475', c0, {c0: 1576}, None),
        MemoryDep('buf477', c0, {c0: 605184}, None),
        MemoryDep('buf478', c0, {c0: 605184}, None)]
op474_op475_op477_op478.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op474_op475_op477_op478.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg252_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg253_1', c1, {c0: 1576, c1: 384}, None)]
op474_op475_op477_op478.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf474.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf475.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf477.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
    ]
]
op474_op475_op477_op478.snodes[0] =
op474: SchedulerNode(ComputedBuffer)
op474.writes = [MemoryDep('buf474', c0, {c0: 1576}, None)]
op474.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op474.met_dependencies = [MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None)]
op474.outputs = [
    buf474: ComputedBuffer
    buf474.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf474.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op474.group.device = cuda:0
op474.group.iteration = (1576, 384)
op474.sizes = ([8, 197], [384])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op474_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf474', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf471', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg251_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op474_op475_op477_op478.snodes[1] =
op475: SchedulerNode(ComputedBuffer)
op475.writes = [MemoryDep('buf475', c0, {c0: 1576}, None)]
op475.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op475.met_dependencies = [MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None)]
op475.outputs = [
    buf475: ComputedBuffer
    buf475.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf475.users = [NodeUser(node=SchedulerNode(name='op477'), can_inplace=False, is_weak=False)]
]
op475.group.device = cuda:0
op475.group.iteration = (1576, 384)
op475.sizes = ([8, 197], [384])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op475_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf475', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf471', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg251_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op474_op475_op477_op478.snodes[2] =
op477: SchedulerNode(ComputedBuffer)
op477.writes = [MemoryDep('buf477', c0, {c0: 605184}, None)]
op477.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf474', c0, {c0: 1576}, None),
        MemoryDep('buf475', c0, {c0: 1576}, None)]
op477.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg252_1', c1, {c0: 1576, c1: 384}, None)]
op477.outputs = [
    buf477: ComputedBuffer
    buf477.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf477.users = [NodeUser(node=SchedulerNode(name='op478'), can_inplace=True, is_weak=False)]
]
op477.group.device = cuda:0
op477.group.iteration = (605184, 1)
op477.sizes = ([8, 197, 384], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf474_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf475_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg252_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op477_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf474', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf475', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg252_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf477', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf471', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg251_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op474_op475_op477_op478.snodes[3] =
op478: SchedulerNode(ComputedBuffer)
op478.writes = [MemoryDep('buf478', c0, {c0: 605184}, None)]
op478.unmet_dependencies = [MemoryDep('buf477', c0, {c0: 605184}, None)]
op478.met_dependencies = [MemoryDep('arg253_1', c1, {c0: 1576, c1: 384}, None)]
op478.outputs = [
    buf478: ComputedBuffer
    buf478.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf478.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op479'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op485'), can_inplace=False, is_weak=False),
    ]
]
op478.group.device = cuda:0
op478.group.iteration = (605184, 1)
op478.sizes = ([1576, 384], [])
buf477_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg253_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf478_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op478_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf477', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg253_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf478', get_index_2, add, None)
        return store


op479: ExternKernelSchedulerNode(ExternKernelOut)
op479.writes = [StarDep(name='buf479', mode=None)]
op479.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op479.met_dependencies = [StarDep(name='arg254_1', mode=None)]
op479.outputs = [
    buf479: ExternKernelOut
    buf479.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf479.users = [
        NodeUser(node=SchedulerNode(name='op480'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op481'), can_inplace=False, is_weak=False),
    ]
]
op479.node.kernel = extern_kernels.mm


op480: SchedulerNode(ComputedBuffer)
op480.writes = [MemoryDep('buf480', c0, {c0: 605184}, None)]
op480.unmet_dependencies = [   MemoryDep('buf479', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op480.met_dependencies = []
op480.outputs = [
    buf480: ComputedBuffer
    buf480.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf480.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op480.group.device = cuda:0
op480.group.iteration = (605184, 1)
op480.sizes = ([8, 6, 197, 64], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf480_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op480_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf480', get_index_1, load, None)
        return store


op481: SchedulerNode(ComputedBuffer)
op481.writes = [MemoryDep('buf481', c0, {c0: 605184}, None)]
op481.unmet_dependencies = [   MemoryDep('buf479', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op481.met_dependencies = []
op481.outputs = [
    buf481: ComputedBuffer
    buf481.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf481.users = [NodeUser(node=ExternKernelSchedulerNode(name='op482'), can_inplace=False, is_weak=False)]
]
op481.group.device = cuda:0
op481.group.iteration = (605184, 1)
op481.sizes = ([8, 384, 197], [])
buf479_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf481_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op481_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf479', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf481', get_index_1, load, None)
        return store


op482: ExternKernelSchedulerNode(ExternKernelOut)
op482.writes = [StarDep(name='buf482', mode=None)]
op482.unmet_dependencies = [StarDep(name='buf480', mode=None), StarDep(name='buf481', mode=None)]
op482.met_dependencies = []
op482.outputs = [
    buf482: ExternKernelOut
    buf482.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf482.users = [
        NodeUser(node=SchedulerNode(name='op483'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
]
op482.node.kernel = extern_kernels.bmm


op483_op484_op486: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op483_op484_op486.writes = 
    [   MemoryDep('buf483', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf484', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf486', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op483_op484_op486.unmet_dependencies = [MemoryDep('buf482', c0, {c0: 1862832}, None)]
op483_op484_op486.met_dependencies = []
op483_op484_op486.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op483_op484_op486.snodes[0] =
op483: SchedulerNode(ComputedBuffer)
op483.writes = [MemoryDep('buf483', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op483.unmet_dependencies = [MemoryDep('buf482', c0, {c0: 1862832}, None)]
op483.met_dependencies = []
op483.outputs = [
    buf483: ComputedBuffer
    buf483.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf483.users = [
        NodeUser(node=SchedulerNode(name='op484'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False),
    ]
]
op483.group.device = cuda:0
op483.group.iteration = (9456, 197)
op483.sizes = ([8, 1182], [197])
buf482_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op483_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf483', get_index_1, reduction)
        return store_reduction
op483_op484_op486.snodes[1] =
op484: SchedulerNode(ComputedBuffer)
op484.writes = [MemoryDep('buf484', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op484.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 1862832}, None),
        MemoryDep('buf483', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op484.met_dependencies = []
op484.outputs = [
    buf484: ComputedBuffer
    buf484.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf484.users = [NodeUser(node=SchedulerNode(name='op486'), can_inplace=False, is_weak=False)]
]
op484.group.device = cuda:0
op484.group.iteration = (9456, 197)
op484.sizes = ([8, 1182], [197])
buf482_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op484_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf483', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf484', get_index_2, reduction)
        return store_reduction
op483_op484_op486.snodes[2] =
op486: SchedulerNode(ComputedBuffer)
op486.writes = [MemoryDep('buf486', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op486.unmet_dependencies = 
    [   MemoryDep('buf482', c0, {c0: 1862832}, None),
        MemoryDep('buf483', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf484', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op486.met_dependencies = []
op486.outputs = [
    buf486: ComputedBuffer
    buf486.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf486.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op486.group.device = cuda:0
op486.group.iteration = (1862832, 1)
op486.sizes = ([8, 6, 197, 197], [])
buf482_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf483_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf484_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf486_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op486_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf482', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf483', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf484', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf486', get_index_3, truediv, None)
        return store


op485: ExternKernelSchedulerNode(ExternKernelOut)
op485.writes = [StarDep(name='buf485', mode=None)]
op485.unmet_dependencies = [StarDep(name='buf478', mode=None)]
op485.met_dependencies = [StarDep(name='arg255_1', mode=None)]
op485.outputs = [
    buf485: ExternKernelOut
    buf485.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf485.users = [NodeUser(node=SchedulerNode(name='op487'), can_inplace=False, is_weak=False)]
]
op485.node.kernel = extern_kernels.mm


op487: SchedulerNode(ComputedBuffer)
op487.writes = [MemoryDep('buf487', c0, {c0: 605184}, None)]
op487.unmet_dependencies = [   MemoryDep('buf485', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op487.met_dependencies = []
op487.outputs = [
    buf487: ComputedBuffer
    buf487.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf487.users = [NodeUser(node=ExternKernelSchedulerNode(name='op488'), can_inplace=False, is_weak=False)]
]
op487.group.device = cuda:0
op487.group.iteration = (605184, 1)
op487.sizes = ([8, 6, 197, 64], [])
buf485_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf487_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op487_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf485', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf487', get_index_1, load, None)
        return store


op488: ExternKernelSchedulerNode(ExternKernelOut)
op488.writes = [StarDep(name='buf488', mode=None)]
op488.unmet_dependencies = [StarDep(name='buf486', mode=None), StarDep(name='buf487', mode=None)]
op488.met_dependencies = []
op488.outputs = [
    buf488: ExternKernelOut
    buf488.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf488.users = [NodeUser(node=SchedulerNode(name='op489'), can_inplace=False, is_weak=False)]
]
op488.node.kernel = extern_kernels.bmm


op489: SchedulerNode(ComputedBuffer)
op489.writes = [MemoryDep('buf489', c0, {c0: 605184}, None)]
op489.unmet_dependencies = [   MemoryDep('buf488', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op489.met_dependencies = []
op489.outputs = [
    buf489: ComputedBuffer
    buf489.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf489.users = [NodeUser(node=ExternKernelSchedulerNode(name='op490'), can_inplace=False, is_weak=False)]
]
op489.group.device = cuda:0
op489.group.iteration = (605184, 1)
op489.sizes = ([8, 197, 6, 64], [])
buf488_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf489_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op489_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf488', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf489', get_index_1, load, None)
        return store


op490: ExternKernelSchedulerNode(ExternKernelOut)
op490.writes = [StarDep(name='buf490', mode=None)]
op490.unmet_dependencies = [StarDep(name='buf489', mode=None)]
op490.met_dependencies = [StarDep(name='arg256_1', mode=None)]
op490.outputs = [
    buf490: ExternKernelOut
    buf490.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf490.users = [NodeUser(node=SchedulerNode(name='op491'), can_inplace=True, is_weak=False)]
]
op490.node.kernel = extern_kernels.mm


op491_op492_op493_op522: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op491_op492_op493_op522.writes = 
    [   MemoryDep('buf491', c0, {c0: 605184}, None),
        MemoryDep('buf492', c0, {c0: 1576}, None),
        MemoryDep('buf493', c0, {c0: 1576}, None),
        MemoryDep('buf522', c0, {c0: 605184}, None)]
op491_op492_op493_op522.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf490', c0, {c0: 605184}, None)]
op491_op492_op493_op522.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg257_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg258_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg259_1', c1, {c0: 1576, c1: 384}, None)]
op491_op492_op493_op522.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
    ]
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf492.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf493.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op491_op492_op493_op522.snodes[0] =
op491: SchedulerNode(ComputedBuffer)
op491.writes = [MemoryDep('buf491', c0, {c0: 605184}, None)]
op491.unmet_dependencies = 
    [   MemoryDep('buf471', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf471', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf473', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf490', c0, {c0: 605184}, None)]
op491.met_dependencies = 
    [   MemoryDep('arg251_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg257_1', c1, {c0: 1576, c1: 384}, None)]
op491.outputs = [
    buf491: ComputedBuffer
    buf491.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf491.users = [
        NodeUser(node=SchedulerNode(name='op492'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op493'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op494'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op522'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False),
    ]
]
op491.group.device = cuda:0
op491.group.iteration = (605184, 1)
op491.sizes = ([8, 197, 384], [])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf471_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf473_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg251_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf490_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg257_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op491_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf490', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg257_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf491', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf471', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf471', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf473', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg251_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op491_op492_op493_op522.snodes[1] =
op492: SchedulerNode(ComputedBuffer)
op492.writes = [MemoryDep('buf492', c0, {c0: 1576}, None)]
op492.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 605184}, None)]
op492.met_dependencies = []
op492.outputs = [
    buf492: ComputedBuffer
    buf492.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf492.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op492.group.device = cuda:0
op492.group.iteration = (1576, 384)
op492.sizes = ([1576], [384])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op492_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf492', get_index_1, getitem)
        return store_reduction
op491_op492_op493_op522.snodes[2] =
op493: SchedulerNode(ComputedBuffer)
op493.writes = [MemoryDep('buf493', c0, {c0: 1576}, None)]
op493.unmet_dependencies = [MemoryDep('buf491', c0, {c0: 605184}, None)]
op493.met_dependencies = []
op493.outputs = [
    buf493: ComputedBuffer
    buf493.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf493.users = [NodeUser(node=SchedulerNode(name='op522'), can_inplace=False, is_weak=False)]
]
op493.group.device = cuda:0
op493.group.iteration = (1576, 384)
op493.sizes = ([1576], [384])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op493_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf493', get_index_1, getitem_1)
        return store_reduction
op491_op492_op493_op522.snodes[3] =
op522: SchedulerNode(ComputedBuffer)
op522.writes = [MemoryDep('buf522', c0, {c0: 605184}, None)]
op522.unmet_dependencies = 
    [   MemoryDep('buf491', c0, {c0: 605184}, None),
        MemoryDep('buf492', c0, {c0: 1576}, None),
        MemoryDep('buf493', c0, {c0: 1576}, None)]
op522.met_dependencies = 
    [   MemoryDep('arg258_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg259_1', c1, {c0: 1576, c1: 384}, None)]
op522.outputs = [
    buf522: ComputedBuffer
    buf522.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf522.users = [NodeUser(node=ExternKernelSchedulerNode(name='op523'), can_inplace=False, is_weak=False)]
]
op522.group.device = cuda:0
op522.group.iteration = (605184, 1)
op522.sizes = ([1576, 384], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf492_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf493_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg258_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg259_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf522_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op522_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf492', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf493', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg258_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg259_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf522', get_index_5, add_1, None)
        return store


op499: ExternKernelSchedulerNode(ExternKernelOut)
op499.writes = [StarDep(name='buf499', mode=None)]
op499.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op499.met_dependencies = [StarDep(name='arg266_1', mode=None)]
op499.outputs = [
    buf499: ExternKernelOut
    buf499.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf499.users = [
        NodeUser(node=SchedulerNode(name='op500'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op501'), can_inplace=False, is_weak=False),
    ]
]
op499.node.kernel = extern_kernels.mm


op500: SchedulerNode(ComputedBuffer)
op500.writes = [MemoryDep('buf500', c0, {c0: 602112}, None)]
op500.unmet_dependencies = [   MemoryDep('buf499', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op500.met_dependencies = []
op500.outputs = [
    buf500: ComputedBuffer
    buf500.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf500.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op500.group.device = cuda:0
op500.group.iteration = (602112, 1)
op500.sizes = ([1568, 4, 16, 6], [])
buf499_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf500_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op500_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf500', get_index_1, load, None)
        return store


op501: SchedulerNode(ComputedBuffer)
op501.writes = [MemoryDep('buf501', c0, {c0: 602112}, None)]
op501.unmet_dependencies = [   MemoryDep('buf499', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op501.met_dependencies = []
op501.outputs = [
    buf501: ComputedBuffer
    buf501.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf501.users = [NodeUser(node=ExternKernelSchedulerNode(name='op502'), can_inplace=False, is_weak=False)]
]
op501.group.device = cuda:0
op501.group.iteration = (602112, 1)
op501.sizes = ([1568, 24, 16], [])
buf499_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf501_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op501_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf499', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf501', get_index_1, load, None)
        return store


op502: ExternKernelSchedulerNode(ExternKernelOut)
op502.writes = [StarDep(name='buf502', mode=None)]
op502.unmet_dependencies = [StarDep(name='buf500', mode=None), StarDep(name='buf501', mode=None)]
op502.met_dependencies = []
op502.outputs = [
    buf502: ExternKernelOut
    buf502.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf502.users = [
        NodeUser(node=SchedulerNode(name='op503'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=True, is_weak=False),
    ]
]
op502.node.kernel = extern_kernels.bmm


op503_op504_op506: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op503_op504_op506.writes = 
    [   MemoryDep('buf503', c0, {c0: 100352}, None),
        MemoryDep('buf504', c0, {c0: 100352}, None),
        MemoryDep('buf506', c0, {c0: 1605632}, None)]
op503_op504_op506.unmet_dependencies = [MemoryDep('buf502', c0, {c0: 1605632}, None)]
op503_op504_op506.met_dependencies = []
op503_op504_op506.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf506.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op503_op504_op506.snodes[0] =
op503: SchedulerNode(ComputedBuffer)
op503.writes = [MemoryDep('buf503', c0, {c0: 100352}, None)]
op503.unmet_dependencies = [MemoryDep('buf502', c0, {c0: 1605632}, None)]
op503.met_dependencies = []
op503.outputs = [
    buf503: ComputedBuffer
    buf503.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf503.users = [
        NodeUser(node=SchedulerNode(name='op504'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False),
    ]
]
op503.group.device = cuda:0
op503.group.iteration = (100352, 16)
op503.sizes = ([100352], [16])
buf502_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op503_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf502', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf503', get_index_1, reduction)
        return store_reduction
op503_op504_op506.snodes[1] =
op504: SchedulerNode(ComputedBuffer)
op504.writes = [MemoryDep('buf504', c0, {c0: 100352}, None)]
op504.unmet_dependencies = 
    [   MemoryDep('buf502', c0, {c0: 1605632}, None),
        MemoryDep('buf503', c0, {c0: 100352}, None)]
op504.met_dependencies = []
op504.outputs = [
    buf504: ComputedBuffer
    buf504.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf504.users = [NodeUser(node=SchedulerNode(name='op506'), can_inplace=False, is_weak=False)]
]
op504.group.device = cuda:0
op504.group.iteration = (100352, 16)
op504.sizes = ([100352], [16])
buf502_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf504_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op504_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf502', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf503', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf504', get_index_2, reduction)
        return store_reduction
op503_op504_op506.snodes[2] =
op506: SchedulerNode(ComputedBuffer)
op506.writes = [MemoryDep('buf506', c0, {c0: 1605632}, None)]
op506.unmet_dependencies = 
    [   MemoryDep('buf502', c0, {c0: 1605632}, None),
        MemoryDep('buf503', c0, {c0: 100352}, None),
        MemoryDep('buf504', c0, {c0: 100352}, None)]
op506.met_dependencies = []
op506.outputs = [
    buf506: ComputedBuffer
    buf506.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf506.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op506.group.device = cuda:0
op506.group.iteration = (1605632, 1)
op506.sizes = ([100352, 16], [])
buf502_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf503_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf504_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf506_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op506_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf502', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf503', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf504', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf506', get_index_3, truediv, None)
        return store


op505: ExternKernelSchedulerNode(ExternKernelOut)
op505.writes = [StarDep(name='buf505', mode=None)]
op505.unmet_dependencies = [StarDep(name='buf498', mode=None)]
op505.met_dependencies = [StarDep(name='arg267_1', mode=None)]
op505.outputs = [
    buf505: ExternKernelOut
    buf505.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf505.users = [NodeUser(node=SchedulerNode(name='op507'), can_inplace=False, is_weak=False)]
]
op505.node.kernel = extern_kernels.mm


op507: SchedulerNode(ComputedBuffer)
op507.writes = [MemoryDep('buf507', c0, {c0: 602112}, None)]
op507.unmet_dependencies = [   MemoryDep('buf505', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op507.met_dependencies = []
op507.outputs = [
    buf507: ComputedBuffer
    buf507.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf507.users = [NodeUser(node=ExternKernelSchedulerNode(name='op508'), can_inplace=False, is_weak=False)]
]
op507.group.device = cuda:0
op507.group.iteration = (602112, 1)
op507.sizes = ([1568, 4, 16, 6], [])
buf505_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf507_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op507_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf505', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf507', get_index_1, load, None)
        return store


op508: ExternKernelSchedulerNode(ExternKernelOut)
op508.writes = [StarDep(name='buf508', mode=None)]
op508.unmet_dependencies = [StarDep(name='buf506', mode=None), StarDep(name='buf507', mode=None)]
op508.met_dependencies = []
op508.outputs = [
    buf508: ExternKernelOut
    buf508.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf508.users = [NodeUser(node=SchedulerNode(name='op509'), can_inplace=False, is_weak=False)]
]
op508.node.kernel = extern_kernels.bmm


op509: SchedulerNode(ComputedBuffer)
op509.writes = [MemoryDep('buf509', c0, {c0: 602112}, None)]
op509.unmet_dependencies = [   MemoryDep('buf508', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op509.met_dependencies = []
op509.outputs = [
    buf509: ComputedBuffer
    buf509.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf509.users = [NodeUser(node=ExternKernelSchedulerNode(name='op510'), can_inplace=False, is_weak=False)]
]
op509.group.device = cuda:0
op509.group.iteration = (602112, 1)
op509.sizes = ([1568, 16, 4, 6], [])
buf508_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf509_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op509_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf508', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf509', get_index_1, load, None)
        return store


op510: ExternKernelSchedulerNode(ExternKernelOut)
op510.writes = [StarDep(name='buf510', mode=None)]
op510.unmet_dependencies = [StarDep(name='buf509', mode=None)]
op510.met_dependencies = [StarDep(name='arg268_1', mode=None)]
op510.outputs = [
    buf510: ExternKernelOut
    buf510.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf510.users = [NodeUser(node=SchedulerNode(name='op511'), can_inplace=True, is_weak=False)]
]
op510.node.kernel = extern_kernels.mm


op511_op512_op513_op515: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op511_op512_op513_op515.writes = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf512', c0, {c0: 25088}, None),
        MemoryDep('buf513', c0, {c0: 25088}, None),
        MemoryDep('buf515', c0, {c0: 602112}, None)]
op511_op512_op513_op515.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None),
        MemoryDep('buf510', c0, {c0: 602112}, None)]
op511_op512_op513_op515.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg269_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg270_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg271_1', c1, {c0: 25088, c1: 24}, None)]
op511_op512_op513_op515.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf511.users = [
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False),
    ]
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf512.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf513.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op511_op512_op513_op515.snodes[0] =
op511: SchedulerNode(ComputedBuffer)
op511.writes = [MemoryDep('buf511', c0, {c0: 602112}, None)]
op511.unmet_dependencies = 
    [   MemoryDep('buf456', c0, {c0: 602112}, None),
        MemoryDep('buf463', c0, {c0: 602112}, None),
        MemoryDep('buf510', c0, {c0: 602112}, None)]
op511.met_dependencies = 
    [   MemoryDep('arg247_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg269_1', c1, {c0: 25088, c1: 24}, None)]
op511.outputs = [
    buf511: ComputedBuffer
    buf511.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf511.users = [
        NodeUser(node=SchedulerNode(name='op512'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op513'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op514'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op515'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False),
    ]
]
op511.group.device = cuda:0
op511.group.iteration = (602112, 1)
op511.sizes = ([25088, 24], [])
buf456_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf463_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg247_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf510_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg269_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op511_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf456', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf463', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg247_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf510', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg269_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf511', get_index_5, add_3, None)
        return store
op511_op512_op513_op515.snodes[1] =
op512: SchedulerNode(ComputedBuffer)
op512.writes = [MemoryDep('buf512', c0, {c0: 25088}, None)]
op512.unmet_dependencies = [MemoryDep('buf511', c0, {c0: 602112}, None)]
op512.met_dependencies = []
op512.outputs = [
    buf512: ComputedBuffer
    buf512.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf512.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op512.group.device = cuda:0
op512.group.iteration = (25088, 24)
op512.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op512_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf512', get_index_1, getitem)
        return store_reduction
op511_op512_op513_op515.snodes[2] =
op513: SchedulerNode(ComputedBuffer)
op513.writes = [MemoryDep('buf513', c0, {c0: 25088}, None)]
op513.unmet_dependencies = [MemoryDep('buf511', c0, {c0: 602112}, None)]
op513.met_dependencies = []
op513.outputs = [
    buf513: ComputedBuffer
    buf513.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf513.users = [NodeUser(node=SchedulerNode(name='op515'), can_inplace=False, is_weak=False)]
]
op513.group.device = cuda:0
op513.group.iteration = (25088, 24)
op513.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf513_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op513_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf513', get_index_1, getitem_1)
        return store_reduction
op511_op512_op513_op515.snodes[3] =
op515: SchedulerNode(ComputedBuffer)
op515.writes = [MemoryDep('buf515', c0, {c0: 602112}, None)]
op515.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf512', c0, {c0: 25088}, None),
        MemoryDep('buf513', c0, {c0: 25088}, None)]
op515.met_dependencies = 
    [   MemoryDep('arg270_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg271_1', c1, {c0: 25088, c1: 24}, None)]
op515.outputs = [
    buf515: ComputedBuffer
    buf515.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf515.users = [NodeUser(node=ExternKernelSchedulerNode(name='op516'), can_inplace=False, is_weak=False)]
]
op515.group.device = cuda:0
op515.group.iteration = (602112, 1)
op515.sizes = ([25088, 24], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf512_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf513_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg270_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg271_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf515_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op515_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf512', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf513', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg270_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg271_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf515', get_index_5, add_1, None)
        return store


op516: ExternKernelSchedulerNode(ExternKernelOut)
op516.writes = [StarDep(name='buf516', mode=None)]
op516.unmet_dependencies = [StarDep(name='buf515', mode=None)]
op516.met_dependencies = [StarDep(name='arg272_1', mode=None)]
op516.outputs = [
    buf516: ExternKernelOut
    buf516.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf516.users = [NodeUser(node=SchedulerNode(name='op517'), can_inplace=True, is_weak=False)]
]
op516.node.kernel = extern_kernels.mm


op517: SchedulerNode(ComputedBuffer)
op517.writes = [MemoryDep('buf517', c0, {c0: 2408448}, None)]
op517.unmet_dependencies = [MemoryDep('buf516', c0, {c0: 2408448}, None)]
op517.met_dependencies = [MemoryDep('arg273_1', c1, {c0: 25088, c1: 96}, None)]
op517.outputs = [
    buf517: ComputedBuffer
    buf517.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf517.users = [NodeUser(node=ExternKernelSchedulerNode(name='op518'), can_inplace=False, is_weak=False)]
]
op517.group.device = cuda:0
op517.group.iteration = (2408448, 1)
op517.sizes = ([25088, 96], [])
buf516_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg273_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf517_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op517_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf516', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg273_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf516', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg273_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf517', get_index_4, mul_2, None)
        return store


op518: ExternKernelSchedulerNode(ExternKernelOut)
op518.writes = [StarDep(name='buf518', mode=None)]
op518.unmet_dependencies = [StarDep(name='buf517', mode=None)]
op518.met_dependencies = [StarDep(name='arg274_1', mode=None)]
op518.outputs = [
    buf518: ExternKernelOut
    buf518.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf518.users = [
        NodeUser(node=SchedulerNode(name='op519'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op520'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op521'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op526'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op548'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op549'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op550'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op551'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False),
    ]
]
op518.node.kernel = extern_kernels.mm


op519_op520_op548_op549_op526_op551: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op519_op520_op548_op549_op526_op551.writes = 
    [   MemoryDep('buf519', c0, {c0: 25088}, None),
        MemoryDep('buf520', c0, {c0: 25088}, None),
        MemoryDep('buf526', c0, {c0: 602112}, None),
        MemoryDep('buf548', c0, {c0: 25088}, None),
        MemoryDep('buf549', c0, {c0: 25088}, None),
        MemoryDep('buf551', c0, {c0: 602112}, None)]
op519_op520_op548_op549_op526_op551.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None)]
op519_op520_op548_op549_op526_op551.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg276_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg277_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg292_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg293_1', c1, {c0: 25088, c1: 24}, None)]
op519_op520_op548_op549_op526_op551.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf519.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf520.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf549.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf526.users = [NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
    ]
]
op519_op520_op548_op549_op526_op551.snodes[0] =
op519: SchedulerNode(ComputedBuffer)
op519.writes = [MemoryDep('buf519', c0, {c0: 25088}, None)]
op519.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None)]
op519.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None)]
op519.outputs = [
    buf519: ComputedBuffer
    buf519.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf519.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op519.group.device = cuda:0
op519.group.iteration = (25088, 24)
op519.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op519_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf519', get_index_3, getitem)
        return store_reduction
op519_op520_op548_op549_op526_op551.snodes[1] =
op520: SchedulerNode(ComputedBuffer)
op520.writes = [MemoryDep('buf520', c0, {c0: 25088}, None)]
op520.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None)]
op520.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None)]
op520.outputs = [
    buf520: ComputedBuffer
    buf520.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf520.users = [NodeUser(node=SchedulerNode(name='op526'), can_inplace=False, is_weak=False)]
]
op520.group.device = cuda:0
op520.group.iteration = (25088, 24)
op520.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf520_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op520_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf520', get_index_3, getitem_1)
        return store_reduction
op519_op520_op548_op549_op526_op551.snodes[2] =
op548: SchedulerNode(ComputedBuffer)
op548.writes = [MemoryDep('buf548', c0, {c0: 25088}, None)]
op548.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None)]
op548.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None)]
op548.outputs = [
    buf548: ComputedBuffer
    buf548.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf548.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op548.group.device = cuda:0
op548.group.iteration = (25088, 24)
op548.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op548_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf548', get_index_3, getitem)
        return store_reduction
op519_op520_op548_op549_op526_op551.snodes[3] =
op549: SchedulerNode(ComputedBuffer)
op549.writes = [MemoryDep('buf549', c0, {c0: 25088}, None)]
op549.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None)]
op549.met_dependencies = [MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None)]
op549.outputs = [
    buf549: ComputedBuffer
    buf549.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf549.users = [NodeUser(node=SchedulerNode(name='op551'), can_inplace=False, is_weak=False)]
]
op549.group.device = cuda:0
op549.group.iteration = (25088, 24)
op549.sizes = ([25088], [24])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf549_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op549_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf549', get_index_3, getitem_1)
        return store_reduction
op519_op520_op548_op549_op526_op551.snodes[4] =
op526: SchedulerNode(ComputedBuffer)
op526.writes = [MemoryDep('buf526', c0, {c0: 602112}, None)]
op526.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None),
        MemoryDep('buf519', c0, {c0: 25088}, None),
        MemoryDep('buf520', c0, {c0: 25088}, None)]
op526.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg276_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg277_1', c1, {c0: 25088, c1: 24}, None)]
op526.outputs = [
    buf526: ComputedBuffer
    buf526.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf526.users = [NodeUser(node=ExternKernelSchedulerNode(name='op527'), can_inplace=False, is_weak=False)]
]
op526.group.device = cuda:0
op526.group.iteration = (602112, 1)
op526.sizes = ([25088, 24], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf519_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf520_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg276_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg277_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf526_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op526_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf519', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf520', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg276_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg277_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf526', get_index_7, add_3, None)
        return store
op519_op520_op548_op549_op526_op551.snodes[5] =
op551: SchedulerNode(ComputedBuffer)
op551.writes = [MemoryDep('buf551', c0, {c0: 602112}, None)]
op551.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None),
        MemoryDep('buf548', c0, {c0: 25088}, None),
        MemoryDep('buf549', c0, {c0: 25088}, None)]
op551.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg292_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg293_1', c1, {c0: 25088, c1: 24}, None)]
op551.outputs = [
    buf551: ComputedBuffer
    buf551.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf551.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op552'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op558'), can_inplace=False, is_weak=False),
    ]
]
op551.group.device = cuda:0
op551.group.iteration = (602112, 1)
op551.sizes = ([25088, 24], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf548_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf549_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg292_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg293_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf551_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op551_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf548', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf549', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg292_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg293_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf551', get_index_7, add_3, None)
        return store


op523: ExternKernelSchedulerNode(ExternKernelOut)
op523.writes = [StarDep(name='buf523', mode=None)]
op523.unmet_dependencies = [StarDep(name='buf522', mode=None)]
op523.met_dependencies = [StarDep(name='arg260_1', mode=None)]
op523.outputs = [
    buf523: ExternKernelOut
    buf523.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf523.users = [NodeUser(node=SchedulerNode(name='op524'), can_inplace=True, is_weak=False)]
]
op523.node.kernel = extern_kernels.mm


op524: SchedulerNode(ComputedBuffer)
op524.writes = [MemoryDep('buf524', c0, {c0: 2420736}, None)]
op524.unmet_dependencies = [MemoryDep('buf523', c0, {c0: 2420736}, None)]
op524.met_dependencies = [MemoryDep('arg261_1', c1, {c0: 1576, c1: 1536}, None)]
op524.outputs = [
    buf524: ComputedBuffer
    buf524.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf524.users = [NodeUser(node=ExternKernelSchedulerNode(name='op525'), can_inplace=False, is_weak=False)]
]
op524.group.device = cuda:0
op524.group.iteration = (2420736, 1)
op524.sizes = ([1576, 1536], [])
buf523_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg261_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf524_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op524_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf523', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg261_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf523', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg261_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf524', get_index_4, mul_2, None)
        return store


op525: ExternKernelSchedulerNode(ExternKernelOut)
op525.writes = [StarDep(name='buf525', mode=None)]
op525.unmet_dependencies = [StarDep(name='buf524', mode=None)]
op525.met_dependencies = [StarDep(name='arg262_1', mode=None)]
op525.outputs = [
    buf525: ExternKernelOut
    buf525.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf525.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op525.node.kernel = extern_kernels.mm


op527: ExternKernelSchedulerNode(ExternKernelOut)
op527.writes = [StarDep(name='buf527', mode=None)]
op527.unmet_dependencies = [StarDep(name='buf526', mode=None)]
op527.met_dependencies = [StarDep(name='arg278_1', mode=None)]
op527.outputs = [
    buf527: ExternKernelOut
    buf527.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf527.users = [NodeUser(node=SchedulerNode(name='op528'), can_inplace=False, is_weak=False)]
]
op527.node.kernel = extern_kernels.mm


op528_op529_op530_op532: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op528_op529_op530_op532.writes = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf529', c0, {c0: 1576}, None),
        MemoryDep('buf530', c0, {c0: 1576}, None),
        MemoryDep('buf532', c0, {c0: 605184}, None)]
op528_op529_op530_op532.unmet_dependencies = 
    [   MemoryDep('buf491', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf491', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf525', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf525', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf527', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op528_op529_op530_op532.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg279_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg280_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg281_1', c1, {c0: 1576, c1: 384}, None)]
op528_op529_op530_op532.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf528.users = [
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf529.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf530.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf532.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
    ]
]
op528_op529_op530_op532.snodes[0] =
op528: SchedulerNode(ComputedBuffer)
op528.writes = [MemoryDep('buf528', c0, {c0: 605184}, None)]
op528.unmet_dependencies = 
    [   MemoryDep('buf491', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf491', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf525', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf525', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf527', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op528.met_dependencies = 
    [   MemoryDep('arg263_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg279_1', c1, {c0: 1576, c1: 384}, None)]
op528.outputs = [
    buf528: ComputedBuffer
    buf528.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf528.users = [
        NodeUser(node=SchedulerNode(name='op529'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op530'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op531'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op532'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op528.group.device = cuda:0
op528.group.iteration = (605184, 1)
op528.sizes = ([8, 197, 384], [])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg263_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf491_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf525_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf527_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg279_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op528_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf528', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf525', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg263_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf491', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf525', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg263_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf527', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg279_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op528_op529_op530_op532.snodes[1] =
op529: SchedulerNode(ComputedBuffer)
op529.writes = [MemoryDep('buf529', c0, {c0: 1576}, None)]
op529.unmet_dependencies = [MemoryDep('buf528', c0, {c0: 605184}, None)]
op529.met_dependencies = []
op529.outputs = [
    buf529: ComputedBuffer
    buf529.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf529.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op529.group.device = cuda:0
op529.group.iteration = (1576, 384)
op529.sizes = ([1576], [384])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op529_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf529', get_index_1, getitem)
        return store_reduction
op528_op529_op530_op532.snodes[2] =
op530: SchedulerNode(ComputedBuffer)
op530.writes = [MemoryDep('buf530', c0, {c0: 1576}, None)]
op530.unmet_dependencies = [MemoryDep('buf528', c0, {c0: 605184}, None)]
op530.met_dependencies = []
op530.outputs = [
    buf530: ComputedBuffer
    buf530.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf530.users = [NodeUser(node=SchedulerNode(name='op532'), can_inplace=False, is_weak=False)]
]
op530.group.device = cuda:0
op530.group.iteration = (1576, 384)
op530.sizes = ([1576], [384])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op530_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf530', get_index_1, getitem_1)
        return store_reduction
op528_op529_op530_op532.snodes[3] =
op532: SchedulerNode(ComputedBuffer)
op532.writes = [MemoryDep('buf532', c0, {c0: 605184}, None)]
op532.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf529', c0, {c0: 1576}, None),
        MemoryDep('buf530', c0, {c0: 1576}, None)]
op532.met_dependencies = 
    [   MemoryDep('arg280_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg281_1', c1, {c0: 1576, c1: 384}, None)]
op532.outputs = [
    buf532: ComputedBuffer
    buf532.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf532.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op533'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op539'), can_inplace=False, is_weak=False),
    ]
]
op532.group.device = cuda:0
op532.group.iteration = (605184, 1)
op532.sizes = ([1576, 384], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf529_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf530_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg280_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg281_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf532_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op532_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf529', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf530', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg280_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg281_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf532', get_index_5, add_1, None)
        return store


op533: ExternKernelSchedulerNode(ExternKernelOut)
op533.writes = [StarDep(name='buf533', mode=None)]
op533.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op533.met_dependencies = [StarDep(name='arg282_1', mode=None)]
op533.outputs = [
    buf533: ExternKernelOut
    buf533.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf533.users = [
        NodeUser(node=SchedulerNode(name='op534'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op535'), can_inplace=False, is_weak=False),
    ]
]
op533.node.kernel = extern_kernels.mm


op534: SchedulerNode(ComputedBuffer)
op534.writes = [MemoryDep('buf534', c0, {c0: 605184}, None)]
op534.unmet_dependencies = [   MemoryDep('buf533', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op534.met_dependencies = []
op534.outputs = [
    buf534: ComputedBuffer
    buf534.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf534.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op534.group.device = cuda:0
op534.group.iteration = (605184, 1)
op534.sizes = ([8, 6, 197, 64], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf534_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op534_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf534', get_index_1, load, None)
        return store


op535: SchedulerNode(ComputedBuffer)
op535.writes = [MemoryDep('buf535', c0, {c0: 605184}, None)]
op535.unmet_dependencies = [   MemoryDep('buf533', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op535.met_dependencies = []
op535.outputs = [
    buf535: ComputedBuffer
    buf535.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf535.users = [NodeUser(node=ExternKernelSchedulerNode(name='op536'), can_inplace=False, is_weak=False)]
]
op535.group.device = cuda:0
op535.group.iteration = (605184, 1)
op535.sizes = ([8, 384, 197], [])
buf533_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf535_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op535_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf533', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf535', get_index_1, load, None)
        return store


op536: ExternKernelSchedulerNode(ExternKernelOut)
op536.writes = [StarDep(name='buf536', mode=None)]
op536.unmet_dependencies = [StarDep(name='buf534', mode=None), StarDep(name='buf535', mode=None)]
op536.met_dependencies = []
op536.outputs = [
    buf536: ExternKernelOut
    buf536.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf536.users = [
        NodeUser(node=SchedulerNode(name='op537'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
    ]
]
op536.node.kernel = extern_kernels.bmm


op537_op538_op540: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op537_op538_op540.writes = 
    [   MemoryDep('buf537', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf538', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf540', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op537_op538_op540.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 1862832}, None)]
op537_op538_op540.met_dependencies = []
op537_op538_op540.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf537.users = [
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
    ]
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op537_op538_op540.snodes[0] =
op537: SchedulerNode(ComputedBuffer)
op537.writes = [MemoryDep('buf537', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op537.unmet_dependencies = [MemoryDep('buf536', c0, {c0: 1862832}, None)]
op537.met_dependencies = []
op537.outputs = [
    buf537: ComputedBuffer
    buf537.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf537.users = [
        NodeUser(node=SchedulerNode(name='op538'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False),
    ]
]
op537.group.device = cuda:0
op537.group.iteration = (9456, 197)
op537.sizes = ([8, 1182], [197])
buf536_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op537_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf537', get_index_1, reduction)
        return store_reduction
op537_op538_op540.snodes[1] =
op538: SchedulerNode(ComputedBuffer)
op538.writes = [MemoryDep('buf538', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op538.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 1862832}, None),
        MemoryDep('buf537', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op538.met_dependencies = []
op538.outputs = [
    buf538: ComputedBuffer
    buf538.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf538.users = [NodeUser(node=SchedulerNode(name='op540'), can_inplace=False, is_weak=False)]
]
op538.group.device = cuda:0
op538.group.iteration = (9456, 197)
op538.sizes = ([8, 1182], [197])
buf536_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op538_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf538', get_index_2, reduction)
        return store_reduction
op537_op538_op540.snodes[2] =
op540: SchedulerNode(ComputedBuffer)
op540.writes = [MemoryDep('buf540', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op540.unmet_dependencies = 
    [   MemoryDep('buf536', c0, {c0: 1862832}, None),
        MemoryDep('buf537', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf538', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op540.met_dependencies = []
op540.outputs = [
    buf540: ComputedBuffer
    buf540.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf540.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op540.group.device = cuda:0
op540.group.iteration = (1862832, 1)
op540.sizes = ([8, 6, 197, 197], [])
buf536_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf537_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf538_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf540_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op540_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf536', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf537', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf538', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf540', get_index_3, truediv, None)
        return store


op539: ExternKernelSchedulerNode(ExternKernelOut)
op539.writes = [StarDep(name='buf539', mode=None)]
op539.unmet_dependencies = [StarDep(name='buf532', mode=None)]
op539.met_dependencies = [StarDep(name='arg283_1', mode=None)]
op539.outputs = [
    buf539: ExternKernelOut
    buf539.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf539.users = [NodeUser(node=SchedulerNode(name='op541'), can_inplace=False, is_weak=False)]
]
op539.node.kernel = extern_kernels.mm


op541: SchedulerNode(ComputedBuffer)
op541.writes = [MemoryDep('buf541', c0, {c0: 605184}, None)]
op541.unmet_dependencies = [   MemoryDep('buf539', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op541.met_dependencies = []
op541.outputs = [
    buf541: ComputedBuffer
    buf541.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf541.users = [NodeUser(node=ExternKernelSchedulerNode(name='op542'), can_inplace=False, is_weak=False)]
]
op541.group.device = cuda:0
op541.group.iteration = (605184, 1)
op541.sizes = ([8, 6, 197, 64], [])
buf539_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf541_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op541_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf539', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf541', get_index_1, load, None)
        return store


op542: ExternKernelSchedulerNode(ExternKernelOut)
op542.writes = [StarDep(name='buf542', mode=None)]
op542.unmet_dependencies = [StarDep(name='buf540', mode=None), StarDep(name='buf541', mode=None)]
op542.met_dependencies = []
op542.outputs = [
    buf542: ExternKernelOut
    buf542.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf542.users = [NodeUser(node=SchedulerNode(name='op543'), can_inplace=False, is_weak=False)]
]
op542.node.kernel = extern_kernels.bmm


op543: SchedulerNode(ComputedBuffer)
op543.writes = [MemoryDep('buf543', c0, {c0: 605184}, None)]
op543.unmet_dependencies = [   MemoryDep('buf542', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op543.met_dependencies = []
op543.outputs = [
    buf543: ComputedBuffer
    buf543.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf543.users = [NodeUser(node=ExternKernelSchedulerNode(name='op544'), can_inplace=False, is_weak=False)]
]
op543.group.device = cuda:0
op543.group.iteration = (605184, 1)
op543.sizes = ([8, 197, 6, 64], [])
buf542_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf543_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op543_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf542', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf543', get_index_1, load, None)
        return store


op544: ExternKernelSchedulerNode(ExternKernelOut)
op544.writes = [StarDep(name='buf544', mode=None)]
op544.unmet_dependencies = [StarDep(name='buf543', mode=None)]
op544.met_dependencies = [StarDep(name='arg284_1', mode=None)]
op544.outputs = [
    buf544: ExternKernelOut
    buf544.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf544.users = [
        NodeUser(node=SchedulerNode(name='op545'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op546'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op547'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op575'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False),
    ]
]
op544.node.kernel = extern_kernels.mm


op545_op546_op575: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op545_op546_op575.writes = 
    [   MemoryDep('buf545', c0, {c0: 1576}, None),
        MemoryDep('buf546', c0, {c0: 1576}, None),
        MemoryDep('buf575', c0, {c0: 605184}, None)]
op545_op546_op575.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf544', c0, {c0: 605184}, None)]
op545_op546_op575.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg287_1', c1, {c0: 1576, c1: 384}, None)]
op545_op546_op575.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf545.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf546.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op545_op546_op575.snodes[0] =
op545: SchedulerNode(ComputedBuffer)
op545.writes = [MemoryDep('buf545', c0, {c0: 1576}, None)]
op545.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf544', c0, {c0: 605184}, None)]
op545.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 1576, c1: 384}, None)]
op545.outputs = [
    buf545: ComputedBuffer
    buf545.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf545.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op545.group.device = cuda:0
op545.group.iteration = (1576, 384)
op545.sizes = ([1576], [384])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op545_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf544', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf545', get_index_3, getitem)
        return store_reduction
op545_op546_op575.snodes[1] =
op546: SchedulerNode(ComputedBuffer)
op546.writes = [MemoryDep('buf546', c0, {c0: 1576}, None)]
op546.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf544', c0, {c0: 605184}, None)]
op546.met_dependencies = [MemoryDep('arg285_1', c1, {c0: 1576, c1: 384}, None)]
op546.outputs = [
    buf546: ComputedBuffer
    buf546.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf546.users = [NodeUser(node=SchedulerNode(name='op575'), can_inplace=False, is_weak=False)]
]
op546.group.device = cuda:0
op546.group.iteration = (1576, 384)
op546.sizes = ([1576], [384])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op546_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf544', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf546', get_index_3, getitem_1)
        return store_reduction
op545_op546_op575.snodes[2] =
op575: SchedulerNode(ComputedBuffer)
op575.writes = [MemoryDep('buf575', c0, {c0: 605184}, None)]
op575.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf544', c0, {c0: 605184}, None),
        MemoryDep('buf545', c0, {c0: 1576}, None),
        MemoryDep('buf546', c0, {c0: 1576}, None)]
op575.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg286_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg287_1', c1, {c0: 1576, c1: 384}, None)]
op575.outputs = [
    buf575: ComputedBuffer
    buf575.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf575.users = [NodeUser(node=ExternKernelSchedulerNode(name='op576'), can_inplace=False, is_weak=False)]
]
op575.group.device = cuda:0
op575.group.iteration = (605184, 1)
op575.sizes = ([1576, 384], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf545_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf546_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg286_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg287_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf575_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op575_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf544', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf545', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf546', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg286_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg287_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf575', get_index_7, add_3, None)
        return store


op552: ExternKernelSchedulerNode(ExternKernelOut)
op552.writes = [StarDep(name='buf552', mode=None)]
op552.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op552.met_dependencies = [StarDep(name='arg294_1', mode=None)]
op552.outputs = [
    buf552: ExternKernelOut
    buf552.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf552.users = [
        NodeUser(node=SchedulerNode(name='op553'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op554'), can_inplace=False, is_weak=False),
    ]
]
op552.node.kernel = extern_kernels.mm


op553: SchedulerNode(ComputedBuffer)
op553.writes = [MemoryDep('buf553', c0, {c0: 602112}, None)]
op553.unmet_dependencies = [   MemoryDep('buf552', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op553.met_dependencies = []
op553.outputs = [
    buf553: ComputedBuffer
    buf553.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf553.users = [NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op553.group.device = cuda:0
op553.group.iteration = (602112, 1)
op553.sizes = ([1568, 4, 16, 6], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf553_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op553_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf553', get_index_1, load, None)
        return store


op554: SchedulerNode(ComputedBuffer)
op554.writes = [MemoryDep('buf554', c0, {c0: 602112}, None)]
op554.unmet_dependencies = [   MemoryDep('buf552', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op554.met_dependencies = []
op554.outputs = [
    buf554: ComputedBuffer
    buf554.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf554.users = [NodeUser(node=ExternKernelSchedulerNode(name='op555'), can_inplace=False, is_weak=False)]
]
op554.group.device = cuda:0
op554.group.iteration = (602112, 1)
op554.sizes = ([1568, 24, 16], [])
buf552_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf554_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op554_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf552', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf554', get_index_1, load, None)
        return store


op555: ExternKernelSchedulerNode(ExternKernelOut)
op555.writes = [StarDep(name='buf555', mode=None)]
op555.unmet_dependencies = [StarDep(name='buf553', mode=None), StarDep(name='buf554', mode=None)]
op555.met_dependencies = []
op555.outputs = [
    buf555: ExternKernelOut
    buf555.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf555.users = [
        NodeUser(node=SchedulerNode(name='op556'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=True, is_weak=False),
    ]
]
op555.node.kernel = extern_kernels.bmm


op556_op557_op559: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op556_op557_op559.writes = 
    [   MemoryDep('buf556', c0, {c0: 100352}, None),
        MemoryDep('buf557', c0, {c0: 100352}, None),
        MemoryDep('buf559', c0, {c0: 1605632}, None)]
op556_op557_op559.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 1605632}, None)]
op556_op557_op559.met_dependencies = []
op556_op557_op559.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf556.users = [
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
    ]
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf557.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op556_op557_op559.snodes[0] =
op556: SchedulerNode(ComputedBuffer)
op556.writes = [MemoryDep('buf556', c0, {c0: 100352}, None)]
op556.unmet_dependencies = [MemoryDep('buf555', c0, {c0: 1605632}, None)]
op556.met_dependencies = []
op556.outputs = [
    buf556: ComputedBuffer
    buf556.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf556.users = [
        NodeUser(node=SchedulerNode(name='op557'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False),
    ]
]
op556.group.device = cuda:0
op556.group.iteration = (100352, 16)
op556.sizes = ([100352], [16])
buf555_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op556_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf556', get_index_1, reduction)
        return store_reduction
op556_op557_op559.snodes[1] =
op557: SchedulerNode(ComputedBuffer)
op557.writes = [MemoryDep('buf557', c0, {c0: 100352}, None)]
op557.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 1605632}, None),
        MemoryDep('buf556', c0, {c0: 100352}, None)]
op557.met_dependencies = []
op557.outputs = [
    buf557: ComputedBuffer
    buf557.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf557.users = [NodeUser(node=SchedulerNode(name='op559'), can_inplace=False, is_weak=False)]
]
op557.group.device = cuda:0
op557.group.iteration = (100352, 16)
op557.sizes = ([100352], [16])
buf555_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf557_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op557_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf556', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf557', get_index_2, reduction)
        return store_reduction
op556_op557_op559.snodes[2] =
op559: SchedulerNode(ComputedBuffer)
op559.writes = [MemoryDep('buf559', c0, {c0: 1605632}, None)]
op559.unmet_dependencies = 
    [   MemoryDep('buf555', c0, {c0: 1605632}, None),
        MemoryDep('buf556', c0, {c0: 100352}, None),
        MemoryDep('buf557', c0, {c0: 100352}, None)]
op559.met_dependencies = []
op559.outputs = [
    buf559: ComputedBuffer
    buf559.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf559.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op559.group.device = cuda:0
op559.group.iteration = (1605632, 1)
op559.sizes = ([100352, 16], [])
buf555_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf556_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf557_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf559_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op559_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf555', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf556', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf557', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf559', get_index_3, truediv, None)
        return store


op558: ExternKernelSchedulerNode(ExternKernelOut)
op558.writes = [StarDep(name='buf558', mode=None)]
op558.unmet_dependencies = [StarDep(name='buf551', mode=None)]
op558.met_dependencies = [StarDep(name='arg295_1', mode=None)]
op558.outputs = [
    buf558: ExternKernelOut
    buf558.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf558.users = [NodeUser(node=SchedulerNode(name='op560'), can_inplace=False, is_weak=False)]
]
op558.node.kernel = extern_kernels.mm


op560: SchedulerNode(ComputedBuffer)
op560.writes = [MemoryDep('buf560', c0, {c0: 602112}, None)]
op560.unmet_dependencies = [   MemoryDep('buf558', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op560.met_dependencies = []
op560.outputs = [
    buf560: ComputedBuffer
    buf560.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf560.users = [NodeUser(node=ExternKernelSchedulerNode(name='op561'), can_inplace=False, is_weak=False)]
]
op560.group.device = cuda:0
op560.group.iteration = (602112, 1)
op560.sizes = ([1568, 4, 16, 6], [])
buf558_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf560_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op560_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf558', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf560', get_index_1, load, None)
        return store


op561: ExternKernelSchedulerNode(ExternKernelOut)
op561.writes = [StarDep(name='buf561', mode=None)]
op561.unmet_dependencies = [StarDep(name='buf559', mode=None), StarDep(name='buf560', mode=None)]
op561.met_dependencies = []
op561.outputs = [
    buf561: ExternKernelOut
    buf561.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf561.users = [NodeUser(node=SchedulerNode(name='op562'), can_inplace=False, is_weak=False)]
]
op561.node.kernel = extern_kernels.bmm


op562: SchedulerNode(ComputedBuffer)
op562.writes = [MemoryDep('buf562', c0, {c0: 602112}, None)]
op562.unmet_dependencies = [   MemoryDep('buf561', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op562.met_dependencies = []
op562.outputs = [
    buf562: ComputedBuffer
    buf562.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf562.users = [NodeUser(node=ExternKernelSchedulerNode(name='op563'), can_inplace=False, is_weak=False)]
]
op562.group.device = cuda:0
op562.group.iteration = (602112, 1)
op562.sizes = ([1568, 16, 4, 6], [])
buf561_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf562_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op562_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf561', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf562', get_index_1, load, None)
        return store


op563: ExternKernelSchedulerNode(ExternKernelOut)
op563.writes = [StarDep(name='buf563', mode=None)]
op563.unmet_dependencies = [StarDep(name='buf562', mode=None)]
op563.met_dependencies = [StarDep(name='arg296_1', mode=None)]
op563.outputs = [
    buf563: ExternKernelOut
    buf563.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf563.users = [NodeUser(node=SchedulerNode(name='op564'), can_inplace=True, is_weak=False)]
]
op563.node.kernel = extern_kernels.mm


op564_op565_op566_op568: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op564_op565_op566_op568.writes = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf565', c0, {c0: 25088}, None),
        MemoryDep('buf566', c0, {c0: 25088}, None),
        MemoryDep('buf568', c0, {c0: 602112}, None)]
op564_op565_op566_op568.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None),
        MemoryDep('buf563', c0, {c0: 602112}, None)]
op564_op565_op566_op568.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg297_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg298_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg299_1', c1, {c0: 25088, c1: 24}, None)]
op564_op565_op566_op568.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf564.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=True, is_weak=False),
    ]
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf565.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf566.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op564_op565_op566_op568.snodes[0] =
op564: SchedulerNode(ComputedBuffer)
op564.writes = [MemoryDep('buf564', c0, {c0: 602112}, None)]
op564.unmet_dependencies = 
    [   MemoryDep('buf511', c0, {c0: 602112}, None),
        MemoryDep('buf518', c0, {c0: 602112}, None),
        MemoryDep('buf563', c0, {c0: 602112}, None)]
op564.met_dependencies = 
    [   MemoryDep('arg275_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg297_1', c1, {c0: 25088, c1: 24}, None)]
op564.outputs = [
    buf564: ComputedBuffer
    buf564.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf564.users = [
        NodeUser(node=SchedulerNode(name='op565'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op566'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op567'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op568'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=True, is_weak=False),
    ]
]
op564.group.device = cuda:0
op564.group.iteration = (602112, 1)
op564.sizes = ([25088, 24], [])
buf511_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf518_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg275_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf563_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg297_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op564_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf511', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf518', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg275_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf563', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg297_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf564', get_index_5, add_3, None)
        return store
op564_op565_op566_op568.snodes[1] =
op565: SchedulerNode(ComputedBuffer)
op565.writes = [MemoryDep('buf565', c0, {c0: 25088}, None)]
op565.unmet_dependencies = [MemoryDep('buf564', c0, {c0: 602112}, None)]
op565.met_dependencies = []
op565.outputs = [
    buf565: ComputedBuffer
    buf565.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf565.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op565.group.device = cuda:0
op565.group.iteration = (25088, 24)
op565.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op565_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf565', get_index_1, getitem)
        return store_reduction
op564_op565_op566_op568.snodes[2] =
op566: SchedulerNode(ComputedBuffer)
op566.writes = [MemoryDep('buf566', c0, {c0: 25088}, None)]
op566.unmet_dependencies = [MemoryDep('buf564', c0, {c0: 602112}, None)]
op566.met_dependencies = []
op566.outputs = [
    buf566: ComputedBuffer
    buf566.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf566.users = [NodeUser(node=SchedulerNode(name='op568'), can_inplace=False, is_weak=False)]
]
op566.group.device = cuda:0
op566.group.iteration = (25088, 24)
op566.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf566_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op566_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf566', get_index_1, getitem_1)
        return store_reduction
op564_op565_op566_op568.snodes[3] =
op568: SchedulerNode(ComputedBuffer)
op568.writes = [MemoryDep('buf568', c0, {c0: 602112}, None)]
op568.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf565', c0, {c0: 25088}, None),
        MemoryDep('buf566', c0, {c0: 25088}, None)]
op568.met_dependencies = 
    [   MemoryDep('arg298_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg299_1', c1, {c0: 25088, c1: 24}, None)]
op568.outputs = [
    buf568: ComputedBuffer
    buf568.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf568.users = [NodeUser(node=ExternKernelSchedulerNode(name='op569'), can_inplace=False, is_weak=False)]
]
op568.group.device = cuda:0
op568.group.iteration = (602112, 1)
op568.sizes = ([25088, 24], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf565_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf566_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg298_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg299_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf568_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op568_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf565', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf566', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg298_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg299_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf568', get_index_5, add_1, None)
        return store


op569: ExternKernelSchedulerNode(ExternKernelOut)
op569.writes = [StarDep(name='buf569', mode=None)]
op569.unmet_dependencies = [StarDep(name='buf568', mode=None)]
op569.met_dependencies = [StarDep(name='arg300_1', mode=None)]
op569.outputs = [
    buf569: ExternKernelOut
    buf569.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf569.users = [NodeUser(node=SchedulerNode(name='op570'), can_inplace=True, is_weak=False)]
]
op569.node.kernel = extern_kernels.mm


op570: SchedulerNode(ComputedBuffer)
op570.writes = [MemoryDep('buf570', c0, {c0: 2408448}, None)]
op570.unmet_dependencies = [MemoryDep('buf569', c0, {c0: 2408448}, None)]
op570.met_dependencies = [MemoryDep('arg301_1', c1, {c0: 25088, c1: 96}, None)]
op570.outputs = [
    buf570: ComputedBuffer
    buf570.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf570.users = [NodeUser(node=ExternKernelSchedulerNode(name='op571'), can_inplace=False, is_weak=False)]
]
op570.group.device = cuda:0
op570.group.iteration = (2408448, 1)
op570.sizes = ([25088, 96], [])
buf569_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg301_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf570_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op570_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf569', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg301_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf569', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg301_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf570', get_index_4, mul_2, None)
        return store


op571: ExternKernelSchedulerNode(ExternKernelOut)
op571.writes = [StarDep(name='buf571', mode=None)]
op571.unmet_dependencies = [StarDep(name='buf570', mode=None)]
op571.met_dependencies = [StarDep(name='arg302_1', mode=None)]
op571.outputs = [
    buf571: ExternKernelOut
    buf571.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf571.users = [
        NodeUser(node=SchedulerNode(name='op572'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op573'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op574'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op580'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op603'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op604'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op605'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op606'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op619'), can_inplace=True, is_weak=False),
    ]
]
op571.node.kernel = extern_kernels.mm


op572_op573_op603_op604_op580_op606: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op572_op573_op603_op604_op580_op606.writes = 
    [   MemoryDep('buf572', c0, {c0: 25088}, None),
        MemoryDep('buf573', c0, {c0: 25088}, None),
        MemoryDep('buf580', c0, {c0: 602112}, None),
        MemoryDep('buf603', c0, {c0: 25088}, None),
        MemoryDep('buf604', c0, {c0: 25088}, None),
        MemoryDep('buf606', c0, {c0: 602112}, None)]
op572_op573_op603_op604_op580_op606.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None)]
op572_op573_op603_op604_op580_op606.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg304_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg305_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg320_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg321_1', c1, {c0: 25088, c1: 24}, None)]
op572_op573_op603_op604_op580_op606.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf572.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf573.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf603.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf604.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf606.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
    ]
]
op572_op573_op603_op604_op580_op606.snodes[0] =
op572: SchedulerNode(ComputedBuffer)
op572.writes = [MemoryDep('buf572', c0, {c0: 25088}, None)]
op572.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None)]
op572.met_dependencies = [MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None)]
op572.outputs = [
    buf572: ComputedBuffer
    buf572.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf572.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op572.group.device = cuda:0
op572.group.iteration = (25088, 24)
op572.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op572_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf572', get_index_3, getitem)
        return store_reduction
op572_op573_op603_op604_op580_op606.snodes[1] =
op573: SchedulerNode(ComputedBuffer)
op573.writes = [MemoryDep('buf573', c0, {c0: 25088}, None)]
op573.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None)]
op573.met_dependencies = [MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None)]
op573.outputs = [
    buf573: ComputedBuffer
    buf573.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf573.users = [NodeUser(node=SchedulerNode(name='op580'), can_inplace=False, is_weak=False)]
]
op573.group.device = cuda:0
op573.group.iteration = (25088, 24)
op573.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf573_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op573_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf573', get_index_3, getitem_1)
        return store_reduction
op572_op573_op603_op604_op580_op606.snodes[2] =
op603: SchedulerNode(ComputedBuffer)
op603.writes = [MemoryDep('buf603', c0, {c0: 25088}, None)]
op603.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None)]
op603.met_dependencies = [MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None)]
op603.outputs = [
    buf603: ComputedBuffer
    buf603.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf603.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op603.group.device = cuda:0
op603.group.iteration = (25088, 24)
op603.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op603_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf603', get_index_3, getitem)
        return store_reduction
op572_op573_op603_op604_op580_op606.snodes[3] =
op604: SchedulerNode(ComputedBuffer)
op604.writes = [MemoryDep('buf604', c0, {c0: 25088}, None)]
op604.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None)]
op604.met_dependencies = [MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None)]
op604.outputs = [
    buf604: ComputedBuffer
    buf604.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf604.users = [NodeUser(node=SchedulerNode(name='op606'), can_inplace=False, is_weak=False)]
]
op604.group.device = cuda:0
op604.group.iteration = (25088, 24)
op604.sizes = ([25088], [24])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf604_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op604_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf604', get_index_3, getitem_1)
        return store_reduction
op572_op573_op603_op604_op580_op606.snodes[4] =
op580: SchedulerNode(ComputedBuffer)
op580.writes = [MemoryDep('buf580', c0, {c0: 602112}, None)]
op580.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None),
        MemoryDep('buf572', c0, {c0: 25088}, None),
        MemoryDep('buf573', c0, {c0: 25088}, None)]
op580.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg304_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg305_1', c1, {c0: 25088, c1: 24}, None)]
op580.outputs = [
    buf580: ComputedBuffer
    buf580.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf580.users = [NodeUser(node=ExternKernelSchedulerNode(name='op581'), can_inplace=False, is_weak=False)]
]
op580.group.device = cuda:0
op580.group.iteration = (602112, 1)
op580.sizes = ([25088, 24], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf572_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf573_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg304_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg305_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf580_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op580_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf572', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf573', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg304_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg305_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf580', get_index_7, add_3, None)
        return store
op572_op573_op603_op604_op580_op606.snodes[5] =
op606: SchedulerNode(ComputedBuffer)
op606.writes = [MemoryDep('buf606', c0, {c0: 602112}, None)]
op606.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None),
        MemoryDep('buf603', c0, {c0: 25088}, None),
        MemoryDep('buf604', c0, {c0: 25088}, None)]
op606.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg320_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg321_1', c1, {c0: 25088, c1: 24}, None)]
op606.outputs = [
    buf606: ComputedBuffer
    buf606.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf606.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op607'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op613'), can_inplace=False, is_weak=False),
    ]
]
op606.group.device = cuda:0
op606.group.iteration = (602112, 1)
op606.sizes = ([25088, 24], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf603_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf604_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg320_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg321_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf606_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op606_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf603', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf604', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg320_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg321_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf606', get_index_7, add_3, None)
        return store


op576: ExternKernelSchedulerNode(ExternKernelOut)
op576.writes = [StarDep(name='buf576', mode=None)]
op576.unmet_dependencies = [StarDep(name='buf575', mode=None)]
op576.met_dependencies = [StarDep(name='arg288_1', mode=None)]
op576.outputs = [
    buf576: ExternKernelOut
    buf576.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf576.users = [NodeUser(node=SchedulerNode(name='op577'), can_inplace=True, is_weak=False)]
]
op576.node.kernel = extern_kernels.mm


op577: SchedulerNode(ComputedBuffer)
op577.writes = [MemoryDep('buf577', c0, {c0: 2420736}, None)]
op577.unmet_dependencies = [MemoryDep('buf576', c0, {c0: 2420736}, None)]
op577.met_dependencies = [MemoryDep('arg289_1', c1, {c0: 1576, c1: 1536}, None)]
op577.outputs = [
    buf577: ComputedBuffer
    buf577.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf577.users = [NodeUser(node=ExternKernelSchedulerNode(name='op578'), can_inplace=False, is_weak=False)]
]
op577.group.device = cuda:0
op577.group.iteration = (2420736, 1)
op577.sizes = ([1576, 1536], [])
buf576_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg289_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf577_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op577_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf576', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg289_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf576', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg289_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf577', get_index_4, mul_2, None)
        return store


op578: ExternKernelSchedulerNode(ExternKernelOut)
op578.writes = [StarDep(name='buf578', mode=None)]
op578.unmet_dependencies = [StarDep(name='buf577', mode=None)]
op578.met_dependencies = [StarDep(name='arg290_1', mode=None)]
op578.outputs = [
    buf578: ExternKernelOut
    buf578.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf578.users = [NodeUser(node=SchedulerNode(name='op579'), can_inplace=True, is_weak=False)]
]
op578.node.kernel = extern_kernels.mm


op579: SchedulerNode(ComputedBuffer)
op579.writes = [MemoryDep('buf579', c0, {c0: 605184}, None)]
op579.unmet_dependencies = 
    [   MemoryDep('buf528', c0, {c0: 605184}, None),
        MemoryDep('buf544', c0, {c0: 605184}, None),
        MemoryDep('buf578', c0, {c0: 605184}, None)]
op579.met_dependencies = 
    [   MemoryDep('arg285_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg291_1', c1, {c0: 1576, c1: 384}, None)]
op579.outputs = [
    buf579: ComputedBuffer
    buf579.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf579.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
    ]
]
op579.group.device = cuda:0
op579.group.iteration = (605184, 1)
op579.sizes = ([1576, 384], [])
buf528_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf544_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg285_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf578_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg291_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op579_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf528', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf544', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg285_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf578', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg291_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf579', get_index_5, add_3, None)
        return store


op581: ExternKernelSchedulerNode(ExternKernelOut)
op581.writes = [StarDep(name='buf581', mode=None)]
op581.unmet_dependencies = [StarDep(name='buf580', mode=None)]
op581.met_dependencies = [StarDep(name='arg306_1', mode=None)]
op581.outputs = [
    buf581: ExternKernelOut
    buf581.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf581.users = [
        NodeUser(node=SchedulerNode(name='op582'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op583'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op584'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op599'), can_inplace=False, is_weak=False),
    ]
]
op581.node.kernel = extern_kernels.mm


op582_op583_op585_op586: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op582_op583_op585_op586.writes = 
    [   MemoryDep('buf582', c0, {c0: 1576}, None),
        MemoryDep('buf583', c0, {c0: 1576}, None),
        MemoryDep('buf585', c0, {c0: 605184}, None),
        MemoryDep('buf586', c0, {c0: 605184}, None)]
op582_op583_op585_op586.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op582_op583_op585_op586.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg308_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg309_1', c1, {c0: 1576, c1: 384}, None)]
op582_op583_op585_op586.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf582.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf583.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf585.users = [NodeUser(node=SchedulerNode(name='op586'), can_inplace=True, is_weak=False)]
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf586.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False),
    ]
]
op582_op583_op585_op586.snodes[0] =
op582: SchedulerNode(ComputedBuffer)
op582.writes = [MemoryDep('buf582', c0, {c0: 1576}, None)]
op582.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op582.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None)]
op582.outputs = [
    buf582: ComputedBuffer
    buf582.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf582.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op582.group.device = cuda:0
op582.group.iteration = (1576, 384)
op582.sizes = ([8, 197], [384])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op582_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf582', get_index_4, getitem)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf579', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf581', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg307_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op582_op583_op585_op586.snodes[1] =
op583: SchedulerNode(ComputedBuffer)
op583.writes = [MemoryDep('buf583', c0, {c0: 1576}, None)]
op583.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op583.met_dependencies = [MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None)]
op583.outputs = [
    buf583: ComputedBuffer
    buf583.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf583.users = [NodeUser(node=SchedulerNode(name='op585'), can_inplace=False, is_weak=False)]
]
op583.group.device = cuda:0
op583.group.iteration = (1576, 384)
op583.sizes = ([8, 197], [384])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op583_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', where)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_4 = self.get_index('index5')
        store_reduction = ops.store_reduction('buf583', get_index_4, getitem_1)
        return store_reduction
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf579', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf581', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg307_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op582_op583_op585_op586.snodes[2] =
op585: SchedulerNode(ComputedBuffer)
op585.writes = [MemoryDep('buf585', c0, {c0: 605184}, None)]
op585.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf582', c0, {c0: 1576}, None),
        MemoryDep('buf583', c0, {c0: 1576}, None)]
op585.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg308_1', c1, {c0: 1576, c1: 384}, None)]
op585.outputs = [
    buf585: ComputedBuffer
    buf585.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf585.users = [NodeUser(node=SchedulerNode(name='op586'), can_inplace=True, is_weak=False)]
]
op585.group.device = cuda:0
op585.group.iteration = (605184, 1)
op585.sizes = ([8, 197, 384], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf582_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf583_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg308_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op585_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 197*z0 + z1
    index6 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf582', get_index_4)
        sub = ops.sub(where, load)
        get_index_5 = self.get_index('index5')
        load_1 = ops.load('buf583', get_index_5)
        constant_4 = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_1, constant_4)
        constant_5 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_5)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_6 = self.get_index('index4')
        load_2 = ops.load('arg308_1', get_index_6)
        mul_1 = ops.mul(mul, load_2)
        get_index_7 = self.get_index('index6')
        store = ops.store('buf585', get_index_7, mul_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf579', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf581', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg307_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op582_op583_op585_op586.snodes[3] =
op586: SchedulerNode(ComputedBuffer)
op586.writes = [MemoryDep('buf586', c0, {c0: 605184}, None)]
op586.unmet_dependencies = [MemoryDep('buf585', c0, {c0: 605184}, None)]
op586.met_dependencies = [MemoryDep('arg309_1', c1, {c0: 1576, c1: 384}, None)]
op586.outputs = [
    buf586: ComputedBuffer
    buf586.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf586.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op587'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op593'), can_inplace=False, is_weak=False),
    ]
]
op586.group.device = cuda:0
op586.group.iteration = (605184, 1)
op586.sizes = ([1576, 384], [])
buf585_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
arg309_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf586_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op586_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf585', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg309_1', get_index_1)
        add = ops.add(load, load_1)
        get_index_2 = self.get_index('index0')
        store = ops.store('buf586', get_index_2, add, None)
        return store


op587: ExternKernelSchedulerNode(ExternKernelOut)
op587.writes = [StarDep(name='buf587', mode=None)]
op587.unmet_dependencies = [StarDep(name='buf586', mode=None)]
op587.met_dependencies = [StarDep(name='arg310_1', mode=None)]
op587.outputs = [
    buf587: ExternKernelOut
    buf587.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf587.users = [
        NodeUser(node=SchedulerNode(name='op588'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op589'), can_inplace=False, is_weak=False),
    ]
]
op587.node.kernel = extern_kernels.mm


op588: SchedulerNode(ComputedBuffer)
op588.writes = [MemoryDep('buf588', c0, {c0: 605184}, None)]
op588.unmet_dependencies = [   MemoryDep('buf587', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op588.met_dependencies = []
op588.outputs = [
    buf588: ComputedBuffer
    buf588.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf588.users = [NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op588.group.device = cuda:0
op588.group.iteration = (605184, 1)
op588.sizes = ([8, 6, 197, 64], [])
buf587_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf588_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op588_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf588', get_index_1, load, None)
        return store


op589: SchedulerNode(ComputedBuffer)
op589.writes = [MemoryDep('buf589', c0, {c0: 605184}, None)]
op589.unmet_dependencies = [   MemoryDep('buf587', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op589.met_dependencies = []
op589.outputs = [
    buf589: ComputedBuffer
    buf589.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf589.users = [NodeUser(node=ExternKernelSchedulerNode(name='op590'), can_inplace=False, is_weak=False)]
]
op589.group.device = cuda:0
op589.group.iteration = (605184, 1)
op589.sizes = ([8, 384, 197], [])
buf587_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf589_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op589_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf587', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf589', get_index_1, load, None)
        return store


op590: ExternKernelSchedulerNode(ExternKernelOut)
op590.writes = [StarDep(name='buf590', mode=None)]
op590.unmet_dependencies = [StarDep(name='buf588', mode=None), StarDep(name='buf589', mode=None)]
op590.met_dependencies = []
op590.outputs = [
    buf590: ExternKernelOut
    buf590.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf590.users = [
        NodeUser(node=SchedulerNode(name='op591'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
    ]
]
op590.node.kernel = extern_kernels.bmm


op591_op592_op594: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op591_op592_op594.writes = 
    [   MemoryDep('buf591', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf592', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf594', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op591_op592_op594.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 1862832}, None)]
op591_op592_op594.met_dependencies = []
op591_op592_op594.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf591.users = [
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
    ]
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf592.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op591_op592_op594.snodes[0] =
op591: SchedulerNode(ComputedBuffer)
op591.writes = [MemoryDep('buf591', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op591.unmet_dependencies = [MemoryDep('buf590', c0, {c0: 1862832}, None)]
op591.met_dependencies = []
op591.outputs = [
    buf591: ComputedBuffer
    buf591.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf591.users = [
        NodeUser(node=SchedulerNode(name='op592'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False),
    ]
]
op591.group.device = cuda:0
op591.group.iteration = (9456, 197)
op591.sizes = ([8, 1182], [197])
buf590_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op591_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf591', get_index_1, reduction)
        return store_reduction
op591_op592_op594.snodes[1] =
op592: SchedulerNode(ComputedBuffer)
op592.writes = [MemoryDep('buf592', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op592.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 1862832}, None),
        MemoryDep('buf591', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op592.met_dependencies = []
op592.outputs = [
    buf592: ComputedBuffer
    buf592.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf592.users = [NodeUser(node=SchedulerNode(name='op594'), can_inplace=False, is_weak=False)]
]
op592.group.device = cuda:0
op592.group.iteration = (9456, 197)
op592.sizes = ([8, 1182], [197])
buf590_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op592_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf591', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf592', get_index_2, reduction)
        return store_reduction
op591_op592_op594.snodes[2] =
op594: SchedulerNode(ComputedBuffer)
op594.writes = [MemoryDep('buf594', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op594.unmet_dependencies = 
    [   MemoryDep('buf590', c0, {c0: 1862832}, None),
        MemoryDep('buf591', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf592', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op594.met_dependencies = []
op594.outputs = [
    buf594: ComputedBuffer
    buf594.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf594.users = [NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op594.group.device = cuda:0
op594.group.iteration = (1862832, 1)
op594.sizes = ([8, 6, 197, 197], [])
buf590_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf591_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf592_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf594_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op594_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf590', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf591', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf592', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf594', get_index_3, truediv, None)
        return store


op593: ExternKernelSchedulerNode(ExternKernelOut)
op593.writes = [StarDep(name='buf593', mode=None)]
op593.unmet_dependencies = [StarDep(name='buf586', mode=None)]
op593.met_dependencies = [StarDep(name='arg311_1', mode=None)]
op593.outputs = [
    buf593: ExternKernelOut
    buf593.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf593.users = [NodeUser(node=SchedulerNode(name='op595'), can_inplace=False, is_weak=False)]
]
op593.node.kernel = extern_kernels.mm


op595: SchedulerNode(ComputedBuffer)
op595.writes = [MemoryDep('buf595', c0, {c0: 605184}, None)]
op595.unmet_dependencies = [   MemoryDep('buf593', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op595.met_dependencies = []
op595.outputs = [
    buf595: ComputedBuffer
    buf595.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf595.users = [NodeUser(node=ExternKernelSchedulerNode(name='op596'), can_inplace=False, is_weak=False)]
]
op595.group.device = cuda:0
op595.group.iteration = (605184, 1)
op595.sizes = ([8, 6, 197, 64], [])
buf593_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf595_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op595_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf593', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf595', get_index_1, load, None)
        return store


op596: ExternKernelSchedulerNode(ExternKernelOut)
op596.writes = [StarDep(name='buf596', mode=None)]
op596.unmet_dependencies = [StarDep(name='buf594', mode=None), StarDep(name='buf595', mode=None)]
op596.met_dependencies = []
op596.outputs = [
    buf596: ExternKernelOut
    buf596.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf596.users = [NodeUser(node=SchedulerNode(name='op597'), can_inplace=False, is_weak=False)]
]
op596.node.kernel = extern_kernels.bmm


op597: SchedulerNode(ComputedBuffer)
op597.writes = [MemoryDep('buf597', c0, {c0: 605184}, None)]
op597.unmet_dependencies = [   MemoryDep('buf596', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op597.met_dependencies = []
op597.outputs = [
    buf597: ComputedBuffer
    buf597.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf597.users = [NodeUser(node=ExternKernelSchedulerNode(name='op598'), can_inplace=False, is_weak=False)]
]
op597.group.device = cuda:0
op597.group.iteration = (605184, 1)
op597.sizes = ([8, 197, 6, 64], [])
buf596_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf597_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op597_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf596', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf597', get_index_1, load, None)
        return store


op598: ExternKernelSchedulerNode(ExternKernelOut)
op598.writes = [StarDep(name='buf598', mode=None)]
op598.unmet_dependencies = [StarDep(name='buf597', mode=None)]
op598.met_dependencies = [StarDep(name='arg312_1', mode=None)]
op598.outputs = [
    buf598: ExternKernelOut
    buf598.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf598.users = [NodeUser(node=SchedulerNode(name='op599'), can_inplace=True, is_weak=False)]
]
op598.node.kernel = extern_kernels.mm


op599_op600_op601_op630: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op599_op600_op601_op630.writes = 
    [   MemoryDep('buf599', c0, {c0: 605184}, None),
        MemoryDep('buf600', c0, {c0: 1576}, None),
        MemoryDep('buf601', c0, {c0: 1576}, None),
        MemoryDep('buf630', c0, {c0: 605184}, None)]
op599_op600_op601_op630.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf598', c0, {c0: 605184}, None)]
op599_op600_op601_op630.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg313_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg314_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg315_1', c1, {c0: 1576, c1: 384}, None)]
op599_op600_op601_op630.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf599.users = [
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
    ]
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf600.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf601.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf630.users = [NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op599_op600_op601_op630.snodes[0] =
op599: SchedulerNode(ComputedBuffer)
op599.writes = [MemoryDep('buf599', c0, {c0: 605184}, None)]
op599.unmet_dependencies = 
    [   MemoryDep('buf579', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf579', 75648*c0 + c2, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf581', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf598', c0, {c0: 605184}, None)]
op599.met_dependencies = 
    [   MemoryDep('arg307_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg313_1', c1, {c0: 1576, c1: 384}, None)]
op599.outputs = [
    buf599: ComputedBuffer
    buf599.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf599.users = [
        NodeUser(node=SchedulerNode(name='op600'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op601'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op602'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op630'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False),
    ]
]
op599.group.device = cuda:0
op599.group.iteration = (605184, 1)
op599.sizes = ([8, 197, 384], [])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf579_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf581_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg307_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf598_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg313_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op599_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2
    index2 = 75648*z0 + z2 + 384*I + 384
    index3 = 75264*z0 + z2 + 384*I
    index4 = z2
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        load = ops.load('buf598', get_index_4)
        get_index_5 = self.get_index('index4')
        load_1 = ops.load('arg313_1', get_index_5)
        add = ops.add(load, load_1)
        add_1 = ops.add(where, add)
        get_index_6 = self.get_index('index5')
        store = ops.store('buf599', get_index_6, add_1, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf579', get_index)
        return load
    def masked_subblock2(self, ops):
        get_index = self.get_index('index2')
        load = ops.load('buf579', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf581', get_index_1)
        get_index_2 = self.get_index('index4')
        load_2 = ops.load('arg307_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
op599_op600_op601_op630.snodes[1] =
op600: SchedulerNode(ComputedBuffer)
op600.writes = [MemoryDep('buf600', c0, {c0: 1576}, None)]
op600.unmet_dependencies = [MemoryDep('buf599', c0, {c0: 605184}, None)]
op600.met_dependencies = []
op600.outputs = [
    buf600: ComputedBuffer
    buf600.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf600.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op600.group.device = cuda:0
op600.group.iteration = (1576, 384)
op600.sizes = ([1576], [384])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op600_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf600', get_index_1, getitem)
        return store_reduction
op599_op600_op601_op630.snodes[2] =
op601: SchedulerNode(ComputedBuffer)
op601.writes = [MemoryDep('buf601', c0, {c0: 1576}, None)]
op601.unmet_dependencies = [MemoryDep('buf599', c0, {c0: 605184}, None)]
op601.met_dependencies = []
op601.outputs = [
    buf601: ComputedBuffer
    buf601.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf601.users = [NodeUser(node=SchedulerNode(name='op630'), can_inplace=False, is_weak=False)]
]
op601.group.device = cuda:0
op601.group.iteration = (1576, 384)
op601.sizes = ([1576], [384])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op601_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf601', get_index_1, getitem_1)
        return store_reduction
op599_op600_op601_op630.snodes[3] =
op630: SchedulerNode(ComputedBuffer)
op630.writes = [MemoryDep('buf630', c0, {c0: 605184}, None)]
op630.unmet_dependencies = 
    [   MemoryDep('buf599', c0, {c0: 605184}, None),
        MemoryDep('buf600', c0, {c0: 1576}, None),
        MemoryDep('buf601', c0, {c0: 1576}, None)]
op630.met_dependencies = 
    [   MemoryDep('arg314_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg315_1', c1, {c0: 1576, c1: 384}, None)]
op630.outputs = [
    buf630: ComputedBuffer
    buf630.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf630.users = [NodeUser(node=ExternKernelSchedulerNode(name='op631'), can_inplace=False, is_weak=False)]
]
op630.group.device = cuda:0
op630.group.iteration = (605184, 1)
op630.sizes = ([1576, 384], [])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf600_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf601_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg314_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg315_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf630_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op630_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf600', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf601', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg314_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg315_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf630', get_index_5, add_1, None)
        return store


op607: ExternKernelSchedulerNode(ExternKernelOut)
op607.writes = [StarDep(name='buf607', mode=None)]
op607.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op607.met_dependencies = [StarDep(name='arg322_1', mode=None)]
op607.outputs = [
    buf607: ExternKernelOut
    buf607.layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
    buf607.users = [
        NodeUser(node=SchedulerNode(name='op608'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op609'), can_inplace=False, is_weak=False),
    ]
]
op607.node.kernel = extern_kernels.mm


op608: SchedulerNode(ComputedBuffer)
op608.writes = [MemoryDep('buf608', c0, {c0: 602112}, None)]
op608.unmet_dependencies = [   MemoryDep('buf607', 768*c0 + 6*c1 + 48*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op608.met_dependencies = []
op608.outputs = [
    buf608: ComputedBuffer
    buf608.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf608.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op608.group.device = cuda:0
op608.group.iteration = (602112, 1)
op608.sizes = ([1568, 4, 16, 6], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf608_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op608_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 768*z0 + 6*z1 + 48*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf608', get_index_1, load, None)
        return store


op609: SchedulerNode(ComputedBuffer)
op609.writes = [MemoryDep('buf609', c0, {c0: 602112}, None)]
op609.unmet_dependencies = [   MemoryDep('buf607', 768*c0 + c1 + 48*c2 + 24, {c0: 1568, c1: 24, c2: 16}, None)]
op609.met_dependencies = []
op609.outputs = [
    buf609: ComputedBuffer
    buf609.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
    buf609.users = [NodeUser(node=ExternKernelSchedulerNode(name='op610'), can_inplace=False, is_weak=False)]
]
op609.group.device = cuda:0
op609.group.iteration = (602112, 1)
op609.sizes = ([1568, 24, 16], [])
buf607_layout = FixedLayout('cuda', torch.float32, size=[25088, 48], stride=[48, 1])
buf609_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 6, 16], stride=[384, 96, 16, 1])
class op609_loop_body:
    var_ranges = {z0: 1568, z1: 24, z2: 16}
    index0 = 768*z0 + z1 + 48*z2 + 24
    index1 = 384*z0 + 16*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf607', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf609', get_index_1, load, None)
        return store


op610: ExternKernelSchedulerNode(ExternKernelOut)
op610.writes = [StarDep(name='buf610', mode=None)]
op610.unmet_dependencies = [StarDep(name='buf608', mode=None), StarDep(name='buf609', mode=None)]
op610.met_dependencies = []
op610.outputs = [
    buf610: ExternKernelOut
    buf610.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
    buf610.users = [
        NodeUser(node=SchedulerNode(name='op611'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=True, is_weak=False),
    ]
]
op610.node.kernel = extern_kernels.bmm


op611_op612_op614: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op611_op612_op614.writes = 
    [   MemoryDep('buf611', c0, {c0: 100352}, None),
        MemoryDep('buf612', c0, {c0: 100352}, None),
        MemoryDep('buf614', c0, {c0: 1605632}, None)]
op611_op612_op614.unmet_dependencies = [MemoryDep('buf610', c0, {c0: 1605632}, None)]
op611_op612_op614.met_dependencies = []
op611_op612_op614.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf612.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf614.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op611_op612_op614.snodes[0] =
op611: SchedulerNode(ComputedBuffer)
op611.writes = [MemoryDep('buf611', c0, {c0: 100352}, None)]
op611.unmet_dependencies = [MemoryDep('buf610', c0, {c0: 1605632}, None)]
op611.met_dependencies = []
op611.outputs = [
    buf611: ComputedBuffer
    buf611.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf611.users = [
        NodeUser(node=SchedulerNode(name='op612'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False),
    ]
]
op611.group.device = cuda:0
op611.group.iteration = (100352, 16)
op611.sizes = ([100352], [16])
buf610_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op611_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf611', get_index_1, reduction)
        return store_reduction
op611_op612_op614.snodes[1] =
op612: SchedulerNode(ComputedBuffer)
op612.writes = [MemoryDep('buf612', c0, {c0: 100352}, None)]
op612.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 1605632}, None),
        MemoryDep('buf611', c0, {c0: 100352}, None)]
op612.met_dependencies = []
op612.outputs = [
    buf612: ComputedBuffer
    buf612.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
    buf612.users = [NodeUser(node=SchedulerNode(name='op614'), can_inplace=False, is_weak=False)]
]
op612.group.device = cuda:0
op612.group.iteration = (100352, 16)
op612.sizes = ([100352], [16])
buf610_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf612_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
class op612_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf611', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf612', get_index_2, reduction)
        return store_reduction
op611_op612_op614.snodes[2] =
op614: SchedulerNode(ComputedBuffer)
op614.writes = [MemoryDep('buf614', c0, {c0: 1605632}, None)]
op614.unmet_dependencies = 
    [   MemoryDep('buf610', c0, {c0: 1605632}, None),
        MemoryDep('buf611', c0, {c0: 100352}, None),
        MemoryDep('buf612', c0, {c0: 100352}, None)]
op614.met_dependencies = []
op614.outputs = [
    buf614: ComputedBuffer
    buf614.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
    buf614.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op614.group.device = cuda:0
op614.group.iteration = (1605632, 1)
op614.sizes = ([100352, 16], [])
buf610_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 16], stride=[256, 16, 1])
buf611_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf612_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 1], stride=[64, 16, 1, 100352])
buf614_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 16], stride=[1024, 256, 16, 1])
class op614_loop_body:
    var_ranges = {z0: 100352, z1: 16}
    index0 = 16*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf610', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf611', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.408248290463863, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf612', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index0')
        store = ops.store('buf614', get_index_3, truediv, None)
        return store


op613: ExternKernelSchedulerNode(ExternKernelOut)
op613.writes = [StarDep(name='buf613', mode=None)]
op613.unmet_dependencies = [StarDep(name='buf606', mode=None)]
op613.met_dependencies = [StarDep(name='arg323_1', mode=None)]
op613.outputs = [
    buf613: ExternKernelOut
    buf613.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf613.users = [NodeUser(node=SchedulerNode(name='op615'), can_inplace=False, is_weak=False)]
]
op613.node.kernel = extern_kernels.mm


op615: SchedulerNode(ComputedBuffer)
op615.writes = [MemoryDep('buf615', c0, {c0: 602112}, None)]
op615.unmet_dependencies = [   MemoryDep('buf613', 384*c0 + 6*c1 + 24*c2 + c3, {c0: 1568, c1: 4, c2: 16, c3: 6}, None)]
op615.met_dependencies = []
op615.outputs = [
    buf615: ComputedBuffer
    buf615.layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
    buf615.users = [NodeUser(node=ExternKernelSchedulerNode(name='op616'), can_inplace=False, is_weak=False)]
]
op615.group.device = cuda:0
op615.group.iteration = (602112, 1)
op615.sizes = ([1568, 4, 16, 6], [])
buf613_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
buf615_layout = FixedLayout('cuda', torch.float32, size=[1568, 4, 16, 6], stride=[384, 96, 6, 1])
class op615_loop_body:
    var_ranges = {z0: 1568, z1: 4, z2: 16, z3: 6}
    index0 = 384*z0 + 6*z1 + 24*z2 + z3
    index1 = 384*z0 + 96*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf613', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf615', get_index_1, load, None)
        return store


op616: ExternKernelSchedulerNode(ExternKernelOut)
op616.writes = [StarDep(name='buf616', mode=None)]
op616.unmet_dependencies = [StarDep(name='buf614', mode=None), StarDep(name='buf615', mode=None)]
op616.met_dependencies = []
op616.outputs = [
    buf616: ExternKernelOut
    buf616.layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
    buf616.users = [NodeUser(node=SchedulerNode(name='op617'), can_inplace=False, is_weak=False)]
]
op616.node.kernel = extern_kernels.bmm


op617: SchedulerNode(ComputedBuffer)
op617.writes = [MemoryDep('buf617', c0, {c0: 602112}, None)]
op617.unmet_dependencies = [   MemoryDep('buf616', 384*c0 + 6*c1 + 96*c2 + c3, {c0: 1568, c1: 16, c2: 4, c3: 6}, None)]
op617.met_dependencies = []
op617.outputs = [
    buf617: ComputedBuffer
    buf617.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
    buf617.users = [NodeUser(node=ExternKernelSchedulerNode(name='op618'), can_inplace=False, is_weak=False)]
]
op617.group.device = cuda:0
op617.group.iteration = (602112, 1)
op617.sizes = ([1568, 16, 4, 6], [])
buf616_layout = FixedLayout('cuda', torch.float32, size=[6272, 16, 6], stride=[96, 6, 1])
buf617_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 4, 6], stride=[384, 24, 6, 1])
class op617_loop_body:
    var_ranges = {z0: 1568, z1: 16, z2: 4, z3: 6}
    index0 = 384*z0 + 6*z1 + 96*z2 + z3
    index1 = 384*z0 + 24*z1 + 6*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf616', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf617', get_index_1, load, None)
        return store


op618: ExternKernelSchedulerNode(ExternKernelOut)
op618.writes = [StarDep(name='buf618', mode=None)]
op618.unmet_dependencies = [StarDep(name='buf617', mode=None)]
op618.met_dependencies = [StarDep(name='arg324_1', mode=None)]
op618.outputs = [
    buf618: ExternKernelOut
    buf618.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf618.users = [NodeUser(node=SchedulerNode(name='op619'), can_inplace=True, is_weak=False)]
]
op618.node.kernel = extern_kernels.mm


op619_op620_op621_op623: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op619_op620_op621_op623.writes = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf620', c0, {c0: 25088}, None),
        MemoryDep('buf621', c0, {c0: 25088}, None),
        MemoryDep('buf623', c0, {c0: 602112}, None)]
op619_op620_op621_op623.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None),
        MemoryDep('buf618', c0, {c0: 602112}, None)]
op619_op620_op621_op623.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg325_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg326_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg327_1', c1, {c0: 25088, c1: 24}, None)]
op619_op620_op621_op623.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf619.users = [
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False),
    ]
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf620.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op619_op620_op621_op623.snodes[0] =
op619: SchedulerNode(ComputedBuffer)
op619.writes = [MemoryDep('buf619', c0, {c0: 602112}, None)]
op619.unmet_dependencies = 
    [   MemoryDep('buf564', c0, {c0: 602112}, None),
        MemoryDep('buf571', c0, {c0: 602112}, None),
        MemoryDep('buf618', c0, {c0: 602112}, None)]
op619.met_dependencies = 
    [   MemoryDep('arg303_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg325_1', c1, {c0: 25088, c1: 24}, None)]
op619.outputs = [
    buf619: ComputedBuffer
    buf619.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf619.users = [
        NodeUser(node=SchedulerNode(name='op620'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op621'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op622'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op623'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False),
    ]
]
op619.group.device = cuda:0
op619.group.iteration = (602112, 1)
op619.sizes = ([25088, 24], [])
buf564_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf571_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg303_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf618_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg325_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op619_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf564', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf571', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg303_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf618', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg325_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf619', get_index_5, add_3, None)
        return store
op619_op620_op621_op623.snodes[1] =
op620: SchedulerNode(ComputedBuffer)
op620.writes = [MemoryDep('buf620', c0, {c0: 25088}, None)]
op620.unmet_dependencies = [MemoryDep('buf619', c0, {c0: 602112}, None)]
op620.met_dependencies = []
op620.outputs = [
    buf620: ComputedBuffer
    buf620.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf620.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op620.group.device = cuda:0
op620.group.iteration = (25088, 24)
op620.sizes = ([25088], [24])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op620_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf620', get_index_1, getitem)
        return store_reduction
op619_op620_op621_op623.snodes[2] =
op621: SchedulerNode(ComputedBuffer)
op621.writes = [MemoryDep('buf621', c0, {c0: 25088}, None)]
op621.unmet_dependencies = [MemoryDep('buf619', c0, {c0: 602112}, None)]
op621.met_dependencies = []
op621.outputs = [
    buf621: ComputedBuffer
    buf621.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf621.users = [NodeUser(node=SchedulerNode(name='op623'), can_inplace=False, is_weak=False)]
]
op621.group.device = cuda:0
op621.group.iteration = (25088, 24)
op621.sizes = ([25088], [24])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op621_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf621', get_index_1, getitem_1)
        return store_reduction
op619_op620_op621_op623.snodes[3] =
op623: SchedulerNode(ComputedBuffer)
op623.writes = [MemoryDep('buf623', c0, {c0: 602112}, None)]
op623.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf620', c0, {c0: 25088}, None),
        MemoryDep('buf621', c0, {c0: 25088}, None)]
op623.met_dependencies = 
    [   MemoryDep('arg326_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg327_1', c1, {c0: 25088, c1: 24}, None)]
op623.outputs = [
    buf623: ComputedBuffer
    buf623.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf623.users = [NodeUser(node=ExternKernelSchedulerNode(name='op624'), can_inplace=False, is_weak=False)]
]
op623.group.device = cuda:0
op623.group.iteration = (602112, 1)
op623.sizes = ([25088, 24], [])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf620_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf621_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg326_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg327_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf623_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op623_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf620', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf621', get_index_2)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg326_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg327_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf623', get_index_5, add_1, None)
        return store


op624: ExternKernelSchedulerNode(ExternKernelOut)
op624.writes = [StarDep(name='buf624', mode=None)]
op624.unmet_dependencies = [StarDep(name='buf623', mode=None)]
op624.met_dependencies = [StarDep(name='arg328_1', mode=None)]
op624.outputs = [
    buf624: ExternKernelOut
    buf624.layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
    buf624.users = [NodeUser(node=SchedulerNode(name='op625'), can_inplace=True, is_weak=False)]
]
op624.node.kernel = extern_kernels.mm


op625: SchedulerNode(ComputedBuffer)
op625.writes = [MemoryDep('buf625', c0, {c0: 2408448}, None)]
op625.unmet_dependencies = [MemoryDep('buf624', c0, {c0: 2408448}, None)]
op625.met_dependencies = [MemoryDep('arg329_1', c1, {c0: 25088, c1: 96}, None)]
op625.outputs = [
    buf625: ComputedBuffer
    buf625.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
    buf625.users = [NodeUser(node=ExternKernelSchedulerNode(name='op626'), can_inplace=False, is_weak=False)]
]
op625.group.device = cuda:0
op625.group.iteration = (2408448, 1)
op625.sizes = ([25088, 96], [])
buf624_layout = FixedLayout('cuda', torch.float32, size=[25088, 96], stride=[96, 1])
arg329_1_layout = FixedLayout('cuda', torch.float32, size=[96], stride=[1])
buf625_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 96], stride=[1536, 96, 1])
class op625_loop_body:
    var_ranges = {z0: 25088, z1: 96}
    index0 = 96*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf624', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg329_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf624', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg329_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf625', get_index_4, mul_2, None)
        return store


op626: ExternKernelSchedulerNode(ExternKernelOut)
op626.writes = [StarDep(name='buf626', mode=None)]
op626.unmet_dependencies = [StarDep(name='buf625', mode=None)]
op626.met_dependencies = [StarDep(name='arg330_1', mode=None)]
op626.outputs = [
    buf626: ExternKernelOut
    buf626.layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
    buf626.users = [
        NodeUser(node=SchedulerNode(name='op627'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op628'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op629'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op634'), can_inplace=True, is_weak=False),
    ]
]
op626.node.kernel = extern_kernels.mm


op627_op628_op634: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op627_op628_op634.writes = 
    [   MemoryDep('buf627', c0, {c0: 25088}, None),
        MemoryDep('buf628', c0, {c0: 25088}, None),
        MemoryDep('buf634', c0, {c0: 602112}, None)]
op627_op628_op634.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf626', c0, {c0: 602112}, None)]
op627_op628_op634.met_dependencies = 
    [   MemoryDep('arg331_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg332_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg333_1', c1, {c0: 25088, c1: 24}, None)]
op627_op628_op634.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf627.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf628.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf634.users = [NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False)]
]
op627_op628_op634.snodes[0] =
op627: SchedulerNode(ComputedBuffer)
op627.writes = [MemoryDep('buf627', c0, {c0: 25088}, None)]
op627.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf626', c0, {c0: 602112}, None)]
op627.met_dependencies = [MemoryDep('arg331_1', c1, {c0: 25088, c1: 24}, None)]
op627.outputs = [
    buf627: ComputedBuffer
    buf627.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf627.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op627.group.device = cuda:0
op627.group.iteration = (25088, 24)
op627.sizes = ([25088], [24])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op627_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg331_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf627', get_index_3, getitem)
        return store_reduction
op627_op628_op634.snodes[1] =
op628: SchedulerNode(ComputedBuffer)
op628.writes = [MemoryDep('buf628', c0, {c0: 25088}, None)]
op628.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf626', c0, {c0: 602112}, None)]
op628.met_dependencies = [MemoryDep('arg331_1', c1, {c0: 25088, c1: 24}, None)]
op628.outputs = [
    buf628: ComputedBuffer
    buf628.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
    buf628.users = [NodeUser(node=SchedulerNode(name='op634'), can_inplace=False, is_weak=False)]
]
op628.group.device = cuda:0
op628.group.iteration = (25088, 24)
op628.sizes = ([25088], [24])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf628_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
class op628_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg331_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf628', get_index_3, getitem_1)
        return store_reduction
op627_op628_op634.snodes[2] =
op634: SchedulerNode(ComputedBuffer)
op634.writes = [MemoryDep('buf634', c0, {c0: 602112}, None)]
op634.unmet_dependencies = 
    [   MemoryDep('buf619', c0, {c0: 602112}, None),
        MemoryDep('buf626', c0, {c0: 602112}, None),
        MemoryDep('buf627', c0, {c0: 25088}, None),
        MemoryDep('buf628', c0, {c0: 25088}, None)]
op634.met_dependencies = 
    [   MemoryDep('arg331_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg332_1', c1, {c0: 25088, c1: 24}, None),
        MemoryDep('arg333_1', c1, {c0: 25088, c1: 24}, None)]
op634.outputs = [
    buf634: ComputedBuffer
    buf634.layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
    buf634.users = [NodeUser(node=ExternKernelSchedulerNode(name='op635'), can_inplace=False, is_weak=False)]
]
op634.group.device = cuda:0
op634.group.iteration = (602112, 1)
op634.sizes = ([25088, 24], [])
buf619_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
buf626_layout = FixedLayout('cuda', torch.float32, size=[25088, 24], stride=[24, 1])
arg331_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf627_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
buf628_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 1], stride=[16, 1, 25088])
arg332_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
arg333_1_layout = FixedLayout('cuda', torch.float32, size=[24], stride=[1])
buf634_layout = FixedLayout('cuda', torch.float32, size=[1568, 16, 24], stride=[384, 24, 1])
class op634_loop_body:
    var_ranges = {z0: 25088, z1: 24}
    index0 = 24*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf619', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf626', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg331_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf627', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf628', get_index_4)
        constant = ops.constant(24.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg332_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg333_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf634', get_index_7, add_3, None)
        return store


op631: ExternKernelSchedulerNode(ExternKernelOut)
op631.writes = [StarDep(name='buf631', mode=None)]
op631.unmet_dependencies = [StarDep(name='buf630', mode=None)]
op631.met_dependencies = [StarDep(name='arg316_1', mode=None)]
op631.outputs = [
    buf631: ExternKernelOut
    buf631.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf631.users = [NodeUser(node=SchedulerNode(name='op632'), can_inplace=True, is_weak=False)]
]
op631.node.kernel = extern_kernels.mm


op632: SchedulerNode(ComputedBuffer)
op632.writes = [MemoryDep('buf632', c0, {c0: 2420736}, None)]
op632.unmet_dependencies = [MemoryDep('buf631', c0, {c0: 2420736}, None)]
op632.met_dependencies = [MemoryDep('arg317_1', c1, {c0: 1576, c1: 1536}, None)]
op632.outputs = [
    buf632: ComputedBuffer
    buf632.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf632.users = [NodeUser(node=ExternKernelSchedulerNode(name='op633'), can_inplace=False, is_weak=False)]
]
op632.group.device = cuda:0
op632.group.iteration = (2420736, 1)
op632.sizes = ([1576, 1536], [])
buf631_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg317_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf632_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op632_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf631', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg317_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf631', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg317_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf632', get_index_4, mul_2, None)
        return store


op633: ExternKernelSchedulerNode(ExternKernelOut)
op633.writes = [StarDep(name='buf633', mode=None)]
op633.unmet_dependencies = [StarDep(name='buf632', mode=None)]
op633.met_dependencies = [StarDep(name='arg318_1', mode=None)]
op633.outputs = [
    buf633: ExternKernelOut
    buf633.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf633.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False)]
]
op633.node.kernel = extern_kernels.mm


op635: ExternKernelSchedulerNode(ExternKernelOut)
op635.writes = [StarDep(name='buf635', mode=None)]
op635.unmet_dependencies = [StarDep(name='buf634', mode=None)]
op635.met_dependencies = [StarDep(name='arg334_1', mode=None)]
op635.outputs = [
    buf635: ExternKernelOut
    buf635.layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
    buf635.users = [NodeUser(node=SchedulerNode(name='op636'), can_inplace=False, is_weak=False)]
]
op635.node.kernel = extern_kernels.mm


op636_op637_op638_op640: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode,SchedulerNode)
op636_op637_op638_op640.writes = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf637', c0, {c0: 1576}, None),
        MemoryDep('buf638', c0, {c0: 1576}, None),
        MemoryDep('buf640', c0, {c0: 605184}, None)]
op636_op637_op638_op640.unmet_dependencies = 
    [   MemoryDep('buf599', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf599', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf633', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf633', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf635', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op636_op637_op638_op640.met_dependencies = 
    [   MemoryDep('arg319_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg335_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg336_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg337_1', c1, {c0: 1576, c1: 384}, None)]
op636_op637_op638_op640.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf636.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False),
    ]
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf637.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf638.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf640.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False),
    ]
]
op636_op637_op638_op640.snodes[0] =
op636: SchedulerNode(ComputedBuffer)
op636.writes = [MemoryDep('buf636', c0, {c0: 605184}, None)]
op636.unmet_dependencies = 
    [   MemoryDep('buf599', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf599', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf633', 75648*c0 + c2 + 384*I + 384, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf633', 75648*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None),
        MemoryDep('buf635', 75264*c0 + c2 + 384*I, {c0: 8, c1: 197, c2: 384}, None)]
op636.met_dependencies = 
    [   MemoryDep('arg319_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg335_1', c1, {c0: 1576, c1: 384}, None)]
op636.outputs = [
    buf636: ComputedBuffer
    buf636.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf636.users = [
        NodeUser(node=SchedulerNode(name='op637'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op638'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op639'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op640'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False),
    ]
]
op636.group.device = cuda:0
op636.group.iteration = (605184, 1)
op636.sizes = ([8, 197, 384], [])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf633_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg319_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf599_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf633_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf635_layout = FixedLayout('cuda', torch.float32, size=[1568, 384], stride=[384, 1])
arg335_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op636_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 384}
    index0 = z1
    index1 = 75648*z0 + z2 + 384*I
    index2 = z2
    index3 = 75648*z0 + z2 + 384*I + 384
    index4 = 75264*z0 + z2 + 384*I
    index5 = 75648*z0 + 384*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        index_expr = ops.index_expr(get_index, torch.int64)
        constant = ops.constant(0, torch.int64)
        ge = ops.ge(index_expr, constant)
        get_index_1 = self.get_index('index0')
        index_expr_1 = ops.index_expr(get_index_1, torch.int64)
        constant_1 = ops.constant(1, torch.int64)
        lt = ops.lt(index_expr_1, constant_1)
        masked_subblock1 = self.masked_subblock1(lt, 0.0)
        get_index_2 = self.get_index('index0')
        index_expr_2 = ops.index_expr(get_index_2, torch.int64)
        constant_2 = ops.constant(1, torch.int64)
        ge_1 = ops.ge(index_expr_2, constant_2)
        get_index_3 = self.get_index('index0')
        index_expr_3 = ops.index_expr(get_index_3, torch.int64)
        constant_3 = ops.constant(197, torch.int64)
        lt_1 = ops.lt(index_expr_3, constant_3)
        masked_subblock2 = self.masked_subblock2(ge_1, 0.0)
        where = ops.where(lt, masked_subblock1, masked_subblock2)
        get_index_4 = self.get_index('index5')
        store = ops.store('buf636', get_index_4, where, None)
        return store
    def masked_subblock1(self, ops):
        get_index = self.get_index('index1')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf633', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg319_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        return add_1
    def masked_subblock2(self, ops):
        get_index = self.get_index('index3')
        load = ops.load('buf599', get_index)
        get_index_1 = self.get_index('index3')
        load_1 = ops.load('buf633', get_index_1)
        get_index_2 = self.get_index('index2')
        load_2 = ops.load('arg319_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index4')
        load_3 = ops.load('buf635', get_index_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg335_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        return add_3
op636_op637_op638_op640.snodes[1] =
op637: SchedulerNode(ComputedBuffer)
op637.writes = [MemoryDep('buf637', c0, {c0: 1576}, None)]
op637.unmet_dependencies = [MemoryDep('buf636', c0, {c0: 605184}, None)]
op637.met_dependencies = []
op637.outputs = [
    buf637: ComputedBuffer
    buf637.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf637.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
]
op637.group.device = cuda:0
op637.group.iteration = (1576, 384)
op637.sizes = ([1576], [384])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op637_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf637', get_index_1, getitem)
        return store_reduction
op636_op637_op638_op640.snodes[2] =
op638: SchedulerNode(ComputedBuffer)
op638.writes = [MemoryDep('buf638', c0, {c0: 1576}, None)]
op638.unmet_dependencies = [MemoryDep('buf636', c0, {c0: 605184}, None)]
op638.met_dependencies = []
op638.outputs = [
    buf638: ComputedBuffer
    buf638.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf638.users = [NodeUser(node=SchedulerNode(name='op640'), can_inplace=False, is_weak=False)]
]
op638.group.device = cuda:0
op638.group.iteration = (1576, 384)
op638.sizes = ([1576], [384])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op638_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf638', get_index_1, getitem_1)
        return store_reduction
op636_op637_op638_op640.snodes[3] =
op640: SchedulerNode(ComputedBuffer)
op640.writes = [MemoryDep('buf640', c0, {c0: 605184}, None)]
op640.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf637', c0, {c0: 1576}, None),
        MemoryDep('buf638', c0, {c0: 1576}, None)]
op640.met_dependencies = 
    [   MemoryDep('arg336_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg337_1', c1, {c0: 1576, c1: 384}, None)]
op640.outputs = [
    buf640: ComputedBuffer
    buf640.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf640.users = [
        NodeUser(node=ExternKernelSchedulerNode(name='op641'), can_inplace=False, is_weak=False),
        NodeUser(node=ExternKernelSchedulerNode(name='op647'), can_inplace=False, is_weak=False),
    ]
]
op640.group.device = cuda:0
op640.group.iteration = (605184, 1)
op640.sizes = ([1576, 384], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf637_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf638_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg336_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg337_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf640_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op640_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    index2 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf637', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf638', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg336_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg337_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf640', get_index_5, add_1, None)
        return store


op641: ExternKernelSchedulerNode(ExternKernelOut)
op641.writes = [StarDep(name='buf641', mode=None)]
op641.unmet_dependencies = [StarDep(name='buf640', mode=None)]
op641.met_dependencies = [StarDep(name='arg338_1', mode=None)]
op641.outputs = [
    buf641: ExternKernelOut
    buf641.layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
    buf641.users = [
        NodeUser(node=SchedulerNode(name='op642'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op643'), can_inplace=False, is_weak=False),
    ]
]
op641.node.kernel = extern_kernels.mm


op642: SchedulerNode(ComputedBuffer)
op642.writes = [MemoryDep('buf642', c0, {c0: 605184}, None)]
op642.unmet_dependencies = [   MemoryDep('buf641', 151296*c0 + 64*c1 + 768*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op642.met_dependencies = []
op642.outputs = [
    buf642: ComputedBuffer
    buf642.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf642.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op642.group.device = cuda:0
op642.group.iteration = (605184, 1)
op642.sizes = ([8, 6, 197, 64], [])
buf641_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf642_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op642_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 151296*z0 + 64*z1 + 768*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf641', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf642', get_index_1, load, None)
        return store


op643: SchedulerNode(ComputedBuffer)
op643.writes = [MemoryDep('buf643', c0, {c0: 605184}, None)]
op643.unmet_dependencies = [   MemoryDep('buf641', 151296*c0 + c1 + 768*c2 + 384, {c0: 8, c1: 384, c2: 197}, None)]
op643.met_dependencies = []
op643.outputs = [
    buf643: ComputedBuffer
    buf643.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
    buf643.users = [NodeUser(node=ExternKernelSchedulerNode(name='op644'), can_inplace=False, is_weak=False)]
]
op643.group.device = cuda:0
op643.group.iteration = (605184, 1)
op643.sizes = ([8, 384, 197], [])
buf641_layout = FixedLayout('cuda', torch.float32, size=[1576, 768], stride=[768, 1])
buf643_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 64, 197], stride=[75648, 12608, 197, 1])
class op643_loop_body:
    var_ranges = {z0: 8, z1: 384, z2: 197}
    index0 = 151296*z0 + z1 + 768*z2 + 384
    index1 = 75648*z0 + 197*z1 + z2
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf641', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf643', get_index_1, load, None)
        return store


op644: ExternKernelSchedulerNode(ExternKernelOut)
op644.writes = [StarDep(name='buf644', mode=None)]
op644.unmet_dependencies = [StarDep(name='buf642', mode=None), StarDep(name='buf643', mode=None)]
op644.met_dependencies = []
op644.outputs = [
    buf644: ExternKernelOut
    buf644.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
    buf644.users = [
        NodeUser(node=SchedulerNode(name='op645'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
]
op644.node.kernel = extern_kernels.bmm


op645_op646_op648: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op645_op646_op648.writes = 
    [   MemoryDep('buf645', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf646', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf648', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op645_op646_op648.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 1862832}, None)]
op645_op646_op648.met_dependencies = []
op645_op646_op648.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf645.users = [
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf646.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf648.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op645_op646_op648.snodes[0] =
op645: SchedulerNode(ComputedBuffer)
op645.writes = [MemoryDep('buf645', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op645.unmet_dependencies = [MemoryDep('buf644', c0, {c0: 1862832}, None)]
op645.met_dependencies = []
op645.outputs = [
    buf645: ComputedBuffer
    buf645.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf645.users = [
        NodeUser(node=SchedulerNode(name='op646'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False),
    ]
]
op645.group.device = cuda:0
op645.group.iteration = (9456, 197)
op645.sizes = ([8, 1182], [197])
buf644_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op645_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        reduction = ops.reduction(torch.float32, torch.float32, 'max', mul)
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf645', get_index_1, reduction)
        return store_reduction
op645_op646_op648.snodes[1] =
op646: SchedulerNode(ComputedBuffer)
op646.writes = [MemoryDep('buf646', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op646.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 1862832}, None),
        MemoryDep('buf645', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op646.met_dependencies = []
op646.outputs = [
    buf646: ComputedBuffer
    buf646.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
    buf646.users = [NodeUser(node=SchedulerNode(name='op648'), can_inplace=False, is_weak=False)]
]
op646.group.device = cuda:0
op646.group.iteration = (9456, 197)
op646.sizes = ([8, 1182], [197])
buf644_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
class op646_loop_body:
    var_ranges = {z0: 8, z1: 1182, z2: 197}
    index0 = 232854*z0 + 197*z1 + z2
    index1 = 1184*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf645', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        reduction = ops.reduction(torch.float32, torch.float32, 'sum', exp)
        get_index_2 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf646', get_index_2, reduction)
        return store_reduction
op645_op646_op648.snodes[2] =
op648: SchedulerNode(ComputedBuffer)
op648.writes = [MemoryDep('buf648', 38816*c0 + c1, {c0: 48, c1: 38809}, None)]
op648.unmet_dependencies = 
    [   MemoryDep('buf644', c0, {c0: 1862832}, None),
        MemoryDep('buf645', 1184*c0 + c1, {c0: 8, c1: 1182}, None),
        MemoryDep('buf646', 1184*c0 + c1, {c0: 8, c1: 1182}, None)]
op648.met_dependencies = []
op648.outputs = [
    buf648: ComputedBuffer
    buf648.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
    buf648.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op648.group.device = cuda:0
op648.group.iteration = (1862832, 1)
op648.sizes = ([8, 6, 197, 197], [])
buf644_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 197], stride=[38809, 197, 1])
buf645_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf646_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 1], stride=[1184, 197, 1, 9472])
buf648_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 197], stride=[232896, 38816, 197, 1])
class op648_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 197}
    index0 = 232854*z0 + 38809*z1 + 197*z2 + z3
    index1 = 1184*z0 + 197*z1 + z2
    index2 = 232896*z0 + 38816*z1 + 197*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf644', get_index)
        constant = ops.constant(1.0, torch.float32)
        mul = ops.mul(load, constant)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf645', get_index_1)
        sub = ops.sub(mul, load_1)
        constant_1 = ops.constant(0.125, torch.float32)
        mul_1 = ops.mul(sub, constant_1)
        exp = ops.exp(mul_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf646', get_index_2)
        truediv = ops.truediv(exp, load_2)
        get_index_3 = self.get_index('index2')
        store = ops.store('buf648', get_index_3, truediv, None)
        return store


op647: ExternKernelSchedulerNode(ExternKernelOut)
op647.writes = [StarDep(name='buf647', mode=None)]
op647.unmet_dependencies = [StarDep(name='buf640', mode=None)]
op647.met_dependencies = [StarDep(name='arg339_1', mode=None)]
op647.outputs = [
    buf647: ExternKernelOut
    buf647.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf647.users = [NodeUser(node=SchedulerNode(name='op649'), can_inplace=False, is_weak=False)]
]
op647.node.kernel = extern_kernels.mm


op649: SchedulerNode(ComputedBuffer)
op649.writes = [MemoryDep('buf649', c0, {c0: 605184}, None)]
op649.unmet_dependencies = [   MemoryDep('buf647', 75648*c0 + 64*c1 + 384*c2 + c3, {c0: 8, c1: 6, c2: 197, c3: 64}, None)]
op649.met_dependencies = []
op649.outputs = [
    buf649: ComputedBuffer
    buf649.layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
    buf649.users = [NodeUser(node=ExternKernelSchedulerNode(name='op650'), can_inplace=False, is_weak=False)]
]
op649.group.device = cuda:0
op649.group.iteration = (605184, 1)
op649.sizes = ([8, 6, 197, 64], [])
buf647_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
buf649_layout = FixedLayout('cuda', torch.float32, size=[8, 6, 197, 64], stride=[75648, 12608, 64, 1])
class op649_loop_body:
    var_ranges = {z0: 8, z1: 6, z2: 197, z3: 64}
    index0 = 75648*z0 + 64*z1 + 384*z2 + z3
    index1 = 75648*z0 + 12608*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf647', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf649', get_index_1, load, None)
        return store


op650: ExternKernelSchedulerNode(ExternKernelOut)
op650.writes = [StarDep(name='buf650', mode=None)]
op650.unmet_dependencies = [StarDep(name='buf648', mode=None), StarDep(name='buf649', mode=None)]
op650.met_dependencies = []
op650.outputs = [
    buf650: ExternKernelOut
    buf650.layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
    buf650.users = [NodeUser(node=SchedulerNode(name='op651'), can_inplace=False, is_weak=False)]
]
op650.node.kernel = extern_kernels.bmm


op651: SchedulerNode(ComputedBuffer)
op651.writes = [MemoryDep('buf651', c0, {c0: 605184}, None)]
op651.unmet_dependencies = [   MemoryDep('buf650', 75648*c0 + 64*c1 + 12608*c2 + c3, {c0: 8, c1: 197, c2: 6, c3: 64}, None)]
op651.met_dependencies = []
op651.outputs = [
    buf651: ComputedBuffer
    buf651.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
    buf651.users = [NodeUser(node=ExternKernelSchedulerNode(name='op652'), can_inplace=False, is_weak=False)]
]
op651.group.device = cuda:0
op651.group.iteration = (605184, 1)
op651.sizes = ([8, 197, 6, 64], [])
buf650_layout = FixedLayout('cuda', torch.float32, size=[48, 197, 64], stride=[12608, 64, 1])
buf651_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 6, 64], stride=[75648, 384, 64, 1])
class op651_loop_body:
    var_ranges = {z0: 8, z1: 197, z2: 6, z3: 64}
    index0 = 75648*z0 + 64*z1 + 12608*z2 + z3
    index1 = 75648*z0 + 384*z1 + 64*z2 + z3
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf650', get_index)
        get_index_1 = self.get_index('index1')
        store = ops.store('buf651', get_index_1, load, None)
        return store


op652: ExternKernelSchedulerNode(ExternKernelOut)
op652.writes = [StarDep(name='buf652', mode=None)]
op652.unmet_dependencies = [StarDep(name='buf651', mode=None)]
op652.met_dependencies = [StarDep(name='arg340_1', mode=None)]
op652.outputs = [
    buf652: ExternKernelOut
    buf652.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf652.users = [
        NodeUser(node=SchedulerNode(name='op653'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op654'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op655'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op656'), can_inplace=True, is_weak=False),
        NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False),
    ]
]
op652.node.kernel = extern_kernels.mm


op653_op654_op656: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op653_op654_op656.writes = 
    [   MemoryDep('buf653', c0, {c0: 1576}, None),
        MemoryDep('buf654', c0, {c0: 1576}, None),
        MemoryDep('buf656', c0, {c0: 605184}, None)]
op653_op654_op656.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None)]
op653_op654_op656.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg342_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg343_1', c1, {c0: 1576, c1: 384}, None)]
op653_op654_op656.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf653.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf654.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op653_op654_op656.snodes[0] =
op653: SchedulerNode(ComputedBuffer)
op653.writes = [MemoryDep('buf653', c0, {c0: 1576}, None)]
op653.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None)]
op653.met_dependencies = [MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None)]
op653.outputs = [
    buf653: ComputedBuffer
    buf653.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf653.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op653.group.device = cuda:0
op653.group.iteration = (1576, 384)
op653.sizes = ([1576], [384])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op653_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf652', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg341_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf653', get_index_3, getitem)
        return store_reduction
op653_op654_op656.snodes[1] =
op654: SchedulerNode(ComputedBuffer)
op654.writes = [MemoryDep('buf654', c0, {c0: 1576}, None)]
op654.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None)]
op654.met_dependencies = [MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None)]
op654.outputs = [
    buf654: ComputedBuffer
    buf654.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf654.users = [NodeUser(node=SchedulerNode(name='op656'), can_inplace=False, is_weak=False)]
]
op654.group.device = cuda:0
op654.group.iteration = (1576, 384)
op654.sizes = ([1576], [384])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op654_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf652', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg341_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', add_1)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_3 = self.get_index('index2')
        store_reduction = ops.store_reduction('buf654', get_index_3, getitem_1)
        return store_reduction
op653_op654_op656.snodes[2] =
op656: SchedulerNode(ComputedBuffer)
op656.writes = [MemoryDep('buf656', c0, {c0: 605184}, None)]
op656.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None),
        MemoryDep('buf653', c0, {c0: 1576}, None),
        MemoryDep('buf654', c0, {c0: 1576}, None)]
op656.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg342_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg343_1', c1, {c0: 1576, c1: 384}, None)]
op656.outputs = [
    buf656: ComputedBuffer
    buf656.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf656.users = [NodeUser(node=ExternKernelSchedulerNode(name='op657'), can_inplace=False, is_weak=False)]
]
op656.group.device = cuda:0
op656.group.iteration = (605184, 1)
op656.sizes = ([1576, 384], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf653_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf654_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg342_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg343_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf656_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op656_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    index2 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf652', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg341_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('buf653', get_index_3)
        sub = ops.sub(add_1, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('buf654', get_index_4)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_4, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add_2 = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add_2)
        mul = ops.mul(sub, rsqrt)
        get_index_5 = self.get_index('index1')
        load_5 = ops.load('arg342_1', get_index_5)
        mul_1 = ops.mul(mul, load_5)
        get_index_6 = self.get_index('index1')
        load_6 = ops.load('arg343_1', get_index_6)
        add_3 = ops.add(mul_1, load_6)
        get_index_7 = self.get_index('index0')
        store = ops.store('buf656', get_index_7, add_3, None)
        return store


op657: ExternKernelSchedulerNode(ExternKernelOut)
op657.writes = [StarDep(name='buf657', mode=None)]
op657.unmet_dependencies = [StarDep(name='buf656', mode=None)]
op657.met_dependencies = [StarDep(name='arg344_1', mode=None)]
op657.outputs = [
    buf657: ExternKernelOut
    buf657.layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
    buf657.users = [NodeUser(node=SchedulerNode(name='op658'), can_inplace=True, is_weak=False)]
]
op657.node.kernel = extern_kernels.mm


op658: SchedulerNode(ComputedBuffer)
op658.writes = [MemoryDep('buf658', c0, {c0: 2420736}, None)]
op658.unmet_dependencies = [MemoryDep('buf657', c0, {c0: 2420736}, None)]
op658.met_dependencies = [MemoryDep('arg345_1', c1, {c0: 1576, c1: 1536}, None)]
op658.outputs = [
    buf658: ComputedBuffer
    buf658.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
    buf658.users = [NodeUser(node=ExternKernelSchedulerNode(name='op659'), can_inplace=False, is_weak=False)]
]
op658.group.device = cuda:0
op658.group.iteration = (2420736, 1)
op658.sizes = ([1576, 1536], [])
buf657_layout = FixedLayout('cuda', torch.float32, size=[1576, 1536], stride=[1536, 1])
arg345_1_layout = FixedLayout('cuda', torch.float32, size=[1536], stride=[1])
buf658_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1536], stride=[302592, 1536, 1])
class op658_loop_body:
    var_ranges = {z0: 1576, z1: 1536}
    index0 = 1536*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf657', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('arg345_1', get_index_1)
        add = ops.add(load, load_1)
        constant = ops.constant(0.5, torch.float32)
        mul = ops.mul(add, constant)
        get_index_2 = self.get_index('index0')
        load_2 = ops.load('buf657', get_index_2)
        get_index_3 = self.get_index('index1')
        load_3 = ops.load('arg345_1', get_index_3)
        add_1 = ops.add(load_2, load_3)
        constant_1 = ops.constant(0.7071067811865476, torch.float32)
        mul_1 = ops.mul(add_1, constant_1)
        erf = ops.erf(mul_1)
        constant_2 = ops.constant(1.0, torch.float32)
        add_2 = ops.add(erf, constant_2)
        mul_2 = ops.mul(mul, add_2)
        get_index_4 = self.get_index('index0')
        store = ops.store('buf658', get_index_4, mul_2, None)
        return store


op659: ExternKernelSchedulerNode(ExternKernelOut)
op659.writes = [StarDep(name='buf659', mode=None)]
op659.unmet_dependencies = [StarDep(name='buf658', mode=None)]
op659.met_dependencies = [StarDep(name='arg346_1', mode=None)]
op659.outputs = [
    buf659: ExternKernelOut
    buf659.layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
    buf659.users = [NodeUser(node=SchedulerNode(name='op660'), can_inplace=True, is_weak=False)]
]
op659.node.kernel = extern_kernels.mm


op660_op661_op662: FusedSchedulerNode(SchedulerNode,SchedulerNode,SchedulerNode)
op660_op661_op662.writes = 
    [   MemoryDep('buf660', c0, {c0: 605184}, None),
        MemoryDep('buf661', c0, {c0: 1576}, None),
        MemoryDep('buf662', c0, {c0: 1576}, None)]
op660_op661_op662.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None),
        MemoryDep('buf659', c0, {c0: 605184}, None)]
op660_op661_op662.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg347_1', c1, {c0: 1576, c1: 384}, None)]
op660_op661_op662.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf661.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf662.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
]
op660_op661_op662.snodes[0] =
op660: SchedulerNode(ComputedBuffer)
op660.writes = [MemoryDep('buf660', c0, {c0: 605184}, None)]
op660.unmet_dependencies = 
    [   MemoryDep('buf636', c0, {c0: 605184}, None),
        MemoryDep('buf652', c0, {c0: 605184}, None),
        MemoryDep('buf659', c0, {c0: 605184}, None)]
op660.met_dependencies = 
    [   MemoryDep('arg341_1', c1, {c0: 1576, c1: 384}, None),
        MemoryDep('arg347_1', c1, {c0: 1576, c1: 384}, None)]
op660.outputs = [
    buf660: ComputedBuffer
    buf660.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
    buf660.users = [
        NodeUser(node=SchedulerNode(name='op661'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op662'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op663'), can_inplace=False, is_weak=False),
        NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False),
    ]
]
op660.group.device = cuda:0
op660.group.iteration = (605184, 1)
op660.sizes = ([1576, 384], [])
buf636_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf652_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg341_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf659_layout = FixedLayout('cuda', torch.float32, size=[1576, 384], stride=[384, 1])
arg347_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
class op660_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf636', get_index)
        get_index_1 = self.get_index('index0')
        load_1 = ops.load('buf652', get_index_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('arg341_1', get_index_2)
        add = ops.add(load_1, load_2)
        add_1 = ops.add(load, add)
        get_index_3 = self.get_index('index0')
        load_3 = ops.load('buf659', get_index_3)
        get_index_4 = self.get_index('index1')
        load_4 = ops.load('arg347_1', get_index_4)
        add_2 = ops.add(load_3, load_4)
        add_3 = ops.add(add_1, add_2)
        get_index_5 = self.get_index('index0')
        store = ops.store('buf660', get_index_5, add_3, None)
        return store
op660_op661_op662.snodes[1] =
op661: SchedulerNode(ComputedBuffer)
op661.writes = [MemoryDep('buf661', c0, {c0: 1576}, None)]
op661.unmet_dependencies = [MemoryDep('buf660', c0, {c0: 605184}, None)]
op661.met_dependencies = []
op661.outputs = [
    buf661: ComputedBuffer
    buf661.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf661.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
]
op661.group.device = cuda:0
op661.group.iteration = (1576, 384)
op661.sizes = ([1576], [384])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op661_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf661', get_index_1, getitem)
        return store_reduction
op660_op661_op662.snodes[2] =
op662: SchedulerNode(ComputedBuffer)
op662.writes = [MemoryDep('buf662', c0, {c0: 1576}, None)]
op662.unmet_dependencies = [MemoryDep('buf660', c0, {c0: 605184}, None)]
op662.met_dependencies = []
op662.outputs = [
    buf662: ComputedBuffer
    buf662.layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
    buf662.users = [NodeUser(node=SchedulerNode(name='op664'), can_inplace=False, is_weak=False)]
]
op662.group.device = cuda:0
op662.group.iteration = (1576, 384)
op662.sizes = ([1576], [384])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
class op662_loop_body:
    var_ranges = {z0: 1576, z1: 384}
    index0 = 384*z0 + z1
    index1 = z0
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        reduction = ops.reduction(torch.float32, torch.float32, 'welford_reduce', load)
        getitem = reduction[0]
        getitem_1 = reduction[1]
        getitem_2 = reduction[2]
        get_index_1 = self.get_index('index1')
        store_reduction = ops.store_reduction('buf662', get_index_1, getitem_1)
        return store_reduction


op664: SchedulerNode(ComputedBuffer)
op664.writes = [MemoryDep('buf664', c0, {c0: 3072}, None)]
op664.unmet_dependencies = 
    [   MemoryDep('buf660', 75648*c0 + c1, {c0: 8, c1: 384}, None),
        MemoryDep('buf661', 197*c0, {c0: 8}, None),
        MemoryDep('buf662', 197*c0, {c0: 8}, None)]
op664.met_dependencies = 
    [   MemoryDep('arg348_1', c1, {c0: 8, c1: 384}, None),
        MemoryDep('arg349_1', c1, {c0: 8, c1: 384}, None)]
op664.outputs = [
    buf664: ComputedBuffer
    buf664.layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
    buf664.users = [NodeUser(node=ExternKernelSchedulerNode(name='op665'), can_inplace=False, is_weak=False)]
]
op664.group.device = cuda:0
op664.group.iteration = (3072, 1)
op664.sizes = ([8, 384], [])
buf660_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 384], stride=[75648, 384, 1])
buf661_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
buf662_layout = FixedLayout('cuda', torch.float32, size=[8, 197, 1], stride=[197, 1, 1600])
arg348_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
arg349_1_layout = FixedLayout('cuda', torch.float32, size=[384], stride=[1])
buf664_layout = FixedLayout('cuda', torch.float32, size=[8, 384], stride=[384, 1])
class op664_loop_body:
    var_ranges = {z0: 8, z1: 384}
    index0 = 75648*z0 + z1
    index1 = 197*z0
    index2 = z1
    index3 = 384*z0 + z1
    def body(self, ops):
        get_index = self.get_index('index0')
        load = ops.load('buf660', get_index)
        get_index_1 = self.get_index('index1')
        load_1 = ops.load('buf661', get_index_1)
        sub = ops.sub(load, load_1)
        get_index_2 = self.get_index('index1')
        load_2 = ops.load('buf662', get_index_2)
        constant = ops.constant(384.0, torch.float32)
        truediv = ops.truediv(load_2, constant)
        constant_1 = ops.constant(1e-05, torch.float32)
        add = ops.add(truediv, constant_1)
        rsqrt = ops.rsqrt(add)
        mul = ops.mul(sub, rsqrt)
        get_index_3 = self.get_index('index2')
        load_3 = ops.load('arg348_1', get_index_3)
        mul_1 = ops.mul(mul, load_3)
        get_index_4 = self.get_index('index2')
        load_4 = ops.load('arg349_1', get_index_4)
        add_1 = ops.add(mul_1, load_4)
        get_index_5 = self.get_index('index3')
        store = ops.store('buf664', get_index_5, add_1, None)
        return store


op665: ExternKernelSchedulerNode(ExternKernelOut)
op665.writes = [StarDep(name='buf665', mode=None)]
op665.unmet_dependencies = [StarDep(name='buf664', mode=None)]
op665.met_dependencies = [StarDep(name='arg350_1', mode=None), StarDep(name='arg351_1', mode=None)]
op665.outputs = [
    buf665: ExternKernelOut
    buf665.layout = FixedLayout('cuda', torch.float32, size=[8, 1000], stride=[1000, 1])
    buf665.users = [NodeUser(node=OUTPUT, can_inplace=False, is_weak=False)]
]
op665.node.kernel = extern_kernels.addmm


